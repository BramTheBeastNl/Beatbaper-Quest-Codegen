// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MustUseReturnValueAttribute
#include "JetBrains/Annotations/MustUseReturnValueAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Justification>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MustUseReturnValueAttribute::dyn_$Justification$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Justification>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.get_Justification
::StringW JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.set_Justification
void JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ProvidesContextAttribute
#include "JetBrains/Annotations/ProvidesContextAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PathReferenceAttribute
#include "JetBrains/Annotations/PathReferenceAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <BasePath>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::PathReferenceAttribute::dyn_$BasePath$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PathReferenceAttribute::dyn_$BasePath$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BasePath>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.get_BasePath
::StringW JetBrains::Annotations::PathReferenceAttribute::get_BasePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PathReferenceAttribute::get_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.set_BasePath
void JetBrains::Annotations::PathReferenceAttribute::set_BasePath(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::PathReferenceAttribute::set_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.SourceTemplateAttribute
#include "JetBrains/Annotations/SourceTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MacroAttribute
#include "JetBrains/Annotations/MacroAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Expression>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::MacroAttribute::dyn_$Expression$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::dyn_$Expression$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Expression>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <Editable>k__BackingField
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::MacroAttribute::dyn_$Editable$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::dyn_$Editable$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Editable>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <Target>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::MacroAttribute::dyn_$Target$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::dyn_$Target$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Target>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Expression
::StringW JetBrains::Annotations::MacroAttribute::get_Expression() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::get_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Expression
void JetBrains::Annotations::MacroAttribute::set_Expression(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::set_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Editable
int JetBrains::Annotations::MacroAttribute::get_Editable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::get_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Editable
void JetBrains::Annotations::MacroAttribute::set_Editable(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::set_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Target
::StringW JetBrains::Annotations::MacroAttribute::get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::get_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Target
void JetBrains::Annotations::MacroAttribute::set_Target(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::MacroAttribute::set_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaMasterLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaPartialViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcMasterLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcPartialViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcViewLocationFormatAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Format>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcViewLocationFormatAttribute::dyn_$Format$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcViewLocationFormatAttribute::dyn_$Format$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Format>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.get_Format
::StringW JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcActionAttribute
#include "JetBrains/Annotations/AspMvcActionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcActionAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcActionAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcAreaAttribute
#include "JetBrains/Annotations/AspMvcAreaAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcAreaAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcControllerAttribute
#include "JetBrains/Annotations/AspMvcControllerAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <AnonymousProperty>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspMvcControllerAttribute::dyn_$AnonymousProperty$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcControllerAttribute::dyn_$AnonymousProperty$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AnonymousProperty>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.get_AnonymousProperty
::StringW JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcMasterAttribute
#include "JetBrains/Annotations/AspMvcMasterAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcModelTypeAttribute
#include "JetBrains/Annotations/AspMvcModelTypeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcPartialViewAttribute
#include "JetBrains/Annotations/AspMvcPartialViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcSuppressViewErrorAttribute
#include "JetBrains/Annotations/AspMvcSuppressViewErrorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcDisplayTemplateAttribute
#include "JetBrains/Annotations/AspMvcDisplayTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcEditorTemplateAttribute
#include "JetBrains/Annotations/AspMvcEditorTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcTemplateAttribute
#include "JetBrains/Annotations/AspMvcTemplateAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewAttribute
#include "JetBrains/Annotations/AspMvcViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentAttribute
#include "JetBrains/Annotations/AspMvcViewComponentAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentViewAttribute
#include "JetBrains/Annotations/AspMvcViewComponentViewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcActionSelectorAttribute
#include "JetBrains/Annotations/AspMvcActionSelectorAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.HtmlElementAttributesAttribute
#include "JetBrains/Annotations/HtmlElementAttributesAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::HtmlElementAttributesAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlElementAttributesAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.get_Name
::StringW JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.set_Name
void JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.HtmlAttributeValueAttribute
#include "JetBrains/Annotations/HtmlAttributeValueAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::HtmlAttributeValueAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlAttributeValueAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.get_Name
::StringW JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.set_Name
void JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorSectionAttribute
#include "JetBrains/Annotations/RazorSectionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessAttribute
#include "JetBrains/Annotations/CollectionAccessAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.CollectionAccessType <CollectionAccessType>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::CollectionAccessType& JetBrains::Annotations::CollectionAccessAttribute::dyn_$CollectionAccessType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessAttribute::dyn_$CollectionAccessType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CollectionAccessType>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::CollectionAccessType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.get_CollectionAccessType
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::CollectionAccessType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.set_CollectionAccessType
void JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessType
#include "JetBrains/Annotations/CollectionAccessType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType None
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "None"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType None
void JetBrains::Annotations::CollectionAccessType::_set_None(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType Read
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_Read");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "Read"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType Read
void JetBrains::Annotations::CollectionAccessType::_set_Read(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_Read");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "Read", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
void JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
::JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
void JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent(::JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::CollectionAccessType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::CollectionAccessType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionMethodAttribute
#include "JetBrains/Annotations/AssertionMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionAttribute
#include "JetBrains/Annotations/AssertionConditionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private JetBrains.Annotations.AssertionConditionType <ConditionType>k__BackingField
[[deprecated("Use field access instead!")]] ::JetBrains::Annotations::AssertionConditionType& JetBrains::Annotations::AssertionConditionAttribute::dyn_$ConditionType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionAttribute::dyn_$ConditionType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ConditionType>k__BackingField"))->offset;
  return *reinterpret_cast<::JetBrains::Annotations::AssertionConditionType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.get_ConditionType
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::JetBrains::Annotations::AssertionConditionType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.set_ConditionType
void JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionType
#include "JetBrains/Annotations/AssertionConditionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
void JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
void JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NULL(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
::JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL(::JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& JetBrains::Annotations::AssertionConditionType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AssertionConditionType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.TerminatesProgramAttribute
#include "JetBrains/Annotations/TerminatesProgramAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LinqTunnelAttribute
#include "JetBrains/Annotations/LinqTunnelAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoEnumerationAttribute
#include "JetBrains/Annotations/NoEnumerationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RegexPatternAttribute
#include "JetBrains/Annotations/RegexPatternAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoReorderAttribute
#include "JetBrains/Annotations/NoReorderAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemsControlAttribute
#include "JetBrains/Annotations/XamlItemsControlAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute
#include "JetBrains/Annotations/XamlItemBindingOfItemsControlAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspChildControlTypeAttribute
#include "JetBrains/Annotations/AspChildControlTypeAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <TagName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$TagName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$TagName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TagName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <ControlType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$ControlType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::dyn_$ControlType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ControlType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_TagName
::StringW JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_TagName
void JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_ControlType
::System::Type* JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_ControlType
void JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldAttribute
#include "JetBrains/Annotations/AspDataFieldAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldsAttribute
#include "JetBrains/Annotations/AspDataFieldsAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMethodPropertyAttribute
#include "JetBrains/Annotations/AspMethodPropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspRequiredAttributeAttribute
#include "JetBrains/Annotations/AspRequiredAttributeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Attribute>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::AspRequiredAttributeAttribute::dyn_$Attribute$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspRequiredAttributeAttribute::dyn_$Attribute$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Attribute>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspRequiredAttributeAttribute.get_Attribute
::StringW JetBrains::Annotations::AspRequiredAttributeAttribute::get_Attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspRequiredAttributeAttribute::get_Attribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspRequiredAttributeAttribute.set_Attribute
void JetBrains::Annotations::AspRequiredAttributeAttribute::set_Attribute(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspRequiredAttributeAttribute::set_Attribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Attribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspTypePropertyAttribute
#include "JetBrains/Annotations/AspTypePropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <CreateConstructorReferences>k__BackingField
[[deprecated("Use field access instead!")]] bool& JetBrains::Annotations::AspTypePropertyAttribute::dyn_$CreateConstructorReferences$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspTypePropertyAttribute::dyn_$CreateConstructorReferences$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CreateConstructorReferences>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.AspTypePropertyAttribute.get_CreateConstructorReferences
bool JetBrains::Annotations::AspTypePropertyAttribute::get_CreateConstructorReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspTypePropertyAttribute::get_CreateConstructorReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreateConstructorReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspTypePropertyAttribute.set_CreateConstructorReferences
void JetBrains::Annotations::AspTypePropertyAttribute::set_CreateConstructorReferences(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::AspTypePropertyAttribute::set_CreateConstructorReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CreateConstructorReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorImportNamespaceAttribute
#include "JetBrains/Annotations/RazorImportNamespaceAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::RazorImportNamespaceAttribute::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorImportNamespaceAttribute::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorImportNamespaceAttribute.get_Name
::StringW JetBrains::Annotations::RazorImportNamespaceAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorImportNamespaceAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorImportNamespaceAttribute.set_Name
void JetBrains::Annotations::RazorImportNamespaceAttribute::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorImportNamespaceAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorInjectionAttribute
#include "JetBrains/Annotations/RazorInjectionAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Type>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::RazorInjectionAttribute::dyn_$Type$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorInjectionAttribute::dyn_$Type$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Type>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <FieldName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::RazorInjectionAttribute::dyn_$FieldName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorInjectionAttribute::dyn_$FieldName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FieldName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.get_Type
::StringW JetBrains::Annotations::RazorInjectionAttribute::get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorInjectionAttribute::get_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.set_Type
void JetBrains::Annotations::RazorInjectionAttribute::set_Type(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorInjectionAttribute::set_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.get_FieldName
::StringW JetBrains::Annotations::RazorInjectionAttribute::get_FieldName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorInjectionAttribute::get_FieldName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.set_FieldName
void JetBrains::Annotations::RazorInjectionAttribute::set_FieldName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorInjectionAttribute::set_FieldName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FieldName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorDirectiveAttribute
#include "JetBrains/Annotations/RazorDirectiveAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Directive>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::RazorDirectiveAttribute::dyn_$Directive$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorDirectiveAttribute::dyn_$Directive$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Directive>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorDirectiveAttribute.get_Directive
::StringW JetBrains::Annotations::RazorDirectiveAttribute::get_Directive() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorDirectiveAttribute::get_Directive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Directive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorDirectiveAttribute.set_Directive
void JetBrains::Annotations::RazorDirectiveAttribute::set_Directive(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorDirectiveAttribute::set_Directive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Directive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorPageBaseTypeAttribute
#include "JetBrains/Annotations/RazorPageBaseTypeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <BaseType>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$BaseType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$BaseType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BaseType>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <PageName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$PageName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorPageBaseTypeAttribute::dyn_$PageName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PageName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.get_BaseType
::StringW JetBrains::Annotations::RazorPageBaseTypeAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorPageBaseTypeAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.set_BaseType
void JetBrains::Annotations::RazorPageBaseTypeAttribute::set_BaseType(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorPageBaseTypeAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.get_PageName
::StringW JetBrains::Annotations::RazorPageBaseTypeAttribute::get_PageName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorPageBaseTypeAttribute::get_PageName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PageName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.set_PageName
void JetBrains::Annotations::RazorPageBaseTypeAttribute::set_PageName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::JetBrains::Annotations::RazorPageBaseTypeAttribute::set_PageName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PageName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorHelperCommonAttribute
#include "JetBrains/Annotations/RazorHelperCommonAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorLayoutAttribute
#include "JetBrains/Annotations/RazorLayoutAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteLiteralMethodAttribute
#include "JetBrains/Annotations/RazorWriteLiteralMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteMethodAttribute
#include "JetBrains/Annotations/RazorWriteMethodAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteMethodParameterAttribute
#include "JetBrains/Annotations/RazorWriteMethodParameterAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.NoReflectionBakingAttribute
#include "Zenject/NoReflectionBakingAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectAllowDuringValidationAttribute
#include "Zenject/ZenjectAllowDuringValidationAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HashSetExtensions
#include "GlobalNamespace/HashSetExtensions.hpp"
// Including type: HashSetExtensions/HashSetDelegateHolder`1
#include "GlobalNamespace/HashSetExtensions_HashSetDelegateHolder_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Assert
#include "ModestTree/_Assert.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Zenject.ZenjectException
#include "Zenject/ZenjectException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.IsNotEmpty
void ModestTree::_Assert::IsNotEmpty(::StringW str) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str);
}
// Autogenerated method: ModestTree.Assert.DerivesFrom
void ModestTree::_Assert::DerivesFrom(::System::Type* childType, ::System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childType), ::il2cpp_utils::ExtractType(parentType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.DerivesFromOrEqual
void ModestTree::_Assert::DerivesFromOrEqual(::System::Type* childType, ::System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childType), ::il2cpp_utils::ExtractType(parentType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::System::Func_1<::StringW>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsApproximately
void ModestTree::_Assert::IsApproximately(float left, float right, float epsilon) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsApproximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsApproximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(epsilon)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, epsilon);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::System::Func_1<::StringW>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val, ::StringW message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::StringW message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::StringW message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, val, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition, ::System::Func_1<::StringW>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message, p1);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::StringW message, ::Il2CppObject* p1, ::Il2CppObject* p2, ::Il2CppObject* p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message, p1, p2, p3);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition, ::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.Throws
void ModestTree::_Assert::Throws(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::Throws");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Throws", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated method: ModestTree.Assert.CreateException
::Zenject::ZenjectException* ModestTree::_Assert::CreateException() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Assert.CreateException
::Zenject::ZenjectException* ModestTree::_Assert::CreateException(::StringW message) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message);
}
// Autogenerated method: ModestTree.Assert.CreateException
::Zenject::ZenjectException* ModestTree::_Assert::CreateException(::StringW message, ::ArrayW<::Il2CppObject*> parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, parameters);
}
// Autogenerated method: ModestTree.Assert.CreateException
::Zenject::ZenjectException* ModestTree::_Assert::CreateException(::System::Exception* innerException, ::StringW message, ::ArrayW<::Il2CppObject*> parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerException), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ZenjectException*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, innerException, message, parameters);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.LinqExtensions
#include "ModestTree/LinqExtensions.hpp"
// Including type: ModestTree.LinqExtensions/ModestTree.<Yield>d__0`1
#include "ModestTree/LinqExtensions_-Yield-d__0_1.hpp"
// Including type: ModestTree.LinqExtensions/ModestTree.<>c__8`1
#include "ModestTree/LinqExtensions_--c__8_1.hpp"
// Including type: ModestTree.LinqExtensions/ModestTree.<>c__DisplayClass10_0`1
#include "ModestTree/LinqExtensions_--c__DisplayClass10_0_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Log
#include "ModestTree/Log.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Log.Debug
void ModestTree::Log::Debug(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Log::Debug");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Debug", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.Info
void ModestTree::Log::Info(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Log::Info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.Warn
void ModestTree::Log::Warn(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Log::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.Trace
void ModestTree::Log::Trace(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Log::Trace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Trace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated method: ModestTree.Log.ErrorException
void ModestTree::Log::ErrorException(::System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Log::ErrorException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "ErrorException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, e);
}
// Autogenerated method: ModestTree.Log.ErrorException
void ModestTree::Log::ErrorException(::StringW message, ::System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Log::ErrorException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "ErrorException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, e);
}
// Autogenerated method: ModestTree.Log.Error
void ModestTree::Log::Error(::StringW message, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Log::Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, message, args);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.MiscExtensions
#include "ModestTree/MiscExtensions.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.LinkedList`1
#include "System/Collections/Generic/LinkedList_1.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.MiscExtensions.Fmt
::StringW ModestTree::MiscExtensions::Fmt(::StringW s, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::MiscExtensions::Fmt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "MiscExtensions", "Fmt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, s, args);
}
// Autogenerated method: ModestTree.MiscExtensions.Join
::StringW ModestTree::MiscExtensions::Join(::System::Collections::Generic::IEnumerable_1<::StringW>* values, ::StringW separator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::MiscExtensions::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "MiscExtensions", "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(separator)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, values, separator);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions
#include "ModestTree/TypeExtensions.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28
#include "ModestTree/TypeExtensions_-GetParentTypes-d__28.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_0
#include "ModestTree/TypeExtensions_--c__DisplayClass35_0.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_1
#include "ModestTree/TypeExtensions_--c__DisplayClass35_1.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_0
#include "ModestTree/TypeExtensions_--c__DisplayClass39_0.hpp"
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_1
#include "ModestTree/TypeExtensions_--c__DisplayClass39_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
::System::Collections::Generic::Dictionary_2<::System::Type*, bool>* ModestTree::TypeExtensions::_get__isClosedGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_get__isClosedGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isClosedGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
void ModestTree::TypeExtensions::_set__isClosedGenericType(::System::Collections::Generic::Dictionary_2<::System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_set__isClosedGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isClosedGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
::System::Collections::Generic::Dictionary_2<::System::Type*, bool>* ModestTree::TypeExtensions::_get__isOpenGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_get__isOpenGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isOpenGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
void ModestTree::TypeExtensions::_set__isOpenGenericType(::System::Collections::Generic::Dictionary_2<::System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_set__isOpenGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isOpenGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
::System::Collections::Generic::Dictionary_2<::System::Type*, bool>* ModestTree::TypeExtensions::_get__isValueType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_get__isValueType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isValueType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
void ModestTree::TypeExtensions::_set__isValueType(::System::Collections::Generic::Dictionary_2<::System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_set__isValueType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isValueType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
::System::Collections::Generic::Dictionary_2<::System::Type*, ::ArrayW<::System::Type*>>* ModestTree::TypeExtensions::_get__interfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_get__interfaces");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::System::Type*, ::ArrayW<::System::Type*>>*>("ModestTree", "TypeExtensions", "_interfaces")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
void ModestTree::TypeExtensions::_set__interfaces(::System::Collections::Generic::Dictionary_2<::System::Type*, ::ArrayW<::System::Type*>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::_set__interfaces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_interfaces", value));
}
// Autogenerated method: ModestTree.TypeExtensions..cctor
void ModestTree::TypeExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFrom
bool ModestTree::TypeExtensions::DerivesFrom(::System::Type* a, ::System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFromOrEqual
bool ModestTree::TypeExtensions::DerivesFromOrEqual(::System::Type* a, ::System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAssignableToGenericType
bool ModestTree::TypeExtensions::IsAssignableToGenericType(::System::Type* givenType, ::System::Type* genericType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsAssignableToGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAssignableToGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(givenType), ::il2cpp_utils::ExtractType(genericType)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, givenType, genericType);
}
// Autogenerated method: ModestTree.TypeExtensions.IsEnum
bool ModestTree::TypeExtensions::IsEnum(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsValueType
bool ModestTree::TypeExtensions::IsValueType(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsValueType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsValueType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceMethods
::ArrayW<::System::Reflection::MethodInfo*> ModestTree::TypeExtensions::DeclaredInstanceMethods(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::DeclaredInstanceMethods");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::MethodInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceProperties
::ArrayW<::System::Reflection::PropertyInfo*> ModestTree::TypeExtensions::DeclaredInstanceProperties(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::DeclaredInstanceProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::PropertyInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceFields
::ArrayW<::System::Reflection::FieldInfo*> ModestTree::TypeExtensions::DeclaredInstanceFields(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::DeclaredInstanceFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::FieldInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.BaseType
::System::Type* ModestTree::TypeExtensions::BaseType(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericType
bool ModestTree::TypeExtensions::IsGenericType(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericTypeDefinition
bool ModestTree::TypeExtensions::IsGenericTypeDefinition(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsGenericTypeDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericTypeDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsPrimitive
bool ModestTree::TypeExtensions::IsPrimitive(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsPrimitive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsPrimitive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsInterface
bool ModestTree::TypeExtensions::IsInterface(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.ContainsGenericParameters
bool ModestTree::TypeExtensions::ContainsGenericParameters(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::ContainsGenericParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAbstract
bool ModestTree::TypeExtensions::IsAbstract(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsAbstract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsSealed
bool ModestTree::TypeExtensions::IsSealed(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsSealed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsSealed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Method
::System::Reflection::MethodInfo* ModestTree::TypeExtensions::Method(::System::Delegate* del) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::Method");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(del)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::MethodInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, del);
}
// Autogenerated method: ModestTree.TypeExtensions.GenericArguments
::ArrayW<::System::Type*> ModestTree::TypeExtensions::GenericArguments(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::GenericArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GenericArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Interfaces
::ArrayW<::System::Type*> ModestTree::TypeExtensions::Interfaces(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::Interfaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Interfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Constructors
::ArrayW<::System::Reflection::ConstructorInfo*> ModestTree::TypeExtensions::Constructors(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::Constructors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Constructors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Reflection::ConstructorInfo*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetDefaultValue
::Il2CppObject* ModestTree::TypeExtensions::GetDefaultValue(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::GetDefaultValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetDefaultValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsClosedGenericType
bool ModestTree::TypeExtensions::IsClosedGenericType(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsClosedGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsClosedGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetParentTypes
::System::Collections::Generic::IEnumerable_1<::System::Type*>* ModestTree::TypeExtensions::GetParentTypes(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::GetParentTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetParentTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::System::Type*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsOpenGenericType
bool ModestTree::TypeExtensions::IsOpenGenericType(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::IsOpenGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsOpenGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(::System::Reflection::MemberInfo* provider, ::ArrayW<::System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::HasAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
::System::Collections::Generic::IEnumerable_1<::System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(::System::Reflection::MemberInfo* provider, ::ArrayW<::System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::AllAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::System::Attribute*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(::System::Reflection::ParameterInfo* provider, ::ArrayW<::System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::HasAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
::System::Collections::Generic::IEnumerable_1<::System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(::System::Reflection::ParameterInfo* provider, ::ArrayW<::System::Type*> attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::AllAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::System::Attribute*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28
#include "ModestTree/TypeExtensions_-GetParentTypes-d__28.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <>2__current
[[deprecated("Use field access instead!")]] ::System::Type*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type type
[[deprecated("Use field access instead!")]] ::System::Type*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Type <>3__type
[[deprecated("Use field access instead!")]] ::System::Type*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$3__type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$3__type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__type"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<System.Type> <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::System::Type*>*& ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::Type*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.Generic.IEnumerator<System.Type>.get_Current
::System::Type* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerator$System_Type$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.Generic.IEnumerator<System.Type>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.IDisposable.Dispose
void ModestTree::TypeExtensions::$GetParentTypes$d__28::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.MoveNext
bool ModestTree::TypeExtensions::$GetParentTypes$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.<>m__Finally1
void ModestTree::TypeExtensions::$GetParentTypes$d__28::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.IEnumerator.Reset
void ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::System::Type*>* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<GetParentTypes>d__28.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_0
#include "ModestTree/TypeExtensions_--c__DisplayClass35_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type[] attributeTypes
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& ModestTree::TypeExtensions::$$c__DisplayClass35_0::dyn_attributeTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass35_0::dyn_attributeTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attributeTypes"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Type*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_0.<AllAttributes>b__0
bool ModestTree::TypeExtensions::$$c__DisplayClass35_0::$AllAttributes$b__0(::System::Attribute* a) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass35_0::<AllAttributes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, a);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_1
#include "ModestTree/TypeExtensions_--c__DisplayClass35_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Attribute a
[[deprecated("Use field access instead!")]] ::System::Attribute*& ModestTree::TypeExtensions::$$c__DisplayClass35_1::dyn_a() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass35_1::dyn_a");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "a"))->offset;
  return *reinterpret_cast<::System::Attribute**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass35_1.<AllAttributes>b__1
bool ModestTree::TypeExtensions::$$c__DisplayClass35_1::$AllAttributes$b__1(::System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass35_1::<AllAttributes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_0
#include "ModestTree/TypeExtensions_--c__DisplayClass39_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type[] attributeTypes
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& ModestTree::TypeExtensions::$$c__DisplayClass39_0::dyn_attributeTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass39_0::dyn_attributeTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attributeTypes"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Type*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_0.<AllAttributes>b__0
bool ModestTree::TypeExtensions::$$c__DisplayClass39_0::$AllAttributes$b__0(::System::Attribute* a) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass39_0::<AllAttributes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, a);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_1
#include "ModestTree/TypeExtensions_--c__DisplayClass39_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Attribute a
[[deprecated("Use field access instead!")]] ::System::Attribute*& ModestTree::TypeExtensions::$$c__DisplayClass39_1::dyn_a() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass39_1::dyn_a");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "a"))->offset;
  return *reinterpret_cast<::System::Attribute**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.TypeExtensions/ModestTree.<>c__DisplayClass39_1.<AllAttributes>b__1
bool ModestTree::TypeExtensions::$$c__DisplayClass39_1::$AllAttributes$b__1(::System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeExtensions::$$c__DisplayClass39_1::<AllAttributes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeStringFormatter
#include "ModestTree/TypeStringFormatter.hpp"
// Including type: ModestTree.TypeStringFormatter/ModestTree.<>c
#include "ModestTree/TypeStringFormatter_--c.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _prettyNameCache
::System::Collections::Generic::Dictionary_2<::System::Type*, ::StringW>* ModestTree::TypeStringFormatter::_get__prettyNameCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::_get__prettyNameCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::System::Type*, ::StringW>*>("ModestTree", "TypeStringFormatter", "_prettyNameCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _prettyNameCache
void ModestTree::TypeStringFormatter::_set__prettyNameCache(::System::Collections::Generic::Dictionary_2<::System::Type*, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::_set__prettyNameCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter", "_prettyNameCache", value));
}
// Autogenerated method: ModestTree.TypeStringFormatter..cctor
void ModestTree::TypeStringFormatter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.TypeStringFormatter.PrettyName
::StringW ModestTree::TypeStringFormatter::PrettyName(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::PrettyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "PrettyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeStringFormatter.PrettyNameInternal
::StringW ModestTree::TypeStringFormatter::PrettyNameInternal(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::PrettyNameInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "PrettyNameInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeStringFormatter.GetCSharpTypeName
::StringW ModestTree::TypeStringFormatter::GetCSharpTypeName(::StringW typeName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::GetCSharpTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "GetCSharpTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeName)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, typeName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeStringFormatter/ModestTree.<>c
#include "ModestTree/TypeStringFormatter_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ModestTree.TypeStringFormatter/ModestTree.<>c <>9
::ModestTree::TypeStringFormatter::$$c* ModestTree::TypeStringFormatter::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::ModestTree::TypeStringFormatter::$$c*>("ModestTree", "TypeStringFormatter/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly ModestTree.TypeStringFormatter/ModestTree.<>c <>9
void ModestTree::TypeStringFormatter::$$c::_set_$$9(::ModestTree::TypeStringFormatter::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.String> <>9__2_0
::System::Func_2<::System::Type*, ::StringW>* ModestTree::TypeStringFormatter::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Type*, ::StringW>*>("ModestTree", "TypeStringFormatter/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.String> <>9__2_0
void ModestTree::TypeStringFormatter::$$c::_set_$$9__2_0(::System::Func_2<::System::Type*, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter/<>c", "<>9__2_0", value)));
}
// Autogenerated method: ModestTree.TypeStringFormatter/ModestTree.<>c..cctor
void ModestTree::TypeStringFormatter::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.TypeStringFormatter/ModestTree.<>c.<PrettyNameInternal>b__2_0
::StringW ModestTree::TypeStringFormatter::$$c::$PrettyNameInternal$b__2_0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::TypeStringFormatter::$$c::<PrettyNameInternal>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PrettyNameInternal>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.ReflectionUtil
#include "ModestTree/ReflectionUtil.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: System.Action`5
#include "System/Action_5.hpp"
// Including type: System.Action`6
#include "System/Action_6.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Func`4
#include "System/Func_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.ReflectionUtil.CreateArray
::System::Array* ModestTree::ReflectionUtil::CreateArray(::System::Type* elementType, ::System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::ReflectionUtil::CreateArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "CreateArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementType), ::il2cpp_utils::ExtractType(instances)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Array*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, elementType, instances);
}
// Autogenerated method: ModestTree.ReflectionUtil.CreateGenericList
::System::Collections::IList* ModestTree::ReflectionUtil::CreateGenericList(::System::Type* elementType, ::System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::ReflectionUtil::CreateGenericList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "CreateGenericList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementType), ::il2cpp_utils::ExtractType(instances)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IList*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, elementType, instances);
}
// Autogenerated method: ModestTree.ReflectionUtil.ToDebugString
::StringW ModestTree::ReflectionUtil::ToDebugString(::System::Reflection::MethodInfo* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::ReflectionUtil::ToDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "ToDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, method);
}
// Autogenerated method: ModestTree.ReflectionUtil.ToDebugString
::StringW ModestTree::ReflectionUtil::ToDebugString(::System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::ReflectionUtil::ToDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "ToDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, action);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.PreserveAttribute
#include "ModestTree/Util/PreserveAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.ValuePair
#include "ModestTree/Util/ValuePair.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: ModestTree.Util.ValuePair`3
#include "ModestTree/Util/ValuePair_3.hpp"
// Including type: ModestTree.Util.ValuePair`4
#include "ModestTree/Util/ValuePair_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.UnityUtil
#include "ModestTree/Util/UnityUtil.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1
#include "ModestTree/Util/UnityUtil_-get_AllScenes-d__1.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<>c
#include "ModestTree/Util/UnityUtil_--c.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16
#include "ModestTree/Util/UnityUtil_-GetParents-d__16.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17
#include "ModestTree/Util/UnityUtil_-GetParentsAndSelf-d__17.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20
#include "ModestTree/Util/UnityUtil_-GetDirectChildrenAndSelf-d__20.hpp"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21
#include "ModestTree/Util/UnityUtil_-GetDirectChildren-d__21.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil.get_AllScenes
::System::Collections::Generic::IEnumerable_1<::UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::get_AllScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::get_AllScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_AllScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::SceneManagement::Scene>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_AllLoadedScenes
::System::Collections::Generic::IEnumerable_1<::UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::get_AllLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::get_AllLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_AllLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::SceneManagement::Scene>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsAltKeyDown
bool ModestTree::Util::UnityUtil::get_IsAltKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::get_IsAltKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsAltKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsControlKeyDown
bool ModestTree::Util::UnityUtil::get_IsControlKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::get_IsControlKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsControlKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsShiftKeyDown
bool ModestTree::Util::UnityUtil::get_IsShiftKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::get_IsShiftKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsShiftKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_WasShiftKeyJustPressed
bool ModestTree::Util::UnityUtil::get_WasShiftKeyJustPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::get_WasShiftKeyJustPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_WasShiftKeyJustPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_WasAltKeyJustPressed
bool ModestTree::Util::UnityUtil::get_WasAltKeyJustPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::get_WasAltKeyJustPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_WasAltKeyJustPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDepthLevel
int ModestTree::Util::UnityUtil::GetDepthLevel(::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetDepthLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDepthLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetRootParentOrSelf
::UnityEngine::GameObject* ModestTree::Util::UnityUtil::GetRootParentOrSelf(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetRootParentOrSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetRootParentOrSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetParents
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Transform*>* ModestTree::Util::UnityUtil::GetParents(::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetParents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetParents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Transform*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetParentsAndSelf
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Transform*>* ModestTree::Util::UnityUtil::GetParentsAndSelf(::UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetParentsAndSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetParentsAndSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Transform*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetComponentsInChildrenTopDown
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Component*>* ModestTree::Util::UnityUtil::GetComponentsInChildrenTopDown(::UnityEngine::GameObject* gameObject, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetComponentsInChildrenTopDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetComponentsInChildrenTopDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Component*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject, includeInactive);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetComponentsInChildrenBottomUp
::System::Collections::Generic::IEnumerable_1<::UnityEngine::Component*>* ModestTree::Util::UnityUtil::GetComponentsInChildrenBottomUp(::UnityEngine::GameObject* gameObject, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetComponentsInChildrenBottomUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetComponentsInChildrenBottomUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Component*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, gameObject, includeInactive);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDirectChildrenAndSelf
::System::Collections::Generic::IEnumerable_1<::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetDirectChildrenAndSelf(::UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetDirectChildrenAndSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDirectChildrenAndSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDirectChildren
::System::Collections::Generic::IEnumerable_1<::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetDirectChildren(::UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetDirectChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDirectChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetAllGameObjects
::System::Collections::Generic::IEnumerable_1<::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetAllGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetAllGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetAllGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetAllRootGameObjects
::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetAllRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::GetAllRootGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetAllRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1
#include "ModestTree/Util/UnityUtil_-get_AllScenes-d__1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.SceneManagement.Scene <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::SceneManagement::Scene& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::SceneManagement::Scene*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <i>5__2
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$i$5__2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::dyn_$i$5__2");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<i>5__2"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current
::UnityEngine::SceneManagement::Scene ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerator$UnityEngine_SceneManagement_Scene$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::SceneManagement::Scene, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.MoveNext
bool ModestTree::Util::UnityUtil::$get_AllScenes$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerable$UnityEngine_SceneManagement_Scene$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::SceneManagement::Scene>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<get_AllScenes>d__1.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<>c
#include "ModestTree/Util/UnityUtil_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ModestTree.Util.UnityUtil/ModestTree.Util.<>c <>9
::ModestTree::Util::UnityUtil::$$c* ModestTree::Util::UnityUtil::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::ModestTree::Util::UnityUtil::$$c*>("ModestTree.Util", "UnityUtil/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly ModestTree.Util.UnityUtil/ModestTree.Util.<>c <>9
void ModestTree::Util::UnityUtil::$$c::_set_$$9(::ModestTree::Util::UnityUtil::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Boolean> <>9__3_0
::System::Func_2<::UnityEngine::SceneManagement::Scene, bool>* ModestTree::Util::UnityUtil::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::UnityEngine::SceneManagement::Scene, bool>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Boolean> <>9__3_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__3_0(::System::Func_2<::UnityEngine::SceneManagement::Scene, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__3_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__15_0
::System::Func_2<::UnityEngine::Transform*, ::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$$c::_get_$$9__15_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_get_$$9__15_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::UnityEngine::Transform*, ::UnityEngine::GameObject*>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__15_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__15_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__15_0(::System::Func_2<::UnityEngine::Transform*, ::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_set_$$9__15_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__15_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__18_0
::System::Func_2<::UnityEngine::Component*, int>* ModestTree::Util::UnityUtil::$$c::_get_$$9__18_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_get_$$9__18_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::UnityEngine::Component*, int>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__18_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__18_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__18_0(::System::Func_2<::UnityEngine::Component*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_set_$$9__18_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__18_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__19_0
::System::Func_2<::UnityEngine::Component*, int>* ModestTree::Util::UnityUtil::$$c::_get_$$9__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_get_$$9__19_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::UnityEngine::Component*, int>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__19_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__19_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__19_0(::System::Func_2<::UnityEngine::Component*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_set_$$9__19_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__19_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__22_0
::System::Func_2<::UnityEngine::Transform*, ::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$$c::_get_$$9__22_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_get_$$9__22_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::UnityEngine::Transform*, ::UnityEngine::GameObject*>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__22_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__22_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__22_0(::System::Func_2<::UnityEngine::Transform*, ::UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_set_$$9__22_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__22_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.GameObject,System.Boolean> <>9__23_0
::System::Func_2<::UnityEngine::GameObject*, bool>* ModestTree::Util::UnityUtil::$$c::_get_$$9__23_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_get_$$9__23_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::UnityEngine::GameObject*, bool>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__23_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.GameObject,System.Boolean> <>9__23_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__23_0(::System::Func_2<::UnityEngine::GameObject*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::_set_$$9__23_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__23_0", value)));
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c..cctor
void ModestTree::Util::UnityUtil::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<get_AllLoadedScenes>b__3_0
bool ModestTree::Util::UnityUtil::$$c::$get_AllLoadedScenes$b__3_0(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::<get_AllLoadedScenes>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_AllLoadedScenes>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, scene);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetRootParentOrSelf>b__15_0
::UnityEngine::GameObject* ModestTree::Util::UnityUtil::$$c::$GetRootParentOrSelf$b__15_0(::UnityEngine::Transform* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::<GetRootParentOrSelf>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetRootParentOrSelf>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetComponentsInChildrenTopDown>b__18_0
int ModestTree::Util::UnityUtil::$$c::$GetComponentsInChildrenTopDown$b__18_0(::UnityEngine::Component* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::<GetComponentsInChildrenTopDown>b__18_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetComponentsInChildrenTopDown>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetComponentsInChildrenBottomUp>b__19_0
int ModestTree::Util::UnityUtil::$$c::$GetComponentsInChildrenBottomUp$b__19_0(::UnityEngine::Component* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::<GetComponentsInChildrenBottomUp>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetComponentsInChildrenBottomUp>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetAllGameObjects>b__22_0
::UnityEngine::GameObject* ModestTree::Util::UnityUtil::$$c::$GetAllGameObjects$b__22_0(::UnityEngine::Transform* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::<GetAllGameObjects>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllGameObjects>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<>c.<GetAllRootGameObjects>b__23_0
bool ModestTree::Util::UnityUtil::$$c::$GetAllRootGameObjects$b__23_0(::UnityEngine::GameObject* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$$c::<GetAllRootGameObjects>b__23_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllRootGameObjects>b__23_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16
#include "ModestTree/Util/UnityUtil_-GetParents-d__16.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform <>3__transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$3__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$3__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<UnityEngine.Transform> <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>*& ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current
::UnityEngine::Transform* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetParents$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.MoveNext
bool ModestTree::Util::UnityUtil::$GetParents$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetParents$d__16::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParents>d__16.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17
#include "ModestTree/Util/UnityUtil_-GetParentsAndSelf-d__17.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Transform <>3__transform
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$3__transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$3__transform");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__transform"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.IEnumerator`1<UnityEngine.Transform> <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>*& ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current
::UnityEngine::Transform* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.MoveNext
bool ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetParentsAndSelf>d__17.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20
#include "ModestTree/Util/UnityUtil_-GetDirectChildrenAndSelf-d__20.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject obj
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_obj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_obj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "obj"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject <>3__obj
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$3__obj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$3__obj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__obj"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.IEnumerator <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::IEnumerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current
::UnityEngine::GameObject* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.MoveNext
bool ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildrenAndSelf>d__20.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21
#include "ModestTree/Util/UnityUtil_-GetDirectChildren-d__21.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject <>2__current
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.GameObject obj
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_obj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_obj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "obj"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.GameObject <>3__obj
[[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$3__obj() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$3__obj");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__obj"))->offset;
  return *reinterpret_cast<::UnityEngine::GameObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.IEnumerator <>7__wrap1
[[deprecated("Use field access instead!")]] ::System::Collections::IEnumerator*& ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<::System::Collections::IEnumerator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current
::UnityEngine::GameObject* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.MoveNext
bool ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/ModestTree.Util.<GetDirectChildren>d__21.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalCallbackWithLookupWrapper
#include "Zenject/SignalCallbackWithLookupWrapper.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.SignalBus
#include "Zenject/SignalBus.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.SignalBindingBindInfo
#include "Zenject/SignalBindingBindInfo.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::SignalCallbackWithLookupWrapper::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SignalBus _signalBus
[[deprecated("Use field access instead!")]] ::Zenject::SignalBus*& Zenject::SignalCallbackWithLookupWrapper::dyn__signalBus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::dyn__signalBus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalBus"))->offset;
  return *reinterpret_cast<::Zenject::SignalBus**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Guid _lookupId
[[deprecated("Use field access instead!")]] ::System::Guid& Zenject::SignalCallbackWithLookupWrapper::dyn__lookupId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::dyn__lookupId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lookupId"))->offset;
  return *reinterpret_cast<::System::Guid*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Func`2<System.Object,System.Action`1<System.Object>> _methodGetter
[[deprecated("Use field access instead!")]] ::System::Func_2<::Il2CppObject*, ::System::Action_1<::Il2CppObject*>*>*& Zenject::SignalCallbackWithLookupWrapper::dyn__methodGetter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::dyn__methodGetter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_methodGetter"))->offset;
  return *reinterpret_cast<::System::Func_2<::Il2CppObject*, ::System::Action_1<::Il2CppObject*>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _objectType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SignalCallbackWithLookupWrapper::dyn__objectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::dyn__objectType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_objectType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _signalType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SignalCallbackWithLookupWrapper::dyn__signalType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::dyn__signalType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _identifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::SignalCallbackWithLookupWrapper::dyn__identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::dyn__identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_identifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalCallbackWithLookupWrapper.OnSignalFired
void Zenject::SignalCallbackWithLookupWrapper::OnSignalFired(::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::OnSignalFired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSignalFired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signal);
}
// Autogenerated method: Zenject.SignalCallbackWithLookupWrapper.Dispose
void Zenject::SignalCallbackWithLookupWrapper::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalCallbackWithLookupWrapper.__zenCreate
::Il2CppObject* Zenject::SignalCallbackWithLookupWrapper::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalCallbackWithLookupWrapper", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalCallbackWithLookupWrapper.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalCallbackWithLookupWrapper::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWithLookupWrapper::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalCallbackWithLookupWrapper", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalCallbackWrapper
#include "Zenject/SignalCallbackWrapper.hpp"
// Including type: Zenject.SignalBus
#include "Zenject/SignalBus.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.SignalBindingBindInfo
#include "Zenject/SignalBindingBindInfo.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SignalBus _signalBus
[[deprecated("Use field access instead!")]] ::Zenject::SignalBus*& Zenject::SignalCallbackWrapper::dyn__signalBus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::dyn__signalBus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalBus"))->offset;
  return *reinterpret_cast<::Zenject::SignalBus**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<System.Object> _action
[[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppObject*>*& Zenject::SignalCallbackWrapper::dyn__action() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::dyn__action");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_action"))->offset;
  return *reinterpret_cast<::System::Action_1<::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _signalType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SignalCallbackWrapper::dyn__signalType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::dyn__signalType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _identifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::SignalCallbackWrapper::dyn__identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::dyn__identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_identifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalCallbackWrapper.OnSignalFired
void Zenject::SignalCallbackWrapper::OnSignalFired(::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::OnSignalFired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSignalFired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signal);
}
// Autogenerated method: Zenject.SignalCallbackWrapper.Dispose
void Zenject::SignalCallbackWrapper::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalCallbackWrapper.__zenCreate
::Il2CppObject* Zenject::SignalCallbackWrapper::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalCallbackWrapper", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalCallbackWrapper.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalCallbackWrapper::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCallbackWrapper::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalCallbackWrapper", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DeclareSignalAsyncTickPriorityCopyBinder
#include "Zenject/DeclareSignalAsyncTickPriorityCopyBinder.hpp"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunAsync
::Zenject::SignalTickPriorityCopyBinder* Zenject::DeclareSignalAsyncTickPriorityCopyBinder::RunAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DeclareSignalAsyncTickPriorityCopyBinder::RunAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalTickPriorityCopyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DeclareSignalAsyncTickPriorityCopyBinder.RunSync
::Zenject::SignalCopyBinder* Zenject::DeclareSignalAsyncTickPriorityCopyBinder::RunSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DeclareSignalAsyncTickPriorityCopyBinder::RunSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalCopyBinder*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
#include "Zenject/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.hpp"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.WithId
::Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder* Zenject::DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder::WithId(::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder::WithId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder*, false>(this, ___internal__method, identifier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
#include "Zenject/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.hpp"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.RequireSubscriber
::Zenject::DeclareSignalAsyncTickPriorityCopyBinder* Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder::RequireSubscriber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder::RequireSubscriber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequireSubscriber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DeclareSignalAsyncTickPriorityCopyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriber
::Zenject::DeclareSignalAsyncTickPriorityCopyBinder* Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder::OptionalSubscriber() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder::OptionalSubscriber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OptionalSubscriber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DeclareSignalAsyncTickPriorityCopyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.OptionalSubscriberWithWarning
::Zenject::DeclareSignalAsyncTickPriorityCopyBinder* Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder::OptionalSubscriberWithWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder::OptionalSubscriberWithWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OptionalSubscriberWithWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DeclareSignalAsyncTickPriorityCopyBinder*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalBindingBindInfo
#include "Zenject/SignalBindingBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Object <Identifier>k__BackingField
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::SignalBindingBindInfo::dyn_$Identifier$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBindingBindInfo::dyn_$Identifier$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Identifier>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <SignalType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SignalBindingBindInfo::dyn_$SignalType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBindingBindInfo::dyn_$SignalType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SignalType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalBindingBindInfo.get_Identifier
::Il2CppObject* Zenject::SignalBindingBindInfo::get_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBindingBindInfo::get_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalBindingBindInfo.set_Identifier
void Zenject::SignalBindingBindInfo::set_Identifier(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBindingBindInfo::set_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SignalBindingBindInfo.get_SignalType
::System::Type* Zenject::SignalBindingBindInfo::get_SignalType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBindingBindInfo::get_SignalType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignalType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalBindingBindInfo.set_SignalType
void Zenject::SignalBindingBindInfo::set_SignalType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBindingBindInfo::set_SignalType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SignalType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Object <Identifier>k__BackingField
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::SignalDeclarationBindInfo::dyn_$Identifier$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::dyn_$Identifier$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Identifier>k__BackingField"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <SignalType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SignalDeclarationBindInfo::dyn_$SignalType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::dyn_$SignalType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SignalType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <RunAsync>k__BackingField
[[deprecated("Use field access instead!")]] bool& Zenject::SignalDeclarationBindInfo::dyn_$RunAsync$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::dyn_$RunAsync$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<RunAsync>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <TickPriority>k__BackingField
[[deprecated("Use field access instead!")]] int& Zenject::SignalDeclarationBindInfo::dyn_$TickPriority$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::dyn_$TickPriority$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TickPriority>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.SignalMissingHandlerResponses <MissingHandlerResponse>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::SignalMissingHandlerResponses& Zenject::SignalDeclarationBindInfo::dyn_$MissingHandlerResponse$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::dyn_$MissingHandlerResponse$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MissingHandlerResponse>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::SignalMissingHandlerResponses*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.get_Identifier
::Il2CppObject* Zenject::SignalDeclarationBindInfo::get_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::get_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.set_Identifier
void Zenject::SignalDeclarationBindInfo::set_Identifier(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::set_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.get_SignalType
::System::Type* Zenject::SignalDeclarationBindInfo::get_SignalType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::get_SignalType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignalType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.set_SignalType
void Zenject::SignalDeclarationBindInfo::set_SignalType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::set_SignalType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SignalType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.get_RunAsync
bool Zenject::SignalDeclarationBindInfo::get_RunAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::get_RunAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RunAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.set_RunAsync
void Zenject::SignalDeclarationBindInfo::set_RunAsync(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::set_RunAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RunAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.get_TickPriority
int Zenject::SignalDeclarationBindInfo::get_TickPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::get_TickPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TickPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.set_TickPriority
void Zenject::SignalDeclarationBindInfo::set_TickPriority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::set_TickPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TickPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.get_MissingHandlerResponse
::Zenject::SignalMissingHandlerResponses Zenject::SignalDeclarationBindInfo::get_MissingHandlerResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::get_MissingHandlerResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MissingHandlerResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalMissingHandlerResponses, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclarationBindInfo.set_MissingHandlerResponse
void Zenject::SignalDeclarationBindInfo::set_MissingHandlerResponse(::Zenject::SignalMissingHandlerResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationBindInfo::set_MissingHandlerResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MissingHandlerResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SignalCopyBinder
#include "Zenject/SignalCopyBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.BindInfo> _bindInfos
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::BindInfo*>*& Zenject::SignalCopyBinder::dyn__bindInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCopyBinder::dyn__bindInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindInfos"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::BindInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalCopyBinder.AddCopyBindInfo
void Zenject::SignalCopyBinder::AddCopyBindInfo(::Zenject::BindInfo* bindInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCopyBinder::AddCopyBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCopyBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindInfo);
}
// Autogenerated method: Zenject.SignalCopyBinder.CopyIntoAllSubContainers
void Zenject::SignalCopyBinder::CopyIntoAllSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCopyBinder::CopyIntoAllSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyIntoAllSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalCopyBinder.CopyIntoDirectSubContainers
void Zenject::SignalCopyBinder::CopyIntoDirectSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCopyBinder::CopyIntoDirectSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyIntoDirectSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalCopyBinder.MoveIntoAllSubContainers
void Zenject::SignalCopyBinder::MoveIntoAllSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCopyBinder::MoveIntoAllSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveIntoAllSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalCopyBinder.MoveIntoDirectSubContainers
void Zenject::SignalCopyBinder::MoveIntoDirectSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCopyBinder::MoveIntoDirectSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveIntoDirectSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalCopyBinder.SetInheritanceMethod
void Zenject::SignalCopyBinder::SetInheritanceMethod(::Zenject::BindingInheritanceMethods method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalCopyBinder::SetInheritanceMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SignalExtensions
#include "Zenject/SignalExtensions.hpp"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder
#include "Zenject/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.hpp"
// Including type: Zenject.BindSignalIdToBinder`1
#include "Zenject/BindSignalIdToBinder_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SignalExtensions.CreateDefaultSignalDeclarationBindInfo
::Zenject::SignalDeclarationBindInfo* Zenject::SignalExtensions::CreateDefaultSignalDeclarationBindInfo(::Zenject::DiContainer* container, ::System::Type* signalType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalExtensions::CreateDefaultSignalDeclarationBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalExtensions", "CreateDefaultSignalDeclarationBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(signalType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalDeclarationBindInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, container, signalType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SignalTickPriorityCopyBinder
#include "Zenject/SignalTickPriorityCopyBinder.hpp"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.SignalDeclarationBindInfo <SignalBindInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::SignalDeclarationBindInfo*& Zenject::SignalTickPriorityCopyBinder::dyn_$SignalBindInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalTickPriorityCopyBinder::dyn_$SignalBindInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SignalBindInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::SignalDeclarationBindInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalTickPriorityCopyBinder.get_SignalBindInfo
::Zenject::SignalDeclarationBindInfo* Zenject::SignalTickPriorityCopyBinder::get_SignalBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalTickPriorityCopyBinder::get_SignalBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignalBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalDeclarationBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalTickPriorityCopyBinder.set_SignalBindInfo
void Zenject::SignalTickPriorityCopyBinder::set_SignalBindInfo(::Zenject::SignalDeclarationBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalTickPriorityCopyBinder::set_SignalBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SignalBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SignalTickPriorityCopyBinder.WithTickPriority
::Zenject::SignalCopyBinder* Zenject::SignalTickPriorityCopyBinder::WithTickPriority(int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalTickPriorityCopyBinder::WithTickPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithTickPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalCopyBinder*, false>(this, ___internal__method, priority);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalDeclaration
#include "Zenject/SignalDeclaration.hpp"
// Including type: Zenject.SignalDeclaration/Zenject.Factory
#include "Zenject/SignalDeclaration_Factory.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.SignalSubscription
#include "Zenject/SignalSubscription.hpp"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.ZenjectSettings/Zenject.SignalSettings
#include "Zenject/ZenjectSettings_SignalSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.SignalSubscription> _subscriptions
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::SignalSubscription*>*& Zenject::SignalDeclaration::dyn__subscriptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::dyn__subscriptions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subscriptions"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::SignalSubscription*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<System.Object> _asyncQueue
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& Zenject::SignalDeclaration::dyn__asyncQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::dyn__asyncQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_asyncQueue"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.BindingId _bindingId
[[deprecated("Use field access instead!")]] ::Zenject::BindingId& Zenject::SignalDeclaration::dyn__bindingId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::dyn__bindingId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindingId"))->offset;
  return *reinterpret_cast<::Zenject::BindingId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SignalMissingHandlerResponses _missingHandlerResponses
[[deprecated("Use field access instead!")]] ::Zenject::SignalMissingHandlerResponses& Zenject::SignalDeclaration::dyn__missingHandlerResponses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::dyn__missingHandlerResponses");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_missingHandlerResponses"))->offset;
  return *reinterpret_cast<::Zenject::SignalMissingHandlerResponses*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _isAsync
[[deprecated("Use field access instead!")]] bool& Zenject::SignalDeclaration::dyn__isAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::dyn__isAsync");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isAsync"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ZenjectSettings/Zenject.SignalSettings _settings
[[deprecated("Use field access instead!")]] ::Zenject::ZenjectSettings::SignalSettings*& Zenject::SignalDeclaration::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<::Zenject::ZenjectSettings::SignalSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <TickPriority>k__BackingField
[[deprecated("Use field access instead!")]] int& Zenject::SignalDeclaration::dyn_$TickPriority$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::dyn_$TickPriority$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<TickPriority>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalDeclaration.get_TickPriority
int Zenject::SignalDeclaration::get_TickPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::get_TickPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TickPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclaration.set_TickPriority
void Zenject::SignalDeclaration::set_TickPriority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::set_TickPriority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TickPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SignalDeclaration.get_IsAsync
bool Zenject::SignalDeclaration::get_IsAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::get_IsAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclaration.get_BindingId
::Zenject::BindingId Zenject::SignalDeclaration::get_BindingId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::get_BindingId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindingId, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclaration.Dispose
void Zenject::SignalDeclaration::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclaration.Fire
void Zenject::SignalDeclaration::Fire(::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::Fire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signal);
}
// Autogenerated method: Zenject.SignalDeclaration.FireInternal
void Zenject::SignalDeclaration::FireInternal(::System::Collections::Generic::List_1<::Zenject::SignalSubscription*>* subscriptions, ::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::FireInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subscriptions), ::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subscriptions, signal);
}
// Autogenerated method: Zenject.SignalDeclaration.Tick
void Zenject::SignalDeclaration::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclaration.Add
void Zenject::SignalDeclaration::Add(::Zenject::SignalSubscription* subscription) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subscription)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subscription);
}
// Autogenerated method: Zenject.SignalDeclaration.Remove
void Zenject::SignalDeclaration::Remove(::Zenject::SignalSubscription* subscription) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subscription)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subscription);
}
// Autogenerated method: Zenject.SignalDeclaration.__zenCreate
::Il2CppObject* Zenject::SignalDeclaration::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalDeclaration", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalDeclaration.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalDeclaration::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalDeclaration", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalDeclaration/Zenject.Factory
#include "Zenject/SignalDeclaration_Factory.hpp"
// Including type: Zenject.SignalDeclarationBindInfo
#include "Zenject/SignalDeclarationBindInfo.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SignalDeclaration/Zenject.Factory.__zenCreate
::Il2CppObject* Zenject::SignalDeclaration::Factory::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::Factory::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalDeclaration/Factory", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalDeclaration/Zenject.Factory.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalDeclaration::Factory::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclaration::Factory::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalDeclaration/Factory", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalSubscription
#include "Zenject/SignalSubscription.hpp"
// Including type: Zenject.SignalSubscription/Zenject.Pool
#include "Zenject/SignalSubscription_Pool.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.SignalDeclaration
#include "Zenject/SignalDeclaration.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SignalSubscription/Zenject.Pool _pool
[[deprecated("Use field access instead!")]] ::Zenject::SignalSubscription::Pool*& Zenject::SignalSubscription::dyn__pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::dyn__pool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pool"))->offset;
  return *reinterpret_cast<::Zenject::SignalSubscription::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Action`1<System.Object> _callback
[[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppObject*>*& Zenject::SignalSubscription::dyn__callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::dyn__callback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callback"))->offset;
  return *reinterpret_cast<::System::Action_1<::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.SignalDeclaration _declaration
[[deprecated("Use field access instead!")]] ::Zenject::SignalDeclaration*& Zenject::SignalSubscription::dyn__declaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::dyn__declaration");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_declaration"))->offset;
  return *reinterpret_cast<::Zenject::SignalDeclaration**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.BindingId _signalId
[[deprecated("Use field access instead!")]] ::Zenject::BindingId& Zenject::SignalSubscription::dyn__signalId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::dyn__signalId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalId"))->offset;
  return *reinterpret_cast<::Zenject::BindingId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalSubscription.get_SignalId
::Zenject::BindingId Zenject::SignalSubscription::get_SignalId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::get_SignalId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignalId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindingId, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscription.OnSpawned
void Zenject::SignalSubscription::OnSpawned(::System::Action_1<::Il2CppObject*>* callback, ::Zenject::SignalDeclaration* declaration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::OnSpawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(declaration)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, declaration);
}
// Autogenerated method: Zenject.SignalSubscription.OnDespawned
void Zenject::SignalSubscription::OnDespawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::OnDespawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscription.SetDefaults
void Zenject::SignalSubscription::SetDefaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::SetDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscription.Dispose
void Zenject::SignalSubscription::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscription.OnDeclarationDespawned
void Zenject::SignalSubscription::OnDeclarationDespawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::OnDeclarationDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeclarationDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscription.Invoke
void Zenject::SignalSubscription::Invoke(::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signal);
}
// Autogenerated method: Zenject.SignalSubscription.__zenCreate
::Il2CppObject* Zenject::SignalSubscription::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalSubscription", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalSubscription.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalSubscription::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalSubscription", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalSubscription/Zenject.Pool
#include "Zenject/SignalSubscription_Pool.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.SignalDeclaration
#include "Zenject/SignalDeclaration.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SignalSubscription/Zenject.Pool.__zenCreate
::Il2CppObject* Zenject::SignalSubscription::Pool::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::Pool::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalSubscription/Pool", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalSubscription/Zenject.Pool.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalSubscription::Pool::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscription::Pool::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalSubscription/Pool", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalSubscriptionId
#include "Zenject/SignalSubscriptionId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.BindingId _signalId
[[deprecated("Use field access instead!")]] ::Zenject::BindingId& Zenject::SignalSubscriptionId::dyn__signalId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::dyn__signalId");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalId"))->offset;
  return *reinterpret_cast<::Zenject::BindingId*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Object _callback
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::SignalSubscriptionId::dyn__callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::dyn__callback");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_callback"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalSubscriptionId.get_SignalId
::Zenject::BindingId Zenject::SignalSubscriptionId::get_SignalId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::get_SignalId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_SignalId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindingId, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscriptionId.get_Callback
::Il2CppObject* Zenject::SignalSubscriptionId::get_Callback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::get_Callback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Callback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscriptionId..ctor
// ABORTED elsewhere.  Zenject::SignalSubscriptionId::SignalSubscriptionId(::Zenject::BindingId signalId, ::Il2CppObject* callback)
// Autogenerated method: Zenject.SignalSubscriptionId.Equals
bool Zenject::SignalSubscriptionId::Equals(::Zenject::SignalSubscriptionId that) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(that)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, that);
}
// Autogenerated method: Zenject.SignalSubscriptionId.GetHashCode
int Zenject::SignalSubscriptionId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalSubscriptionId.Equals
bool Zenject::SignalSubscriptionId::Equals(::Il2CppObject* that) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(that)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, that);
}
// Autogenerated method: Zenject.SignalSubscriptionId.op_Equality
bool Zenject::operator ==(const ::Zenject::SignalSubscriptionId& left, const ::Zenject::SignalSubscriptionId& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalSubscriptionId", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: Zenject.SignalSubscriptionId.op_Inequality
bool Zenject::operator !=(const ::Zenject::SignalSubscriptionId& left, const ::Zenject::SignalSubscriptionId& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalSubscriptionId::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalSubscriptionId", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, right);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalBus
#include "Zenject/SignalBus.hpp"
// Including type: Zenject.SignalBus/Zenject.<>c
#include "Zenject/SignalBus_--c.hpp"
// Including type: Zenject.SignalBus/Zenject.<>c__DisplayClass25_0`1
#include "Zenject/SignalBus_--c__DisplayClass25_0_1.hpp"
// Including type: Zenject.SignalBus/Zenject.<>c__DisplayClass27_0`1
#include "Zenject/SignalBus_--c__DisplayClass27_0_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.SignalSubscription/Zenject.Pool
#include "Zenject/SignalSubscription_Pool.hpp"
// Including type: Zenject.ZenjectSettings/Zenject.SignalSettings
#include "Zenject/ZenjectSettings_SignalSettings.hpp"
// Including type: Zenject.SignalDeclaration/Zenject.Factory
#include "Zenject/SignalDeclaration_Factory.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SignalSubscription/Zenject.Pool _subscriptionPool
[[deprecated("Use field access instead!")]] ::Zenject::SignalSubscription::Pool*& Zenject::SignalBus::dyn__subscriptionPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::dyn__subscriptionPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subscriptionPool"))->offset;
  return *reinterpret_cast<::Zenject::SignalSubscription::Pool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<Zenject.BindingId,Zenject.SignalDeclaration> _localDeclarationMap
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Zenject::BindingId, ::Zenject::SignalDeclaration*>*& Zenject::SignalBus::dyn__localDeclarationMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::dyn__localDeclarationMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localDeclarationMap"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Zenject::BindingId, ::Zenject::SignalDeclaration*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SignalBus _parentBus
[[deprecated("Use field access instead!")]] ::Zenject::SignalBus*& Zenject::SignalBus::dyn__parentBus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::dyn__parentBus");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parentBus"))->offset;
  return *reinterpret_cast<::Zenject::SignalBus**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<Zenject.SignalSubscriptionId,Zenject.SignalSubscription> _subscriptionMap
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Zenject::SignalSubscriptionId, ::Zenject::SignalSubscription*>*& Zenject::SignalBus::dyn__subscriptionMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::dyn__subscriptionMap");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subscriptionMap"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Zenject::SignalSubscriptionId, ::Zenject::SignalSubscription*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ZenjectSettings/Zenject.SignalSettings _settings
[[deprecated("Use field access instead!")]] ::Zenject::ZenjectSettings::SignalSettings*& Zenject::SignalBus::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<::Zenject::ZenjectSettings::SignalSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SignalDeclaration/Zenject.Factory _signalDeclarationFactory
[[deprecated("Use field access instead!")]] ::Zenject::SignalDeclaration::Factory*& Zenject::SignalBus::dyn__signalDeclarationFactory() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::dyn__signalDeclarationFactory");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalDeclarationFactory"))->offset;
  return *reinterpret_cast<::Zenject::SignalDeclaration::Factory**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::SignalBus::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalBus.get_ParentBus
::Zenject::SignalBus* Zenject::SignalBus::get_ParentBus() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::get_ParentBus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentBus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalBus*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalBus.get_NumSubscribers
int Zenject::SignalBus::get_NumSubscribers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::get_NumSubscribers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumSubscribers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalBus.LateDispose
void Zenject::SignalBus::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::LateDispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalBus.FireId
void Zenject::SignalBus::FireId(::Il2CppObject* identifier, ::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::FireId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, identifier, signal);
}
// Autogenerated method: Zenject.SignalBus.Fire
void Zenject::SignalBus::Fire(::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Fire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signal);
}
// Autogenerated method: Zenject.SignalBus.TryFireId
void Zenject::SignalBus::TryFireId(::Il2CppObject* identifier, ::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryFireId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFireId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, identifier, signal);
}
// Autogenerated method: Zenject.SignalBus.TryFire
void Zenject::SignalBus::TryFire(::Il2CppObject* signal) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryFire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryFire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signal);
}
// Autogenerated method: Zenject.SignalBus.SubscribeId
void Zenject::SignalBus::SubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::SubscribeId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubscribeId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, callback);
}
// Autogenerated method: Zenject.SignalBus.Subscribe
void Zenject::SignalBus::Subscribe(::System::Type* signalType, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Subscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Subscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, callback);
}
// Autogenerated method: Zenject.SignalBus.UnsubscribeId
void Zenject::SignalBus::UnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::UnsubscribeId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsubscribeId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, callback);
}
// Autogenerated method: Zenject.SignalBus.Unsubscribe
void Zenject::SignalBus::Unsubscribe(::System::Type* signalType, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Unsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, callback);
}
// Autogenerated method: Zenject.SignalBus.UnsubscribeId
void Zenject::SignalBus::UnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::UnsubscribeId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsubscribeId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, callback);
}
// Autogenerated method: Zenject.SignalBus.Unsubscribe
void Zenject::SignalBus::Unsubscribe(::System::Type* signalType, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::Unsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, callback);
}
// Autogenerated method: Zenject.SignalBus.TryUnsubscribeId
void Zenject::SignalBus::TryUnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribeId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribeId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, callback);
}
// Autogenerated method: Zenject.SignalBus.TryUnsubscribe
void Zenject::SignalBus::TryUnsubscribe(::System::Type* signalType, ::System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, callback);
}
// Autogenerated method: Zenject.SignalBus.TryUnsubscribeId
void Zenject::SignalBus::TryUnsubscribeId(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribeId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribeId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, callback);
}
// Autogenerated method: Zenject.SignalBus.TryUnsubscribe
void Zenject::SignalBus::TryUnsubscribe(::System::Type* signalType, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::TryUnsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryUnsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, callback);
}
// Autogenerated method: Zenject.SignalBus.UnsubscribeInternal
void Zenject::SignalBus::UnsubscribeInternal(::System::Type* signalType, ::Il2CppObject* identifier, ::Il2CppObject* token, bool throwIfMissing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::UnsubscribeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsubscribeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(throwIfMissing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, token, throwIfMissing);
}
// Autogenerated method: Zenject.SignalBus.UnsubscribeInternal
void Zenject::SignalBus::UnsubscribeInternal(::Zenject::BindingId signalId, ::Il2CppObject* token, bool throwIfMissing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::UnsubscribeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsubscribeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalId), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(throwIfMissing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalId, token, throwIfMissing);
}
// Autogenerated method: Zenject.SignalBus.UnsubscribeInternal
void Zenject::SignalBus::UnsubscribeInternal(::Zenject::SignalSubscriptionId id, bool throwIfMissing) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::UnsubscribeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnsubscribeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(throwIfMissing)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, throwIfMissing);
}
// Autogenerated method: Zenject.SignalBus.SubscribeInternal
void Zenject::SignalBus::SubscribeInternal(::System::Type* signalType, ::Il2CppObject* identifier, ::Il2CppObject* token, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::SubscribeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubscribeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, token, callback);
}
// Autogenerated method: Zenject.SignalBus.SubscribeInternal
void Zenject::SignalBus::SubscribeInternal(::Zenject::BindingId signalId, ::Il2CppObject* token, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::SubscribeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubscribeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalId), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalId, token, callback);
}
// Autogenerated method: Zenject.SignalBus.SubscribeInternal
void Zenject::SignalBus::SubscribeInternal(::Zenject::SignalSubscriptionId id, ::System::Action_1<::Il2CppObject*>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::SubscribeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubscribeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, id, callback);
}
// Autogenerated method: Zenject.SignalBus.DeclareSignal
void Zenject::SignalBus::DeclareSignal(::System::Type* signalType, ::Il2CppObject* identifier, ::System::Nullable_1<::Zenject::SignalMissingHandlerResponses> missingHandlerResponse, ::System::Nullable_1<bool> forceAsync, ::System::Nullable_1<int> asyncTickPriority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::DeclareSignal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeclareSignal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(missingHandlerResponse), ::il2cpp_utils::ExtractType(forceAsync), ::il2cpp_utils::ExtractType(asyncTickPriority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signalType, identifier, missingHandlerResponse, forceAsync, asyncTickPriority);
}
// Autogenerated method: Zenject.SignalBus.GetDeclaration
::Zenject::SignalDeclaration* Zenject::SignalBus::GetDeclaration(::System::Type* signalType, ::Il2CppObject* identifier, bool requireDeclaration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::GetDeclaration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalType), ::il2cpp_utils::ExtractType(identifier), ::il2cpp_utils::ExtractType(requireDeclaration)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalDeclaration*, false>(this, ___internal__method, signalType, identifier, requireDeclaration);
}
// Autogenerated method: Zenject.SignalBus.GetDeclaration
::Zenject::SignalDeclaration* Zenject::SignalBus::GetDeclaration(::Zenject::BindingId signalId, bool requireDeclaration) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::GetDeclaration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signalId), ::il2cpp_utils::ExtractType(requireDeclaration)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalDeclaration*, false>(this, ___internal__method, signalId, requireDeclaration);
}
// Autogenerated method: Zenject.SignalBus.__zenCreate
::Il2CppObject* Zenject::SignalBus::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalBus", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalBus.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalBus::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalBus", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalBus/Zenject.<>c
#include "Zenject/SignalBus_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.SignalDeclaration
#include "Zenject/SignalDeclaration.hpp"
// Including type: Zenject.SignalSubscription
#include "Zenject/SignalSubscription.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.SignalBus/Zenject.<>c <>9
::Zenject::SignalBus::$$c* Zenject::SignalBus::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::SignalBus::$$c*>("Zenject", "SignalBus/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.SignalBus/Zenject.<>c <>9
void Zenject::SignalBus::$$c::_set_$$9(::Zenject::SignalBus::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SignalBus/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.SignalDeclaration,Zenject.BindingId> <>9__7_0
::System::Func_2<::Zenject::SignalDeclaration*, ::Zenject::BindingId>* Zenject::SignalBus::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::SignalDeclaration*, ::Zenject::BindingId>*>("Zenject", "SignalBus/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.SignalDeclaration,Zenject.BindingId> <>9__7_0
void Zenject::SignalBus::$$c::_set_$$9__7_0(::System::Func_2<::Zenject::SignalDeclaration*, ::Zenject::BindingId>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SignalBus/<>c", "<>9__7_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.SignalDeclaration,Zenject.SignalDeclaration> <>9__7_1
::System::Func_2<::Zenject::SignalDeclaration*, ::Zenject::SignalDeclaration*>* Zenject::SignalBus::$$c::_get_$$9__7_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_get_$$9__7_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::SignalDeclaration*, ::Zenject::SignalDeclaration*>*>("Zenject", "SignalBus/<>c", "<>9__7_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.SignalDeclaration,Zenject.SignalDeclaration> <>9__7_1
void Zenject::SignalBus::$$c::_set_$$9__7_1(::System::Func_2<::Zenject::SignalDeclaration*, ::Zenject::SignalDeclaration*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_set_$$9__7_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SignalBus/<>c", "<>9__7_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.SignalSubscription,System.String> <>9__12_0
::System::Func_2<::Zenject::SignalSubscription*, ::StringW>* Zenject::SignalBus::$$c::_get_$$9__12_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_get_$$9__12_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::SignalSubscription*, ::StringW>*>("Zenject", "SignalBus/<>c", "<>9__12_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.SignalSubscription,System.String> <>9__12_0
void Zenject::SignalBus::$$c::_set_$$9__12_0(::System::Func_2<::Zenject::SignalSubscription*, ::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::_set_$$9__12_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SignalBus/<>c", "<>9__12_0", value)));
}
// Autogenerated method: Zenject.SignalBus/Zenject.<>c..cctor
void Zenject::SignalBus::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalBus/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.SignalBus/Zenject.<>c.<.ctor>b__7_0
::Zenject::BindingId Zenject::SignalBus::$$c::$_ctor$b__7_0(::Zenject::SignalDeclaration* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::<.ctor>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindingId, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.SignalBus/Zenject.<>c.<.ctor>b__7_1
::Zenject::SignalDeclaration* Zenject::SignalBus::$$c::$_ctor$b__7_1(::Zenject::SignalDeclaration* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::<.ctor>b__7_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__7_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalDeclaration*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.SignalBus/Zenject.<>c.<LateDispose>b__12_0
::StringW Zenject::SignalBus::$$c::$LateDispose$b__12_0(::Zenject::SignalSubscription* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::<LateDispose>b__12_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LateDispose>b__12_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.SignalBus/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::SignalBus::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalBus/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalBus/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalBus::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBus::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalBus/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalBusInstaller
#include "Zenject/SignalBusInstaller.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SignalBusInstaller.__zenCreate
::Il2CppObject* Zenject::SignalBusInstaller::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBusInstaller::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalBusInstaller", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalBusInstaller.InstallBindings
void Zenject::SignalBusInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBusInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalBusInstaller.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalBusInstaller::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalBusInstaller::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalBusInstaller", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SignalDeclarationAsyncInitializer
#include "Zenject/SignalDeclarationAsyncInitializer.hpp"
// Including type: Zenject.LazyInject`1
#include "Zenject/LazyInject_1.hpp"
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.SignalDeclaration
#include "Zenject/SignalDeclaration.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.LazyInject`1<Zenject.TickableManager> _tickManager
[[deprecated("Use field access instead!")]] ::Zenject::LazyInject_1<::Zenject::TickableManager*>*& Zenject::SignalDeclarationAsyncInitializer::dyn__tickManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationAsyncInitializer::dyn__tickManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickManager"))->offset;
  return *reinterpret_cast<::Zenject::LazyInject_1<::Zenject::TickableManager*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.SignalDeclaration> _declarations
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::SignalDeclaration*>*& Zenject::SignalDeclarationAsyncInitializer::dyn__declarations() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationAsyncInitializer::dyn__declarations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_declarations"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::SignalDeclaration*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SignalDeclarationAsyncInitializer.Initialize
void Zenject::SignalDeclarationAsyncInitializer::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationAsyncInitializer::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SignalDeclarationAsyncInitializer.__zenCreate
::Il2CppObject* Zenject::SignalDeclarationAsyncInitializer::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationAsyncInitializer::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalDeclarationAsyncInitializer", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SignalDeclarationAsyncInitializer.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SignalDeclarationAsyncInitializer::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SignalDeclarationAsyncInitializer::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SignalDeclarationAsyncInitializer", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ScopeTypes
#include "Zenject/ScopeTypes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ScopeTypes Unset
::Zenject::ScopeTypes Zenject::ScopeTypes::_get_Unset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ScopeTypes::_get_Unset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::ScopeTypes>("Zenject", "ScopeTypes", "Unset"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ScopeTypes Unset
void Zenject::ScopeTypes::_set_Unset(::Zenject::ScopeTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ScopeTypes::_set_Unset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ScopeTypes", "Unset", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ScopeTypes Transient
::Zenject::ScopeTypes Zenject::ScopeTypes::_get_Transient() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ScopeTypes::_get_Transient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::ScopeTypes>("Zenject", "ScopeTypes", "Transient"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ScopeTypes Transient
void Zenject::ScopeTypes::_set_Transient(::Zenject::ScopeTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ScopeTypes::_set_Transient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ScopeTypes", "Transient", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ScopeTypes Singleton
::Zenject::ScopeTypes Zenject::ScopeTypes::_get_Singleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ScopeTypes::_get_Singleton");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::ScopeTypes>("Zenject", "ScopeTypes", "Singleton"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ScopeTypes Singleton
void Zenject::ScopeTypes::_set_Singleton(::Zenject::ScopeTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ScopeTypes::_set_Singleton");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ScopeTypes", "Singleton", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Zenject::ScopeTypes::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ScopeTypes::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ToChoices
#include "Zenject/ToChoices.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ToChoices Self
::Zenject::ToChoices Zenject::ToChoices::_get_Self() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ToChoices::_get_Self");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::ToChoices>("Zenject", "ToChoices", "Self"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ToChoices Self
void Zenject::ToChoices::_set_Self(::Zenject::ToChoices value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ToChoices::_set_Self");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ToChoices", "Self", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ToChoices Concrete
::Zenject::ToChoices Zenject::ToChoices::_get_Concrete() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ToChoices::_get_Concrete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::ToChoices>("Zenject", "ToChoices", "Concrete"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ToChoices Concrete
void Zenject::ToChoices::_set_Concrete(::Zenject::ToChoices value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ToChoices::_set_Concrete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ToChoices", "Concrete", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Zenject::ToChoices::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ToChoices::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InvalidBindResponses
#include "Zenject/InvalidBindResponses.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.InvalidBindResponses Assert
::Zenject::InvalidBindResponses Zenject::InvalidBindResponses::_get_Assert() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InvalidBindResponses::_get_Assert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::InvalidBindResponses>("Zenject", "InvalidBindResponses", "Assert"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InvalidBindResponses Assert
void Zenject::InvalidBindResponses::_set_Assert(::Zenject::InvalidBindResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InvalidBindResponses::_set_Assert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InvalidBindResponses", "Assert", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InvalidBindResponses Skip
::Zenject::InvalidBindResponses Zenject::InvalidBindResponses::_get_Skip() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InvalidBindResponses::_get_Skip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::InvalidBindResponses>("Zenject", "InvalidBindResponses", "Skip"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InvalidBindResponses Skip
void Zenject::InvalidBindResponses::_set_Skip(::Zenject::InvalidBindResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InvalidBindResponses::_set_Skip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InvalidBindResponses", "Skip", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Zenject::InvalidBindResponses::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InvalidBindResponses::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods None
::Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "None"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods None
void Zenject::BindingInheritanceMethods::_set_None(::Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods CopyIntoAll
::Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_CopyIntoAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_get_CopyIntoAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "CopyIntoAll"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods CopyIntoAll
void Zenject::BindingInheritanceMethods::_set_CopyIntoAll(::Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_set_CopyIntoAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "CopyIntoAll", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods CopyDirectOnly
::Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_CopyDirectOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_get_CopyDirectOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "CopyDirectOnly"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods CopyDirectOnly
void Zenject::BindingInheritanceMethods::_set_CopyDirectOnly(::Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_set_CopyDirectOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "CopyDirectOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods MoveIntoAll
::Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_MoveIntoAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_get_MoveIntoAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "MoveIntoAll"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods MoveIntoAll
void Zenject::BindingInheritanceMethods::_set_MoveIntoAll(::Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_set_MoveIntoAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "MoveIntoAll", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods MoveDirectOnly
::Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_MoveDirectOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_get_MoveDirectOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "MoveDirectOnly"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods MoveDirectOnly
void Zenject::BindingInheritanceMethods::_set_MoveDirectOnly(::Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::_set_MoveDirectOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "MoveDirectOnly", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Zenject::BindingInheritanceMethods::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindingInheritanceMethods::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Boolean MarkAsCreationBinding
[[deprecated("Use field access instead!")]] bool& Zenject::BindInfo::dyn_MarkAsCreationBinding() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_MarkAsCreationBinding");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MarkAsCreationBinding"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean MarkAsUniqueSingleton
[[deprecated("Use field access instead!")]] bool& Zenject::BindInfo::dyn_MarkAsUniqueSingleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_MarkAsUniqueSingleton");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MarkAsUniqueSingleton"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object ConcreteIdentifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::BindInfo::dyn_ConcreteIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_ConcreteIdentifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConcreteIdentifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean SaveProvider
[[deprecated("Use field access instead!")]] bool& Zenject::BindInfo::dyn_SaveProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_SaveProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SaveProvider"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean OnlyBindIfNotBound
[[deprecated("Use field access instead!")]] bool& Zenject::BindInfo::dyn_OnlyBindIfNotBound() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_OnlyBindIfNotBound");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OnlyBindIfNotBound"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean RequireExplicitScope
[[deprecated("Use field access instead!")]] bool& Zenject::BindInfo::dyn_RequireExplicitScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_RequireExplicitScope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RequireExplicitScope"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object Identifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::BindInfo::dyn_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_Identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Identifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<System.Type> ContractTypes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Type*>*& Zenject::BindInfo::dyn_ContractTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_ContractTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ContractTypes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Type*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.BindingInheritanceMethods BindingInheritanceMethod
[[deprecated("Use field access instead!")]] ::Zenject::BindingInheritanceMethods& Zenject::BindInfo::dyn_BindingInheritanceMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_BindingInheritanceMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BindingInheritanceMethod"))->offset;
  return *reinterpret_cast<::Zenject::BindingInheritanceMethods*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.InvalidBindResponses InvalidBindResponse
[[deprecated("Use field access instead!")]] ::Zenject::InvalidBindResponses& Zenject::BindInfo::dyn_InvalidBindResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_InvalidBindResponse");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InvalidBindResponse"))->offset;
  return *reinterpret_cast<::Zenject::InvalidBindResponses*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean NonLazy
[[deprecated("Use field access instead!")]] bool& Zenject::BindInfo::dyn_NonLazy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_NonLazy");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NonLazy"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.BindingCondition Condition
[[deprecated("Use field access instead!")]] ::Zenject::BindingCondition*& Zenject::BindInfo::dyn_Condition() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_Condition");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Condition"))->offset;
  return *reinterpret_cast<::Zenject::BindingCondition**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.ToChoices ToChoice
[[deprecated("Use field access instead!")]] ::Zenject::ToChoices& Zenject::BindInfo::dyn_ToChoice() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_ToChoice");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ToChoice"))->offset;
  return *reinterpret_cast<::Zenject::ToChoices*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String ContextInfo
[[deprecated("Use field access instead!")]] ::StringW& Zenject::BindInfo::dyn_ContextInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_ContextInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ContextInfo"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<System.Type> ToTypes
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Type*>*& Zenject::BindInfo::dyn_ToTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_ToTypes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ToTypes"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Type*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.ScopeTypes Scope
[[deprecated("Use field access instead!")]] ::Zenject::ScopeTypes& Zenject::BindInfo::dyn_Scope() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_Scope");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Scope"))->offset;
  return *reinterpret_cast<::Zenject::ScopeTypes*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> Arguments
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::BindInfo::dyn_Arguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_Arguments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Arguments"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Action`2<Zenject.InjectContext,System.Object> InstantiatedCallback
[[deprecated("Use field access instead!")]] ::System::Action_2<::Zenject::InjectContext*, ::Il2CppObject*>*& Zenject::BindInfo::dyn_InstantiatedCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::dyn_InstantiatedCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InstantiatedCallback"))->offset;
  return *reinterpret_cast<::System::Action_2<::Zenject::InjectContext*, ::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.BindInfo.Dispose
void Zenject::BindInfo::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindInfo.SetContextInfo
void Zenject::BindInfo::SetContextInfo(::StringW contextInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::SetContextInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContextInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contextInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, contextInfo);
}
// Autogenerated method: Zenject.BindInfo.Reset
void Zenject::BindInfo::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindInfo::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.BindStatement
#include "Zenject/BindStatement.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IBindingFinalizer
#include "Zenject/IBindingFinalizer.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<System.IDisposable> _disposables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::IDisposable*>*& Zenject::BindStatement::dyn__disposables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::dyn__disposables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::IDisposable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.IBindingFinalizer _bindingFinalizer
[[deprecated("Use field access instead!")]] ::Zenject::IBindingFinalizer*& Zenject::BindStatement::dyn__bindingFinalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::dyn__bindingFinalizer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindingFinalizer"))->offset;
  return *reinterpret_cast<::Zenject::IBindingFinalizer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.BindStatement.get_BindingInheritanceMethod
::Zenject::BindingInheritanceMethods Zenject::BindStatement::get_BindingInheritanceMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::get_BindingInheritanceMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindingInheritanceMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.get_HasFinalizer
bool Zenject::BindStatement::get_HasFinalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::get_HasFinalizer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasFinalizer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.SetFinalizer
void Zenject::BindStatement::SetFinalizer(::Zenject::IBindingFinalizer* bindingFinalizer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::SetFinalizer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFinalizer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingFinalizer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindingFinalizer);
}
// Autogenerated method: Zenject.BindStatement.AssertHasFinalizer
void Zenject::BindStatement::AssertHasFinalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::AssertHasFinalizer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssertHasFinalizer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.AddDisposable
void Zenject::BindStatement::AddDisposable(::System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::AddDisposable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDisposable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposable);
}
// Autogenerated method: Zenject.BindStatement.SpawnBindInfo
::Zenject::BindInfo* Zenject::BindStatement::SpawnBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::SpawnBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.FinalizeBinding
void Zenject::BindStatement::FinalizeBinding(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::FinalizeBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.BindStatement.Reset
void Zenject::BindStatement::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.Dispose
void Zenject::BindStatement::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindStatement::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryBindInfo
#include "Zenject/FactoryBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Type <FactoryType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::FactoryBindInfo::dyn_$FactoryType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::dyn_$FactoryType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FactoryType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Func`2<Zenject.DiContainer,Zenject.IProvider> <ProviderFunc>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>*& Zenject::FactoryBindInfo::dyn_$ProviderFunc$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::dyn_$ProviderFunc$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ProviderFunc>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.TypeValuePair> <Arguments>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::FactoryBindInfo::dyn_$Arguments$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::dyn_$Arguments$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Arguments>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.FactoryBindInfo.get_FactoryType
::System::Type* Zenject::FactoryBindInfo::get_FactoryType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::get_FactoryType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FactoryType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryBindInfo.set_FactoryType
void Zenject::FactoryBindInfo::set_FactoryType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::set_FactoryType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FactoryType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryBindInfo.get_ProviderFunc
::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>* Zenject::FactoryBindInfo::get_ProviderFunc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::get_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryBindInfo.set_ProviderFunc
void Zenject::FactoryBindInfo::set_ProviderFunc(::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::set_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryBindInfo.get_Arguments
::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* Zenject::FactoryBindInfo::get_Arguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::get_Arguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Arguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryBindInfo.set_Arguments
void Zenject::FactoryBindInfo::set_Arguments(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryBindInfo::set_Arguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Arguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.GameObjectCreationParameters Default
::Zenject::GameObjectCreationParameters* Zenject::GameObjectCreationParameters::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::GameObjectCreationParameters*>("Zenject", "GameObjectCreationParameters", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.GameObjectCreationParameters Default
void Zenject::GameObjectCreationParameters::_set_Default(::Zenject::GameObjectCreationParameters* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "GameObjectCreationParameters", "Default", value));
}
// Autogenerated instance field getter
// Get instance field: private System.String <Name>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& Zenject::GameObjectCreationParameters::dyn_$Name$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::dyn_$Name$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <GroupName>k__BackingField
[[deprecated("Use field access instead!")]] ::StringW& Zenject::GameObjectCreationParameters::dyn_$GroupName$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::dyn_$GroupName$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<GroupName>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.Transform <ParentTransform>k__BackingField
[[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& Zenject::GameObjectCreationParameters::dyn_$ParentTransform$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::dyn_$ParentTransform$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParentTransform>k__BackingField"))->offset;
  return *reinterpret_cast<::UnityEngine::Transform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Func`2<Zenject.InjectContext,UnityEngine.Transform> <ParentTransformGetter>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Func_2<::Zenject::InjectContext*, ::UnityEngine::Transform*>*& Zenject::GameObjectCreationParameters::dyn_$ParentTransformGetter$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::dyn_$ParentTransformGetter$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ParentTransformGetter>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Func_2<::Zenject::InjectContext*, ::UnityEngine::Transform*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<UnityEngine.Vector3> <Position>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Vector3>& Zenject::GameObjectCreationParameters::dyn_$Position$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::dyn_$Position$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Position>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Nullable`1<UnityEngine.Quaternion> <Rotation>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Quaternion>& Zenject::GameObjectCreationParameters::dyn_$Rotation$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::dyn_$Rotation$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Rotation>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Nullable_1<::UnityEngine::Quaternion>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_Name
::StringW Zenject::GameObjectCreationParameters::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_Name
void Zenject::GameObjectCreationParameters::set_Name(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_GroupName
::StringW Zenject::GameObjectCreationParameters::get_GroupName() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::get_GroupName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GroupName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_GroupName
void Zenject::GameObjectCreationParameters::set_GroupName(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::set_GroupName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_GroupName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_ParentTransform
::UnityEngine::Transform* Zenject::GameObjectCreationParameters::get_ParentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::get_ParentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_ParentTransform
void Zenject::GameObjectCreationParameters::set_ParentTransform(::UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::set_ParentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_ParentTransformGetter
::System::Func_2<::Zenject::InjectContext*, ::UnityEngine::Transform*>* Zenject::GameObjectCreationParameters::get_ParentTransformGetter() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::get_ParentTransformGetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentTransformGetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<::Zenject::InjectContext*, ::UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_ParentTransformGetter
void Zenject::GameObjectCreationParameters::set_ParentTransformGetter(::System::Func_2<::Zenject::InjectContext*, ::UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::set_ParentTransformGetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentTransformGetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_Position
::System::Nullable_1<::UnityEngine::Vector3> Zenject::GameObjectCreationParameters::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::get_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::UnityEngine::Vector3>, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_Position
void Zenject::GameObjectCreationParameters::set_Position(::System::Nullable_1<::UnityEngine::Vector3> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::set_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_Rotation
::System::Nullable_1<::UnityEngine::Quaternion> Zenject::GameObjectCreationParameters::get_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::get_Rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::UnityEngine::Quaternion>, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_Rotation
void Zenject::GameObjectCreationParameters::set_Rotation(::System::Nullable_1<::UnityEngine::Quaternion> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::set_Rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters..cctor
void Zenject::GameObjectCreationParameters::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GameObjectCreationParameters", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.Equals
bool Zenject::GameObjectCreationParameters::Equals(::Zenject::GameObjectCreationParameters* that) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(that)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, that);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.GetHashCode
int Zenject::GameObjectCreationParameters::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.Equals
bool Zenject::GameObjectCreationParameters::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.op_Equality
bool Zenject::operator ==(::Zenject::GameObjectCreationParameters* left, ::Zenject::GameObjectCreationParameters& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GameObjectCreationParameters", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, &right);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.op_Inequality
bool Zenject::operator !=(::Zenject::GameObjectCreationParameters* left, ::Zenject::GameObjectCreationParameters& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GameObjectCreationParameters::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GameObjectCreationParameters", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, left, &right);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolExpandMethods
#include "Zenject/PoolExpandMethods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.PoolExpandMethods OneAtATime
::Zenject::PoolExpandMethods Zenject::PoolExpandMethods::_get_OneAtATime() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolExpandMethods::_get_OneAtATime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::PoolExpandMethods>("Zenject", "PoolExpandMethods", "OneAtATime"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.PoolExpandMethods OneAtATime
void Zenject::PoolExpandMethods::_set_OneAtATime(::Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolExpandMethods::_set_OneAtATime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "PoolExpandMethods", "OneAtATime", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.PoolExpandMethods Double
::Zenject::PoolExpandMethods Zenject::PoolExpandMethods::_get_Double() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolExpandMethods::_get_Double");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::PoolExpandMethods>("Zenject", "PoolExpandMethods", "Double"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.PoolExpandMethods Double
void Zenject::PoolExpandMethods::_set_Double(::Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolExpandMethods::_set_Double");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "PoolExpandMethods", "Double", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.PoolExpandMethods Disabled
::Zenject::PoolExpandMethods Zenject::PoolExpandMethods::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolExpandMethods::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Zenject::PoolExpandMethods>("Zenject", "PoolExpandMethods", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.PoolExpandMethods Disabled
void Zenject::PoolExpandMethods::_set_Disabled(::Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolExpandMethods::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "PoolExpandMethods", "Disabled", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
[[deprecated("Use field access instead!")]] int& Zenject::PoolExpandMethods::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolExpandMethods::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.MemoryPoolBindInfo
#include "Zenject/MemoryPoolBindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Boolean <ShowExpandWarning>k__BackingField
[[deprecated("Use field access instead!")]] bool& Zenject::MemoryPoolBindInfo::dyn_$ShowExpandWarning$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::dyn_$ShowExpandWarning$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ShowExpandWarning>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.PoolExpandMethods <ExpandMethod>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::PoolExpandMethods& Zenject::MemoryPoolBindInfo::dyn_$ExpandMethod$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::dyn_$ExpandMethod$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ExpandMethod>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::PoolExpandMethods*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <InitialSize>k__BackingField
[[deprecated("Use field access instead!")]] int& Zenject::MemoryPoolBindInfo::dyn_$InitialSize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::dyn_$InitialSize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InitialSize>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <MaxSize>k__BackingField
[[deprecated("Use field access instead!")]] int& Zenject::MemoryPoolBindInfo::dyn_$MaxSize$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::dyn_$MaxSize$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MaxSize>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.get_ShowExpandWarning
bool Zenject::MemoryPoolBindInfo::get_ShowExpandWarning() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::get_ShowExpandWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShowExpandWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.set_ShowExpandWarning
void Zenject::MemoryPoolBindInfo::set_ShowExpandWarning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::set_ShowExpandWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ShowExpandWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.get_ExpandMethod
::Zenject::PoolExpandMethods Zenject::MemoryPoolBindInfo::get_ExpandMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::get_ExpandMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExpandMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::PoolExpandMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.set_ExpandMethod
void Zenject::MemoryPoolBindInfo::set_ExpandMethod(::Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::set_ExpandMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExpandMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.get_InitialSize
int Zenject::MemoryPoolBindInfo::get_InitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::get_InitialSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InitialSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.set_InitialSize
void Zenject::MemoryPoolBindInfo::set_InitialSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::set_InitialSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InitialSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.get_MaxSize
int Zenject::MemoryPoolBindInfo::get_MaxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::get_MaxSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.set_MaxSize
void Zenject::MemoryPoolBindInfo::set_MaxSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MemoryPoolBindInfo::set_MaxSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MaxSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ArgConditionCopyNonLazyBinder.WithArguments
::Zenject::InstantiateCallbackConditionCopyNonLazyBinder* Zenject::ArgConditionCopyNonLazyBinder::WithArguments(::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ArgConditionCopyNonLazyBinder::WithArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InstantiateCallbackConditionCopyNonLazyBinder*, false>(this, ___internal__method, args);
}
// Autogenerated method: Zenject.ArgConditionCopyNonLazyBinder.WithArgumentsExplicit
::Zenject::InstantiateCallbackConditionCopyNonLazyBinder* Zenject::ArgConditionCopyNonLazyBinder::WithArgumentsExplicit(::System::Collections::Generic::IEnumerable_1<::Zenject::TypeValuePair>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ArgConditionCopyNonLazyBinder::WithArgumentsExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithArgumentsExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InstantiateCallbackConditionCopyNonLazyBinder*, false>(this, ___internal__method, extraArgs);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConcreteBinderNonGeneric
#include "Zenject/ConcreteBinderNonGeneric.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConventionSelectTypesBinder
#include "Zenject/ConventionSelectTypesBinder.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindStatement
#include "Zenject/BindStatement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.ToSelf
::Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::ToSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConcreteBinderNonGeneric::ToSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::FromBinderNonGeneric*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.To
::Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::To(::ArrayW<::System::Type*> concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConcreteBinderNonGeneric::To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, concreteTypes);
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.To
::Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::To(::System::Collections::Generic::IEnumerable_1<::System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConcreteBinderNonGeneric::To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteTypes)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, concreteTypes);
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.To
::Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::To(::System::Action_1<::Zenject::ConventionSelectTypesBinder*>* generator) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConcreteBinderNonGeneric::To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(generator)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, generator);
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.<ToSelf>b__1_0
::Zenject::IProvider* Zenject::ConcreteBinderNonGeneric::$ToSelf$b__1_0(::Zenject::DiContainer* container, ::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConcreteBinderNonGeneric::<ToSelf>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToSelf>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::IProvider*, false>(this, ___internal__method, container, type);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConcreteIdBinderNonGeneric
#include "Zenject/ConcreteIdBinderNonGeneric.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindStatement
#include "Zenject/BindStatement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConcreteIdBinderNonGeneric.WithId
::Zenject::ConcreteBinderNonGeneric* Zenject::ConcreteIdBinderNonGeneric::WithId(::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConcreteIdBinderNonGeneric::WithId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConcreteBinderNonGeneric*, false>(this, ___internal__method, identifier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/ConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConcreteIdArgConditionCopyNonLazyBinder.WithConcreteId
::Zenject::ArgConditionCopyNonLazyBinder* Zenject::ConcreteIdArgConditionCopyNonLazyBinder::WithConcreteId(::Il2CppObject* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConcreteIdArgConditionCopyNonLazyBinder::WithConcreteId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithConcreteId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, id);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder
#include "Zenject/ConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass2_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass2_0.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_0.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_1
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_1.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__4`1
#include "Zenject/ConditionCopyNonLazyBinder_--c__4_1.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__5`1
#include "Zenject/ConditionCopyNonLazyBinder_--c__5_1.hpp"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.When
::Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::When(::Zenject::BindingCondition* condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::When");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "When", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, condition);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.WhenInjectedIntoInstance
::Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedIntoInstance(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::WhenInjectedIntoInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WhenInjectedIntoInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.WhenInjectedInto
::Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto(::ArrayW<::System::Type*> targets) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WhenInjectedInto", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targets)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, targets);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass2_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass2_0.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Object instance
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::dyn_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::dyn_instance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instance"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass2_0.<WhenInjectedIntoInstance>b__0
bool Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::$WhenInjectedIntoInstance$b__0(::Zenject::InjectContext* r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::<WhenInjectedIntoInstance>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WhenInjectedIntoInstance>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, r);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass2_0.__zenCreate
::Il2CppObject* Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConditionCopyNonLazyBinder/<>c__DisplayClass2_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass2_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConditionCopyNonLazyBinder/<>c__DisplayClass2_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type[] targets
[[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::dyn_targets() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::dyn_targets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targets"))->offset;
  return *reinterpret_cast<::ArrayW<::System::Type*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_0.<WhenInjectedInto>b__0
bool Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::$WhenInjectedInto$b__0(::Zenject::InjectContext* r) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::<WhenInjectedInto>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WhenInjectedInto>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, r);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_0.__zenCreate
::Il2CppObject* Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConditionCopyNonLazyBinder/<>c__DisplayClass3_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConditionCopyNonLazyBinder/<>c__DisplayClass3_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_1
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.InjectContext r
[[deprecated("Use field access instead!")]] ::Zenject::InjectContext*& Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::dyn_r() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::dyn_r");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "r"))->offset;
  return *reinterpret_cast<::Zenject::InjectContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_1.<WhenInjectedInto>b__1
bool Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::$WhenInjectedInto$b__1(::System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::<WhenInjectedInto>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WhenInjectedInto>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_1.__zenCreate
::Il2CppObject* Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConditionCopyNonLazyBinder/<>c__DisplayClass3_1", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/Zenject.<>c__DisplayClass3_1.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConditionCopyNonLazyBinder/<>c__DisplayClass3_1", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionAssemblySelectionBinder
#include "Zenject/ConventionAssemblySelectionBinder.hpp"
// Including type: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c
#include "Zenject/ConventionAssemblySelectionBinder_--c.hpp"
// Including type: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c__DisplayClass12_0
#include "Zenject/ConventionAssemblySelectionBinder_--c__DisplayClass12_0.hpp"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.ConventionBindInfo <BindInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::ConventionBindInfo*& Zenject::ConventionAssemblySelectionBinder::dyn_$BindInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::dyn_$BindInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BindInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::ConventionBindInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.get_BindInfo
::Zenject::ConventionBindInfo* Zenject::ConventionAssemblySelectionBinder::get_BindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::get_BindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.set_BindInfo
void Zenject::ConventionAssemblySelectionBinder::set_BindInfo(::Zenject::ConventionBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::set_BindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAllAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAllAssemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromAllAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAllAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesContaining
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(::ArrayW<::System::Type*> types) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembliesContaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, types);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesContaining
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(::System::Collections::Generic::IEnumerable_1<::System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembliesContaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, types);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromThisAssembly
void Zenject::ConventionAssemblySelectionBinder::FromThisAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromThisAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromThisAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembly
void Zenject::ConventionAssemblySelectionBinder::FromAssembly(::System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(::ArrayW<::System::Reflection::Assembly*> assemblies) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assemblies)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, assemblies);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(::System::Collections::Generic::IEnumerable_1<::System::Reflection::Assembly*>* assemblies) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assemblies)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, assemblies);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesWhere
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesWhere(::System::Func_2<::System::Reflection::Assembly*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::FromAssembliesWhere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembliesWhere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, predicate);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c
#include "Zenject/ConventionAssemblySelectionBinder_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.ConventionAssemblySelectionBinder/Zenject.<>c <>9
::Zenject::ConventionAssemblySelectionBinder::$$c* Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::ConventionAssemblySelectionBinder::$$c*>("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.ConventionAssemblySelectionBinder/Zenject.<>c <>9
void Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9(::Zenject::ConventionAssemblySelectionBinder::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Reflection.Assembly> <>9__8_0
::System::Func_2<::System::Type*, ::System::Reflection::Assembly*>* Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Type*, ::System::Reflection::Assembly*>*>("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Reflection.Assembly> <>9__8_0
void Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9__8_0(::System::Func_2<::System::Type*, ::System::Reflection::Assembly*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9__8_0", value)));
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c..cctor
void Zenject::ConventionAssemblySelectionBinder::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionAssemblySelectionBinder/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c.<FromAssembliesContaining>b__8_0
::System::Reflection::Assembly* Zenject::ConventionAssemblySelectionBinder::$$c::$FromAssembliesContaining$b__8_0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::<FromAssembliesContaining>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromAssembliesContaining>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Reflection::Assembly*, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::ConventionAssemblySelectionBinder::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionAssemblySelectionBinder/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionAssemblySelectionBinder::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionAssemblySelectionBinder/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c__DisplayClass12_0
#include "Zenject/ConventionAssemblySelectionBinder_--c__DisplayClass12_0.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.IEnumerable`1<System.Reflection.Assembly> assemblies
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::System::Reflection::Assembly*>*& Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::dyn_assemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::dyn_assemblies");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assemblies"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::System::Reflection::Assembly*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c__DisplayClass12_0.<FromAssemblies>b__0
bool Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::$FromAssemblies$b__0(::System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::<FromAssemblies>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromAssemblies>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c__DisplayClass12_0.__zenCreate
::Il2CppObject* Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionAssemblySelectionBinder/<>c__DisplayClass12_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/Zenject.<>c__DisplayClass12_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionAssemblySelectionBinder/<>c__DisplayClass12_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
// Including type: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass6_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass6_0.hpp"
// Including type: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass7_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass7_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Reflection.Assembly,System.Type[]> _assemblyTypeCache
::System::Collections::Generic::Dictionary_2<::System::Reflection::Assembly*, ::ArrayW<::System::Type*>>* Zenject::ConventionBindInfo::_get__assemblyTypeCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::_get__assemblyTypeCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Collections::Generic::Dictionary_2<::System::Reflection::Assembly*, ::ArrayW<::System::Type*>>*>("Zenject", "ConventionBindInfo", "_assemblyTypeCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Reflection.Assembly,System.Type[]> _assemblyTypeCache
void Zenject::ConventionBindInfo::_set__assemblyTypeCache(::System::Collections::Generic::Dictionary_2<::System::Reflection::Assembly*, ::ArrayW<::System::Type*>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::_set__assemblyTypeCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ConventionBindInfo", "_assemblyTypeCache", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<System.Func`2<System.Type,System.Boolean>> _typeFilters
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Func_2<::System::Type*, bool>*>*& Zenject::ConventionBindInfo::dyn__typeFilters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::dyn__typeFilters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_typeFilters"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Func_2<::System::Type*, bool>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<System.Func`2<System.Reflection.Assembly,System.Boolean>> _assemblyFilters
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Func_2<::System::Reflection::Assembly*, bool>*>*& Zenject::ConventionBindInfo::dyn__assemblyFilters() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::dyn__assemblyFilters");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_assemblyFilters"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::System::Func_2<::System::Reflection::Assembly*, bool>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionBindInfo..cctor
void Zenject::ConventionBindInfo::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionBindInfo", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ConventionBindInfo.AddAssemblyFilter
void Zenject::ConventionBindInfo::AddAssemblyFilter(::System::Func_2<::System::Reflection::Assembly*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::AddAssemblyFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAssemblyFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionBindInfo.AddTypeFilter
void Zenject::ConventionBindInfo::AddTypeFilter(::System::Func_2<::System::Type*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::AddTypeFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTypeFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionBindInfo.GetAllAssemblies
::System::Collections::Generic::IEnumerable_1<::System::Reflection::Assembly*>* Zenject::ConventionBindInfo::GetAllAssemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::GetAllAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::System::Reflection::Assembly*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionBindInfo.ShouldIncludeAssembly
bool Zenject::ConventionBindInfo::ShouldIncludeAssembly(::System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::ShouldIncludeAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldIncludeAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionBindInfo.ShouldIncludeType
bool Zenject::ConventionBindInfo::ShouldIncludeType(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::ShouldIncludeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldIncludeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.ConventionBindInfo.GetTypes
::ArrayW<::System::Type*> Zenject::ConventionBindInfo::GetTypes(::System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::GetTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<::System::Type*>, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionBindInfo.ResolveTypes
::System::Collections::Generic::List_1<::System::Type*>* Zenject::ConventionBindInfo::ResolveTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::ResolveTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<::System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionBindInfo.<ResolveTypes>b__9_0
::System::Collections::Generic::IEnumerable_1<::System::Type*>* Zenject::ConventionBindInfo::$ResolveTypes$b__9_0(::System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::<ResolveTypes>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResolveTypes>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::System::Type*>*, false>(this, ___internal__method, assembly);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass6_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass6_0.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Reflection.Assembly assembly
[[deprecated("Use field access instead!")]] ::System::Reflection::Assembly*& Zenject::ConventionBindInfo::$$c__DisplayClass6_0::dyn_assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass6_0::dyn_assembly");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "assembly"))->offset;
  return *reinterpret_cast<::System::Reflection::Assembly**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass6_0.<ShouldIncludeAssembly>b__0
bool Zenject::ConventionBindInfo::$$c__DisplayClass6_0::$ShouldIncludeAssembly$b__0(::System::Func_2<::System::Reflection::Assembly*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass6_0::<ShouldIncludeAssembly>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ShouldIncludeAssembly>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass6_0.__zenCreate
::Il2CppObject* Zenject::ConventionBindInfo::$$c__DisplayClass6_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass6_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionBindInfo/<>c__DisplayClass6_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass6_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionBindInfo::$$c__DisplayClass6_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass6_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionBindInfo/<>c__DisplayClass6_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass7_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass7_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type type
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::ConventionBindInfo::$$c__DisplayClass7_0::dyn_type() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass7_0::dyn_type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "type"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass7_0.<ShouldIncludeType>b__0
bool Zenject::ConventionBindInfo::$$c__DisplayClass7_0::$ShouldIncludeType$b__0(::System::Func_2<::System::Type*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass7_0::<ShouldIncludeType>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ShouldIncludeType>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass7_0.__zenCreate
::Il2CppObject* Zenject::ConventionBindInfo::$$c__DisplayClass7_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass7_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionBindInfo/<>c__DisplayClass7_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionBindInfo/Zenject.<>c__DisplayClass7_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionBindInfo::$$c__DisplayClass7_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionBindInfo::$$c__DisplayClass7_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionBindInfo/<>c__DisplayClass7_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionFilterTypesBinder
#include "Zenject/ConventionFilterTypesBinder.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass2_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass2_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass4_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass4_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass6_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass6_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass8_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass8_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass9_0`1
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass9_0_1.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_1
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_1.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass14_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass14_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass15_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass15_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass18_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass18_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Text.RegularExpressions.RegexOptions
#include "System/Text/RegularExpressions/RegexOptions.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder.DerivingFromOrEqual
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::DerivingFromOrEqual(::System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::DerivingFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DerivingFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, parentType);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.DerivingFrom
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::DerivingFrom(::System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::DerivingFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DerivingFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, parentType);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithAttribute
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithAttribute(::System::Type* attribute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::WithAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attribute)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, attribute);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithoutAttribute
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithoutAttribute(::System::Type* attribute) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::WithoutAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithoutAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attribute)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, attribute);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.Where
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::Where(::System::Func_2<::System::Type*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::Where");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Where", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.InNamespace
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::InNamespace(::StringW ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::InNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, ns);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.InNamespaces
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::InNamespaces(::ArrayW<::StringW> namespaces) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::InNamespaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InNamespaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(namespaces)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, namespaces);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.InNamespaces
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::InNamespaces(::System::Collections::Generic::IEnumerable_1<::StringW>* namespaces) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::InNamespaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InNamespaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(namespaces)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, namespaces);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithSuffix
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithSuffix(::StringW suffix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::WithSuffix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithSuffix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(suffix)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, suffix);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithPrefix
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithPrefix(::StringW prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::WithPrefix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, prefix);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.MatchingRegex
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::MatchingRegex(::StringW pattern) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::MatchingRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatchingRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pattern)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, pattern);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.MatchingRegex
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::MatchingRegex(::StringW pattern, ::System::Text::RegularExpressions::RegexOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::MatchingRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatchingRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pattern), ::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, pattern, options);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.MatchingRegex
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::MatchingRegex(::System::Text::RegularExpressions::Regex* regex) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::MatchingRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatchingRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(regex)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, regex);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.IsInNamespace
bool Zenject::ConventionFilterTypesBinder::IsInNamespace(::System::Type* type, ::StringW requiredNs) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::IsInNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder", "IsInNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(requiredNs)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, type, requiredNs);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass2_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass2_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type parentType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::dyn_parentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::dyn_parentType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass2_0.<DerivingFromOrEqual>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::$DerivingFromOrEqual$b__0(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::<DerivingFromOrEqual>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DerivingFromOrEqual>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass2_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass2_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass2_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass2_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass4_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass4_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type parentType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::dyn_parentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::dyn_parentType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "parentType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass4_0.<DerivingFrom>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::$DerivingFrom$b__0(::System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::<DerivingFrom>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DerivingFrom>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass4_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass4_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass4_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass4_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass6_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass6_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type attribute
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::dyn_attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::dyn_attribute");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attribute"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass6_0.<WithAttribute>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::$WithAttribute$b__0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::<WithAttribute>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithAttribute>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass6_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass6_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass6_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass6_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass8_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass8_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type attribute
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::dyn_attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::dyn_attribute");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "attribute"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass8_0.<WithoutAttribute>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::$WithoutAttribute$b__0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::<WithoutAttribute>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithoutAttribute>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass8_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass8_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass8_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass8_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_0.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.IEnumerable`1<System.String> namespaces
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::StringW>*& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::dyn_namespaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::dyn_namespaces");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "namespaces"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_0.<InNamespaces>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::$InNamespaces$b__0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::<InNamespaces>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InNamespaces>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass13_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass13_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_1
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Type t
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::dyn_t() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::dyn_t");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "t"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_1.<InNamespaces>b__1
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::$InNamespaces$b__1(::StringW n) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::<InNamespaces>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InNamespaces>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, n);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_1.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass13_1", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass13_1.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass13_1", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass14_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass14_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String suffix
[[deprecated("Use field access instead!")]] ::StringW& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::dyn_suffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::dyn_suffix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "suffix"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass14_0.<WithSuffix>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::$WithSuffix$b__0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::<WithSuffix>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithSuffix>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass14_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass14_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass14_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass14_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass15_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass15_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String prefix
[[deprecated("Use field access instead!")]] ::StringW& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::dyn_prefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::dyn_prefix");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prefix"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass15_0.<WithPrefix>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::$WithPrefix$b__0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::<WithPrefix>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithPrefix>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass15_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass15_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass15_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass15_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass18_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass18_0.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Text.RegularExpressions.Regex regex
[[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Regex*& Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::dyn_regex() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::dyn_regex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "regex"))->offset;
  return *reinterpret_cast<::System::Text::RegularExpressions::Regex**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass18_0.<MatchingRegex>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::$MatchingRegex$b__0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::<MatchingRegex>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<MatchingRegex>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass18_0.__zenCreate
::Il2CppObject* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass18_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder/Zenject.<>c__DisplayClass18_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder/<>c__DisplayClass18_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionSelectTypesBinder
#include "Zenject/ConventionSelectTypesBinder.hpp"
// Including type: Zenject.ConventionSelectTypesBinder/Zenject.<>c
#include "Zenject/ConventionSelectTypesBinder_--c.hpp"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
// Including type: Zenject.ConventionFilterTypesBinder
#include "Zenject/ConventionFilterTypesBinder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ConventionBindInfo _bindInfo
[[deprecated("Use field access instead!")]] ::Zenject::ConventionBindInfo*& Zenject::ConventionSelectTypesBinder::dyn__bindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::dyn__bindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindInfo"))->offset;
  return *reinterpret_cast<::Zenject::ConventionBindInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.CreateNextBinder
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::CreateNextBinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::CreateNextBinder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNextBinder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllTypes
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::AllTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllClasses
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllClasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::AllClasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllClasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllNonAbstractClasses
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllNonAbstractClasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::AllNonAbstractClasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllNonAbstractClasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllAbstractClasses
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllAbstractClasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::AllAbstractClasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllAbstractClasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllInterfaces
::Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllInterfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::AllInterfaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllInterfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionSelectTypesBinder/Zenject.<>c
#include "Zenject/ConventionSelectTypesBinder_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.ConventionSelectTypesBinder/Zenject.<>c <>9
::Zenject::ConventionSelectTypesBinder::$$c* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::ConventionSelectTypesBinder::$$c*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.ConventionSelectTypesBinder/Zenject.<>c <>9
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9(::Zenject::ConventionSelectTypesBinder::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__4_0
::System::Func_2<::System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__4_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__4_0(::System::Func_2<::System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__4_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__5_0
::System::Func_2<::System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__5_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__5_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__5_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__5_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__5_0(::System::Func_2<::System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__5_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__5_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__6_0
::System::Func_2<::System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__6_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__6_0(::System::Func_2<::System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__6_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__7_0
::System::Func_2<::System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__7_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__7_0(::System::Func_2<::System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__7_0", value)));
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/Zenject.<>c..cctor
void Zenject::ConventionSelectTypesBinder::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionSelectTypesBinder/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/Zenject.<>c.<AllClasses>b__4_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllClasses$b__4_0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::<AllClasses>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllClasses>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/Zenject.<>c.<AllNonAbstractClasses>b__5_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllNonAbstractClasses$b__5_0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::<AllNonAbstractClasses>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllNonAbstractClasses>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/Zenject.<>c.<AllAbstractClasses>b__6_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllAbstractClasses$b__6_0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::<AllAbstractClasses>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAbstractClasses>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/Zenject.<>c.<AllInterfaces>b__7_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllInterfaces$b__7_0(::System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::<AllInterfaces>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllInterfaces>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::ConventionSelectTypesBinder::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionSelectTypesBinder/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ConventionSelectTypesBinder::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ConventionSelectTypesBinder::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionSelectTypesBinder/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.CopyNonLazyBinder
#include "Zenject/CopyNonLazyBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.BindInfo> _secondaryBindInfos
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::BindInfo*>*& Zenject::CopyNonLazyBinder::dyn__secondaryBindInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::CopyNonLazyBinder::dyn__secondaryBindInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_secondaryBindInfos"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::BindInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.AddSecondaryCopyBindInfo
void Zenject::CopyNonLazyBinder::AddSecondaryCopyBindInfo(::Zenject::BindInfo* bindInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::CopyNonLazyBinder::AddSecondaryCopyBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddSecondaryCopyBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bindInfo);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.CopyIntoAllSubContainers
::Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::CopyIntoAllSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::CopyNonLazyBinder::CopyIntoAllSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyIntoAllSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.CopyIntoDirectSubContainers
::Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::CopyIntoDirectSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::CopyNonLazyBinder::CopyIntoDirectSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyIntoDirectSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.MoveIntoAllSubContainers
::Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::MoveIntoAllSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::CopyNonLazyBinder::MoveIntoAllSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveIntoAllSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.MoveIntoDirectSubContainers
::Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::MoveIntoDirectSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::CopyNonLazyBinder::MoveIntoDirectSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveIntoDirectSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.SetInheritanceMethod
void Zenject::CopyNonLazyBinder::SetInheritanceMethod(::Zenject::BindingInheritanceMethods method) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::CopyNonLazyBinder::SetInheritanceMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.SubContainerCreatorBindInfo <SubContainerCreatorBindInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::SubContainerCreatorBindInfo*& Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::dyn_$SubContainerCreatorBindInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::dyn_$SubContainerCreatorBindInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SubContainerCreatorBindInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::SubContainerCreatorBindInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.get_SubContainerCreatorBindInfo
::Zenject::SubContainerCreatorBindInfo* Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::get_SubContainerCreatorBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::get_SubContainerCreatorBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SubContainerCreatorBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SubContainerCreatorBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.set_SubContainerCreatorBindInfo
void Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::set_SubContainerCreatorBindInfo(::Zenject::SubContainerCreatorBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::set_SubContainerCreatorBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SubContainerCreatorBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.WithDefaultGameObjectParent
::Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithDefaultGameObjectParent(::StringW defaultParentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithDefaultGameObjectParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithDefaultGameObjectParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultParentName)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, defaultParentName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder0Extensions
#include "Zenject/FactoryFromBinder0Extensions.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/Zenject.<>c__DisplayClass0_0`2
#include "Zenject/FactoryFromBinder0Extensions_--c__DisplayClass0_0_2.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/Zenject.<>c__1`1
#include "Zenject/FactoryFromBinder0Extensions_--c__1_1.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/Zenject.<>c__3`1
#include "Zenject/FactoryFromBinder0Extensions_--c__3_1.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/Zenject.<>c__5`2
#include "Zenject/FactoryFromBinder0Extensions_--c__5_2.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/Zenject.<>c__DisplayClass6_0`1
#include "Zenject/FactoryFromBinder0Extensions_--c__DisplayClass6_0_1.hpp"
// Including type: Zenject.IPoolable`1
#include "Zenject/IPoolable_1.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPool`2
#include "Zenject/MemoryPool_2.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`1
#include "Zenject/FactoryFromBinder_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`1
#include "Zenject/IFactory_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder1Extensions
#include "Zenject/FactoryFromBinder1Extensions.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/Zenject.<>c__DisplayClass0_0`2
#include "Zenject/FactoryFromBinder1Extensions_--c__DisplayClass0_0_2.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/Zenject.<>c__1`2
#include "Zenject/FactoryFromBinder1Extensions_--c__1_2.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/Zenject.<>c__3`2
#include "Zenject/FactoryFromBinder1Extensions_--c__3_2.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/Zenject.<>c__5`3
#include "Zenject/FactoryFromBinder1Extensions_--c__5_3.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/Zenject.<>c__DisplayClass6_0`3
#include "Zenject/FactoryFromBinder1Extensions_--c__DisplayClass6_0_3.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`2
#include "Zenject/FactoryFromBinder_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`2
#include "Zenject/IFactory_2.hpp"
// Including type: Zenject.IPoolable`2
#include "Zenject/IPoolable_2.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`3
#include "Zenject/MemoryPool_3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder2Extensions
#include "Zenject/FactoryFromBinder2Extensions.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/Zenject.<>c__DisplayClass0_0`3
#include "Zenject/FactoryFromBinder2Extensions_--c__DisplayClass0_0_3.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/Zenject.<>c__1`3
#include "Zenject/FactoryFromBinder2Extensions_--c__1_3.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/Zenject.<>c__3`3
#include "Zenject/FactoryFromBinder2Extensions_--c__3_3.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/Zenject.<>c__5`4
#include "Zenject/FactoryFromBinder2Extensions_--c__5_4.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/Zenject.<>c__DisplayClass6_0`4
#include "Zenject/FactoryFromBinder2Extensions_--c__DisplayClass6_0_4.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`3
#include "Zenject/FactoryFromBinder_3.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`3
#include "Zenject/IFactory_3.hpp"
// Including type: Zenject.IPoolable`3
#include "Zenject/IPoolable_3.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`4
#include "Zenject/MemoryPool_4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder3Extensions
#include "Zenject/FactoryFromBinder3Extensions.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/Zenject.<>c__DisplayClass0_0`4
#include "Zenject/FactoryFromBinder3Extensions_--c__DisplayClass0_0_4.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/Zenject.<>c__1`4
#include "Zenject/FactoryFromBinder3Extensions_--c__1_4.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/Zenject.<>c__3`4
#include "Zenject/FactoryFromBinder3Extensions_--c__3_4.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/Zenject.<>c__5`5
#include "Zenject/FactoryFromBinder3Extensions_--c__5_5.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/Zenject.<>c__DisplayClass6_0`5
#include "Zenject/FactoryFromBinder3Extensions_--c__DisplayClass6_0_5.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`4
#include "Zenject/FactoryFromBinder_4.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`4
#include "Zenject/IFactory_4.hpp"
// Including type: Zenject.IPoolable`4
#include "Zenject/IPoolable_4.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`5
#include "Zenject/MemoryPool_5.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder4Extensions
#include "Zenject/FactoryFromBinder4Extensions.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/Zenject.<>c__DisplayClass0_0`5
#include "Zenject/FactoryFromBinder4Extensions_--c__DisplayClass0_0_5.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/Zenject.<>c__1`5
#include "Zenject/FactoryFromBinder4Extensions_--c__1_5.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/Zenject.<>c__3`5
#include "Zenject/FactoryFromBinder4Extensions_--c__3_5.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/Zenject.<>c__5`6
#include "Zenject/FactoryFromBinder4Extensions_--c__5_6.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/Zenject.<>c__DisplayClass6_0`6
#include "Zenject/FactoryFromBinder4Extensions_--c__DisplayClass6_0_6.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`5
#include "Zenject/FactoryFromBinder_5.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`5
#include "Zenject/IFactory_5.hpp"
// Including type: Zenject.IPoolable`5
#include "Zenject/IPoolable_5.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`6
#include "Zenject/MemoryPool_6.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder5Extensions
#include "Zenject/FactoryFromBinder5Extensions.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/Zenject.<>c__DisplayClass0_0`6
#include "Zenject/FactoryFromBinder5Extensions_--c__DisplayClass0_0_6.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/Zenject.<>c__1`6
#include "Zenject/FactoryFromBinder5Extensions_--c__1_6.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/Zenject.<>c__3`6
#include "Zenject/FactoryFromBinder5Extensions_--c__3_6.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/Zenject.<>c__5`7
#include "Zenject/FactoryFromBinder5Extensions_--c__5_7.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/Zenject.<>c__DisplayClass6_0`7
#include "Zenject/FactoryFromBinder5Extensions_--c__DisplayClass6_0_7.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`6
#include "Zenject/FactoryFromBinder_6.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`6
#include "Zenject/IFactory_6.hpp"
// Including type: Zenject.IPoolable`6
#include "Zenject/IPoolable_6.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`7
#include "Zenject/MemoryPool_7.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder6Extensions
#include "Zenject/FactoryFromBinder6Extensions.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/Zenject.<>c__DisplayClass0_0`7
#include "Zenject/FactoryFromBinder6Extensions_--c__DisplayClass0_0_7.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/Zenject.<>c__1`7
#include "Zenject/FactoryFromBinder6Extensions_--c__1_7.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/Zenject.<>c__3`7
#include "Zenject/FactoryFromBinder6Extensions_--c__3_7.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/Zenject.<>c__5`8
#include "Zenject/FactoryFromBinder6Extensions_--c__5_8.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/Zenject.<>c__DisplayClass6_0`8
#include "Zenject/FactoryFromBinder6Extensions_--c__DisplayClass6_0_8.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`7
#include "Zenject/FactoryFromBinder_7.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`7
#include "Zenject/IFactory_7.hpp"
// Including type: Zenject.IPoolable`7
#include "Zenject/IPoolable_7.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`8
#include "Zenject/MemoryPool_8.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinderUntyped
#include "Zenject/FactoryFromBinderUntyped.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.FactoryBindInfo
#include "Zenject/FactoryBindInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase
#include "Zenject/FactoryFromBinderBase.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17
#include "Zenject/FactoryFromBinderBase_-get_AllParentTypes-d__17.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass20_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass20_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass21_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass21_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass23_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass23_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass24_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass24_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass26_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass26_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass27_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass27_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass28_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass28_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass29_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass29_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass30_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass30_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass31_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass31_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass32_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass32_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass33_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass33_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass34_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass34_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.FactoryBindInfo
#include "Zenject/FactoryBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.DiContainer <BindContainer>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::FactoryFromBinderBase::dyn_$BindContainer$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::dyn_$BindContainer$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<BindContainer>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.FactoryBindInfo <FactoryBindInfo>k__BackingField
[[deprecated("Use field access instead!")]] ::Zenject::FactoryBindInfo*& Zenject::FactoryFromBinderBase::dyn_$FactoryBindInfo$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::dyn_$FactoryBindInfo$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<FactoryBindInfo>k__BackingField"))->offset;
  return *reinterpret_cast<::Zenject::FactoryBindInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <ContractType>k__BackingField
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::FactoryFromBinderBase::dyn_$ContractType$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::dyn_$ContractType$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ContractType>k__BackingField"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_BindContainer
::Zenject::DiContainer* Zenject::FactoryFromBinderBase::get_BindContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::get_BindContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_BindContainer
void Zenject::FactoryFromBinderBase::set_BindContainer(::Zenject::DiContainer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::set_BindContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BindContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_FactoryBindInfo
::Zenject::FactoryBindInfo* Zenject::FactoryFromBinderBase::get_FactoryBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::get_FactoryBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FactoryBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::FactoryBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_FactoryBindInfo
void Zenject::FactoryFromBinderBase::set_FactoryBindInfo(::Zenject::FactoryBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::set_FactoryBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FactoryBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_ProviderFunc
::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>* Zenject::FactoryFromBinderBase::get_ProviderFunc() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::get_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_ProviderFunc
void Zenject::FactoryFromBinderBase::set_ProviderFunc(::System::Func_2<::Zenject::DiContainer*, ::Zenject::IProvider*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::set_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_ContractType
::System::Type* Zenject::FactoryFromBinderBase::get_ContractType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::get_ContractType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContractType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_ContractType
void Zenject::FactoryFromBinderBase::set_ContractType(::System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::set_ContractType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ContractType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_AllParentTypes
::System::Collections::Generic::IEnumerable_1<::System::Type*>* Zenject::FactoryFromBinderBase::get_AllParentTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::get_AllParentTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllParentTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNew
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNew() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromResolve
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromResolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromInstance
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromInstance(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromResolve
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromResolve(::Il2CppObject* subIdentifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subIdentifier)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, subIdentifier);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentOn
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentOn(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentOn
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentOn(::System::Func_2<::Zenject::InjectContext*, ::UnityEngine::GameObject*>* gameObjectGetter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObjectGetter)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObjectGetter);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentOnRoot
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentOnRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromComponentOnRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentOnRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOn
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOn(::UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromNewComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOn
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOn(::System::Func_2<::Zenject::InjectContext*, ::UnityEngine::GameObject*>* gameObjectGetter) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromNewComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObjectGetter)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObjectGetter);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOnNewPrefab
::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefab(::UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOnNewPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, prefab);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentInNewPrefab
::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentInNewPrefab(::UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromComponentInNewPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentInNewPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, prefab);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentInNewPrefabResource
::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentInNewPrefabResource(::StringW resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromComponentInNewPrefabResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentInNewPrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOnNewPrefabResource
::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefabResource(::StringW resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefabResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOnNewPrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewScriptableObjectResource
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewScriptableObjectResource(::StringW resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromNewScriptableObjectResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromScriptableObjectResource
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromScriptableObjectResource(::StringW resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromScriptableObjectResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromResource
::Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromResource(::StringW resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::FromResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.<.ctor>b__0_0
::Zenject::IProvider* Zenject::FactoryFromBinderBase::$_ctor$b__0_0(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::<.ctor>b__0_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::IProvider*, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.<FromComponentOnRoot>b__25_0
::UnityEngine::GameObject* Zenject::FactoryFromBinderBase::$FromComponentOnRoot$b__25_0(::Zenject::InjectContext* ctx) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::<FromComponentOnRoot>b__25_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromComponentOnRoot>b__25_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx)})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, ctx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17
#include "Zenject/FactoryFromBinderBase_-get_AllParentTypes-d__17.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>1__state
[[deprecated("Use field access instead!")]] int& Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$1__state() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$1__state");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Type <>2__current
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$2__current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$2__current");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <>l__initialThreadId
[[deprecated("Use field access instead!")]] int& Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$l__initialThreadId() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$l__initialThreadId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.FactoryFromBinderBase <>4__this
[[deprecated("Use field access instead!")]] ::Zenject::FactoryFromBinderBase*& Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Zenject::FactoryFromBinderBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1/System.Collections.Generic.Enumerator<System.Type> <>7__wrap1
[[deprecated("Use field access instead!")]] typename ::System::Collections::Generic::List_1<::System::Type*>::Enumerator& Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$7__wrap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::dyn_$$7__wrap1");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>7__wrap1"))->offset;
  return *reinterpret_cast<typename ::System::Collections::Generic::List_1<::System::Type*>::Enumerator*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.System.Collections.Generic.IEnumerator<System.Type>.get_Current
::System::Type* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerator$System_Type$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.Generic.IEnumerator<System.Type>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.System.IDisposable.Dispose
void Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.MoveNext
bool Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.<>m__Finally1
void Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.System.Collections.IEnumerator.Reset
void Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
::System::Collections::Generic::IEnumerator_1<::System::Type*>* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.System.Collections.IEnumerable.GetEnumerator
::System::Collections::IEnumerator* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.__zenCreate
::Il2CppObject* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FactoryFromBinderBase/<get_AllParentTypes>d__17", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<get_AllParentTypes>d__17.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FactoryFromBinderBase/<get_AllParentTypes>d__17", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass20_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass20_0.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.FactoryFromBinderBase <>4__this
[[deprecated("Use field access instead!")]] ::Zenject::FactoryFromBinderBase*& Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Zenject::FactoryFromBinderBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object instance
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::dyn_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::dyn_instance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instance"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass20_0.<FromInstance>b__0
::Zenject::IProvider* Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::$FromInstance$b__0(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::<FromInstance>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromInstance>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::IProvider*, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass20_0.__zenCreate
::Il2CppObject* Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FactoryFromBinderBase/<>c__DisplayClass20_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass20_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FactoryFromBinderBase/<>c__DisplayClass20_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass21_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass21_0.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.FactoryFromBinderBase <>4__this
[[deprecated("Use field access instead!")]] ::Zenject::FactoryFromBinderBase*& Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Zenject::FactoryFromBinderBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object subIdentifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::dyn_subIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::dyn_subIdentifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "subIdentifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass21_0.<FromResolve>b__0
::Zenject::IProvider* Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::$FromResolve$b__0(::Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::<FromResolve>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromResolve>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::IProvider*, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass21_0.__zenCreate
::Il2CppObject* Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FactoryFromBinderBase/<>c__DisplayClass21_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/Zenject.<>c__DisplayClass21_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FactoryFromBinderBase/<>c__DisplayClass21_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
