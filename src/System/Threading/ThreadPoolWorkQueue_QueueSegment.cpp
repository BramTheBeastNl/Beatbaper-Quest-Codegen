// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPoolWorkQueue/QueueSegment
#include "System/Threading/ThreadPoolWorkQueue_QueueSegment.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.GetIndexes
void System::Threading::ThreadPoolWorkQueue::QueueSegment::GetIndexes(int& upper, int& lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("QueueSegment").WithContext("GetIndexes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "GetIndexes", {}, ::il2cpp_utils::ExtractTypes(upper, lower)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, upper, lower);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.CompareExchangeIndexes
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::CompareExchangeIndexes(int& prevUpper, int newUpper, int& prevLower, int newLower) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("QueueSegment").WithContext("CompareExchangeIndexes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "CompareExchangeIndexes", {}, ::il2cpp_utils::ExtractTypes(prevUpper, newUpper, prevLower, newLower)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, prevUpper, newUpper, prevLower, newLower);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.IsUsedUp
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::IsUsedUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("QueueSegment").WithContext("IsUsedUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "IsUsedUp", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.TryEnqueue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryEnqueue(System::Threading::IThreadPoolWorkItem* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("QueueSegment").WithContext("TryEnqueue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryEnqueue", {}, ::il2cpp_utils::ExtractTypes(node)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, node);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment.TryDequeue
bool System::Threading::ThreadPoolWorkQueue::QueueSegment::TryDequeue(System::Threading::IThreadPoolWorkItem*& node) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("QueueSegment").WithContext("TryDequeue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryDequeue", {}, ::il2cpp_utils::ExtractTypes(node)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, node);
}
// Autogenerated method: System.Threading.ThreadPoolWorkQueue/QueueSegment..ctor
System::Threading::ThreadPoolWorkQueue::QueueSegment* System::Threading::ThreadPoolWorkQueue::QueueSegment::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("QueueSegment").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<ThreadPoolWorkQueue::QueueSegment*>());
}
