// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPool
#include "System/Threading/ThreadPool.hpp"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, System::Threading::StackCrawlMark& stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<System::Threading::RegisteredWaitHandle*>(), "RegisterWaitForSingleObject", {}, ::il2cpp_utils::ExtractTypes(waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce, stackMark, compressStack)));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce, stackMark, compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, System::TimeSpan timeout, bool executeOnlyOnce) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("RegisterWaitForSingleObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<System::Threading::RegisteredWaitHandle*>(), "RegisterWaitForSingleObject", {}, ::il2cpp_utils::ExtractTypes(waitObject, callBack, state, timeout, executeOnlyOnce)));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::RegisteredWaitHandle*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, waitObject, callBack, state, timeout, executeOnlyOnce);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "QueueUserWorkItem", {}, ::il2cpp_utils::ExtractTypes(callBack, state)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(System::Threading::WaitCallback* callBack) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("QueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "QueueUserWorkItem", {}, ::il2cpp_utils::ExtractTypes(callBack)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueUserWorkItem
bool System::Threading::ThreadPool::UnsafeQueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("UnsafeQueueUserWorkItem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "UnsafeQueueUserWorkItem", {}, ::il2cpp_utils::ExtractTypes(callBack, state)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack, state);
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItemHelper
bool System::Threading::ThreadPool::QueueUserWorkItemHelper(System::Threading::WaitCallback* callBack, ::Il2CppObject* state, System::Threading::StackCrawlMark& stackMark, bool compressStack) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("QueueUserWorkItemHelper");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "QueueUserWorkItemHelper", {}, ::il2cpp_utils::ExtractTypes(callBack, state, stackMark, compressStack)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, callBack, state, stackMark, compressStack);
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueCustomWorkItem
void System::Threading::ThreadPool::UnsafeQueueCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem, bool forceGlobal) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("UnsafeQueueCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<void>(), "UnsafeQueueCustomWorkItem", {}, ::il2cpp_utils::ExtractTypes(workItem, forceGlobal)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, workItem, forceGlobal);
}
// Autogenerated method: System.Threading.ThreadPool.TryPopCustomWorkItem
bool System::Threading::ThreadPool::TryPopCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("TryPopCustomWorkItem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "TryPopCustomWorkItem", {}, ::il2cpp_utils::ExtractTypes(workItem)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, workItem);
}
// Autogenerated method: System.Threading.ThreadPool.RequestWorkerThread
bool System::Threading::ThreadPool::RequestWorkerThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("RequestWorkerThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "RequestWorkerThread", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.EnsureVMInitialized
void System::Threading::ThreadPool::EnsureVMInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("EnsureVMInitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<void>(), "EnsureVMInitialized", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemComplete
bool System::Threading::ThreadPool::NotifyWorkItemComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("NotifyWorkItemComplete");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "NotifyWorkItemComplete", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.ReportThreadStatus
void System::Threading::ThreadPool::ReportThreadStatus(bool isWorking) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("ReportThreadStatus");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<void>(), "ReportThreadStatus", {}, ::il2cpp_utils::ExtractTypes(isWorking)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, isWorking);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgress
void System::Threading::ThreadPool::NotifyWorkItemProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("NotifyWorkItemProgress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<void>(), "NotifyWorkItemProgress", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgressNative
void System::Threading::ThreadPool::NotifyWorkItemProgressNative() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("NotifyWorkItemProgressNative");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<void>(), "NotifyWorkItemProgressNative", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.IsThreadPoolHosted
bool System::Threading::ThreadPool::IsThreadPoolHosted() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("IsThreadPoolHosted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<bool>(), "IsThreadPoolHosted", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Threading.ThreadPool.InitializeVMTp
void System::Threading::ThreadPool::InitializeVMTp(bool& enableWorkerTracking) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("ThreadPool").WithContext("InitializeVMTp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "ThreadPool", il2cpp_utils::NoArgClass<void>(), "InitializeVMTp", {}, ::il2cpp_utils::ExtractTypes(enableWorkerTracking)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, enableWorkerTracking);
}
