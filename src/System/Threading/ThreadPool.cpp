// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.ThreadPool
#include "System/Threading/ThreadPool.hpp"
// Including type: System.Threading.RegisteredWaitHandle
#include "System/Threading/RegisteredWaitHandle.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.WaitOrTimerCallback
#include "System/Threading/WaitOrTimerCallback.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Threading.WaitCallback
#include "System/Threading/WaitCallback.hpp"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, System::Threading::StackCrawlMark& stackMark, bool compressStack) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::RegisteredWaitHandle*>("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce, stackMark, compressStack));
}
// Autogenerated method: System.Threading.ThreadPool.RegisterWaitForSingleObject
System::Threading::RegisteredWaitHandle* System::Threading::ThreadPool::RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, System::TimeSpan timeout, bool executeOnlyOnce) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::RegisteredWaitHandle*>("System.Threading", "ThreadPool", "RegisterWaitForSingleObject", waitObject, callBack, state, timeout, executeOnlyOnce));
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "QueueUserWorkItem", callBack, state));
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItem
bool System::Threading::ThreadPool::QueueUserWorkItem(System::Threading::WaitCallback* callBack) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "QueueUserWorkItem", callBack));
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueUserWorkItem
bool System::Threading::ThreadPool::UnsafeQueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "UnsafeQueueUserWorkItem", callBack, state));
}
// Autogenerated method: System.Threading.ThreadPool.QueueUserWorkItemHelper
bool System::Threading::ThreadPool::QueueUserWorkItemHelper(System::Threading::WaitCallback* callBack, ::Il2CppObject* state, System::Threading::StackCrawlMark& stackMark, bool compressStack) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "QueueUserWorkItemHelper", callBack, state, stackMark, compressStack));
}
// Autogenerated method: System.Threading.ThreadPool.UnsafeQueueCustomWorkItem
void System::Threading::ThreadPool::UnsafeQueueCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem, bool forceGlobal) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "ThreadPool", "UnsafeQueueCustomWorkItem", workItem, forceGlobal));
}
// Autogenerated method: System.Threading.ThreadPool.TryPopCustomWorkItem
bool System::Threading::ThreadPool::TryPopCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "TryPopCustomWorkItem", workItem));
}
// Autogenerated method: System.Threading.ThreadPool.RequestWorkerThread
bool System::Threading::ThreadPool::RequestWorkerThread() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "RequestWorkerThread"));
}
// Autogenerated method: System.Threading.ThreadPool.EnsureVMInitialized
void System::Threading::ThreadPool::EnsureVMInitialized() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "ThreadPool", "EnsureVMInitialized"));
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemComplete
bool System::Threading::ThreadPool::NotifyWorkItemComplete() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "NotifyWorkItemComplete"));
}
// Autogenerated method: System.Threading.ThreadPool.ReportThreadStatus
void System::Threading::ThreadPool::ReportThreadStatus(bool isWorking) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "ThreadPool", "ReportThreadStatus", isWorking));
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgress
void System::Threading::ThreadPool::NotifyWorkItemProgress() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgress"));
}
// Autogenerated method: System.Threading.ThreadPool.NotifyWorkItemProgressNative
void System::Threading::ThreadPool::NotifyWorkItemProgressNative() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "ThreadPool", "NotifyWorkItemProgressNative"));
}
// Autogenerated method: System.Threading.ThreadPool.IsThreadPoolHosted
bool System::Threading::ThreadPool::IsThreadPoolHosted() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ThreadPool", "IsThreadPoolHosted"));
}
// Autogenerated method: System.Threading.ThreadPool.InitializeVMTp
void System::Threading::ThreadPool::InitializeVMTp(bool& enableWorkerTracking) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "ThreadPool", "InitializeVMTp", enableWorkerTracking));
}
