// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.CancellationTokenRegistration
#include "System/Threading/CancellationTokenRegistration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_ActionToActionObjShunt
System::Action_1<::Il2CppObject*>* System::Threading::CancellationToken::_get_s_ActionToActionObjShunt() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::Il2CppObject*>*>("System.Threading", "CancellationToken", "s_ActionToActionObjShunt"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_ActionToActionObjShunt
void System::Threading::CancellationToken::_set_s_ActionToActionObjShunt(System::Action_1<::Il2CppObject*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "CancellationToken", "s_ActionToActionObjShunt", value));
}
// Autogenerated method: System.Threading.CancellationToken.get_None
System::Threading::CancellationToken System::Threading::CancellationToken::get_None() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::CancellationToken>("System.Threading", "CancellationToken", "get_None"));
}
// Autogenerated method: System.Threading.CancellationToken.get_IsCancellationRequested
bool System::Threading::CancellationToken::get_IsCancellationRequested() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "get_IsCancellationRequested"));
}
// Autogenerated method: System.Threading.CancellationToken.get_CanBeCanceled
bool System::Threading::CancellationToken::get_CanBeCanceled() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "get_CanBeCanceled"));
}
// Autogenerated method: System.Threading.CancellationToken..ctor
// ABORTED elsewhere.  System::Threading::CancellationToken::CancellationToken(System::Threading::CancellationTokenSource* source)
// Autogenerated method: System.Threading.CancellationToken.ActionToActionObjShunt
void System::Threading::CancellationToken::ActionToActionObjShunt(::Il2CppObject* obj) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "CancellationToken", "ActionToActionObjShunt", obj));
}
// Autogenerated method: System.Threading.CancellationToken.InternalRegisterWithoutEC
System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::InternalRegisterWithoutEC(System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::CancellationTokenRegistration>(*this, "InternalRegisterWithoutEC", callback, state));
}
// Autogenerated method: System.Threading.CancellationToken.Register
System::Threading::CancellationTokenRegistration System::Threading::CancellationToken::Register(System::Action_1<::Il2CppObject*>* callback, ::Il2CppObject* state, bool useSynchronizationContext, bool useExecutionContext) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::CancellationTokenRegistration>(*this, "Register", callback, state, useSynchronizationContext, useExecutionContext));
}
// Autogenerated method: System.Threading.CancellationToken.Equals
bool System::Threading::CancellationToken::Equals(System::Threading::CancellationToken other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: System.Threading.CancellationToken.ThrowIfCancellationRequested
void System::Threading::CancellationToken::ThrowIfCancellationRequested() {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "ThrowIfCancellationRequested"));
}
// Autogenerated method: System.Threading.CancellationToken.ThrowIfSourceDisposed
void System::Threading::CancellationToken::ThrowIfSourceDisposed() {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "ThrowIfSourceDisposed"));
}
// Autogenerated method: System.Threading.CancellationToken.ThrowOperationCanceledException
void System::Threading::CancellationToken::ThrowOperationCanceledException() {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "ThrowOperationCanceledException"));
}
// Autogenerated method: System.Threading.CancellationToken.ThrowObjectDisposedException
void System::Threading::CancellationToken::ThrowObjectDisposedException() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "CancellationToken", "ThrowObjectDisposedException"));
}
// Autogenerated method: System.Threading.CancellationToken..cctor
void System::Threading::CancellationToken::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "CancellationToken", ".cctor"));
}
// Autogenerated method: System.Threading.CancellationToken.Equals
bool System::Threading::CancellationToken::Equals(::Il2CppObject* other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: System.Threading.CancellationToken.GetHashCode
int System::Threading::CancellationToken::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "GetHashCode"));
}
// Autogenerated method: System.Threading.CancellationToken.op_Equality
bool System::Threading::operator ==(const System::Threading::CancellationToken& left, const System::Threading::CancellationToken& right) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "CancellationToken", "op_Equality", left, right));
}
// Autogenerated method: System.Threading.CancellationToken.op_Inequality
bool System::Threading::operator !=(const System::Threading::CancellationToken& left, const System::Threading::CancellationToken& right) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "CancellationToken", "op_Inequality", left, right));
}
