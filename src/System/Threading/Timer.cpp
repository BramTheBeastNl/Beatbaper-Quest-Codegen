// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.Threading.Timer/TimerComparer
#include "System/Threading/Timer_TimerComparer.hpp"
// Including type: System.Threading.Timer/Scheduler
#include "System/Threading/Timer_Scheduler.hpp"
// Including type: System.Threading.TimerCallback
#include "System/Threading/TimerCallback.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Timer/Scheduler scheduler
System::Threading::Timer::Scheduler* System::Threading::Timer::_get_scheduler() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Timer::Scheduler*>("System.Threading", "Timer", "scheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Timer/Scheduler scheduler
void System::Threading::Timer::_set_scheduler(System::Threading::Timer::Scheduler* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "scheduler", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 MaxValue
int64_t System::Threading::Timer::_get_MaxValue() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Threading", "Timer", "MaxValue"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 MaxValue
void System::Threading::Timer::_set_MaxValue(int64_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "Timer", "MaxValue", value));
}
// Autogenerated method: System.Threading.Timer..ctor
System::Threading::Timer* System::Threading::Timer::New_ctor(System::Threading::TimerCallback* callback, ::CsObject* state, int dueTime, int period) {
  return (Timer*)THROW_UNLESS(il2cpp_utils::New("System.Threading", "Timer", callback, state, dueTime, period));
}
// Autogenerated method: System.Threading.Timer..ctor
System::Threading::Timer* System::Threading::Timer::New_ctor(System::Threading::TimerCallback* callback, ::CsObject* state, System::TimeSpan dueTime, System::TimeSpan period) {
  return (Timer*)THROW_UNLESS(il2cpp_utils::New("System.Threading", "Timer", callback, state, dueTime, period));
}
// Autogenerated method: System.Threading.Timer.Init
void System::Threading::Timer::Init(System::Threading::TimerCallback* callback, ::CsObject* state, int64_t dueTime, int64_t period) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", callback, state, dueTime, period));
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(System::TimeSpan dueTime, System::TimeSpan period) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Change", dueTime, period));
}
// Autogenerated method: System.Threading.Timer.Change
bool System::Threading::Timer::Change(int64_t dueTime, int64_t period, bool first) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Change", dueTime, period, first));
}
// Autogenerated method: System.Threading.Timer.KeepRootedWhileScheduled
void System::Threading::Timer::KeepRootedWhileScheduled() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "KeepRootedWhileScheduled"));
}
// Autogenerated method: System.Threading.Timer.GetTimeMonotonic
int64_t System::Threading::Timer::GetTimeMonotonic() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int64_t>("System.Threading", "Timer", "GetTimeMonotonic"));
}
// Autogenerated method: System.Threading.Timer..cctor
void System::Threading::Timer::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "Timer", ".cctor"));
}
// Autogenerated method: System.Threading.Timer.Dispose
void System::Threading::Timer::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void System::Threading::Timer::System_IDisposable_Dispose() {
  Dispose();
}
