// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: System.Threading.ReaderWriterLockSlim/TimeoutTracker
#include "System/Threading/ReaderWriterLockSlim_TimeoutTracker.hpp"
// Including type: System.Threading.EventWaitHandle
#include "System/Threading/EventWaitHandle.hpp"
// Including type: System.Threading.ReaderWriterCount
#include "System/Threading/ReaderWriterCount.hpp"
// Including type: System.Threading.LockRecursionPolicy
#include "System/Threading/LockRecursionPolicy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 LockSpinCycles
int System::Threading::ReaderWriterLockSlim::_get_LockSpinCycles() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "LockSpinCycles"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LockSpinCycles
void System::Threading::ReaderWriterLockSlim::_set_LockSpinCycles(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "LockSpinCycles", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 LockSpinCount
int System::Threading::ReaderWriterLockSlim::_get_LockSpinCount() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "LockSpinCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LockSpinCount
void System::Threading::ReaderWriterLockSlim::_set_LockSpinCount(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "LockSpinCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 LockSleep0Count
int System::Threading::ReaderWriterLockSlim::_get_LockSleep0Count() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "LockSleep0Count"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 LockSleep0Count
void System::Threading::ReaderWriterLockSlim::_set_LockSleep0Count(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "LockSleep0Count", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int64 s_nextLockID
int64_t System::Threading::ReaderWriterLockSlim::_get_s_nextLockID() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int64_t>("System.Threading", "ReaderWriterLockSlim", "s_nextLockID"));
}
// Autogenerated static field setter
// Set static field: static private System.Int64 s_nextLockID
void System::Threading::ReaderWriterLockSlim::_set_s_nextLockID(int64_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "s_nextLockID", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ReaderWriterCount t_rwc
System::Threading::ReaderWriterCount* System::Threading::ReaderWriterLockSlim::_get_t_rwc() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ReaderWriterCount*>("System.Threading", "ReaderWriterLockSlim", "t_rwc"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ReaderWriterCount t_rwc
void System::Threading::ReaderWriterLockSlim::_set_t_rwc(System::Threading::ReaderWriterCount* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "t_rwc", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MaxSpinCount
int System::Threading::ReaderWriterLockSlim::_get_MaxSpinCount() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "ReaderWriterLockSlim", "MaxSpinCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MaxSpinCount
void System::Threading::ReaderWriterLockSlim::_set_MaxSpinCount(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "MaxSpinCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 WRITER_HELD
uint System::Threading::ReaderWriterLockSlim::_get_WRITER_HELD() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "WRITER_HELD"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 WRITER_HELD
void System::Threading::ReaderWriterLockSlim::_set_WRITER_HELD(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "WRITER_HELD", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 WAITING_WRITERS
uint System::Threading::ReaderWriterLockSlim::_get_WAITING_WRITERS() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "WAITING_WRITERS"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 WAITING_WRITERS
void System::Threading::ReaderWriterLockSlim::_set_WAITING_WRITERS(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "WAITING_WRITERS", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 WAITING_UPGRADER
uint System::Threading::ReaderWriterLockSlim::_get_WAITING_UPGRADER() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "WAITING_UPGRADER"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 WAITING_UPGRADER
void System::Threading::ReaderWriterLockSlim::_set_WAITING_UPGRADER(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "WAITING_UPGRADER", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 MAX_READER
uint System::Threading::ReaderWriterLockSlim::_get_MAX_READER() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "MAX_READER"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 MAX_READER
void System::Threading::ReaderWriterLockSlim::_set_MAX_READER(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "MAX_READER", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 READER_MASK
uint System::Threading::ReaderWriterLockSlim::_get_READER_MASK() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Threading", "ReaderWriterLockSlim", "READER_MASK"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 READER_MASK
void System::Threading::ReaderWriterLockSlim::_set_READER_MASK(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "ReaderWriterLockSlim", "READER_MASK", value));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.InitializeThreadCounts
void System::Threading::ReaderWriterLockSlim::InitializeThreadCounts() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InitializeThreadCounts"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim..ctor
System::Threading::ReaderWriterLockSlim* System::Threading::ReaderWriterLockSlim::New_ctor(System::Threading::LockRecursionPolicy recursionPolicy) {
  return THROW_UNLESS(il2cpp_utils::New<ReaderWriterLockSlim*>(recursionPolicy));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.IsRWEntryEmpty
bool System::Threading::ReaderWriterLockSlim::IsRWEntryEmpty(System::Threading::ReaderWriterCount* rwc) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading", "ReaderWriterLockSlim", "IsRWEntryEmpty", rwc));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.IsRwHashEntryChanged
bool System::Threading::ReaderWriterLockSlim::IsRwHashEntryChanged(System::Threading::ReaderWriterCount* lrwc) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsRwHashEntryChanged", lrwc));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.GetThreadRWCount
System::Threading::ReaderWriterCount* System::Threading::ReaderWriterLockSlim::GetThreadRWCount(bool dontAllocate) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::ReaderWriterCount*>(this, "GetThreadRWCount", dontAllocate));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterReadLock
void System::Threading::ReaderWriterLockSlim::EnterReadLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnterReadLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterReadLock(int millisecondsTimeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterReadLock", millisecondsTimeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterReadLock(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterReadLock", timeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterReadLockCore
bool System::Threading::ReaderWriterLockSlim::TryEnterReadLockCore(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterReadLockCore", timeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterWriteLock
void System::Threading::ReaderWriterLockSlim::EnterWriteLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnterWriteLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterWriteLock
bool System::Threading::ReaderWriterLockSlim::TryEnterWriteLock(int millisecondsTimeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterWriteLock", millisecondsTimeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterWriteLock
bool System::Threading::ReaderWriterLockSlim::TryEnterWriteLock(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterWriteLock", timeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterWriteLockCore
bool System::Threading::ReaderWriterLockSlim::TryEnterWriteLockCore(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterWriteLockCore", timeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock
void System::Threading::ReaderWriterLockSlim::EnterUpgradeableReadLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnterUpgradeableReadLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock(int millisecondsTimeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterUpgradeableReadLock", millisecondsTimeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock
bool System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterUpgradeableReadLock", timeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLockCore
bool System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLockCore(System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnterUpgradeableReadLockCore", timeout));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitReadLock
void System::Threading::ReaderWriterLockSlim::ExitReadLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExitReadLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitWriteLock
void System::Threading::ReaderWriterLockSlim::ExitWriteLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExitWriteLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock
void System::Threading::ReaderWriterLockSlim::ExitUpgradeableReadLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExitUpgradeableReadLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.LazyCreateEvent
void System::Threading::ReaderWriterLockSlim::LazyCreateEvent(System::Threading::EventWaitHandle*& waitEvent, bool makeAutoResetEvent) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LazyCreateEvent", waitEvent, makeAutoResetEvent));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.WaitOnEvent
bool System::Threading::ReaderWriterLockSlim::WaitOnEvent(System::Threading::EventWaitHandle* waitEvent, uint& numWaiters, System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout, bool isWriteWaiter) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "WaitOnEvent", waitEvent, numWaiters, timeout, isWriteWaiter));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitAndWakeUpAppropriateWaiters
void System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaiters() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExitAndWakeUpAppropriateWaiters"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitAndWakeUpAppropriateWaitersPreferringWriters
void System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaitersPreferringWriters() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExitAndWakeUpAppropriateWaitersPreferringWriters"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitAndWakeUpAppropriateReadWaiters
void System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateReadWaiters() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExitAndWakeUpAppropriateReadWaiters"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.IsWriterAcquired
bool System::Threading::ReaderWriterLockSlim::IsWriterAcquired() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsWriterAcquired"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SetWriterAcquired
void System::Threading::ReaderWriterLockSlim::SetWriterAcquired() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetWriterAcquired"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ClearWriterAcquired
void System::Threading::ReaderWriterLockSlim::ClearWriterAcquired() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearWriterAcquired"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SetWritersWaiting
void System::Threading::ReaderWriterLockSlim::SetWritersWaiting() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetWritersWaiting"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ClearWritersWaiting
void System::Threading::ReaderWriterLockSlim::ClearWritersWaiting() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearWritersWaiting"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SetUpgraderWaiting
void System::Threading::ReaderWriterLockSlim::SetUpgraderWaiting() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetUpgraderWaiting"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ClearUpgraderWaiting
void System::Threading::ReaderWriterLockSlim::ClearUpgraderWaiting() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearUpgraderWaiting"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.GetNumReaders
uint System::Threading::ReaderWriterLockSlim::GetNumReaders() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetNumReaders"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterMyLock
void System::Threading::ReaderWriterLockSlim::EnterMyLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnterMyLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.EnterMyLockSpin
void System::Threading::ReaderWriterLockSlim::EnterMyLockSpin() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnterMyLockSpin"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.ExitMyLock
void System::Threading::ReaderWriterLockSlim::ExitMyLock() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExitMyLock"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.SpinWait
void System::Threading::ReaderWriterLockSlim::SpinWait(int SpinCount) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading", "ReaderWriterLockSlim", "SpinWait", SpinCount));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.Dispose
void System::Threading::ReaderWriterLockSlim::Dispose(bool disposing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose", disposing));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_IsReadLockHeld
bool System::Threading::ReaderWriterLockSlim::get_IsReadLockHeld() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsReadLockHeld"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_IsUpgradeableReadLockHeld
bool System::Threading::ReaderWriterLockSlim::get_IsUpgradeableReadLockHeld() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsUpgradeableReadLockHeld"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_IsWriteLockHeld
bool System::Threading::ReaderWriterLockSlim::get_IsWriteLockHeld() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsWriteLockHeld"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_RecursiveReadCount
int System::Threading::ReaderWriterLockSlim::get_RecursiveReadCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_RecursiveReadCount"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_RecursiveUpgradeCount
int System::Threading::ReaderWriterLockSlim::get_RecursiveUpgradeCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_RecursiveUpgradeCount"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_RecursiveWriteCount
int System::Threading::ReaderWriterLockSlim::get_RecursiveWriteCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_RecursiveWriteCount"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_WaitingReadCount
int System::Threading::ReaderWriterLockSlim::get_WaitingReadCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_WaitingReadCount"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_WaitingUpgradeCount
int System::Threading::ReaderWriterLockSlim::get_WaitingUpgradeCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_WaitingUpgradeCount"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.get_WaitingWriteCount
int System::Threading::ReaderWriterLockSlim::get_WaitingWriteCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_WaitingWriteCount"));
}
// Autogenerated method: System.Threading.ReaderWriterLockSlim.Dispose
void System::Threading::ReaderWriterLockSlim::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void System::Threading::ReaderWriterLockSlim::System_IDisposable_Dispose() {
  System::Threading::ReaderWriterLockSlim::Dispose();
}
