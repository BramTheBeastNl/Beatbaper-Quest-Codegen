// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.SpinLock
#include "System/Threading/SpinLock.hpp"
// Including type: System.Threading.SpinLock/SystemThreading_SpinLockDebugView
#include "System/Threading/SpinLock_SystemThreading_SpinLockDebugView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MAXIMUM_WAITERS
int System::Threading::SpinLock::_get_MAXIMUM_WAITERS() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("_get_MAXIMUM_WAITERS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading", "SpinLock", "MAXIMUM_WAITERS"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MAXIMUM_WAITERS
void System::Threading::SpinLock::_set_MAXIMUM_WAITERS(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("_set_MAXIMUM_WAITERS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading", "SpinLock", "MAXIMUM_WAITERS", value));
}
// Autogenerated method: System.Threading.SpinLock.Enter
void System::Threading::SpinLock::Enter(bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("Enter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Enter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(lockTaken)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, lockTaken);
}
// Autogenerated method: System.Threading.SpinLock.TryEnter
void System::Threading::SpinLock::TryEnter(int millisecondsTimeout, bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("TryEnter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "TryEnter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(millisecondsTimeout, lockTaken)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, millisecondsTimeout, lockTaken);
}
// Autogenerated method: System.Threading.SpinLock.ContinueTryEnter
void System::Threading::SpinLock::ContinueTryEnter(int millisecondsTimeout, bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("ContinueTryEnter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "ContinueTryEnter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(millisecondsTimeout, lockTaken)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, millisecondsTimeout, lockTaken);
}
// Autogenerated method: System.Threading.SpinLock.DecrementWaiters
void System::Threading::SpinLock::DecrementWaiters() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("DecrementWaiters");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "DecrementWaiters", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock.ContinueTryEnterWithThreadTracking
void System::Threading::SpinLock::ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, bool& lockTaken) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("ContinueTryEnterWithThreadTracking");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "ContinueTryEnterWithThreadTracking", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(millisecondsTimeout, startTime, lockTaken)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, millisecondsTimeout, startTime, lockTaken);
}
// Autogenerated method: System.Threading.SpinLock.Exit
void System::Threading::SpinLock::Exit(bool useMemoryBarrier) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("Exit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Exit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(useMemoryBarrier)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, useMemoryBarrier);
}
// Autogenerated method: System.Threading.SpinLock.ExitSlowPath
void System::Threading::SpinLock::ExitSlowPath(bool useMemoryBarrier) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("ExitSlowPath");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "ExitSlowPath", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(useMemoryBarrier)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, useMemoryBarrier);
}
// Autogenerated method: System.Threading.SpinLock.get_IsHeldByCurrentThread
bool System::Threading::SpinLock::get_IsHeldByCurrentThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("get_IsHeldByCurrentThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsHeldByCurrentThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock.get_IsThreadOwnerTrackingEnabled
bool System::Threading::SpinLock::get_IsThreadOwnerTrackingEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext("get_IsThreadOwnerTrackingEnabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsThreadOwnerTrackingEnabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: System.Threading.SpinLock..cctor
void System::Threading::SpinLock::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading").WithContext("SpinLock").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "SpinLock", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
