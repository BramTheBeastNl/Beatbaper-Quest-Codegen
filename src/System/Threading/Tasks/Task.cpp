// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task/ContingentProperties
#include "System/Threading/Tasks/Task_ContingentProperties.hpp"
// Including type: System.Threading.Tasks.Task/SetOnInvokeMres
#include "System/Threading/Tasks/Task_SetOnInvokeMres.hpp"
// Including type: System.Threading.Tasks.Task/DelayPromise
#include "System/Threading/Tasks/Task_DelayPromise.hpp"
// Including type: System.Threading.Tasks.Task/<>c__DisplayClass178_0
#include "System/Threading/Tasks/Task_--c__DisplayClass178_0.hpp"
// Including type: System.Threading.Tasks.Task/<>c
#include "System/Threading/Tasks/Task_--c.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.StackGuard
#include "System/Threading/Tasks/StackGuard.hpp"
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: System.Threading.ContextCallback
#include "System/Threading/ContextCallback.hpp"
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Threading.Tasks.InternalTaskOptions
#include "System/Threading/Tasks/InternalTaskOptions.hpp"
// Including type: System.Threading.Tasks.TaskContinuation
#include "System/Threading/Tasks/TaskContinuation.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.AggregateException
#include "System/AggregateException.hpp"
// Including type: System.Threading.Tasks.TaskStatus
#include "System/Threading/Tasks/TaskStatus.hpp"
// Including type: System.Threading.ManualResetEventSlim
#include "System/Threading/ManualResetEventSlim.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Including type: System.Collections.ObjectModel.ReadOnlyCollection`1
#include "System/Collections/ObjectModel/ReadOnlyCollection_1.hpp"
// Including type: System.Runtime.ExceptionServices.ExceptionDispatchInfo
#include "System/Runtime/ExceptionServices/ExceptionDispatchInfo.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Runtime.CompilerServices.YieldAwaitable
#include "System/Runtime/CompilerServices/YieldAwaitable.hpp"
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.ThreadAbortException
#include "System/Threading/ThreadAbortException.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Threading.Tasks.Task t_currentTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_t_currentTask() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "t_currentTask"));
}
// Autogenerated static field setter
// Set static field: static System.Threading.Tasks.Task t_currentTask
void System::Threading::Tasks::Task::_set_t_currentTask(System::Threading::Tasks::Task* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_currentTask", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.StackGuard t_stackGuard
System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::_get_t_stackGuard() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::StackGuard*>("System.Threading.Tasks", "Task", "t_stackGuard"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.StackGuard t_stackGuard
void System::Threading::Tasks::Task::_set_t_stackGuard(System::Threading::Tasks::StackGuard* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "t_stackGuard", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskIdCounter
int System::Threading::Tasks::Task::_get_s_taskIdCounter() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "s_taskIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskIdCounter
void System::Threading::Tasks::Task::_set_s_taskIdCounter(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::_get_s_factory() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskFactory*>("System.Threading.Tasks", "Task", "s_factory"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
void System::Threading::Tasks::Task::_set_s_factory(System::Threading::Tasks::TaskFactory* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_factory", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 OptionsMask
int System::Threading::Tasks::Task::_get_OptionsMask() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "OptionsMask"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 OptionsMask
void System::Threading::Tasks::Task::_set_OptionsMask(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "OptionsMask", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_STARTED
int System::Threading::Tasks::Task::_get_TASK_STATE_STARTED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_STARTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_STARTED
void System::Threading::Tasks::Task::_set_TASK_STATE_STARTED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_STARTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
int System::Threading::Tasks::Task::_get_TASK_STATE_DELEGATE_INVOKED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
void System::Threading::Tasks::Task::_set_TASK_STATE_DELEGATE_INVOKED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DELEGATE_INVOKED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_DISPOSED
int System::Threading::Tasks::Task::_get_TASK_STATE_DISPOSED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_DISPOSED
void System::Threading::Tasks::Task::_set_TASK_STATE_DISPOSED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_DISPOSED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
int System::Threading::Tasks::Task::_get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
void System::Threading::Tasks::Task::_set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXCEPTIONOBSERVEDBYPARENT", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELLATIONACKNOWLEDGED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELLATIONACKNOWLEDGED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELLATIONACKNOWLEDGED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_FAULTED
int System::Threading::Tasks::Task::_get_TASK_STATE_FAULTED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_FAULTED
void System::Threading::Tasks::Task::_set_TASK_STATE_FAULTED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_FAULTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_CANCELED
int System::Threading::Tasks::Task::_get_TASK_STATE_CANCELED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_CANCELED
void System::Threading::Tasks::Task::_set_TASK_STATE_CANCELED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_CANCELED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITING_ON_CHILDREN() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITING_ON_CHILDREN(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITING_ON_CHILDREN", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
int System::Threading::Tasks::Task::_get_TASK_STATE_RAN_TO_COMPLETION() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
void System::Threading::Tasks::Task::_set_TASK_STATE_RAN_TO_COMPLETION(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_RAN_TO_COMPLETION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAITINGFORACTIVATION() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAITINGFORACTIVATION(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAITINGFORACTIVATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETION_RESERVED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETION_RESERVED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETION_RESERVED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
int System::Threading::Tasks::Task::_get_TASK_STATE_THREAD_WAS_ABORTED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
void System::Threading::Tasks::Task::_set_TASK_STATE_THREAD_WAS_ABORTED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_THREAD_WAS_ABORTED", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
int System::Threading::Tasks::Task::_get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
void System::Threading::Tasks::Task::_set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_WAIT_COMPLETION_NOTIFICATION", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
int System::Threading::Tasks::Task::_get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
void System::Threading::Tasks::Task::_set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_EXECUTIONCONTEXT_IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
int System::Threading::Tasks::Task::_get_TASK_STATE_TASKSCHEDULED_WAS_FIRED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
void System::Threading::Tasks::Task::_set_TASK_STATE_TASKSCHEDULED_WAS_FIRED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_TASKSCHEDULED_WAS_FIRED", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
int System::Threading::Tasks::Task::_get_TASK_STATE_COMPLETED_MASK() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
void System::Threading::Tasks::Task::_set_TASK_STATE_COMPLETED_MASK(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "TASK_STATE_COMPLETED_MASK", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 CANCELLATION_REQUESTED
int System::Threading::Tasks::Task::_get_CANCELLATION_REQUESTED() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 CANCELLATION_REQUESTED
void System::Threading::Tasks::Task::_set_CANCELLATION_REQUESTED(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "CANCELLATION_REQUESTED", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_taskCompletionSentinel
::CsObject* System::Threading::Tasks::Task::_get_s_taskCompletionSentinel() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::CsObject*>("System.Threading.Tasks", "Task", "s_taskCompletionSentinel"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_taskCompletionSentinel
void System::Threading::Tasks::Task::_set_s_taskCompletionSentinel(::CsObject* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCompletionSentinel", value));
}
// Autogenerated static field getter
// Get static field: static System.Boolean s_asyncDebuggingEnabled
bool System::Threading::Tasks::Task::_get_s_asyncDebuggingEnabled() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled"));
}
// Autogenerated static field setter
// Set static field: static System.Boolean s_asyncDebuggingEnabled
void System::Threading::Tasks::Task::_set_s_asyncDebuggingEnabled(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_asyncDebuggingEnabled", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_currentActiveTasks() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_currentActiveTasks")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
void System::Threading::Tasks::Task::_set_s_currentActiveTasks(System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_currentActiveTasks", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object s_activeTasksLock
::CsObject* System::Threading::Tasks::Task::_get_s_activeTasksLock() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::CsObject*>("System.Threading.Tasks", "Task", "s_activeTasksLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object s_activeTasksLock
void System::Threading::Tasks::Task::_set_s_activeTasksLock(::CsObject* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_activeTasksLock", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
System::Action_1<::CsObject*>* System::Threading::Tasks::Task::_get_s_taskCancelCallback() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<::CsObject*>*>("System.Threading.Tasks", "Task", "s_taskCancelCallback"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
void System::Threading::Tasks::Task::_set_s_taskCancelCallback(System::Action_1<::CsObject*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_taskCancelCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* System::Threading::Tasks::Task::_get_s_createContingentProperties() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>*>("System.Threading.Tasks", "Task", "s_createContingentProperties"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
void System::Threading::Tasks::Task::_set_s_createContingentProperties(System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_createContingentProperties", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.Tasks.Task s_completedTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::_get_s_completedTask() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "s_completedTask"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.Tasks.Task s_completedTask
void System::Threading::Tasks::Task::_set_s_completedTask(System::Threading::Tasks::Task* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_completedTask", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
System::Predicate_1<System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::_get_s_IsExceptionObservedByParentPredicate() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Predicate_1<System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
void System::Threading::Tasks::Task::_set_s_IsExceptionObservedByParentPredicate(System::Predicate_1<System::Threading::Tasks::Task*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsExceptionObservedByParentPredicate", value));
}
// Autogenerated static field getter
// Get static field: static private System.Threading.ContextCallback s_ecCallback
System::Threading::ContextCallback* System::Threading::Tasks::Task::_get_s_ecCallback() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::ContextCallback*>("System.Threading.Tasks", "Task", "s_ecCallback"));
}
// Autogenerated static field setter
// Set static field: static private System.Threading.ContextCallback s_ecCallback
void System::Threading::Tasks::Task::_set_s_ecCallback(System::Threading::ContextCallback* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_ecCallback", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
System::Predicate_1<::CsObject*>* System::Threading::Tasks::Task::_get_s_IsTaskContinuationNullPredicate() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Predicate_1<::CsObject*>*>("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
void System::Threading::Tasks::Task::_set_s_IsTaskContinuationNullPredicate(System::Predicate_1<::CsObject*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "Task", "s_IsTaskContinuationNullPredicate", value));
}
// Autogenerated method: System.Threading.Tasks.Task.AddToActiveTasks
bool System::Threading::Tasks::Task::AddToActiveTasks(System::Threading::Tasks::Task* task) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading.Tasks", "Task", "AddToActiveTasks", task));
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveFromActiveTasks
void System::Threading::Tasks::Task::RemoveFromActiveTasks(int taskId) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "Task", "RemoveFromActiveTasks", taskId));
}
// Autogenerated method: System.Threading.Tasks.Task..ctor
System::Threading::Tasks::Task* System::Threading::Tasks::Task::New_ctor(bool canceled, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::CancellationToken ct) {
  return (Task*)THROW_UNLESS(il2cpp_utils::New("System.Threading.Tasks", "Task", canceled, creationOptions, ct));
}
// Autogenerated method: System.Threading.Tasks.Task..ctor
System::Threading::Tasks::Task* System::Threading::Tasks::Task::New_ctor(::CsObject* state, System::Threading::Tasks::TaskCreationOptions creationOptions, bool promiseStyle) {
  return (Task*)THROW_UNLESS(il2cpp_utils::New("System.Threading.Tasks", "Task", state, creationOptions, promiseStyle));
}
// Autogenerated method: System.Threading.Tasks.Task..ctor
System::Threading::Tasks::Task* System::Threading::Tasks::Task::New_ctor(System::Delegate* action, ::CsObject* state, System::Threading::Tasks::Task* parent, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  return (Task*)THROW_UNLESS(il2cpp_utils::New("System.Threading.Tasks", "Task", action, state, parent, cancellationToken, creationOptions, internalOptions, scheduler));
}
// Autogenerated method: System.Threading.Tasks.Task.TaskConstructorCore
void System::Threading::Tasks::Task::TaskConstructorCore(::CsObject* action, ::CsObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TaskConstructorCore", action, state, cancellationToken, creationOptions, internalOptions, scheduler));
}
// Autogenerated method: System.Threading.Tasks.Task.AssignCancellationToken
void System::Threading::Tasks::Task::AssignCancellationToken(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::Task* antecedent, System::Threading::Tasks::TaskContinuation* continuation) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AssignCancellationToken", cancellationToken, antecedent, continuation));
}
// Autogenerated method: System.Threading.Tasks.Task.TaskCancelCallback
void System::Threading::Tasks::Task::TaskCancelCallback(::CsObject* o) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "Task", "TaskCancelCallback", o));
}
// Autogenerated method: System.Threading.Tasks.Task.PossiblyCaptureContext
void System::Threading::Tasks::Task::PossiblyCaptureContext(System::Threading::StackCrawlMark& stackMark) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PossiblyCaptureContext", stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.get_Options
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_Options() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskCreationOptions>(this, "get_Options"));
}
// Autogenerated method: System.Threading.Tasks.Task.OptionsMethod
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::OptionsMethod(int flags) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskCreationOptions>("System.Threading.Tasks", "Task", "OptionsMethod", flags));
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AtomicStateUpdate", newBits, illegalBits));
}
// Autogenerated method: System.Threading.Tasks.Task.AtomicStateUpdate
bool System::Threading::Tasks::Task::AtomicStateUpdate(int newBits, int illegalBits, int& oldFlags) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AtomicStateUpdate", newBits, illegalBits, oldFlags));
}
// Autogenerated method: System.Threading.Tasks.Task.SetNotificationForWaitCompletion
void System::Threading::Tasks::Task::SetNotificationForWaitCompletion(bool enabled) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetNotificationForWaitCompletion", enabled));
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletionIfNecessary
bool System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletionIfNecessary() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "NotifyDebuggerOfWaitCompletionIfNecessary"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabledOrNotRanToCompletion
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabledOrNotRanToCompletion() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsWaitNotificationEnabledOrNotRanToCompletion"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_ShouldNotifyDebuggerOfWaitCompletion
bool System::Threading::Tasks::Task::get_ShouldNotifyDebuggerOfWaitCompletion() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_ShouldNotifyDebuggerOfWaitCompletion"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsWaitNotificationEnabled
bool System::Threading::Tasks::Task::get_IsWaitNotificationEnabled() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsWaitNotificationEnabled"));
}
// Autogenerated method: System.Threading.Tasks.Task.NotifyDebuggerOfWaitCompletion
void System::Threading::Tasks::Task::NotifyDebuggerOfWaitCompletion() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "NotifyDebuggerOfWaitCompletion"));
}
// Autogenerated method: System.Threading.Tasks.Task.MarkStarted
bool System::Threading::Tasks::Task::MarkStarted() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "MarkStarted"));
}
// Autogenerated method: System.Threading.Tasks.Task.FireTaskScheduledIfNeeded
bool System::Threading::Tasks::Task::FireTaskScheduledIfNeeded(System::Threading::Tasks::TaskScheduler* ts) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "FireTaskScheduledIfNeeded", ts));
}
// Autogenerated method: System.Threading.Tasks.Task.AddNewChild
void System::Threading::Tasks::Task::AddNewChild() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddNewChild"));
}
// Autogenerated method: System.Threading.Tasks.Task.DisregardChild
void System::Threading::Tasks::Task::DisregardChild() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DisregardChild"));
}
// Autogenerated method: System.Threading.Tasks.Task.InternalStartNew
System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalStartNew(System::Threading::Tasks::Task* creatingTask, System::Delegate* action, ::CsObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::Tasks::TaskCreationOptions options, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::StackCrawlMark& stackMark) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "InternalStartNew", creatingTask, action, state, cancellationToken, scheduler, options, internalOptions, stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.NewId
int System::Threading::Tasks::Task::NewId() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("System.Threading.Tasks", "Task", "NewId"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_Id
int System::Threading::Tasks::Task::get_Id() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Id"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_InternalCurrent
System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_InternalCurrent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "get_InternalCurrent"));
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCurrentIfAttached
System::Threading::Tasks::Task* System::Threading::Tasks::Task::InternalCurrentIfAttached(System::Threading::Tasks::TaskCreationOptions creationOptions) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "InternalCurrentIfAttached", creationOptions));
}
// Autogenerated method: System.Threading.Tasks.Task.get_CurrentStackGuard
System::Threading::Tasks::StackGuard* System::Threading::Tasks::Task::get_CurrentStackGuard() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::StackGuard*>("System.Threading.Tasks", "Task", "get_CurrentStackGuard"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_Exception
System::AggregateException* System::Threading::Tasks::Task::get_Exception() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::AggregateException*>(this, "get_Exception"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_Status
System::Threading::Tasks::TaskStatus System::Threading::Tasks::Task::get_Status() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskStatus>(this, "get_Status"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCanceled
bool System::Threading::Tasks::Task::get_IsCanceled() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsCanceled"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationRequested
bool System::Threading::Tasks::Task::get_IsCancellationRequested() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsCancellationRequested"));
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitialized
System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitialized(bool needsProtection) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task::ContingentProperties*>(this, "EnsureContingentPropertiesInitialized", needsProtection));
}
// Autogenerated method: System.Threading.Tasks.Task.EnsureContingentPropertiesInitializedCore
System::Threading::Tasks::Task::ContingentProperties* System::Threading::Tasks::Task::EnsureContingentPropertiesInitializedCore(bool needsProtection) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task::ContingentProperties*>(this, "EnsureContingentPropertiesInitializedCore", needsProtection));
}
// Autogenerated method: System.Threading.Tasks.Task.get_CancellationToken
System::Threading::CancellationToken System::Threading::Tasks::Task::get_CancellationToken() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::CancellationToken>(this, "get_CancellationToken"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCancellationAcknowledged
bool System::Threading::Tasks::Task::get_IsCancellationAcknowledged() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsCancellationAcknowledged"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsCompleted
bool System::Threading::Tasks::Task::get_IsCompleted() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsCompleted"));
}
// Autogenerated method: System.Threading.Tasks.Task.IsCompletedMethod
bool System::Threading::Tasks::Task::IsCompletedMethod(int flags) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Threading.Tasks", "Task", "IsCompletedMethod", flags));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsRanToCompletion
bool System::Threading::Tasks::Task::get_IsRanToCompletion() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsRanToCompletion"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_CreationOptions
System::Threading::Tasks::TaskCreationOptions System::Threading::Tasks::Task::get_CreationOptions() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskCreationOptions>(this, "get_CreationOptions"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExecutingTaskScheduler
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::Task::get_ExecutingTaskScheduler() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskScheduler*>(this, "get_ExecutingTaskScheduler"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_Factory
System::Threading::Tasks::TaskFactory* System::Threading::Tasks::Task::get_Factory() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskFactory*>("System.Threading.Tasks", "Task", "get_Factory"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_CompletedTask() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "get_CompletedTask"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_CompletedEvent
System::Threading::ManualResetEventSlim* System::Threading::Tasks::Task::get_CompletedEvent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::ManualResetEventSlim*>(this, "get_CompletedEvent"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsSelfReplicatingRoot
bool System::Threading::Tasks::Task::get_IsSelfReplicatingRoot() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsSelfReplicatingRoot"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsChildReplica
bool System::Threading::Tasks::Task::get_IsChildReplica() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsChildReplica"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_ExceptionRecorded
bool System::Threading::Tasks::Task::get_ExceptionRecorded() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_ExceptionRecorded"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsFaulted
bool System::Threading::Tasks::Task::get_IsFaulted() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsFaulted"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_CapturedContext
System::Threading::ExecutionContext* System::Threading::Tasks::Task::get_CapturedContext() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::ExecutionContext*>(this, "get_CapturedContext"));
}
// Autogenerated method: System.Threading.Tasks.Task.set_CapturedContext
void System::Threading::Tasks::Task::set_CapturedContext(System::Threading::ExecutionContext* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_CapturedContext", value));
}
// Autogenerated method: System.Threading.Tasks.Task.CopyExecutionContext
System::Threading::ExecutionContext* System::Threading::Tasks::Task::CopyExecutionContext(System::Threading::ExecutionContext* capturedContext) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::ExecutionContext*>("System.Threading.Tasks", "Task", "CopyExecutionContext", capturedContext));
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose(bool disposing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose", disposing));
}
// Autogenerated method: System.Threading.Tasks.Task.ScheduleAndStart
void System::Threading::Tasks::Task::ScheduleAndStart(bool needsProtection) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ScheduleAndStart", needsProtection));
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::CsObject* exceptionObject) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddException", exceptionObject));
}
// Autogenerated method: System.Threading.Tasks.Task.AddException
void System::Threading::Tasks::Task::AddException(::CsObject* exceptionObject, bool representsCancellation) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddException", exceptionObject, representsCancellation));
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptions
System::AggregateException* System::Threading::Tasks::Task::GetExceptions(bool includeTaskCanceledExceptions) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::AggregateException*>(this, "GetExceptions", includeTaskCanceledExceptions));
}
// Autogenerated method: System.Threading.Tasks.Task.GetExceptionDispatchInfos
System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* System::Threading::Tasks::Task::GetExceptionDispatchInfos() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>*>(this, "GetExceptionDispatchInfos"));
}
// Autogenerated method: System.Threading.Tasks.Task.GetCancellationExceptionDispatchInfo
System::Runtime::ExceptionServices::ExceptionDispatchInfo* System::Threading::Tasks::Task::GetCancellationExceptionDispatchInfo() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>(this, "GetCancellationExceptionDispatchInfo"));
}
// Autogenerated method: System.Threading.Tasks.Task.ThrowIfExceptional
void System::Threading::Tasks::Task::ThrowIfExceptional(bool includeTaskCanceledExceptions) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ThrowIfExceptional", includeTaskCanceledExceptions));
}
// Autogenerated method: System.Threading.Tasks.Task.UpdateExceptionObservedStatus
void System::Threading::Tasks::Task::UpdateExceptionObservedStatus() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateExceptionObservedStatus"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsExceptionObservedByParent
bool System::Threading::Tasks::Task::get_IsExceptionObservedByParent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsExceptionObservedByParent"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_IsDelegateInvoked
bool System::Threading::Tasks::Task::get_IsDelegateInvoked() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsDelegateInvoked"));
}
// Autogenerated method: System.Threading.Tasks.Task.Finish
void System::Threading::Tasks::Task::Finish(bool bUserDelegateExecuted) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Finish", bUserDelegateExecuted));
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageTwo
void System::Threading::Tasks::Task::FinishStageTwo() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FinishStageTwo"));
}
// Autogenerated method: System.Threading.Tasks.Task.FinishStageThree
void System::Threading::Tasks::Task::FinishStageThree() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FinishStageThree"));
}
// Autogenerated method: System.Threading.Tasks.Task.ProcessChildCompletion
void System::Threading::Tasks::Task::ProcessChildCompletion(System::Threading::Tasks::Task* childTask) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ProcessChildCompletion", childTask));
}
// Autogenerated method: System.Threading.Tasks.Task.AddExceptionsFromChildren
void System::Threading::Tasks::Task::AddExceptionsFromChildren() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddExceptionsFromChildren"));
}
// Autogenerated method: System.Threading.Tasks.Task.FinishThreadAbortedTask
void System::Threading::Tasks::Task::FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FinishThreadAbortedTask", bTAEAddedToExceptionHolder, delegateRan));
}
// Autogenerated method: System.Threading.Tasks.Task.Execute
void System::Threading::Tasks::Task::Execute() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Execute"));
}
// Autogenerated method: System.Threading.Tasks.Task.ShouldReplicate
bool System::Threading::Tasks::Task::ShouldReplicate() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ShouldReplicate"));
}
// Autogenerated method: System.Threading.Tasks.Task.CreateReplicaTask
System::Threading::Tasks::Task* System::Threading::Tasks::Task::CreateReplicaTask(System::Action_1<::CsObject*>* taskReplicaDelegate, ::CsObject* stateObject, System::Threading::Tasks::Task* parentTask, System::Threading::Tasks::TaskScheduler* taskScheduler, System::Threading::Tasks::TaskCreationOptions creationOptionsForReplica, System::Threading::Tasks::InternalTaskOptions internalOptionsForReplica) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "CreateReplicaTask", taskReplicaDelegate, stateObject, parentTask, taskScheduler, creationOptionsForReplica, internalOptionsForReplica));
}
// Autogenerated method: System.Threading.Tasks.Task.get_SavedStateForNextReplica
::CsObject* System::Threading::Tasks::Task::get_SavedStateForNextReplica() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsObject*>(this, "get_SavedStateForNextReplica"));
}
// Autogenerated method: System.Threading.Tasks.Task.set_SavedStateFromPreviousReplica
void System::Threading::Tasks::Task::set_SavedStateFromPreviousReplica(::CsObject* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_SavedStateFromPreviousReplica", value));
}
// Autogenerated method: System.Threading.Tasks.Task.get_HandedOverChildReplica
System::Threading::Tasks::Task* System::Threading::Tasks::Task::get_HandedOverChildReplica() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "get_HandedOverChildReplica"));
}
// Autogenerated method: System.Threading.Tasks.Task.set_HandedOverChildReplica
void System::Threading::Tasks::Task::set_HandedOverChildReplica(System::Threading::Tasks::Task* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_HandedOverChildReplica", value));
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteSelfReplicating
void System::Threading::Tasks::Task::ExecuteSelfReplicating(System::Threading::Tasks::Task* root) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "Task", "ExecuteSelfReplicating", root));
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteEntry
bool System::Threading::Tasks::Task::ExecuteEntry(bool bPreventDoubleExecution) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ExecuteEntry", bPreventDoubleExecution));
}
// Autogenerated method: System.Threading.Tasks.Task.ExecuteWithThreadLocal
void System::Threading::Tasks::Task::ExecuteWithThreadLocal(System::Threading::Tasks::Task*& currentTaskSlot) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ExecuteWithThreadLocal", currentTaskSlot));
}
// Autogenerated method: System.Threading.Tasks.Task.ExecutionContextCallback
void System::Threading::Tasks::Task::ExecutionContextCallback(::CsObject* obj) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "Task", "ExecutionContextCallback", obj));
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvoke
void System::Threading::Tasks::Task::InnerInvoke() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InnerInvoke"));
}
// Autogenerated method: System.Threading.Tasks.Task.InnerInvokeWithArg
void System::Threading::Tasks::Task::InnerInvokeWithArg(System::Threading::Tasks::Task* childTask) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InnerInvokeWithArg", childTask));
}
// Autogenerated method: System.Threading.Tasks.Task.HandleException
void System::Threading::Tasks::Task::HandleException(System::Exception* unhandledException) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleException", unhandledException));
}
// Autogenerated method: System.Threading.Tasks.Task.GetAwaiter
System::Runtime::CompilerServices::TaskAwaiter System::Threading::Tasks::Task::GetAwaiter() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Runtime::CompilerServices::TaskAwaiter>(this, "GetAwaiter"));
}
// Autogenerated method: System.Threading.Tasks.Task.SetContinuationForAwait
void System::Threading::Tasks::Task::SetContinuationForAwait(System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, System::Threading::StackCrawlMark& stackMark) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetContinuationForAwait", continuationAction, continueOnCapturedContext, flowExecutionContext, stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.Yield
System::Runtime::CompilerServices::YieldAwaitable System::Threading::Tasks::Task::Yield() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Runtime::CompilerServices::YieldAwaitable>("System.Threading.Tasks", "Task", "Yield"));
}
// Autogenerated method: System.Threading.Tasks.Task.WrappedTryRunInline
bool System::Threading::Tasks::Task::WrappedTryRunInline() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "WrappedTryRunInline"));
}
// Autogenerated method: System.Threading.Tasks.Task.InternalWait
bool System::Threading::Tasks::Task::InternalWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "InternalWait", millisecondsTimeout, cancellationToken));
}
// Autogenerated method: System.Threading.Tasks.Task.SpinThenBlockingWait
bool System::Threading::Tasks::Task::SpinThenBlockingWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SpinThenBlockingWait", millisecondsTimeout, cancellationToken));
}
// Autogenerated method: System.Threading.Tasks.Task.SpinWait
bool System::Threading::Tasks::Task::SpinWait(int millisecondsTimeout) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SpinWait", millisecondsTimeout));
}
// Autogenerated method: System.Threading.Tasks.Task.InternalCancel
bool System::Threading::Tasks::Task::InternalCancel(bool bCancelNonExecutingOnly) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "InternalCancel", bCancelNonExecutingOnly));
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RecordInternalCancellationRequest"));
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RecordInternalCancellationRequest", tokenToRecord));
}
// Autogenerated method: System.Threading.Tasks.Task.RecordInternalCancellationRequest
void System::Threading::Tasks::Task::RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord, ::CsObject* cancellationException) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RecordInternalCancellationRequest", tokenToRecord, cancellationException));
}
// Autogenerated method: System.Threading.Tasks.Task.CancellationCleanupLogic
void System::Threading::Tasks::Task::CancellationCleanupLogic() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CancellationCleanupLogic"));
}
// Autogenerated method: System.Threading.Tasks.Task.SetCancellationAcknowledged
void System::Threading::Tasks::Task::SetCancellationAcknowledged() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetCancellationAcknowledged"));
}
// Autogenerated method: System.Threading.Tasks.Task.FinishContinuations
void System::Threading::Tasks::Task::FinishContinuations() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FinishContinuations"));
}
// Autogenerated method: System.Threading.Tasks.Task.LogFinishCompletionNotification
void System::Threading::Tasks::Task::LogFinishCompletionNotification() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LogFinishCompletionNotification"));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "ContinueWith", continuationAction));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "ContinueWith", continuationAction, scheduler, cancellationToken, continuationOptions, stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::CsObject*>* continuationAction, ::CsObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "ContinueWith", continuationAction, state, cancellationToken, continuationOptions, scheduler));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWith
System::Threading::Tasks::Task* System::Threading::Tasks::Task::ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::CsObject*>* continuationAction, ::CsObject* state, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "ContinueWith", continuationAction, state, scheduler, cancellationToken, continuationOptions, stackMark));
}
// Autogenerated method: System.Threading.Tasks.Task.CreationOptionsFromContinuationOptions
void System::Threading::Tasks::Task::CreationOptionsFromContinuationOptions(System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskCreationOptions& creationOptions, System::Threading::Tasks::InternalTaskOptions& internalOptions) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "Task", "CreationOptionsFromContinuationOptions", continuationOptions, creationOptions, internalOptions));
}
// Autogenerated method: System.Threading.Tasks.Task.ContinueWithCore
void System::Threading::Tasks::Task::ContinueWithCore(System::Threading::Tasks::Task* continuationTask, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions options) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ContinueWithCore", continuationTask, scheduler, cancellationToken, options));
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddCompletionAction", action));
}
// Autogenerated method: System.Threading.Tasks.Task.AddCompletionAction
void System::Threading::Tasks::Task::AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddCompletionAction", action, addBeforeOthers));
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuationComplex
bool System::Threading::Tasks::Task::AddTaskContinuationComplex(::CsObject* tc, bool addBeforeOthers) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AddTaskContinuationComplex", tc, addBeforeOthers));
}
// Autogenerated method: System.Threading.Tasks.Task.AddTaskContinuation
bool System::Threading::Tasks::Task::AddTaskContinuation(::CsObject* tc, bool addBeforeOthers) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AddTaskContinuation", tc, addBeforeOthers));
}
// Autogenerated method: System.Threading.Tasks.Task.RemoveContinuation
void System::Threading::Tasks::Task::RemoveContinuation(::CsObject* continuationObject) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveContinuation", continuationObject));
}
// Autogenerated method: System.Threading.Tasks.Task.FromCancellation
System::Threading::Tasks::Task* System::Threading::Tasks::Task::FromCancellation(System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "FromCancellation", cancellationToken));
}
// Autogenerated method: System.Threading.Tasks.Task.Run
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(System::Func_1<System::Threading::Tasks::Task*>* function) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "Run", function));
}
// Autogenerated method: System.Threading.Tasks.Task.Run
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Run(System::Func_1<System::Threading::Tasks::Task*>* function, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "Run", function, cancellationToken));
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "Delay", millisecondsDelay));
}
// Autogenerated method: System.Threading.Tasks.Task.Delay
System::Threading::Tasks::Task* System::Threading::Tasks::Task::Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>("System.Threading.Tasks", "Task", "Delay", millisecondsDelay, cancellationToken));
}
// Autogenerated method: System.Threading.Tasks.Task.WhenAny
System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* System::Threading::Tasks::Task::WhenAny(::Array<System::Threading::Tasks::Task*>* tasks) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*>("System.Threading.Tasks", "Task", "WhenAny", tasks));
}
// Autogenerated method: System.Threading.Tasks.Task..cctor
void System::Threading::Tasks::Task::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "Task", ".cctor"));
}
// Autogenerated method: System.Threading.Tasks.Task..ctor
System::Threading::Tasks::Task* System::Threading::Tasks::Task::New_ctor() {
  return (Task*)THROW_UNLESS(il2cpp_utils::New("System.Threading.Tasks", "Task"));
}
// Autogenerated method: System.Threading.Tasks.Task.System.IAsyncResult.get_AsyncWaitHandle
System::Threading::WaitHandle* System::Threading::Tasks::Task::System_IAsyncResult_get_AsyncWaitHandle() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::WaitHandle*>(this, "System.IAsyncResult.get_AsyncWaitHandle"));
}
// Autogenerated method: System.Threading.Tasks.Task.get_AsyncState
::CsObject* System::Threading::Tasks::Task::get_AsyncState() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsObject*>(this, "get_AsyncState"));
}
// Autogenerated method: System.Threading.Tasks.Task.Dispose
void System::Threading::Tasks::Task::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void System::Threading::Tasks::Task::System_IDisposable_Dispose() {
  Dispose();
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_ExecuteWorkItem() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Threading.IThreadPoolWorkItem.ExecuteWorkItem"));
}
// Autogenerated method: System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.MarkAborted
void System::Threading::Tasks::Task::System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Threading.IThreadPoolWorkItem.MarkAborted", tae));
}
