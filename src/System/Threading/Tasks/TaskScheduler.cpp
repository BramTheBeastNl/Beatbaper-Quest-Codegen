// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.TaskScheduler/SystemThreadingTasks_TaskSchedulerDebugView
#include "System/Threading/Tasks/TaskScheduler_SystemThreadingTasks_TaskSchedulerDebugView.hpp"
// Including type: System.Runtime.CompilerServices.ConditionalWeakTable`2
#include "System/Runtime/CompilerServices/ConditionalWeakTable_2.hpp"
// Including type: System.EventHandler`1
#include "System/EventHandler_1.hpp"
// Including type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
#include "System/Threading/Tasks/UnobservedTaskExceptionEventArgs.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
System::Runtime::CompilerServices::ConditionalWeakTable_2<System::Threading::Tasks::TaskScheduler*, ::CsObject*>* System::Threading::Tasks::TaskScheduler::_get_s_activeTaskSchedulers() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Runtime::CompilerServices::ConditionalWeakTable_2<System::Threading::Tasks::TaskScheduler*, ::CsObject*>*>("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers")));
}
// Autogenerated static field setter
// Set static field: static private System.Runtime.CompilerServices.ConditionalWeakTable`2<System.Threading.Tasks.TaskScheduler,System.Object> s_activeTaskSchedulers
void System::Threading::Tasks::TaskScheduler::_set_s_activeTaskSchedulers(System::Runtime::CompilerServices::ConditionalWeakTable_2<System::Threading::Tasks::TaskScheduler*, ::CsObject*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_activeTaskSchedulers", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::_get_s_defaultTaskScheduler() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskScheduler*>("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler
void System::Threading::Tasks::TaskScheduler::_set_s_defaultTaskScheduler(System::Threading::Tasks::TaskScheduler* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_defaultTaskScheduler", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 s_taskSchedulerIdCounter
int System::Threading::Tasks::TaskScheduler::_get_s_taskSchedulerIdCounter() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 s_taskSchedulerIdCounter
void System::Threading::Tasks::TaskScheduler::_set_s_taskSchedulerIdCounter(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "s_taskSchedulerIdCounter", value));
}
// Autogenerated static field getter
// Get static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
System::EventHandler_1<System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskException() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::EventHandler_1<System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException"));
}
// Autogenerated static field setter
// Set static field: static private System.EventHandler`1<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskException(System::EventHandler_1<System::Threading::Tasks::UnobservedTaskExceptionEventArgs*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskException", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object _unobservedTaskExceptionLockObject
::CsObject* System::Threading::Tasks::TaskScheduler::_get__unobservedTaskExceptionLockObject() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::CsObject*>("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object _unobservedTaskExceptionLockObject
void System::Threading::Tasks::TaskScheduler::_set__unobservedTaskExceptionLockObject(::CsObject* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "TaskScheduler", "_unobservedTaskExceptionLockObject", value));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.QueueTask
void System::Threading::Tasks::TaskScheduler::QueueTask(System::Threading::Tasks::Task* task) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "QueueTask", task));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline
bool System::Threading::Tasks::TaskScheduler::TryExecuteTaskInline(System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryExecuteTaskInline", task, taskWasPreviouslyQueued));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryRunInline
bool System::Threading::Tasks::TaskScheduler::TryRunInline(System::Threading::Tasks::Task* task, bool taskWasPreviouslyQueued) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryRunInline", task, taskWasPreviouslyQueued));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.TryDequeue
bool System::Threading::Tasks::TaskScheduler::TryDequeue(System::Threading::Tasks::Task* task) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryDequeue", task));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.NotifyWorkItemProgress
void System::Threading::Tasks::TaskScheduler::NotifyWorkItemProgress() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "NotifyWorkItemProgress"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_RequiresAtomicStartTransition
bool System::Threading::Tasks::TaskScheduler::get_RequiresAtomicStartTransition() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_RequiresAtomicStartTransition"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.InternalQueueTask
void System::Threading::Tasks::TaskScheduler::InternalQueueTask(System::Threading::Tasks::Task* task) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InternalQueueTask", task));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.AddToActiveTaskSchedulers
void System::Threading::Tasks::TaskScheduler::AddToActiveTaskSchedulers() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddToActiveTaskSchedulers"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Default
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Default() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskScheduler*>("System.Threading.Tasks", "TaskScheduler", "get_Default"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Current
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_Current() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskScheduler*>("System.Threading.Tasks", "TaskScheduler", "get_Current"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_InternalCurrent
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::get_InternalCurrent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskScheduler*>("System.Threading.Tasks", "TaskScheduler", "get_InternalCurrent"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.get_Id
int System::Threading::Tasks::TaskScheduler::get_Id() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Id"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler.PublishUnobservedTaskException
void System::Threading::Tasks::TaskScheduler::PublishUnobservedTaskException(::CsObject* sender, System::Threading::Tasks::UnobservedTaskExceptionEventArgs* ueea) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "TaskScheduler", "PublishUnobservedTaskException", sender, ueea));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler..cctor
void System::Threading::Tasks::TaskScheduler::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Threading.Tasks", "TaskScheduler", ".cctor"));
}
// Autogenerated method: System.Threading.Tasks.TaskScheduler..ctor
System::Threading::Tasks::TaskScheduler* System::Threading::Tasks::TaskScheduler::New_ctor() {
  return (TaskScheduler*)THROW_UNLESS(il2cpp_utils::New("System.Threading.Tasks", "TaskScheduler"));
}
