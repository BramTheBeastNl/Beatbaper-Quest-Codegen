// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.CausalitySynchronousWork
#include "System/Threading/Tasks/CausalitySynchronousWork.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_CompletionNotification() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("CausalitySynchronousWork").WithContext("_get_CompletionNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork CompletionNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_CompletionNotification(System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("CausalitySynchronousWork").WithContext("_set_CompletionNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "CompletionNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_ProgressNotification() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("CausalitySynchronousWork").WithContext("_get_ProgressNotification");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork ProgressNotification
void System::Threading::Tasks::CausalitySynchronousWork::_set_ProgressNotification(System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("CausalitySynchronousWork").WithContext("_set_ProgressNotification");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "ProgressNotification", value));
}
// Autogenerated static field getter
// Get static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
System::Threading::Tasks::CausalitySynchronousWork System::Threading::Tasks::CausalitySynchronousWork::_get_Execution() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("CausalitySynchronousWork").WithContext("_get_Execution");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::CausalitySynchronousWork>("System.Threading.Tasks", "CausalitySynchronousWork", "Execution"));
}
// Autogenerated static field setter
// Set static field: static public System.Threading.Tasks.CausalitySynchronousWork Execution
void System::Threading::Tasks::CausalitySynchronousWork::_set_Execution(System::Threading::Tasks::CausalitySynchronousWork value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("CausalitySynchronousWork").WithContext("_set_Execution");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Threading.Tasks", "CausalitySynchronousWork", "Execution", value));
}
