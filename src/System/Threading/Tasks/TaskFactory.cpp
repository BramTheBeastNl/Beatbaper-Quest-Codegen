// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Threading.Tasks.TaskFactory
#include "System/Threading/Tasks/TaskFactory.hpp"
// Including type: System.Threading.Tasks.TaskFactory/CompleteOnInvokePromise
#include "System/Threading/Tasks/TaskFactory_CompleteOnInvokePromise.hpp"
// Including type: System.Threading.Tasks.TaskScheduler
#include "System/Threading/Tasks/TaskScheduler.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Threading.Tasks.TaskFactory..ctor
System::Threading::Tasks::TaskFactory* System::Threading::Tasks::TaskFactory::New_ctor(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskFactory").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<TaskFactory*>(cancellationToken, creationOptions, continuationOptions, scheduler));
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckCreationOptions
void System::Threading::Tasks::TaskFactory::CheckCreationOptions(System::Threading::Tasks::TaskCreationOptions creationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskFactory").WithContext("CheckCreationOptions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", il2cpp_utils::NoArgClass<void>(), "CheckCreationOptions", {}, ::il2cpp_utils::ExtractTypes(creationOptions)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creationOptions);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.StartNew
System::Threading::Tasks::Task* System::Threading::Tasks::TaskFactory::StartNew(System::Action* action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskFactory").WithContext("StartNew");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::Threading::Tasks::Task*>(), "StartNew", {}, ::il2cpp_utils::ExtractTypes(action, cancellationToken, creationOptions, scheduler)));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method, action, cancellationToken, creationOptions, scheduler);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckFromAsyncOptions
void System::Threading::Tasks::TaskFactory::CheckFromAsyncOptions(System::Threading::Tasks::TaskCreationOptions creationOptions, bool hasBeginMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskFactory").WithContext("CheckFromAsyncOptions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", il2cpp_utils::NoArgClass<void>(), "CheckFromAsyncOptions", {}, ::il2cpp_utils::ExtractTypes(creationOptions, hasBeginMethod)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creationOptions, hasBeginMethod);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CommonCWAnyLogic
System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* System::Threading::Tasks::TaskFactory::CommonCWAnyLogic(System::Collections::Generic::IList_1<System::Threading::Tasks::Task*>* tasks) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskFactory").WithContext("CommonCWAnyLogic");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", il2cpp_utils::NoArgClass<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*>(), "CommonCWAnyLogic", {}, ::il2cpp_utils::ExtractTypes(tasks)));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tasks);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory.CheckMultiTaskContinuationOptions
void System::Threading::Tasks::TaskFactory::CheckMultiTaskContinuationOptions(System::Threading::Tasks::TaskContinuationOptions continuationOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskFactory").WithContext("CheckMultiTaskContinuationOptions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskFactory", il2cpp_utils::NoArgClass<void>(), "CheckMultiTaskContinuationOptions", {}, ::il2cpp_utils::ExtractTypes(continuationOptions)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, continuationOptions);
}
// Autogenerated method: System.Threading.Tasks.TaskFactory..ctor
System::Threading::Tasks::TaskFactory* System::Threading::Tasks::TaskFactory::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskFactory").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<TaskFactory*>());
}
