// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.Remoting.Lifetime.LeaseManager
#include "System/Runtime/Remoting/Lifetime/LeaseManager.hpp"
// Including type: System.Collections.ArrayList
#include "System/Collections/ArrayList.hpp"
// Including type: System.Threading.Timer
#include "System/Threading/Timer.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.Runtime.Remoting.ServerIdentity
#include "System/Runtime/Remoting/ServerIdentity.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Runtime.Remoting.Lifetime.LeaseManager.SetPollTime
void System::Runtime::Remoting::Lifetime::LeaseManager::SetPollTime(System::TimeSpan timeSpan) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetPollTime", timeSpan));
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.LeaseManager.TrackLifetime
void System::Runtime::Remoting::Lifetime::LeaseManager::TrackLifetime(System::Runtime::Remoting::ServerIdentity* identity) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TrackLifetime", identity));
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.LeaseManager.StartManager
void System::Runtime::Remoting::Lifetime::LeaseManager::StartManager() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "StartManager"));
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.LeaseManager.StopManager
void System::Runtime::Remoting::Lifetime::LeaseManager::StopManager() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "StopManager"));
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.LeaseManager.ManageLeases
void System::Runtime::Remoting::Lifetime::LeaseManager::ManageLeases(::Il2CppObject* state) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ManageLeases", state));
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.LeaseManager..ctor
System::Runtime::Remoting::Lifetime::LeaseManager* System::Runtime::Remoting::Lifetime::LeaseManager::New_ctor() {
  return (LeaseManager*)THROW_UNLESS(il2cpp_utils::New("System.Runtime.Remoting.Lifetime", "LeaseManager"));
}
