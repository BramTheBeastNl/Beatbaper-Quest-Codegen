// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.Remoting.Lifetime.Lease
#include "System/Runtime/Remoting/Lifetime/Lease.hpp"
// Including type: System.Runtime.Remoting.Lifetime.Lease/RenewalDelegate
#include "System/Runtime/Remoting/Lifetime/Lease_RenewalDelegate.hpp"
// Including type: System.Collections.ArrayList
#include "System/Collections/ArrayList.hpp"
// Including type: System.Collections.Queue
#include "System/Collections/Queue.hpp"
// Including type: System.Runtime.Remoting.Lifetime.ISponsor
#include "System/Runtime/Remoting/Lifetime/ISponsor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.Activate
void System::Runtime::Remoting::Lifetime::Lease::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("Activate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.Unregister
void System::Runtime::Remoting::Lifetime::Lease::Unregister(System::Runtime::Remoting::Lifetime::ISponsor* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("Unregister");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Unregister", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(obj)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.UpdateState
void System::Runtime::Remoting::Lifetime::Lease::UpdateState() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("UpdateState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.CheckNextSponsor
void System::Runtime::Remoting::Lifetime::Lease::CheckNextSponsor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("CheckNextSponsor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CheckNextSponsor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.ProcessSponsorResponse
void System::Runtime::Remoting::Lifetime::Lease::ProcessSponsorResponse(::Il2CppObject* state, bool timedOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("ProcessSponsorResponse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ProcessSponsorResponse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state, timedOut)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, timedOut);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.get_CurrentLeaseTime
System::TimeSpan System::Runtime::Remoting::Lifetime::Lease::get_CurrentLeaseTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("get_CurrentLeaseTime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_CurrentLeaseTime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.get_CurrentState
System::Runtime::Remoting::Lifetime::LeaseState System::Runtime::Remoting::Lifetime::Lease::get_CurrentState() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("get_CurrentState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_CurrentState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Runtime::Remoting::Lifetime::LeaseState, false>(this, ___internal__method);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.get_RenewOnCallTime
System::TimeSpan System::Runtime::Remoting::Lifetime::Lease::get_RenewOnCallTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("get_RenewOnCallTime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_RenewOnCallTime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method);
}
// Autogenerated method: System.Runtime.Remoting.Lifetime.Lease.Renew
System::TimeSpan System::Runtime::Remoting::Lifetime::Lease::Renew(System::TimeSpan renewalTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Runtime::Remoting::Lifetime").WithContext("Lease").WithContext("Renew");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Renew", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(renewalTime)));
  return ::il2cpp_utils::RunMethodThrow<System::TimeSpan, false>(this, ___internal__method, renewalTime);
}
