// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Net.Http.StreamContent
#include "System/Net/Http/StreamContent.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Net.TransportContext
#include "System/Net/TransportContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.StreamContent..ctor
System::Net::Http::StreamContent* System::Net::Http::StreamContent::New_ctor(System::IO::Stream* content) {
  return THROW_UNLESS(il2cpp_utils::New<StreamContent*>(content));
}
// Autogenerated method: System.Net.Http.StreamContent..ctor
System::Net::Http::StreamContent* System::Net::Http::StreamContent::New_ctor(System::IO::Stream* content, int bufferSize) {
  return THROW_UNLESS(il2cpp_utils::New<StreamContent*>(content, bufferSize));
}
// Autogenerated method: System.Net.Http.StreamContent..ctor
System::Net::Http::StreamContent* System::Net::Http::StreamContent::New_ctor(System::IO::Stream* content, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::New<StreamContent*>(content, cancellationToken));
}
// Autogenerated method: System.Net.Http.StreamContent.Dispose
void System::Net::Http::StreamContent::Dispose(bool disposing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose", disposing));
}
// Autogenerated method: System.Net.Http.StreamContent.SerializeToStreamAsync
System::Threading::Tasks::Task* System::Net::Http::StreamContent::SerializeToStreamAsync(System::IO::Stream* stream, System::Net::TransportContext* context) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task*>(this, "SerializeToStreamAsync", stream, context));
}
// Autogenerated method: System.Net.Http.StreamContent.TryComputeLength
bool System::Net::Http::StreamContent::TryComputeLength(int64_t& length) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryComputeLength", length));
}
