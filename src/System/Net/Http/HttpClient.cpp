// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.HttpClient
#include "System/Net/Http/HttpClient.hpp"
// Including type: System.Net.Http.HttpClient/<SendAsyncWorker>d__47
#include "System/Net/Http/HttpClient_-SendAsyncWorker-d__47.hpp"
// Including type: System.Net.Http.HttpClient/<GetStringAsync>d__52
#include "System/Net/Http/HttpClient_-GetStringAsync-d__52.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Net.Http.Headers.HttpRequestHeaders
#include "System/Net/Http/Headers/HttpRequestHeaders.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Net.Http.HttpResponseMessage
#include "System/Net/Http/HttpResponseMessage.hpp"
// Including type: System.Net.Http.HttpCompletionOption
#include "System/Net/Http/HttpCompletionOption.hpp"
// Including type: System.Net.Http.HttpRequestMessage
#include "System/Net/Http/HttpRequestMessage.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Net.Http.HttpMessageHandler
#include "System/Net/Http/HttpMessageHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.TimeSpan TimeoutDefault
System::TimeSpan System::Net::Http::HttpClient::_get_TimeoutDefault() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::TimeSpan>("System.Net.Http", "HttpClient", "TimeoutDefault"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.TimeSpan TimeoutDefault
void System::Net::Http::HttpClient::_set_TimeoutDefault(System::TimeSpan value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http", "HttpClient", "TimeoutDefault", value));
}
// Autogenerated method: System.Net.Http.HttpClient.get_MaxResponseContentBufferSize
int64_t System::Net::Http::HttpClient::get_MaxResponseContentBufferSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int64_t>(this, "get_MaxResponseContentBufferSize"));
}
// Autogenerated method: System.Net.Http.HttpClient.GetAsync
System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* System::Net::Http::HttpClient::GetAsync(::Il2CppString* requestUri, System::Net::Http::HttpCompletionOption completionOption) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>*>(this, "GetAsync", requestUri, completionOption));
}
// Autogenerated method: System.Net.Http.HttpClient.SendAsync
System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* System::Net::Http::HttpClient::SendAsync(System::Net::Http::HttpRequestMessage* request, System::Net::Http::HttpCompletionOption completionOption) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>*>(this, "SendAsync", request, completionOption));
}
// Autogenerated method: System.Net.Http.HttpClient.SendAsync
System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* System::Net::Http::HttpClient::SendAsync(System::Net::Http::HttpRequestMessage* request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>*>(this, "SendAsync", request, completionOption, cancellationToken));
}
// Autogenerated method: System.Net.Http.HttpClient.SendAsyncWorker
System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* System::Net::Http::HttpClient::SendAsyncWorker(System::Net::Http::HttpRequestMessage* request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>*>(this, "SendAsyncWorker", request, completionOption, cancellationToken));
}
// Autogenerated method: System.Net.Http.HttpClient.GetStringAsync
System::Threading::Tasks::Task_1<::Il2CppString*>* System::Net::Http::HttpClient::GetStringAsync(::Il2CppString* requestUri) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<::Il2CppString*>*>(this, "GetStringAsync", requestUri));
}
// Autogenerated method: System.Net.Http.HttpClient..cctor
void System::Net::Http::HttpClient::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Net.Http", "HttpClient", ".cctor"));
}
// Autogenerated method: System.Net.Http.HttpClient.<>n__0
System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* System::Net::Http::HttpClient::$$n__0(System::Net::Http::HttpRequestMessage* request, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS((il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>*>(this, "<>n__0", request, cancellationToken)));
}
// Autogenerated method: System.Net.Http.HttpClient..ctor
System::Net::Http::HttpClient* System::Net::Http::HttpClient::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<HttpClient*>());
}
// Autogenerated method: System.Net.Http.HttpClient..ctor
System::Net::Http::HttpClient* System::Net::Http::HttpClient::New_ctor(System::Net::Http::HttpMessageHandler* handler, bool disposeHandler) {
  return THROW_UNLESS(il2cpp_utils::New<HttpClient*>(handler, disposeHandler));
}
// Autogenerated method: System.Net.Http.HttpClient.Dispose
void System::Net::Http::HttpClient::Dispose(bool disposing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose", disposing));
}
// Autogenerated method: System.Net.Http.HttpClient.SendAsync
System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* System::Net::Http::HttpClient::SendAsync(System::Net::Http::HttpRequestMessage* request, System::Threading::CancellationToken cancellationToken) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>*>(this, "SendAsync", request, cancellationToken));
}
