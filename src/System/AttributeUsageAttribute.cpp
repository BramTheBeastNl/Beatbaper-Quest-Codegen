// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.AttributeUsageAttribute
#include "System/AttributeUsageAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.AttributeUsageAttribute Default
System::AttributeUsageAttribute* System::AttributeUsageAttribute::_get_Default() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System").WithContext("AttributeUsageAttribute").WithContext("_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::AttributeUsageAttribute*>("System", "AttributeUsageAttribute", "Default"));
}
// Autogenerated static field setter
// Set static field: static System.AttributeUsageAttribute Default
void System::AttributeUsageAttribute::_set_Default(System::AttributeUsageAttribute* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("System").WithContext("AttributeUsageAttribute").WithContext("_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System", "AttributeUsageAttribute", "Default", value));
}
// Autogenerated method: System.AttributeUsageAttribute.get_AllowMultiple
bool System::AttributeUsageAttribute::get_AllowMultiple() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("AttributeUsageAttribute").WithContext("get_AllowMultiple");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_AllowMultiple", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.AttributeUsageAttribute.set_AllowMultiple
void System::AttributeUsageAttribute::set_AllowMultiple(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("AttributeUsageAttribute").WithContext("set_AllowMultiple");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_AllowMultiple", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.AttributeUsageAttribute.get_Inherited
bool System::AttributeUsageAttribute::get_Inherited() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("AttributeUsageAttribute").WithContext("get_Inherited");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Inherited", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.AttributeUsageAttribute.set_Inherited
void System::AttributeUsageAttribute::set_Inherited(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("AttributeUsageAttribute").WithContext("set_Inherited");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Inherited", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.AttributeUsageAttribute..cctor
void System::AttributeUsageAttribute::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("AttributeUsageAttribute").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "AttributeUsageAttribute", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
