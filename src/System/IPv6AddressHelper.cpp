// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IPv6AddressHelper
#include "System/IPv6AddressHelper.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.IPv6AddressHelper.ParseCanonicalName
::Il2CppString* System::IPv6AddressHelper::ParseCanonicalName(::Il2CppString* str, int start, bool& isLoopback, ::Il2CppString*& scopeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("ParseCanonicalName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<::Il2CppString*>(), "ParseCanonicalName", {}, ::il2cpp_utils::ExtractTypes(str, start, isLoopback, scopeId)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str, start, isLoopback, scopeId);
}
// Autogenerated method: System.IPv6AddressHelper.CreateCanonicalName
::Il2CppString* System::IPv6AddressHelper::CreateCanonicalName(uint16_t* numbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("CreateCanonicalName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<::Il2CppString*>(), "CreateCanonicalName", {}, ::il2cpp_utils::ExtractTypes(numbers)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, numbers);
}
// Autogenerated method: System.IPv6AddressHelper.FindCompressionRange
System::Collections::Generic::KeyValuePair_2<int, int> System::IPv6AddressHelper::FindCompressionRange(uint16_t* numbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("FindCompressionRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<System::Collections::Generic::KeyValuePair_2<int, int>>(), "FindCompressionRange", {}, ::il2cpp_utils::ExtractTypes(numbers))));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::KeyValuePair_2<int, int>, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, numbers);
}
// Autogenerated method: System.IPv6AddressHelper.ShouldHaveIpv4Embedded
bool System::IPv6AddressHelper::ShouldHaveIpv4Embedded(uint16_t* numbers) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("ShouldHaveIpv4Embedded");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<bool>(), "ShouldHaveIpv4Embedded", {}, ::il2cpp_utils::ExtractTypes(numbers)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, numbers);
}
// Autogenerated method: System.IPv6AddressHelper.InternalIsValid
bool System::IPv6AddressHelper::InternalIsValid(::Il2CppChar* name, int start, int& end, bool validateStrictAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("InternalIsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<bool>(), "InternalIsValid", {}, ::il2cpp_utils::ExtractTypes(name, start, end, validateStrictAddress)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, start, end, validateStrictAddress);
}
// Autogenerated method: System.IPv6AddressHelper.IsValid
bool System::IPv6AddressHelper::IsValid(::Il2CppChar* name, int start, int& end) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<bool>(), "IsValid", {}, ::il2cpp_utils::ExtractTypes(name, start, end)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, start, end);
}
// Autogenerated method: System.IPv6AddressHelper.IsValidStrict
bool System::IPv6AddressHelper::IsValidStrict(::Il2CppChar* name, int start, int& end) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("IsValidStrict");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<bool>(), "IsValidStrict", {}, ::il2cpp_utils::ExtractTypes(name, start, end)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, start, end);
}
// Autogenerated method: System.IPv6AddressHelper.Parse
bool System::IPv6AddressHelper::Parse(::Il2CppString* address, uint16_t* numbers, int start, ::Il2CppString*& scopeId) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("IPv6AddressHelper").WithContext("Parse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "IPv6AddressHelper", il2cpp_utils::NoArgClass<bool>(), "Parse", {}, ::il2cpp_utils::ExtractTypes(address, numbers, start, scopeId)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, address, numbers, start, scopeId);
}
