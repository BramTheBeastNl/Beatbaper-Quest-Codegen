// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.DomainNameHelper
#include "System/DomainNameHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.DomainNameHelper.ParseCanonicalName
::Il2CppString* System::DomainNameHelper::ParseCanonicalName(::Il2CppString* str, int start, int end, bool& loopback) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("ParseCanonicalName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "ParseCanonicalName", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(str, start, end, loopback)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str, start, end, loopback);
}
// Autogenerated method: System.DomainNameHelper.IsValid
bool System::DomainNameHelper::IsValid(::Il2CppChar* name, uint16_t pos, int& returnedEnd, bool& notCanonical, bool notImplicitFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(name, pos, returnedEnd, notCanonical, notImplicitFile)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, pos, returnedEnd, notCanonical, notImplicitFile);
}
// Autogenerated method: System.DomainNameHelper.IsValidByIri
bool System::DomainNameHelper::IsValidByIri(::Il2CppChar* name, uint16_t pos, int& returnedEnd, bool& notCanonical, bool notImplicitFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IsValidByIri");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IsValidByIri", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(name, pos, returnedEnd, notCanonical, notImplicitFile)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, pos, returnedEnd, notCanonical, notImplicitFile);
}
// Autogenerated method: System.DomainNameHelper.IdnEquivalent
::Il2CppString* System::DomainNameHelper::IdnEquivalent(::Il2CppChar* hostname, int start, int end, bool& allAscii, bool& atLeastOneValidIdn) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IdnEquivalent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IdnEquivalent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hostname, start, end, allAscii, atLeastOneValidIdn)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostname, start, end, allAscii, atLeastOneValidIdn);
}
// Autogenerated method: System.DomainNameHelper.IdnEquivalent
::Il2CppString* System::DomainNameHelper::IdnEquivalent(::Il2CppChar* hostname, int start, int end, bool& allAscii, ::Il2CppString*& bidiStrippedHost) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IdnEquivalent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IdnEquivalent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hostname, start, end, allAscii, bidiStrippedHost)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostname, start, end, allAscii, bidiStrippedHost);
}
// Autogenerated method: System.DomainNameHelper.IsIdnAce
bool System::DomainNameHelper::IsIdnAce(::Il2CppString* input, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IsIdnAce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IsIdnAce", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, index)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, index);
}
// Autogenerated method: System.DomainNameHelper.IsIdnAce
bool System::DomainNameHelper::IsIdnAce(::Il2CppChar* input, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IsIdnAce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IsIdnAce", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, index)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, index);
}
// Autogenerated method: System.DomainNameHelper.UnicodeEquivalent
::Il2CppString* System::DomainNameHelper::UnicodeEquivalent(::Il2CppString* idnHost, ::Il2CppChar* hostname, int start, int end) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("UnicodeEquivalent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "UnicodeEquivalent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idnHost, hostname, start, end)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, idnHost, hostname, start, end);
}
// Autogenerated method: System.DomainNameHelper.UnicodeEquivalent
::Il2CppString* System::DomainNameHelper::UnicodeEquivalent(::Il2CppChar* hostname, int start, int end, bool& allAscii, bool& atLeastOneValidIdn) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("UnicodeEquivalent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "UnicodeEquivalent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hostname, start, end, allAscii, atLeastOneValidIdn)));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hostname, start, end, allAscii, atLeastOneValidIdn);
}
// Autogenerated method: System.DomainNameHelper.IsASCIILetterOrDigit
bool System::DomainNameHelper::IsASCIILetterOrDigit(::Il2CppChar character, bool& notCanonical) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IsASCIILetterOrDigit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IsASCIILetterOrDigit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(character, notCanonical)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, character, notCanonical);
}
// Autogenerated method: System.DomainNameHelper.IsValidDomainLabelCharacter
bool System::DomainNameHelper::IsValidDomainLabelCharacter(::Il2CppChar character, bool& notCanonical) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System").WithContext("DomainNameHelper").WithContext("IsValidDomainLabelCharacter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "DomainNameHelper", "IsValidDomainLabelCharacter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(character, notCanonical)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, character, notCanonical);
}
