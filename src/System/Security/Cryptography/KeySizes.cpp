// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.KeySizes
#include "System/Security/Cryptography/KeySizes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Security.Cryptography.KeySizes.get_MinSize
int System::Security::Cryptography::KeySizes::get_MinSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_MinSize"));
}
// Autogenerated method: System.Security.Cryptography.KeySizes.get_MaxSize
int System::Security::Cryptography::KeySizes::get_MaxSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_MaxSize"));
}
// Autogenerated method: System.Security.Cryptography.KeySizes.get_SkipSize
int System::Security::Cryptography::KeySizes::get_SkipSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_SkipSize"));
}
// Autogenerated method: System.Security.Cryptography.KeySizes..ctor
System::Security::Cryptography::KeySizes* System::Security::Cryptography::KeySizes::New_ctor(int minSize, int maxSize, int skipSize) {
  return THROW_UNLESS(il2cpp_utils::New<KeySizes*>(minSize, maxSize, skipSize));
}
// Autogenerated method: System.Security.Cryptography.KeySizes.IsLegal
bool System::Security::Cryptography::KeySizes::IsLegal(int keySize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsLegal", keySize));
}
// Autogenerated method: System.Security.Cryptography.KeySizes.IsLegalKeySize
bool System::Security::Cryptography::KeySizes::IsLegalKeySize(::Array<System::Security::Cryptography::KeySizes*>* legalKeys, int size) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System.Security.Cryptography", "KeySizes", "IsLegalKeySize", legalKeys, size));
}
