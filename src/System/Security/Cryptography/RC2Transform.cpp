// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.RC2Transform
#include "System/Security/Cryptography/RC2Transform.hpp"
// Including type: System.Security.Cryptography.RC2
#include "System/Security/Cryptography/RC2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Byte[] pitable
::Array<uint8_t>* System::Security::Cryptography::RC2Transform::_get_pitable() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Security.Cryptography", "RC2Transform", "pitable"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Byte[] pitable
void System::Security::Cryptography::RC2Transform::_set_pitable(::Array<uint8_t>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Security.Cryptography", "RC2Transform", "pitable", value));
}
// Autogenerated method: System.Security.Cryptography.RC2Transform..ctor
System::Security::Cryptography::RC2Transform* System::Security::Cryptography::RC2Transform::New_ctor(System::Security::Cryptography::RC2* rc2Algo, bool encryption, ::Array<uint8_t>* key, ::Array<uint8_t>* iv) {
  return THROW_UNLESS(il2cpp_utils::New<RC2Transform*>(rc2Algo, encryption, key, iv));
}
// Autogenerated method: System.Security.Cryptography.RC2Transform..cctor
void System::Security::Cryptography::RC2Transform::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Security.Cryptography", "RC2Transform", ".cctor"));
}
// Autogenerated method: System.Security.Cryptography.RC2Transform.ECB
void System::Security::Cryptography::RC2Transform::ECB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ECB", input, output));
}
