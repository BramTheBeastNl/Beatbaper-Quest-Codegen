// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Version
#include "System\Version.hpp"
// Including type: System.Version/ParseFailureKind
#include "System\Version_ParseFailureKind.hpp"
// Including type: System.Version/VersionResult
#include "System\Version_VersionResult.hpp"
// Including type: System.Text.StringBuilder
#include "System\Text\StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Char[] SeparatorsArray
::Array<::Il2CppChar>* System::Version::_get_SeparatorsArray() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppChar>*>("System", "Version", "SeparatorsArray"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Char[] SeparatorsArray
void System::Version::_set_SeparatorsArray(::Array<::Il2CppChar>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System", "Version", "SeparatorsArray", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ZERO_CHAR_VALUE
int System::Version::_get_ZERO_CHAR_VALUE() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System", "Version", "ZERO_CHAR_VALUE"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ZERO_CHAR_VALUE
void System::Version::_set_ZERO_CHAR_VALUE(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System", "Version", "ZERO_CHAR_VALUE", value));
}
// Autogenerated method: System.Version..ctor
System::Version* System::Version::New_ctor(int major, int minor, int build, int revision) {
  return (Version*)THROW_UNLESS(il2cpp_utils::New("System", "Version", major, minor, build, revision));
}
// Autogenerated method: System.Version..ctor
System::Version* System::Version::New_ctor(int major, int minor, int build) {
  return (Version*)THROW_UNLESS(il2cpp_utils::New("System", "Version", major, minor, build));
}
// Autogenerated method: System.Version..ctor
System::Version* System::Version::New_ctor(int major, int minor) {
  return (Version*)THROW_UNLESS(il2cpp_utils::New("System", "Version", major, minor));
}
// Autogenerated method: System.Version..ctor
System::Version* System::Version::New_ctor(::Il2CppString* version) {
  return (Version*)THROW_UNLESS(il2cpp_utils::New("System", "Version", version));
}
// Autogenerated method: System.Version.get_Major
int System::Version::get_Major() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Major"));
}
// Autogenerated method: System.Version.get_Minor
int System::Version::get_Minor() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Minor"));
}
// Autogenerated method: System.Version.get_Build
int System::Version::get_Build() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Build"));
}
// Autogenerated method: System.Version.get_Revision
int System::Version::get_Revision() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Revision"));
}
// Autogenerated method: System.Version.ToString
::Il2CppString* System::Version::ToString(int fieldCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "ToString", fieldCount));
}
// Autogenerated method: System.Version.AppendPositiveNumber
void System::Version::AppendPositiveNumber(int num, System::Text::StringBuilder* sb) {
  THROW_UNLESS(il2cpp_utils::RunMethod("System", "Version", "AppendPositiveNumber", num, sb));
}
// Autogenerated method: System.Version.Parse
System::Version* System::Version::Parse(::Il2CppString* input) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Version*>("System", "Version", "Parse", input));
}
// Autogenerated method: System.Version.TryParseVersion
bool System::Version::TryParseVersion(::Il2CppString* version, System::Version::VersionResult& result) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "TryParseVersion", version, result));
}
// Autogenerated method: System.Version.TryParseComponent
bool System::Version::TryParseComponent(::Il2CppString* component, ::Il2CppString* componentName, System::Version::VersionResult& result, int& parsedComponent) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "TryParseComponent", component, componentName, result, parsedComponent));
}
// Autogenerated method: System.Version..cctor
void System::Version::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System", "Version", ".cctor"));
}
// Autogenerated method: System.Version..ctor
System::Version* System::Version::New_ctor() {
  return (Version*)THROW_UNLESS(il2cpp_utils::New("System", "Version"));
}
// Autogenerated method: System.Version.Clone
::Il2CppObject* System::Version::Clone() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(this, "Clone"));
}
// Autogenerated method: System.Version.CompareTo
int System::Version::CompareTo(::Il2CppObject* version) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "CompareTo", version));
}
int System::Version::System_IComparable_CompareTo(::Il2CppObject* version) {
  return CompareTo(version);
}
// Autogenerated method: System.Version.CompareTo
int System::Version::CompareTo(System::Version* value) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "CompareTo", value));
}
// Autogenerated method: System.Version.Equals
bool System::Version::Equals(::Il2CppObject* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Equals", obj));
}
// Autogenerated method: System.Version.Equals
bool System::Version::Equals(System::Version* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Equals", obj));
}
// Autogenerated method: System.Version.GetHashCode
int System::Version::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetHashCode"));
}
// Autogenerated method: System.Version.ToString
::Il2CppString* System::Version::ToString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "ToString"));
}
// Autogenerated method: System.Version.op_Equality
bool System::operator ==(System::Version* v1, System::Version& v2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "op_Equality", v1, &v2));
}
// Autogenerated method: System.Version.op_Inequality
bool System::operator !=(System::Version* v1, System::Version& v2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "op_Inequality", v1, &v2));
}
// Autogenerated method: System.Version.op_LessThan
bool System::operator <(System::Version* v1, System::Version& v2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "op_LessThan", v1, &v2));
}
// Autogenerated method: System.Version.op_LessThanOrEqual
bool System::operator <=(System::Version* v1, System::Version& v2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "op_LessThanOrEqual", v1, &v2));
}
// Autogenerated method: System.Version.op_GreaterThan
bool System::operator >(System::Version* v1, System::Version& v2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "op_GreaterThan", v1, &v2));
}
// Autogenerated method: System.Version.op_GreaterThanOrEqual
bool System::operator >=(System::Version* v1, System::Version& v2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("System", "Version", "op_GreaterThanOrEqual", v1, &v2));
}
