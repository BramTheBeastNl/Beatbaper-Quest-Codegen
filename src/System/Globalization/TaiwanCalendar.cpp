// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Globalization.TaiwanCalendar
#include "System\Globalization\TaiwanCalendar.hpp"
// Including type: System.Globalization.GregorianCalendarHelper
#include "System\Globalization\GregorianCalendarHelper.hpp"
// Including type: System.Globalization.EraInfo
#include "System\Globalization\EraInfo.hpp"
// Including type: System.DayOfWeek
#include "System\DayOfWeek.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Globalization.EraInfo[] taiwanEraInfo
::Array<System::Globalization::EraInfo*>* System::Globalization::TaiwanCalendar::_get_taiwanEraInfo() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<System::Globalization::EraInfo*>*>("System.Globalization", "TaiwanCalendar", "taiwanEraInfo"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.EraInfo[] taiwanEraInfo
void System::Globalization::TaiwanCalendar::_set_taiwanEraInfo(::Array<System::Globalization::EraInfo*>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Globalization", "TaiwanCalendar", "taiwanEraInfo", value));
}
// Autogenerated static field getter
// Get static field: static System.Globalization.Calendar s_defaultInstance
System::Globalization::Calendar* System::Globalization::TaiwanCalendar::_get_s_defaultInstance() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Globalization::Calendar*>("System.Globalization", "TaiwanCalendar", "s_defaultInstance"));
}
// Autogenerated static field setter
// Set static field: static System.Globalization.Calendar s_defaultInstance
void System::Globalization::TaiwanCalendar::_set_s_defaultInstance(System::Globalization::Calendar* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Globalization", "TaiwanCalendar", "s_defaultInstance", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.DateTime calendarMinValue
System::DateTime System::Globalization::TaiwanCalendar::_get_calendarMinValue() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::DateTime>("System.Globalization", "TaiwanCalendar", "calendarMinValue"));
}
// Autogenerated static field setter
// Set static field: static readonly System.DateTime calendarMinValue
void System::Globalization::TaiwanCalendar::_set_calendarMinValue(System::DateTime value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Globalization", "TaiwanCalendar", "calendarMinValue", value));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetDefaultInstance
System::Globalization::Calendar* System::Globalization::TaiwanCalendar::GetDefaultInstance() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Globalization::Calendar*>("System.Globalization", "TaiwanCalendar", "GetDefaultInstance"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar..cctor
void System::Globalization::TaiwanCalendar::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("System.Globalization", "TaiwanCalendar", ".cctor"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.get_MinSupportedDateTime
System::DateTime System::Globalization::TaiwanCalendar::get_MinSupportedDateTime() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::DateTime>(this, "get_MinSupportedDateTime"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.get_MaxSupportedDateTime
System::DateTime System::Globalization::TaiwanCalendar::get_MaxSupportedDateTime() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::DateTime>(this, "get_MaxSupportedDateTime"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar..ctor
System::Globalization::TaiwanCalendar* System::Globalization::TaiwanCalendar::New_ctor() {
  return (TaiwanCalendar*)THROW_UNLESS(il2cpp_utils::New("System.Globalization", "TaiwanCalendar"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.get_ID
int System::Globalization::TaiwanCalendar::get_ID() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_ID"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetDaysInMonth
int System::Globalization::TaiwanCalendar::GetDaysInMonth(int year, int month, int era) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetDaysInMonth", year, month, era));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetDayOfMonth
int System::Globalization::TaiwanCalendar::GetDayOfMonth(System::DateTime time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetDayOfMonth", time));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetDayOfWeek
System::DayOfWeek System::Globalization::TaiwanCalendar::GetDayOfWeek(System::DateTime time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::DayOfWeek>(this, "GetDayOfWeek", time));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetMonthsInYear
int System::Globalization::TaiwanCalendar::GetMonthsInYear(int year, int era) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetMonthsInYear", year, era));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetEra
int System::Globalization::TaiwanCalendar::GetEra(System::DateTime time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetEra", time));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetMonth
int System::Globalization::TaiwanCalendar::GetMonth(System::DateTime time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetMonth", time));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.GetYear
int System::Globalization::TaiwanCalendar::GetYear(System::DateTime time) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetYear", time));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.IsLeapYear
bool System::Globalization::TaiwanCalendar::IsLeapYear(int year, int era) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsLeapYear", year, era));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.ToDateTime
System::DateTime System::Globalization::TaiwanCalendar::ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::DateTime>(this, "ToDateTime", year, month, day, hour, minute, second, millisecond, era));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.get_Eras
::Array<int>* System::Globalization::TaiwanCalendar::get_Eras() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<int>*>(this, "get_Eras"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.get_TwoDigitYearMax
int System::Globalization::TaiwanCalendar::get_TwoDigitYearMax() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_TwoDigitYearMax"));
}
// Autogenerated method: System.Globalization.TaiwanCalendar.ToFourDigitYear
int System::Globalization::TaiwanCalendar::ToFourDigitYear(int year) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "ToFourDigitYear", year));
}
