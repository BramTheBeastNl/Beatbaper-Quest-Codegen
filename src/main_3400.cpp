// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LobbyDataModelInstaller
#include "GlobalNamespace/LobbyDataModelInstaller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyDataModelInstaller.InstallBindings
void GlobalNamespace::LobbyDataModelInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyDataModelInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LobbyDataModelInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyDataModelInstaller::*)()>(&LobbyDataModelInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyDataModelInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyDataModelInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyDataModelInstaller::*)()>(&LobbyDataModelInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyDataModelInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyDataModelInstaller::*)()>(&LobbyDataModelInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyDataModelInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainSettingsMenuViewControllersInstaller
#include "GlobalNamespace/MainSettingsMenuViewControllersInstaller.hpp"
// Including type: MainSettingsMenuViewController
#include "GlobalNamespace/MainSettingsMenuViewController.hpp"
// Including type: TabBarViewController
#include "GlobalNamespace/TabBarViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainSettingsMenuViewControllersInstaller.InstallBindings
void GlobalNamespace::MainSettingsMenuViewControllersInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsMenuViewControllersInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainSettingsMenuViewControllersInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsMenuViewControllersInstaller::*)()>(&MainSettingsMenuViewControllersInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsMenuViewControllersInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainSettingsMenuViewControllersInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsMenuViewControllersInstaller::*)()>(&MainSettingsMenuViewControllersInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsMenuViewControllersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainSettingsMenuViewControllersInstaller::*)()>(&MainSettingsMenuViewControllersInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainSettingsMenuViewControllersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuViewControllersInstaller
#include "GlobalNamespace/MenuViewControllersInstaller.hpp"
// Including type: ServerPlayerListController
#include "GlobalNamespace/ServerPlayerListController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuViewControllersInstaller.InstallBindings
void GlobalNamespace::MenuViewControllersInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuViewControllersInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MenuViewControllersInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuViewControllersInstaller::*)()>(&MenuViewControllersInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuViewControllersInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuViewControllersInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuViewControllersInstaller::*)()>(&MenuViewControllersInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuViewControllersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuViewControllersInstaller::*)()>(&MenuViewControllersInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuViewControllersInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionGameplayInstaller
#include "GlobalNamespace/MissionGameplayInstaller.hpp"
// Including type: MissionGameplaySceneSetupData
#include "GlobalNamespace/MissionGameplaySceneSetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionGameplayInstaller.InstallBindings
void GlobalNamespace::MissionGameplayInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionGameplayInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionGameplayInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionGameplayInstaller::*)()>(&MissionGameplayInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionGameplayInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionGameplayInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionGameplayInstaller::*)()>(&MissionGameplayInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionGameplayInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionGameplayInstaller::*)()>(&MissionGameplayInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionGameplayInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerCoreInstaller
#include "GlobalNamespace/MultiplayerCoreInstaller.hpp"
// Including type: ScoreSyncStateManager
#include "GlobalNamespace/ScoreSyncStateManager.hpp"
// Including type: MultiplayerBadgesModelSO
#include "GlobalNamespace/MultiplayerBadgesModelSO.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerCoreInstaller.InstallBindings
void GlobalNamespace::MultiplayerCoreInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCoreInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerCoreInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerCoreInstaller::*)()>(&MultiplayerCoreInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerCoreInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerCoreInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerCoreInstaller::*)()>(&MultiplayerCoreInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerCoreInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerCoreInstaller::*)()>(&MultiplayerCoreInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerCoreInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyInstaller
#include "GlobalNamespace/MultiplayerLobbyInstaller.hpp"
// Including type: MultiplayerLobbyAvatarController
#include "GlobalNamespace/MultiplayerLobbyAvatarController.hpp"
// Including type: MultiplayerLobbyAvatarPlace
#include "GlobalNamespace/MultiplayerLobbyAvatarPlace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyInstaller.InstallBindings
void GlobalNamespace::MultiplayerLobbyInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyInstaller::*)()>(&MultiplayerLobbyInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyInstaller::*)()>(&MultiplayerLobbyInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyInstaller::*)()>(&MultiplayerLobbyInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalPlayerInstaller
#include "GlobalNamespace/MultiplayerLocalPlayerInstaller.hpp"
// Including type: MultiplayerLevelSceneSetupData
#include "GlobalNamespace/MultiplayerLevelSceneSetupData.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLocalPlayerInstaller.InstallBindings
void GlobalNamespace::MultiplayerLocalPlayerInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalPlayerInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLocalPlayerInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalPlayerInstaller::*)()>(&MultiplayerLocalPlayerInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalPlayerInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalPlayerInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalPlayerInstaller::*)()>(&MultiplayerLocalPlayerInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalPlayerInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalPlayerInstaller::*)()>(&MultiplayerLocalPlayerInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalPlayerInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerMenuInstaller
#include "GlobalNamespace/MultiplayerMenuInstaller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerMenuInstaller.InstallBindings
void GlobalNamespace::MultiplayerMenuInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerMenuInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerMenuInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerMenuInstaller::*)()>(&MultiplayerMenuInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerMenuInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerMenuInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerMenuInstaller::*)()>(&MultiplayerMenuInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerMenuInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerMenuInstaller::*)()>(&MultiplayerMenuInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerMenuInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardGameplayInstaller
#include "GlobalNamespace/StandardGameplayInstaller.hpp"
// Including type: StandardGameplaySceneSetupData
#include "GlobalNamespace/StandardGameplaySceneSetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardGameplayInstaller.InstallBindings
void GlobalNamespace::StandardGameplayInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardGameplayInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardGameplayInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardGameplayInstaller::*)()>(&StandardGameplayInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardGameplayInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardGameplayInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardGameplayInstaller::*)()>(&StandardGameplayInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardGameplayInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardGameplayInstaller::*)()>(&StandardGameplayInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardGameplayInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialBeatmapObjectPoolsInstaller
#include "GlobalNamespace/TutorialBeatmapObjectPoolsInstaller.hpp"
// Including type: TutorialNoteController
#include "GlobalNamespace/TutorialNoteController.hpp"
// Including type: BombNoteController
#include "GlobalNamespace/BombNoteController.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: NoteLineConnectionController
#include "GlobalNamespace/NoteLineConnectionController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialBeatmapObjectPoolsInstaller.InstallBindings
void GlobalNamespace::TutorialBeatmapObjectPoolsInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectPoolsInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TutorialBeatmapObjectPoolsInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialBeatmapObjectPoolsInstaller::*)()>(&TutorialBeatmapObjectPoolsInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialBeatmapObjectPoolsInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialBeatmapObjectPoolsInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialBeatmapObjectPoolsInstaller::*)()>(&TutorialBeatmapObjectPoolsInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialBeatmapObjectPoolsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialBeatmapObjectPoolsInstaller::*)()>(&TutorialBeatmapObjectPoolsInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialBeatmapObjectPoolsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialInstaller
#include "GlobalNamespace/TutorialInstaller.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: BeatmapObjectSpawnControllerPlayerHeightSetter
#include "GlobalNamespace/BeatmapObjectSpawnControllerPlayerHeightSetter.hpp"
// Including type: PlayerHeightDetector
#include "GlobalNamespace/PlayerHeightDetector.hpp"
// Including type: EffectPoolsManualInstaller
#include "GlobalNamespace/EffectPoolsManualInstaller.hpp"
// Including type: TutorialSceneSetupData
#include "GlobalNamespace/TutorialSceneSetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialInstaller.InstallBindings
void GlobalNamespace::TutorialInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TutorialInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialInstaller::*)()>(&TutorialInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TutorialInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialInstaller::*)()>(&TutorialInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TutorialInstaller::*)()>(&TutorialInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TutorialInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BasicUIAudioManager
#include "GlobalNamespace/BasicUIAudioManager.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BasicUIAudioManager.Start
void GlobalNamespace::BasicUIAudioManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicUIAudioManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicUIAudioManager.OnEnable
void GlobalNamespace::BasicUIAudioManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicUIAudioManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicUIAudioManager.OnDisable
void GlobalNamespace::BasicUIAudioManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicUIAudioManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicUIAudioManager.HandleButtonClickEvent
void GlobalNamespace::BasicUIAudioManager::HandleButtonClickEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicUIAudioManager::HandleButtonClickEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleButtonClickEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BasicUIAudioManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicUIAudioManager::*)()>(&BasicUIAudioManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicUIAudioManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicUIAudioManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicUIAudioManager::*)()>(&BasicUIAudioManager::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicUIAudioManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicUIAudioManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicUIAudioManager::*)()>(&BasicUIAudioManager::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicUIAudioManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicUIAudioManager::HandleButtonClickEvent
// Il2CppName: HandleButtonClickEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicUIAudioManager::*)()>(&BasicUIAudioManager::HandleButtonClickEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicUIAudioManager*), "HandleButtonClickEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicUIAudioManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicUIAudioManager::*)()>(&BasicUIAudioManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicUIAudioManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicUIAudioManager::*)()>(&BasicUIAudioManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicUIAudioManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VisualMetronome
#include "GlobalNamespace/VisualMetronome.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VisualMetronome.set_tickerColor
void GlobalNamespace::VisualMetronome::set_tickerColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::set_tickerColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tickerColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisualMetronome.set_movingTickerColor
void GlobalNamespace::VisualMetronome::set_movingTickerColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::set_movingTickerColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_movingTickerColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisualMetronome.set_zeroOffset
void GlobalNamespace::VisualMetronome::set_zeroOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::set_zeroOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_zeroOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisualMetronome.get_zeroOffset
float GlobalNamespace::VisualMetronome::get_zeroOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::get_zeroOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_zeroOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VisualMetronome.Awake
void GlobalNamespace::VisualMetronome::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisualMetronome.OnEnable
void GlobalNamespace::VisualMetronome::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisualMetronome.OnDisable
void GlobalNamespace::VisualMetronome::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisualMetronome.Update
void GlobalNamespace::VisualMetronome::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisualMetronome.SetMovingTickerNormalizedPosition
void GlobalNamespace::VisualMetronome::SetMovingTickerNormalizedPosition(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisualMetronome::SetMovingTickerNormalizedPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMovingTickerNormalizedPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: VisualMetronome::set_tickerColor
// Il2CppName: set_tickerColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)(UnityEngine::Color)>(&VisualMetronome::set_tickerColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "set_tickerColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: VisualMetronome::set_movingTickerColor
// Il2CppName: set_movingTickerColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)(UnityEngine::Color)>(&VisualMetronome::set_movingTickerColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "set_movingTickerColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: VisualMetronome::set_zeroOffset
// Il2CppName: set_zeroOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)(float)>(&VisualMetronome::set_zeroOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "set_zeroOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: VisualMetronome::get_zeroOffset
// Il2CppName: get_zeroOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VisualMetronome::*)()>(&VisualMetronome::get_zeroOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "get_zeroOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisualMetronome::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)()>(&VisualMetronome::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisualMetronome::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)()>(&VisualMetronome::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisualMetronome::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)()>(&VisualMetronome::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisualMetronome::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)()>(&VisualMetronome::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisualMetronome::SetMovingTickerNormalizedPosition
// Il2CppName: SetMovingTickerNormalizedPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)(float)>(&VisualMetronome::SetMovingTickerNormalizedPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), "SetMovingTickerNormalizedPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: VisualMetronome::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)()>(&VisualMetronome::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisualMetronome::*)()>(&VisualMetronome::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisualMetronome*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorHueSlider
#include "GlobalNamespace/ColorHueSlider.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorHueSlider.add_colorHueDidChangeEvent
void GlobalNamespace::ColorHueSlider::add_colorHueDidChangeEvent(System::Action_3<GlobalNamespace::ColorHueSlider*, float, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorHueSlider::add_colorHueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_colorHueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorHueSlider.remove_colorHueDidChangeEvent
void GlobalNamespace::ColorHueSlider::remove_colorHueDidChangeEvent(System::Action_3<GlobalNamespace::ColorHueSlider*, float, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorHueSlider::remove_colorHueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_colorHueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorHueSlider.HandleNormalizedValueDidChange
void GlobalNamespace::ColorHueSlider::HandleNormalizedValueDidChange(HMUI::CircleSlider* slider, float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorHueSlider::HandleNormalizedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(normalizedValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, slider, normalizedValue);
}
// Autogenerated method: ColorHueSlider.Awake
void GlobalNamespace::ColorHueSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorHueSlider::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorHueSlider.OnDestroy
void GlobalNamespace::ColorHueSlider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorHueSlider::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorHueSlider.UpdateVisuals
void GlobalNamespace::ColorHueSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorHueSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorHueSlider.OnPointerUp
void GlobalNamespace::ColorHueSlider::OnPointerUp(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorHueSlider::OnPointerUp");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Writing MetadataGetter for method: ColorHueSlider::add_colorHueDidChangeEvent
// Il2CppName: add_colorHueDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)(System::Action_3<GlobalNamespace::ColorHueSlider*, float, GlobalNamespace::ColorChangeUIEventType>*)>(&ColorHueSlider::add_colorHueDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), "add_colorHueDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::ColorHueSlider*, float, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: ColorHueSlider::remove_colorHueDidChangeEvent
// Il2CppName: remove_colorHueDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)(System::Action_3<GlobalNamespace::ColorHueSlider*, float, GlobalNamespace::ColorChangeUIEventType>*)>(&ColorHueSlider::remove_colorHueDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), "remove_colorHueDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::ColorHueSlider*, float, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: ColorHueSlider::HandleNormalizedValueDidChange
// Il2CppName: HandleNormalizedValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)(HMUI::CircleSlider*, float)>(&ColorHueSlider::HandleNormalizedValueDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::CircleSlider*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorHueSlider::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)()>(&ColorHueSlider::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorHueSlider::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)()>(&ColorHueSlider::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorHueSlider::UpdateVisuals
// Il2CppName: UpdateVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)()>(&ColorHueSlider::UpdateVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorHueSlider::OnPointerUp
// Il2CppName: OnPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&ColorHueSlider::OnPointerUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), "OnPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: ColorHueSlider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)()>(&ColorHueSlider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorHueSlider::*)()>(&ColorHueSlider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorHueSlider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorSaturationValueSlider
#include "GlobalNamespace/ColorSaturationValueSlider.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSaturationValueSlider.add_colorSaturationOrValueDidChangeEvent
void GlobalNamespace::ColorSaturationValueSlider::add_colorSaturationOrValueDidChangeEvent(System::Action_3<GlobalNamespace::ColorSaturationValueSlider*, UnityEngine::Vector2, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::add_colorSaturationOrValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_colorSaturationOrValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorSaturationValueSlider.remove_colorSaturationOrValueDidChangeEvent
void GlobalNamespace::ColorSaturationValueSlider::remove_colorSaturationOrValueDidChangeEvent(System::Action_3<GlobalNamespace::ColorSaturationValueSlider*, UnityEngine::Vector2, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::remove_colorSaturationOrValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_colorSaturationOrValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorSaturationValueSlider.SetHue
void GlobalNamespace::ColorSaturationValueSlider::SetHue(float hue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::SetHue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hue);
}
// Autogenerated method: ColorSaturationValueSlider.HandleNormalizedValueDidChange
void GlobalNamespace::ColorSaturationValueSlider::HandleNormalizedValueDidChange(HMUI::Slider2D* slider, UnityEngine::Vector2 normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::HandleNormalizedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(normalizedValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, slider, normalizedValue);
}
// Autogenerated method: ColorSaturationValueSlider.Awake
void GlobalNamespace::ColorSaturationValueSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorSaturationValueSlider.OnDestroy
void GlobalNamespace::ColorSaturationValueSlider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorSaturationValueSlider.UpdateVisuals
void GlobalNamespace::ColorSaturationValueSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorSaturationValueSlider.OnPointerUp
void GlobalNamespace::ColorSaturationValueSlider::OnPointerUp(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSaturationValueSlider::OnPointerUp");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Writing MetadataGetter for method: ColorSaturationValueSlider::add_colorSaturationOrValueDidChangeEvent
// Il2CppName: add_colorSaturationOrValueDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)(System::Action_3<GlobalNamespace::ColorSaturationValueSlider*, UnityEngine::Vector2, GlobalNamespace::ColorChangeUIEventType>*)>(&ColorSaturationValueSlider::add_colorSaturationOrValueDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "add_colorSaturationOrValueDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::ColorSaturationValueSlider*, UnityEngine::Vector2, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::remove_colorSaturationOrValueDidChangeEvent
// Il2CppName: remove_colorSaturationOrValueDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)(System::Action_3<GlobalNamespace::ColorSaturationValueSlider*, UnityEngine::Vector2, GlobalNamespace::ColorChangeUIEventType>*)>(&ColorSaturationValueSlider::remove_colorSaturationOrValueDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "remove_colorSaturationOrValueDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::ColorSaturationValueSlider*, UnityEngine::Vector2, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::SetHue
// Il2CppName: SetHue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)(float)>(&ColorSaturationValueSlider::SetHue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "SetHue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::HandleNormalizedValueDidChange
// Il2CppName: HandleNormalizedValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)(HMUI::Slider2D*, UnityEngine::Vector2)>(&ColorSaturationValueSlider::HandleNormalizedValueDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::Slider2D*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)()>(&ColorSaturationValueSlider::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)()>(&ColorSaturationValueSlider::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::UpdateVisuals
// Il2CppName: UpdateVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)()>(&ColorSaturationValueSlider::UpdateVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::OnPointerUp
// Il2CppName: OnPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&ColorSaturationValueSlider::OnPointerUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), "OnPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: ColorSaturationValueSlider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)()>(&ColorSaturationValueSlider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSaturationValueSlider::*)()>(&ColorSaturationValueSlider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSaturationValueSlider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorSchemeColorToggleController
#include "GlobalNamespace/ColorSchemeColorToggleController.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeColorToggleController.get_toggle
UnityEngine::UI::Toggle* GlobalNamespace::ColorSchemeColorToggleController::get_toggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorToggleController::get_toggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Toggle*, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeColorToggleController.get_color
UnityEngine::Color GlobalNamespace::ColorSchemeColorToggleController::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorToggleController::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeColorToggleController.set_color
void GlobalNamespace::ColorSchemeColorToggleController::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorToggleController::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ColorSchemeColorToggleController::get_toggle
// Il2CppName: get_toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Toggle* (ColorSchemeColorToggleController::*)()>(&ColorSchemeColorToggleController::get_toggle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorToggleController*), "get_toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorToggleController::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorSchemeColorToggleController::*)()>(&ColorSchemeColorToggleController::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorToggleController*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorToggleController::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorToggleController::*)(UnityEngine::Color)>(&ColorSchemeColorToggleController::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorToggleController*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorToggleController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorToggleController::*)()>(&ColorSchemeColorToggleController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorToggleController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorToggleController::*)()>(&ColorSchemeColorToggleController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorToggleController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSchemeColorsToggleGroup
#include "GlobalNamespace/ColorSchemeColorsToggleGroup.hpp"
// Including type: ColorSchemeColorToggleController
#include "GlobalNamespace/ColorSchemeColorToggleController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ToggleBinder
#include "HMUI/ToggleBinder.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeColorsToggleGroup.add_selectedColorDidChangeEvent
void GlobalNamespace::ColorSchemeColorsToggleGroup::add_selectedColorDidChangeEvent(System::Action_1<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::add_selectedColorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectedColorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.remove_selectedColorDidChangeEvent
void GlobalNamespace::ColorSchemeColorsToggleGroup::remove_selectedColorDidChangeEvent(System::Action_1<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::remove_selectedColorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectedColorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.get_color
UnityEngine::Color GlobalNamespace::ColorSchemeColorsToggleGroup::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.set_color
void GlobalNamespace::ColorSchemeColorsToggleGroup::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.SetColorScheme
void GlobalNamespace::ColorSchemeColorsToggleGroup::SetColorScheme(GlobalNamespace::ColorScheme* colorScheme) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::SetColorScheme");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorScheme", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorScheme)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorScheme);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.Awake
void GlobalNamespace::ColorSchemeColorsToggleGroup::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.OnDestroy
void GlobalNamespace::ColorSchemeColorsToggleGroup::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.HandleToggleWasSelected
void GlobalNamespace::ColorSchemeColorsToggleGroup::HandleToggleWasSelected(GlobalNamespace::ColorSchemeColorToggleController* toggleController, bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::HandleToggleWasSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleToggleWasSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toggleController), ::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toggleController, isOn);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.CreateColorSchemeFromEditedColors
GlobalNamespace::ColorScheme* GlobalNamespace::ColorSchemeColorsToggleGroup::CreateColorSchemeFromEditedColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::CreateColorSchemeFromEditedColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateColorSchemeFromEditedColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ColorScheme*, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.<Awake>b__15_0
void GlobalNamespace::ColorSchemeColorsToggleGroup::$Awake$b__15_0(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::<Awake>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.<Awake>b__15_1
void GlobalNamespace::ColorSchemeColorsToggleGroup::$Awake$b__15_1(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::<Awake>b__15_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__15_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.<Awake>b__15_2
void GlobalNamespace::ColorSchemeColorsToggleGroup::$Awake$b__15_2(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::<Awake>b__15_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__15_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.<Awake>b__15_3
void GlobalNamespace::ColorSchemeColorsToggleGroup::$Awake$b__15_3(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::<Awake>b__15_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__15_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: ColorSchemeColorsToggleGroup.<Awake>b__15_4
void GlobalNamespace::ColorSchemeColorsToggleGroup::$Awake$b__15_4(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeColorsToggleGroup::<Awake>b__15_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__15_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::add_selectedColorDidChangeEvent
// Il2CppName: add_selectedColorDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(System::Action_1<UnityEngine::Color>*)>(&ColorSchemeColorsToggleGroup::add_selectedColorDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "add_selectedColorDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::remove_selectedColorDidChangeEvent
// Il2CppName: remove_selectedColorDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(System::Action_1<UnityEngine::Color>*)>(&ColorSchemeColorsToggleGroup::remove_selectedColorDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "remove_selectedColorDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorSchemeColorsToggleGroup::*)()>(&ColorSchemeColorsToggleGroup::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(UnityEngine::Color)>(&ColorSchemeColorsToggleGroup::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::SetColorScheme
// Il2CppName: SetColorScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(GlobalNamespace::ColorScheme*)>(&ColorSchemeColorsToggleGroup::SetColorScheme)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "SetColorScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorScheme*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)()>(&ColorSchemeColorsToggleGroup::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)()>(&ColorSchemeColorsToggleGroup::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::HandleToggleWasSelected
// Il2CppName: HandleToggleWasSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(GlobalNamespace::ColorSchemeColorToggleController*, bool)>(&ColorSchemeColorsToggleGroup::HandleToggleWasSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "HandleToggleWasSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorSchemeColorToggleController*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::CreateColorSchemeFromEditedColors
// Il2CppName: CreateColorSchemeFromEditedColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ColorScheme* (ColorSchemeColorsToggleGroup::*)()>(&ColorSchemeColorsToggleGroup::CreateColorSchemeFromEditedColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "CreateColorSchemeFromEditedColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::$Awake$b__15_0
// Il2CppName: <Awake>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(bool)>(&ColorSchemeColorsToggleGroup::$Awake$b__15_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "<Awake>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::$Awake$b__15_1
// Il2CppName: <Awake>b__15_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(bool)>(&ColorSchemeColorsToggleGroup::$Awake$b__15_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "<Awake>b__15_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::$Awake$b__15_2
// Il2CppName: <Awake>b__15_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(bool)>(&ColorSchemeColorsToggleGroup::$Awake$b__15_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "<Awake>b__15_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::$Awake$b__15_3
// Il2CppName: <Awake>b__15_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(bool)>(&ColorSchemeColorsToggleGroup::$Awake$b__15_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "<Awake>b__15_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::$Awake$b__15_4
// Il2CppName: <Awake>b__15_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)(bool)>(&ColorSchemeColorsToggleGroup::$Awake$b__15_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), "<Awake>b__15_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeColorsToggleGroup::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)()>(&ColorSchemeColorsToggleGroup::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeColorsToggleGroup::*)()>(&ColorSchemeColorsToggleGroup::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeColorsToggleGroup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorSchemeDropdown
#include "GlobalNamespace/ColorSchemeDropdown.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: ColorSchemeView
#include "GlobalNamespace/ColorSchemeView.hpp"
// Including type: ColorSchemeTableCell
#include "GlobalNamespace/ColorSchemeTableCell.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeDropdown.LazyInit
void GlobalNamespace::ColorSchemeDropdown::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeDropdown.SetData
void GlobalNamespace::ColorSchemeDropdown::SetData(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::ColorScheme*>* colorSchemes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorSchemes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorSchemes);
}
// Autogenerated method: ColorSchemeDropdown.CellSize
float GlobalNamespace::ColorSchemeDropdown::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeDropdown.NumberOfCells
int GlobalNamespace::ColorSchemeDropdown::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeDropdown.CellForIdx
HMUI::TableCell* GlobalNamespace::ColorSchemeDropdown::CellForIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: ColorSchemeDropdown.HandleDidSelectCellWithIdx
void GlobalNamespace::ColorSchemeDropdown::HandleDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropdownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::HandleDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropdownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropdownWithTableView, idx);
}
// Autogenerated method: ColorSchemeDropdown.RefreshUI
void GlobalNamespace::ColorSchemeDropdown::RefreshUI(GlobalNamespace::ColorScheme* colorScheme) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::RefreshUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorScheme)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorScheme);
}
// Autogenerated method: ColorSchemeDropdown.OnDestroy
void GlobalNamespace::ColorSchemeDropdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeDropdown.Init
void GlobalNamespace::ColorSchemeDropdown::Init(HMUI::TableView::IDataSource* initTableViewDataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initTableViewDataSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, initTableViewDataSource);
}
// Autogenerated method: ColorSchemeDropdown.SelectCellWithIdx
void GlobalNamespace::ColorSchemeDropdown::SelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeDropdown::SelectCellWithIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Writing MetadataGetter for method: ColorSchemeDropdown::LazyInit
// Il2CppName: LazyInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)()>(&ColorSchemeDropdown::LazyInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "LazyInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::ColorScheme*>*)>(&ColorSchemeDropdown::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::ColorScheme*>*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::CellSize
// Il2CppName: CellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ColorSchemeDropdown::*)()>(&ColorSchemeDropdown::CellSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "CellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::NumberOfCells
// Il2CppName: NumberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ColorSchemeDropdown::*)()>(&ColorSchemeDropdown::NumberOfCells)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "NumberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::CellForIdx
// Il2CppName: CellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::TableCell* (ColorSchemeDropdown::*)(HMUI::TableView*, int)>(&ColorSchemeDropdown::CellForIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "CellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::HandleDidSelectCellWithIdx
// Il2CppName: HandleDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)(HMUI::DropdownWithTableView*, int)>(&ColorSchemeDropdown::HandleDidSelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "HandleDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::DropdownWithTableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::RefreshUI
// Il2CppName: RefreshUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)(GlobalNamespace::ColorScheme*)>(&ColorSchemeDropdown::RefreshUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "RefreshUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorScheme*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)()>(&ColorSchemeDropdown::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)(HMUI::TableView::IDataSource*)>(&ColorSchemeDropdown::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView::IDataSource*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::SelectCellWithIdx
// Il2CppName: SelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)(int)>(&ColorSchemeDropdown::SelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), "SelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeDropdown::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)()>(&ColorSchemeDropdown::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeDropdown::*)()>(&ColorSchemeDropdown::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorSchemeTableCell
#include "GlobalNamespace/ColorSchemeTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: ColorSchemeView
#include "GlobalNamespace/ColorSchemeView.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeTableCell.set_text
void GlobalNamespace::ColorSchemeTableCell::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeTableCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorSchemeTableCell.get_text
::Il2CppString* GlobalNamespace::ColorSchemeTableCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeTableCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ColorSchemeTableCell.set_showEditIcon
void GlobalNamespace::ColorSchemeTableCell::set_showEditIcon(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeTableCell::set_showEditIcon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showEditIcon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorSchemeTableCell.SetColors
void GlobalNamespace::ColorSchemeTableCell::SetColors(UnityEngine::Color saberAColor, UnityEngine::Color saberBColor, UnityEngine::Color environment0Color, UnityEngine::Color environment1Color, UnityEngine::Color obstacleColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeTableCell::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberAColor), ::il2cpp_utils::ExtractType(saberBColor), ::il2cpp_utils::ExtractType(environment0Color), ::il2cpp_utils::ExtractType(environment1Color), ::il2cpp_utils::ExtractType(obstacleColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberAColor, saberBColor, environment0Color, environment1Color, obstacleColor);
}
// Writing MetadataGetter for method: ColorSchemeTableCell::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeTableCell::*)(::Il2CppString*)>(&ColorSchemeTableCell::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeTableCell*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeTableCell::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ColorSchemeTableCell::*)()>(&ColorSchemeTableCell::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeTableCell*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSchemeTableCell::set_showEditIcon
// Il2CppName: set_showEditIcon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeTableCell::*)(bool)>(&ColorSchemeTableCell::set_showEditIcon)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeTableCell*), "set_showEditIcon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeTableCell::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeTableCell::*)(UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&ColorSchemeTableCell::SetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeTableCell*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeTableCell::*)()>(&ColorSchemeTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeTableCell::*)()>(&ColorSchemeTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSchemeView
#include "GlobalNamespace/ColorSchemeView.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeView.SetColors
void GlobalNamespace::ColorSchemeView::SetColors(UnityEngine::Color saberAColor, UnityEngine::Color saberBColor, UnityEngine::Color environment0Color, UnityEngine::Color environment1Color, UnityEngine::Color obstacleColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeView::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberAColor), ::il2cpp_utils::ExtractType(saberBColor), ::il2cpp_utils::ExtractType(environment0Color), ::il2cpp_utils::ExtractType(environment1Color), ::il2cpp_utils::ExtractType(obstacleColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberAColor, saberBColor, environment0Color, environment1Color, obstacleColor);
}
// Writing MetadataGetter for method: ColorSchemeView::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeView::*)(UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&ColorSchemeView::SetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeView*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorSchemeView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeView::*)()>(&ColorSchemeView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSchemeView::*)()>(&ColorSchemeView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorsOverrideSettingsPanelController
#include "GlobalNamespace/ColorsOverrideSettingsPanelController.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: ColorSchemeDropdown
#include "GlobalNamespace/ColorSchemeDropdown.hpp"
// Including type: EditColorSchemeController
#include "GlobalNamespace/EditColorSchemeController.hpp"
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.PanelAnimationSO
#include "HMUI/PanelAnimationSO.hpp"
// Including type: ColorSchemesSettings
#include "GlobalNamespace/ColorSchemesSettings.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorsOverrideSettingsPanelController.get_colorSchemesSettings
GlobalNamespace::ColorSchemesSettings* GlobalNamespace::ColorsOverrideSettingsPanelController::get_colorSchemesSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::get_colorSchemesSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorSchemesSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ColorSchemesSettings*, false>(this, ___internal__method);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.SetData
void GlobalNamespace::ColorsOverrideSettingsPanelController::SetData(GlobalNamespace::ColorSchemesSettings* colorSchemesSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorSchemesSettings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorSchemesSettings);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.OnDestroy
void GlobalNamespace::ColorsOverrideSettingsPanelController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.OnDisable
void GlobalNamespace::ColorsOverrideSettingsPanelController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.Refresh
void GlobalNamespace::ColorsOverrideSettingsPanelController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.HandleDropDownDidSelectCellWithIdx
void GlobalNamespace::ColorsOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropDownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDropDownDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropDownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropDownWithTableView, idx);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.HandleOverrideColorsToggleValueChanged
void GlobalNamespace::ColorsOverrideSettingsPanelController::HandleOverrideColorsToggleValueChanged(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::HandleOverrideColorsToggleValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOverrideColorsToggleValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.HandleEditColorSchemeButtonWasPressed
void GlobalNamespace::ColorsOverrideSettingsPanelController::HandleEditColorSchemeButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::HandleEditColorSchemeButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditColorSchemeButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.HandleEditColorSchemeControllerDidFinish
void GlobalNamespace::ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditColorSchemeControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.HandleEditColorSchemeControllerDidChangeColorScheme
void GlobalNamespace::ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidChangeColorScheme(GlobalNamespace::ColorScheme* colorScheme) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidChangeColorScheme");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditColorSchemeControllerDidChangeColorScheme", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorScheme)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorScheme);
}
// Autogenerated method: ColorsOverrideSettingsPanelController.<HandleOverrideColorsToggleValueChanged>b__18_0
void GlobalNamespace::ColorsOverrideSettingsPanelController::$HandleOverrideColorsToggleValueChanged$b__18_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::<HandleOverrideColorsToggleValueChanged>b__18_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleOverrideColorsToggleValueChanged>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::get_colorSchemesSettings
// Il2CppName: get_colorSchemesSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ColorSchemesSettings* (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::get_colorSchemesSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "get_colorSchemesSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)(GlobalNamespace::ColorSchemesSettings*)>(&ColorsOverrideSettingsPanelController::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorSchemesSettings*>()});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx
// Il2CppName: HandleDropDownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)(HMUI::DropdownWithTableView*, int)>(&ColorsOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "HandleDropDownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::DropdownWithTableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::HandleOverrideColorsToggleValueChanged
// Il2CppName: HandleOverrideColorsToggleValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)(bool)>(&ColorsOverrideSettingsPanelController::HandleOverrideColorsToggleValueChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "HandleOverrideColorsToggleValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::HandleEditColorSchemeButtonWasPressed
// Il2CppName: HandleEditColorSchemeButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::HandleEditColorSchemeButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "HandleEditColorSchemeButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidFinish
// Il2CppName: HandleEditColorSchemeControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "HandleEditColorSchemeControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidChangeColorScheme
// Il2CppName: HandleEditColorSchemeControllerDidChangeColorScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)(GlobalNamespace::ColorScheme*)>(&ColorsOverrideSettingsPanelController::HandleEditColorSchemeControllerDidChangeColorScheme)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "HandleEditColorSchemeControllerDidChangeColorScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorScheme*>()});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::$HandleOverrideColorsToggleValueChanged$b__18_0
// Il2CppName: <HandleOverrideColorsToggleValueChanged>b__18_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::$HandleOverrideColorsToggleValueChanged$b__18_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), "<HandleOverrideColorsToggleValueChanged>b__18_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorsOverrideSettingsPanelController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorsOverrideSettingsPanelController::*)()>(&ColorsOverrideSettingsPanelController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorsOverrideSettingsPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EditColorController
#include "GlobalNamespace/EditColorController.hpp"
// Including type: HSVPanelController
#include "GlobalNamespace/HSVPanelController.hpp"
// Including type: PreviousColorPanelController
#include "GlobalNamespace/PreviousColorPanelController.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: ColorChangeUIEventType
#include "GlobalNamespace/ColorChangeUIEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EditColorController.add_didChangeColorEvent
void GlobalNamespace::EditColorController::add_didChangeColorEvent(System::Action_1<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::add_didChangeColorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeColorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorController.remove_didChangeColorEvent
void GlobalNamespace::EditColorController::remove_didChangeColorEvent(System::Action_1<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::remove_didChangeColorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeColorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorController.add_didFinishEvent
void GlobalNamespace::EditColorController::add_didFinishEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorController.remove_didFinishEvent
void GlobalNamespace::EditColorController::remove_didFinishEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorController.SetColorCallback
void GlobalNamespace::EditColorController::SetColorCallback(System::Action_1<UnityEngine::Color>* colorCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::SetColorCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorCallback);
}
// Autogenerated method: EditColorController.SetColor
void GlobalNamespace::EditColorController::SetColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: EditColorController.HandleHSVPanelControllerColorDidChange
void GlobalNamespace::EditColorController::HandleHSVPanelControllerColorDidChange(UnityEngine::Color color, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::HandleHSVPanelControllerColorDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHSVPanelControllerColorDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(colorChangeUIEventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color, colorChangeUIEventType);
}
// Autogenerated method: EditColorController.HandlePreviousColorPanelControllerColorWasSelected
void GlobalNamespace::EditColorController::HandlePreviousColorPanelControllerColorWasSelected(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::HandlePreviousColorPanelControllerColorWasSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePreviousColorPanelControllerColorWasSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: EditColorController.HandleCancelButtonWasPressed
void GlobalNamespace::EditColorController::HandleCancelButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::HandleCancelButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCancelButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EditColorController.HandleApplyButtonWasPressed
void GlobalNamespace::EditColorController::HandleApplyButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::HandleApplyButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleApplyButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EditColorController.ChangeColor
void GlobalNamespace::EditColorController::ChangeColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::ChangeColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: EditColorController.DidActivate
void GlobalNamespace::EditColorController::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: EditColorController.DidDeactivate
void GlobalNamespace::EditColorController::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorController::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Writing MetadataGetter for method: EditColorController::add_didChangeColorEvent
// Il2CppName: add_didChangeColorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(System::Action_1<UnityEngine::Color>*)>(&EditColorController::add_didChangeColorEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "add_didChangeColorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: EditColorController::remove_didChangeColorEvent
// Il2CppName: remove_didChangeColorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(System::Action_1<UnityEngine::Color>*)>(&EditColorController::remove_didChangeColorEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "remove_didChangeColorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: EditColorController::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(System::Action_1<bool>*)>(&EditColorController::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: EditColorController::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(System::Action_1<bool>*)>(&EditColorController::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: EditColorController::SetColorCallback
// Il2CppName: SetColorCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(System::Action_1<UnityEngine::Color>*)>(&EditColorController::SetColorCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "SetColorCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: EditColorController::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(UnityEngine::Color)>(&EditColorController::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: EditColorController::HandleHSVPanelControllerColorDidChange
// Il2CppName: HandleHSVPanelControllerColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType)>(&EditColorController::HandleHSVPanelControllerColorDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "HandleHSVPanelControllerColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorChangeUIEventType>()});
  }
};
// Writing MetadataGetter for method: EditColorController::HandlePreviousColorPanelControllerColorWasSelected
// Il2CppName: HandlePreviousColorPanelControllerColorWasSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(UnityEngine::Color)>(&EditColorController::HandlePreviousColorPanelControllerColorWasSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "HandlePreviousColorPanelControllerColorWasSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: EditColorController::HandleCancelButtonWasPressed
// Il2CppName: HandleCancelButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)()>(&EditColorController::HandleCancelButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "HandleCancelButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EditColorController::HandleApplyButtonWasPressed
// Il2CppName: HandleApplyButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)()>(&EditColorController::HandleApplyButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "HandleApplyButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EditColorController::ChangeColor
// Il2CppName: ChangeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(UnityEngine::Color)>(&EditColorController::ChangeColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "ChangeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: EditColorController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(bool, bool, bool)>(&EditColorController::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EditColorController::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)(bool, bool)>(&EditColorController::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EditColorController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)()>(&EditColorController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorController::*)()>(&EditColorController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EditColorSchemeController
#include "GlobalNamespace/EditColorSchemeController.hpp"
// Including type: ColorSchemeColorsToggleGroup
#include "GlobalNamespace/ColorSchemeColorsToggleGroup.hpp"
// Including type: RGBPanelController
#include "GlobalNamespace/RGBPanelController.hpp"
// Including type: HSVPanelController
#include "GlobalNamespace/HSVPanelController.hpp"
// Including type: PreviousColorPanelController
#include "GlobalNamespace/PreviousColorPanelController.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: ColorChangeUIEventType
#include "GlobalNamespace/ColorChangeUIEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EditColorSchemeController.add_didFinishEvent
void GlobalNamespace::EditColorSchemeController::add_didFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorSchemeController.remove_didFinishEvent
void GlobalNamespace::EditColorSchemeController::remove_didFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorSchemeController.add_didChangeColorSchemeEvent
void GlobalNamespace::EditColorSchemeController::add_didChangeColorSchemeEvent(System::Action_1<GlobalNamespace::ColorScheme*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::add_didChangeColorSchemeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeColorSchemeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorSchemeController.remove_didChangeColorSchemeEvent
void GlobalNamespace::EditColorSchemeController::remove_didChangeColorSchemeEvent(System::Action_1<GlobalNamespace::ColorScheme*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::remove_didChangeColorSchemeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeColorSchemeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditColorSchemeController.SetColorScheme
void GlobalNamespace::EditColorSchemeController::SetColorScheme(GlobalNamespace::ColorScheme* colorScheme) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::SetColorScheme");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorScheme", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorScheme)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorScheme);
}
// Autogenerated method: EditColorSchemeController.Start
void GlobalNamespace::EditColorSchemeController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EditColorSchemeController.OnDestroy
void GlobalNamespace::EditColorSchemeController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EditColorSchemeController.HandleColorSchemeColorsToggleGroupSelectedColorDidChange
void GlobalNamespace::EditColorSchemeController::HandleColorSchemeColorsToggleGroupSelectedColorDidChange(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::HandleColorSchemeColorsToggleGroupSelectedColorDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorSchemeColorsToggleGroupSelectedColorDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: EditColorSchemeController.HandleRGBPanelControllerColorDidChange
void GlobalNamespace::EditColorSchemeController::HandleRGBPanelControllerColorDidChange(UnityEngine::Color color, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::HandleRGBPanelControllerColorDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRGBPanelControllerColorDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(colorChangeUIEventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color, colorChangeUIEventType);
}
// Autogenerated method: EditColorSchemeController.HandleHSVPanelControllerColorDidChange
void GlobalNamespace::EditColorSchemeController::HandleHSVPanelControllerColorDidChange(UnityEngine::Color color, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::HandleHSVPanelControllerColorDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHSVPanelControllerColorDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(colorChangeUIEventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color, colorChangeUIEventType);
}
// Autogenerated method: EditColorSchemeController.HandlePreviousColorPanelControllerColorWasSelected
void GlobalNamespace::EditColorSchemeController::HandlePreviousColorPanelControllerColorWasSelected(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::HandlePreviousColorPanelControllerColorWasSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePreviousColorPanelControllerColorWasSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: EditColorSchemeController.<Start>b__13_0
void GlobalNamespace::EditColorSchemeController::$Start$b__13_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditColorSchemeController::<Start>b__13_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__13_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EditColorSchemeController::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(System::Action*)>(&EditColorSchemeController::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(System::Action*)>(&EditColorSchemeController::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::add_didChangeColorSchemeEvent
// Il2CppName: add_didChangeColorSchemeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(System::Action_1<GlobalNamespace::ColorScheme*>*)>(&EditColorSchemeController::add_didChangeColorSchemeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "add_didChangeColorSchemeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ColorScheme*>*>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::remove_didChangeColorSchemeEvent
// Il2CppName: remove_didChangeColorSchemeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(System::Action_1<GlobalNamespace::ColorScheme*>*)>(&EditColorSchemeController::remove_didChangeColorSchemeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "remove_didChangeColorSchemeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ColorScheme*>*>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::SetColorScheme
// Il2CppName: SetColorScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(GlobalNamespace::ColorScheme*)>(&EditColorSchemeController::SetColorScheme)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "SetColorScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorScheme*>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)()>(&EditColorSchemeController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)()>(&EditColorSchemeController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::HandleColorSchemeColorsToggleGroupSelectedColorDidChange
// Il2CppName: HandleColorSchemeColorsToggleGroupSelectedColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(UnityEngine::Color)>(&EditColorSchemeController::HandleColorSchemeColorsToggleGroupSelectedColorDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "HandleColorSchemeColorsToggleGroupSelectedColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::HandleRGBPanelControllerColorDidChange
// Il2CppName: HandleRGBPanelControllerColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType)>(&EditColorSchemeController::HandleRGBPanelControllerColorDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "HandleRGBPanelControllerColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorChangeUIEventType>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::HandleHSVPanelControllerColorDidChange
// Il2CppName: HandleHSVPanelControllerColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType)>(&EditColorSchemeController::HandleHSVPanelControllerColorDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "HandleHSVPanelControllerColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorChangeUIEventType>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::HandlePreviousColorPanelControllerColorWasSelected
// Il2CppName: HandlePreviousColorPanelControllerColorWasSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)(UnityEngine::Color)>(&EditColorSchemeController::HandlePreviousColorPanelControllerColorWasSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "HandlePreviousColorPanelControllerColorWasSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::$Start$b__13_0
// Il2CppName: <Start>b__13_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)()>(&EditColorSchemeController::$Start$b__13_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), "<Start>b__13_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EditColorSchemeController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)()>(&EditColorSchemeController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditColorSchemeController::*)()>(&EditColorSchemeController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditColorSchemeController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HSVPanelController
#include "GlobalNamespace/HSVPanelController.hpp"
// Including type: ColorSaturationValueSlider
#include "GlobalNamespace/ColorSaturationValueSlider.hpp"
// Including type: ColorHueSlider
#include "GlobalNamespace/ColorHueSlider.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HSVPanelController.add_colorDidChangeEvent
void GlobalNamespace::HSVPanelController::add_colorDidChangeEvent(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::add_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HSVPanelController.remove_colorDidChangeEvent
void GlobalNamespace::HSVPanelController::remove_colorDidChangeEvent(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::remove_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HSVPanelController.get_color
UnityEngine::Color GlobalNamespace::HSVPanelController::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HSVPanelController.set_color
void GlobalNamespace::HSVPanelController::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HSVPanelController.Awake
void GlobalNamespace::HSVPanelController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HSVPanelController.OnDestroy
void GlobalNamespace::HSVPanelController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HSVPanelController.HandleColorSaturationOrValueDidChange
void GlobalNamespace::HSVPanelController::HandleColorSaturationOrValueDidChange(GlobalNamespace::ColorSaturationValueSlider* slider, UnityEngine::Vector2 colorSaturationAndValue, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::HandleColorSaturationOrValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorSaturationOrValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(colorSaturationAndValue), ::il2cpp_utils::ExtractType(colorChangeUIEventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, slider, colorSaturationAndValue, colorChangeUIEventType);
}
// Autogenerated method: HSVPanelController.HandleColorHueDidChange
void GlobalNamespace::HSVPanelController::HandleColorHueDidChange(GlobalNamespace::ColorHueSlider* slider, float hue, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::HandleColorHueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleColorHueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(hue), ::il2cpp_utils::ExtractType(colorChangeUIEventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, slider, hue, colorChangeUIEventType);
}
// Autogenerated method: HSVPanelController.RefreshSlidersValues
void GlobalNamespace::HSVPanelController::RefreshSlidersValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::RefreshSlidersValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSlidersValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HSVPanelController.RefreshSlidersColors
void GlobalNamespace::HSVPanelController::RefreshSlidersColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::RefreshSlidersColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSlidersColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HSVPanelController::add_colorDidChangeEvent
// Il2CppName: add_colorDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*)>(&HSVPanelController::add_colorDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "add_colorDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: HSVPanelController::remove_colorDidChangeEvent
// Il2CppName: remove_colorDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*)>(&HSVPanelController::remove_colorDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "remove_colorDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: HSVPanelController::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (HSVPanelController::*)()>(&HSVPanelController::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HSVPanelController::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)(UnityEngine::Color)>(&HSVPanelController::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: HSVPanelController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)()>(&HSVPanelController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HSVPanelController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)()>(&HSVPanelController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HSVPanelController::HandleColorSaturationOrValueDidChange
// Il2CppName: HandleColorSaturationOrValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)(GlobalNamespace::ColorSaturationValueSlider*, UnityEngine::Vector2, GlobalNamespace::ColorChangeUIEventType)>(&HSVPanelController::HandleColorSaturationOrValueDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "HandleColorSaturationOrValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorSaturationValueSlider*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorChangeUIEventType>()});
  }
};
// Writing MetadataGetter for method: HSVPanelController::HandleColorHueDidChange
// Il2CppName: HandleColorHueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)(GlobalNamespace::ColorHueSlider*, float, GlobalNamespace::ColorChangeUIEventType)>(&HSVPanelController::HandleColorHueDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "HandleColorHueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorHueSlider*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorChangeUIEventType>()});
  }
};
// Writing MetadataGetter for method: HSVPanelController::RefreshSlidersValues
// Il2CppName: RefreshSlidersValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)()>(&HSVPanelController::RefreshSlidersValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "RefreshSlidersValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HSVPanelController::RefreshSlidersColors
// Il2CppName: RefreshSlidersColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)()>(&HSVPanelController::RefreshSlidersColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), "RefreshSlidersColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HSVPanelController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)()>(&HSVPanelController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HSVPanelController::*)()>(&HSVPanelController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HSVPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PreviousColorPanelController
#include "GlobalNamespace/PreviousColorPanelController.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxColors
int GlobalNamespace::PreviousColorPanelController::_get_kMaxColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::_get_kMaxColors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "PreviousColorPanelController", "kMaxColors"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxColors
void GlobalNamespace::PreviousColorPanelController::_set_kMaxColors(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::_set_kMaxColors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PreviousColorPanelController", "kMaxColors", value));
}
// Autogenerated method: PreviousColorPanelController.add_colorWasSelectedEvent
void GlobalNamespace::PreviousColorPanelController::add_colorWasSelectedEvent(System::Action_1<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::add_colorWasSelectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_colorWasSelectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PreviousColorPanelController.remove_colorWasSelectedEvent
void GlobalNamespace::PreviousColorPanelController::remove_colorWasSelectedEvent(System::Action_1<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::remove_colorWasSelectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_colorWasSelectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PreviousColorPanelController.Awake
void GlobalNamespace::PreviousColorPanelController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PreviousColorPanelController.OnDestroy
void GlobalNamespace::PreviousColorPanelController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PreviousColorPanelController.AddColor
void GlobalNamespace::PreviousColorPanelController::AddColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::AddColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: PreviousColorPanelController.DiscardUpcomingColor
void GlobalNamespace::PreviousColorPanelController::DiscardUpcomingColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::DiscardUpcomingColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DiscardUpcomingColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PreviousColorPanelController.<Awake>b__9_0
void GlobalNamespace::PreviousColorPanelController::$Awake$b__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::<Awake>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PreviousColorPanelController::add_colorWasSelectedEvent
// Il2CppName: add_colorWasSelectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)(System::Action_1<UnityEngine::Color>*)>(&PreviousColorPanelController::add_colorWasSelectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), "add_colorWasSelectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: PreviousColorPanelController::remove_colorWasSelectedEvent
// Il2CppName: remove_colorWasSelectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)(System::Action_1<UnityEngine::Color>*)>(&PreviousColorPanelController::remove_colorWasSelectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), "remove_colorWasSelectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: PreviousColorPanelController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)()>(&PreviousColorPanelController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviousColorPanelController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)()>(&PreviousColorPanelController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviousColorPanelController::AddColor
// Il2CppName: AddColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)(UnityEngine::Color)>(&PreviousColorPanelController::AddColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), "AddColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: PreviousColorPanelController::DiscardUpcomingColor
// Il2CppName: DiscardUpcomingColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)()>(&PreviousColorPanelController::DiscardUpcomingColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), "DiscardUpcomingColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviousColorPanelController::$Awake$b__9_0
// Il2CppName: <Awake>b__9_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)()>(&PreviousColorPanelController::$Awake$b__9_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), "<Awake>b__9_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PreviousColorPanelController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)()>(&PreviousColorPanelController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreviousColorPanelController::*)()>(&PreviousColorPanelController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreviousColorPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RGBPanelController
#include "GlobalNamespace/RGBPanelController.hpp"
// Including type: HMUI.ColorGradientSlider
#include "HMUI/ColorGradientSlider.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RGBPanelController.add_colorDidChangeEvent
void GlobalNamespace::RGBPanelController::add_colorDidChangeEvent(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::add_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RGBPanelController.remove_colorDidChangeEvent
void GlobalNamespace::RGBPanelController::remove_colorDidChangeEvent(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::remove_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RGBPanelController.get_color
UnityEngine::Color GlobalNamespace::RGBPanelController::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: RGBPanelController.set_color
void GlobalNamespace::RGBPanelController::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RGBPanelController.Awake
void GlobalNamespace::RGBPanelController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RGBPanelController.OnDestroy
void GlobalNamespace::RGBPanelController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RGBPanelController.HandleSliderColorDidChange
void GlobalNamespace::RGBPanelController::HandleSliderColorDidChange(HMUI::ColorGradientSlider* slider, UnityEngine::Color color, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::HandleSliderColorDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSliderColorDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(colorChangeUIEventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, slider, color, colorChangeUIEventType);
}
// Autogenerated method: RGBPanelController.RefreshSlidersValues
void GlobalNamespace::RGBPanelController::RefreshSlidersValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::RefreshSlidersValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSlidersValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RGBPanelController.RefreshSlidersColors
void GlobalNamespace::RGBPanelController::RefreshSlidersColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RGBPanelController::RefreshSlidersColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSlidersColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RGBPanelController::add_colorDidChangeEvent
// Il2CppName: add_colorDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*)>(&RGBPanelController::add_colorDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "add_colorDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: RGBPanelController::remove_colorDidChangeEvent
// Il2CppName: remove_colorDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*)>(&RGBPanelController::remove_colorDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "remove_colorDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*>()});
  }
};
// Writing MetadataGetter for method: RGBPanelController::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (RGBPanelController::*)()>(&RGBPanelController::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RGBPanelController::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)(UnityEngine::Color)>(&RGBPanelController::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: RGBPanelController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)()>(&RGBPanelController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RGBPanelController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)()>(&RGBPanelController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RGBPanelController::HandleSliderColorDidChange
// Il2CppName: HandleSliderColorDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)(HMUI::ColorGradientSlider*, UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType)>(&RGBPanelController::HandleSliderColorDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "HandleSliderColorDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ColorGradientSlider*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorChangeUIEventType>()});
  }
};
// Writing MetadataGetter for method: RGBPanelController::RefreshSlidersValues
// Il2CppName: RefreshSlidersValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)()>(&RGBPanelController::RefreshSlidersValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "RefreshSlidersValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RGBPanelController::RefreshSlidersColors
// Il2CppName: RefreshSlidersColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)()>(&RGBPanelController::RefreshSlidersColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), "RefreshSlidersColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RGBPanelController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)()>(&RGBPanelController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RGBPanelController::*)()>(&RGBPanelController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RGBPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AnnotatedBeatmapLevelCollectionTableCell
#include "GlobalNamespace/AnnotatedBeatmapLevelCollectionTableCell.hpp"
// Including type: AnnotatedBeatmapLevelCollectionTableCell/<RefreshAvailabilityAsync>d__18
#include "GlobalNamespace/AnnotatedBeatmapLevelCollectionTableCell_-RefreshAvailabilityAsync-d__18.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: IAnnotatedBeatmapLevelCollection
#include "GlobalNamespace/IAnnotatedBeatmapLevelCollection.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.set_showNewRibbon
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::set_showNewRibbon(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::set_showNewRibbon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showNewRibbon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.SetData
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::SetData(GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(annotatedBeatmapLevelCollection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, annotatedBeatmapLevelCollection);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.RefreshVisuals
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.GetInfoText
::Il2CppString* GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::GetInfoText(::Il2CppString* name, int songs, int purchased) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::GetInfoText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInfoText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(songs), ::il2cpp_utils::ExtractType(purchased)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, name, songs, purchased);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.RefreshAvailabilityAsync
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::RefreshAvailabilityAsync(GlobalNamespace::AdditionalContentModel* contentModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::RefreshAvailabilityAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshAvailabilityAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contentModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, contentModel);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.CancelAsyncOperations
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::CancelAsyncOperations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::CancelAsyncOperations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelAsyncOperations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.SelectionDidChange
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.HighlightDidChange
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell.WasPreparedForReuse
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::WasPreparedForReuse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::WasPreparedForReuse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WasPreparedForReuse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::set_showNewRibbon
// Il2CppName: set_showNewRibbon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)(bool)>(&AnnotatedBeatmapLevelCollectionTableCell::set_showNewRibbon)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "set_showNewRibbon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)(GlobalNamespace::IAnnotatedBeatmapLevelCollection*)>(&AnnotatedBeatmapLevelCollectionTableCell::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IAnnotatedBeatmapLevelCollection*>()});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)()>(&AnnotatedBeatmapLevelCollectionTableCell::RefreshVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::GetInfoText
// Il2CppName: GetInfoText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AnnotatedBeatmapLevelCollectionTableCell::*)(::Il2CppString*, int, int)>(&AnnotatedBeatmapLevelCollectionTableCell::GetInfoText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "GetInfoText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::RefreshAvailabilityAsync
// Il2CppName: RefreshAvailabilityAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)(GlobalNamespace::AdditionalContentModel*)>(&AnnotatedBeatmapLevelCollectionTableCell::RefreshAvailabilityAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "RefreshAvailabilityAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AdditionalContentModel*>()});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::CancelAsyncOperations
// Il2CppName: CancelAsyncOperations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)()>(&AnnotatedBeatmapLevelCollectionTableCell::CancelAsyncOperations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "CancelAsyncOperations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)(HMUI::SelectableCell::TransitionType)>(&AnnotatedBeatmapLevelCollectionTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)(HMUI::SelectableCell::TransitionType)>(&AnnotatedBeatmapLevelCollectionTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::WasPreparedForReuse
// Il2CppName: WasPreparedForReuse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)()>(&AnnotatedBeatmapLevelCollectionTableCell::WasPreparedForReuse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), "WasPreparedForReuse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)()>(&AnnotatedBeatmapLevelCollectionTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::*)()>(&AnnotatedBeatmapLevelCollectionTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AnnotatedBeatmapLevelCollectionTableCell/<RefreshAvailabilityAsync>d__18
#include "GlobalNamespace/AnnotatedBeatmapLevelCollectionTableCell_-RefreshAvailabilityAsync-d__18.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell/<RefreshAvailabilityAsync>d__18.MoveNext
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: AnnotatedBeatmapLevelCollectionTableCell/<RefreshAvailabilityAsync>d__18.SetStateMachine
void GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::*)()>(&AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnnotatedBeatmapLevelCollectionTableCell::$RefreshAvailabilityAsync$d__18), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapCharacteristicTableCell
#include "GlobalNamespace/BeatmapCharacteristicTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCharacteristicTableCell.SetData
void GlobalNamespace::BeatmapCharacteristicTableCell::SetData(GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicTableCell::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapCharacteristic);
}
// Autogenerated method: BeatmapCharacteristicTableCell.RefreshVisuals
void GlobalNamespace::BeatmapCharacteristicTableCell::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicTableCell::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapCharacteristicTableCell.SelectionDidChange
void GlobalNamespace::BeatmapCharacteristicTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: BeatmapCharacteristicTableCell.HighlightDidChange
void GlobalNamespace::BeatmapCharacteristicTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Writing MetadataGetter for method: BeatmapCharacteristicTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicTableCell::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&BeatmapCharacteristicTableCell::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicTableCell::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicTableCell::*)()>(&BeatmapCharacteristicTableCell::RefreshVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicTableCell*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicTableCell::*)(HMUI::SelectableCell::TransitionType)>(&BeatmapCharacteristicTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicTableCell::*)(HMUI::SelectableCell::TransitionType)>(&BeatmapCharacteristicTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicTableCell::*)()>(&BeatmapCharacteristicTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicTableCell::*)()>(&BeatmapCharacteristicTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorPickerButtonController
#include "GlobalNamespace/ColorPickerButtonController.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorPickerButtonController.get_button
UnityEngine::UI::Button* GlobalNamespace::ColorPickerButtonController::get_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorPickerButtonController::get_button");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Autogenerated method: ColorPickerButtonController.SetColor
void GlobalNamespace::ColorPickerButtonController::SetColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorPickerButtonController::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: ColorPickerButtonController::get_button
// Il2CppName: get_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (ColorPickerButtonController::*)()>(&ColorPickerButtonController::get_button)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorPickerButtonController*), "get_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorPickerButtonController::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorPickerButtonController::*)(UnityEngine::Color)>(&ColorPickerButtonController::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorPickerButtonController*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorPickerButtonController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorPickerButtonController::*)()>(&ColorPickerButtonController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorPickerButtonController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorPickerButtonController::*)()>(&ColorPickerButtonController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorPickerButtonController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorStepValuePicker
#include "GlobalNamespace/ColorStepValuePicker.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorStepValuePicker.add_decButtonWasPressedEvent
void GlobalNamespace::ColorStepValuePicker::add_decButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::add_decButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_decButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorStepValuePicker.remove_decButtonWasPressedEvent
void GlobalNamespace::ColorStepValuePicker::remove_decButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::remove_decButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_decButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorStepValuePicker.add_incButtonWasPressedEvent
void GlobalNamespace::ColorStepValuePicker::add_incButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::add_incButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_incButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorStepValuePicker.remove_incButtonWasPressedEvent
void GlobalNamespace::ColorStepValuePicker::remove_incButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::remove_incButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_incButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorStepValuePicker.get_color
UnityEngine::Color GlobalNamespace::ColorStepValuePicker::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorStepValuePicker.set_color
void GlobalNamespace::ColorStepValuePicker::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorStepValuePicker.set_decButtonInteractable
void GlobalNamespace::ColorStepValuePicker::set_decButtonInteractable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::set_decButtonInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_decButtonInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorStepValuePicker.set_incButtonInteractable
void GlobalNamespace::ColorStepValuePicker::set_incButtonInteractable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::set_incButtonInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_incButtonInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorStepValuePicker.OnEnable
void GlobalNamespace::ColorStepValuePicker::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorStepValuePicker.OnDisable
void GlobalNamespace::ColorStepValuePicker::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorStepValuePicker.IncButtonPressed
void GlobalNamespace::ColorStepValuePicker::IncButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::IncButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorStepValuePicker.DecButtonPressed
void GlobalNamespace::ColorStepValuePicker::DecButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorStepValuePicker::DecButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ColorStepValuePicker::add_decButtonWasPressedEvent
// Il2CppName: add_decButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)(System::Action*)>(&ColorStepValuePicker::add_decButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "add_decButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::remove_decButtonWasPressedEvent
// Il2CppName: remove_decButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)(System::Action*)>(&ColorStepValuePicker::remove_decButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "remove_decButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::add_incButtonWasPressedEvent
// Il2CppName: add_incButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)(System::Action*)>(&ColorStepValuePicker::add_incButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "add_incButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::remove_incButtonWasPressedEvent
// Il2CppName: remove_incButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)(System::Action*)>(&ColorStepValuePicker::remove_incButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "remove_incButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorStepValuePicker::*)()>(&ColorStepValuePicker::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)(UnityEngine::Color)>(&ColorStepValuePicker::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::set_decButtonInteractable
// Il2CppName: set_decButtonInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)(bool)>(&ColorStepValuePicker::set_decButtonInteractable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "set_decButtonInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::set_incButtonInteractable
// Il2CppName: set_incButtonInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)(bool)>(&ColorStepValuePicker::set_incButtonInteractable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "set_incButtonInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)()>(&ColorStepValuePicker::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)()>(&ColorStepValuePicker::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::IncButtonPressed
// Il2CppName: IncButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)()>(&ColorStepValuePicker::IncButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "IncButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::DecButtonPressed
// Il2CppName: DecButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)()>(&ColorStepValuePicker::DecButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), "DecButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorStepValuePicker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)()>(&ColorStepValuePicker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorStepValuePicker::*)()>(&ColorStepValuePicker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorStepValuePicker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DifficultyTableCell
#include "GlobalNamespace/DifficultyTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: FillIndicator
#include "GlobalNamespace/FillIndicator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DifficultyTableCell.set_difficultyText
void GlobalNamespace::DifficultyTableCell::set_difficultyText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyTableCell::set_difficultyText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_difficultyText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DifficultyTableCell.get_difficultyText
::Il2CppString* GlobalNamespace::DifficultyTableCell::get_difficultyText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyTableCell::get_difficultyText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficultyText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: DifficultyTableCell.set_difficultyValue
void GlobalNamespace::DifficultyTableCell::set_difficultyValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyTableCell::set_difficultyValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_difficultyValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DifficultyTableCell.SelectionDidChange
void GlobalNamespace::DifficultyTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: DifficultyTableCell.HighlightDidChange
void GlobalNamespace::DifficultyTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DifficultyTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Writing MetadataGetter for method: DifficultyTableCell::set_difficultyText
// Il2CppName: set_difficultyText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyTableCell::*)(::Il2CppString*)>(&DifficultyTableCell::set_difficultyText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyTableCell*), "set_difficultyText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: DifficultyTableCell::get_difficultyText
// Il2CppName: get_difficultyText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DifficultyTableCell::*)()>(&DifficultyTableCell::get_difficultyText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyTableCell*), "get_difficultyText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DifficultyTableCell::set_difficultyValue
// Il2CppName: set_difficultyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyTableCell::*)(int)>(&DifficultyTableCell::set_difficultyValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyTableCell*), "set_difficultyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DifficultyTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyTableCell::*)(HMUI::SelectableCell::TransitionType)>(&DifficultyTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: DifficultyTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyTableCell::*)(HMUI::SelectableCell::TransitionType)>(&DifficultyTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: DifficultyTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyTableCell::*)()>(&DifficultyTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DifficultyTableCell::*)()>(&DifficultyTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DifficultyTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FillIndicator
#include "GlobalNamespace/FillIndicator.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FillIndicator.set_fillAmount
void GlobalNamespace::FillIndicator::set_fillAmount(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FillIndicator::set_fillAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fillAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FillIndicator.get_fillAmount
float GlobalNamespace::FillIndicator::get_fillAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FillIndicator::get_fillAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fillAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FillIndicator::set_fillAmount
// Il2CppName: set_fillAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FillIndicator::*)(float)>(&FillIndicator::set_fillAmount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FillIndicator*), "set_fillAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FillIndicator::get_fillAmount
// Il2CppName: get_fillAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FillIndicator::*)()>(&FillIndicator::get_fillAmount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FillIndicator*), "get_fillAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FillIndicator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FillIndicator::*)()>(&FillIndicator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FillIndicator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FillIndicator::*)()>(&FillIndicator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FillIndicator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServerListDetailTableCell
#include "GlobalNamespace/GameServerListDetailTableCell.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameServerListDetailTableCell.add_joinServerButtonWasPressedEvent
void GlobalNamespace::GameServerListDetailTableCell::add_joinServerButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerListDetailTableCell::add_joinServerButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinServerButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerListDetailTableCell.remove_joinServerButtonWasPressedEvent
void GlobalNamespace::GameServerListDetailTableCell::remove_joinServerButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerListDetailTableCell::remove_joinServerButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinServerButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerListDetailTableCell.<Start>b__5_0
void GlobalNamespace::GameServerListDetailTableCell::$Start$b__5_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerListDetailTableCell::<Start>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerListDetailTableCell.Start
void GlobalNamespace::GameServerListDetailTableCell::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerListDetailTableCell::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameServerListDetailTableCell::add_joinServerButtonWasPressedEvent
// Il2CppName: add_joinServerButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListDetailTableCell::*)(System::Action*)>(&GameServerListDetailTableCell::add_joinServerButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListDetailTableCell*), "add_joinServerButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameServerListDetailTableCell::remove_joinServerButtonWasPressedEvent
// Il2CppName: remove_joinServerButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListDetailTableCell::*)(System::Action*)>(&GameServerListDetailTableCell::remove_joinServerButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListDetailTableCell*), "remove_joinServerButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameServerListDetailTableCell::$Start$b__5_0
// Il2CppName: <Start>b__5_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListDetailTableCell::*)()>(&GameServerListDetailTableCell::$Start$b__5_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListDetailTableCell*), "<Start>b__5_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerListDetailTableCell::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListDetailTableCell::*)()>(&GameServerListDetailTableCell::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListDetailTableCell*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerListDetailTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListDetailTableCell::*)()>(&GameServerListDetailTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListDetailTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListDetailTableCell::*)()>(&GameServerListDetailTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListDetailTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServerListTableCell
#include "GlobalNamespace/GameServerListTableCell.hpp"
// Including type: HMUI.CurvedTextMeshPro
#include "HMUI/CurvedTextMeshPro.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: SongPackMasksModel
#include "GlobalNamespace/SongPackMasksModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameServerListTableCell.SetData
void GlobalNamespace::GameServerListTableCell::SetData(GlobalNamespace::INetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerListTableCell::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Writing MetadataGetter for method: GameServerListTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListTableCell::*)(GlobalNamespace::INetworkPlayer*)>(&GameServerListTableCell::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: GameServerListTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListTableCell::*)()>(&GameServerListTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerListTableCell::*)()>(&GameServerListTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerListTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServerPlayerTableCell
#include "GlobalNamespace/GameServerPlayerTableCell.hpp"
// Including type: GameServerPlayerTableCell/<>c__DisplayClass26_0
#include "GlobalNamespace/GameServerPlayerTableCell_--c__DisplayClass26_0.hpp"
// Including type: GameServerPlayerTableCell/<SetBeatmapUseButtonEnabledAsync>d__32
#include "GlobalNamespace/GameServerPlayerTableCell_-SetBeatmapUseButtonEnabledAsync-d__32.hpp"
// Including type: HMUI.CurvedTextMeshPro
#include "HMUI/CurvedTextMeshPro.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: GameplayModifierInfoListItemsList
#include "GlobalNamespace/GameplayModifierInfoListItemsList.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: ILobbyPlayerDataModel
#include "GlobalNamespace/ILobbyPlayerDataModel.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameServerPlayerTableCell.add_kickPlayerEvent
void GlobalNamespace::GameServerPlayerTableCell::add_kickPlayerEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::add_kickPlayerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_kickPlayerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerPlayerTableCell.remove_kickPlayerEvent
void GlobalNamespace::GameServerPlayerTableCell::remove_kickPlayerEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::remove_kickPlayerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_kickPlayerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerPlayerTableCell.add_useBeatmapEvent
void GlobalNamespace::GameServerPlayerTableCell::add_useBeatmapEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::add_useBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_useBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerPlayerTableCell.remove_useBeatmapEvent
void GlobalNamespace::GameServerPlayerTableCell::remove_useBeatmapEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::remove_useBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_useBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerPlayerTableCell.add_useModifiersEvent
void GlobalNamespace::GameServerPlayerTableCell::add_useModifiersEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::add_useModifiersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_useModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerPlayerTableCell.remove_useModifiersEvent
void GlobalNamespace::GameServerPlayerTableCell::remove_useModifiersEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::remove_useModifiersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_useModifiersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameServerPlayerTableCell.SetData
void GlobalNamespace::GameServerPlayerTableCell::SetData(GlobalNamespace::IConnectedPlayer* connectedPlayer, GlobalNamespace::ILobbyPlayerDataModel* playerDataModel, bool isHost, System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* getLevelEntitlementTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer), ::il2cpp_utils::ExtractType(playerDataModel), ::il2cpp_utils::ExtractType(isHost), ::il2cpp_utils::ExtractType(getLevelEntitlementTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer, playerDataModel, isHost, getLevelEntitlementTask);
}
// Autogenerated method: GameServerPlayerTableCell.Awake
void GlobalNamespace::GameServerPlayerTableCell::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerPlayerTableCell.HandleKickPlayerButtonPressed
void GlobalNamespace::GameServerPlayerTableCell::HandleKickPlayerButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::HandleKickPlayerButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleKickPlayerButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerPlayerTableCell.HandleUseBeatmapButtonPressed
void GlobalNamespace::GameServerPlayerTableCell::HandleUseBeatmapButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::HandleUseBeatmapButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUseBeatmapButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerPlayerTableCell.HandleUseModifiersButtonPressed
void GlobalNamespace::GameServerPlayerTableCell::HandleUseModifiersButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::HandleUseModifiersButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUseModifiersButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerPlayerTableCell.SetBeatmapUseButtonEnabledAsync
void GlobalNamespace::GameServerPlayerTableCell::SetBeatmapUseButtonEnabledAsync(System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* getLevelEntitlementTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::SetBeatmapUseButtonEnabledAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBeatmapUseButtonEnabledAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(getLevelEntitlementTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, getLevelEntitlementTask);
}
// Writing MetadataGetter for method: GameServerPlayerTableCell::add_kickPlayerEvent
// Il2CppName: add_kickPlayerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(System::Action_1<int>*)>(&GameServerPlayerTableCell::add_kickPlayerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "add_kickPlayerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::remove_kickPlayerEvent
// Il2CppName: remove_kickPlayerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(System::Action_1<int>*)>(&GameServerPlayerTableCell::remove_kickPlayerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "remove_kickPlayerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::add_useBeatmapEvent
// Il2CppName: add_useBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(System::Action_1<int>*)>(&GameServerPlayerTableCell::add_useBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "add_useBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::remove_useBeatmapEvent
// Il2CppName: remove_useBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(System::Action_1<int>*)>(&GameServerPlayerTableCell::remove_useBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "remove_useBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::add_useModifiersEvent
// Il2CppName: add_useModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(System::Action_1<int>*)>(&GameServerPlayerTableCell::add_useModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "add_useModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::remove_useModifiersEvent
// Il2CppName: remove_useModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(System::Action_1<int>*)>(&GameServerPlayerTableCell::remove_useModifiersEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "remove_useModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(GlobalNamespace::IConnectedPlayer*, GlobalNamespace::ILobbyPlayerDataModel*, bool, System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*)>(&GameServerPlayerTableCell::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ILobbyPlayerDataModel*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)()>(&GameServerPlayerTableCell::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::HandleKickPlayerButtonPressed
// Il2CppName: HandleKickPlayerButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)()>(&GameServerPlayerTableCell::HandleKickPlayerButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "HandleKickPlayerButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::HandleUseBeatmapButtonPressed
// Il2CppName: HandleUseBeatmapButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)()>(&GameServerPlayerTableCell::HandleUseBeatmapButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "HandleUseBeatmapButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::HandleUseModifiersButtonPressed
// Il2CppName: HandleUseModifiersButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)()>(&GameServerPlayerTableCell::HandleUseModifiersButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "HandleUseModifiersButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::SetBeatmapUseButtonEnabledAsync
// Il2CppName: SetBeatmapUseButtonEnabledAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)(System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*)>(&GameServerPlayerTableCell::SetBeatmapUseButtonEnabledAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), "SetBeatmapUseButtonEnabledAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)()>(&GameServerPlayerTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::*)()>(&GameServerPlayerTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServerPlayerTableCell/<>c__DisplayClass26_0
#include "GlobalNamespace/GameServerPlayerTableCell_--c__DisplayClass26_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GameplayModifierParamsSO
#include "GlobalNamespace/GameplayModifierParamsSO.hpp"
// Including type: GameplayModifierInfoListItem
#include "GlobalNamespace/GameplayModifierInfoListItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameServerPlayerTableCell/<>c__DisplayClass26_0.<SetData>b__0
void GlobalNamespace::GameServerPlayerTableCell::$$c__DisplayClass26_0::$SetData$b__0(int id, GlobalNamespace::GameplayModifierInfoListItem* listItem) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::$$c__DisplayClass26_0::<SetData>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SetData>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(listItem)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, id, listItem);
}
// Writing MetadataGetter for method: GameServerPlayerTableCell::$$c__DisplayClass26_0::$SetData$b__0
// Il2CppName: <SetData>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::$$c__DisplayClass26_0::*)(int, GlobalNamespace::GameplayModifierInfoListItem*)>(&GameServerPlayerTableCell::$$c__DisplayClass26_0::$SetData$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell::$$c__DisplayClass26_0*), "<SetData>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierInfoListItem*>()});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::$$c__DisplayClass26_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::$$c__DisplayClass26_0::*)()>(&GameServerPlayerTableCell::$$c__DisplayClass26_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell::$$c__DisplayClass26_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::$$c__DisplayClass26_0::*)()>(&GameServerPlayerTableCell::$$c__DisplayClass26_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell::$$c__DisplayClass26_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServerPlayerTableCell/<SetBeatmapUseButtonEnabledAsync>d__32
#include "GlobalNamespace/GameServerPlayerTableCell_-SetBeatmapUseButtonEnabledAsync-d__32.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameServerPlayerTableCell/<SetBeatmapUseButtonEnabledAsync>d__32.MoveNext
void GlobalNamespace::GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: GameServerPlayerTableCell/<SetBeatmapUseButtonEnabledAsync>d__32.SetStateMachine
void GlobalNamespace::GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::*)()>(&GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerPlayerTableCell::$SetBeatmapUseButtonEnabledAsync$d__32), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifierInfoListItem
#include "GlobalNamespace/GameplayModifierInfoListItem.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: GameplayModifierParamsSO
#include "GlobalNamespace/GameplayModifierParamsSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayModifierInfoListItem.SetModifier
void GlobalNamespace::GameplayModifierInfoListItem::SetModifier(GlobalNamespace::GameplayModifierParamsSO* modifierParam, bool showName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierInfoListItem::SetModifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetModifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(modifierParam), ::il2cpp_utils::ExtractType(showName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, modifierParam, showName);
}
// Writing MetadataGetter for method: GameplayModifierInfoListItem::SetModifier
// Il2CppName: SetModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierInfoListItem::*)(GlobalNamespace::GameplayModifierParamsSO*, bool)>(&GameplayModifierInfoListItem::SetModifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierInfoListItem*), "SetModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierParamsSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameplayModifierInfoListItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierInfoListItem::*)()>(&GameplayModifierInfoListItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierInfoListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierInfoListItem::*)()>(&GameplayModifierInfoListItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierInfoListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifierInfoListItemsList
#include "GlobalNamespace/GameplayModifierInfoListItemsList.hpp"
// Including type: GameplayModifierInfoListItem
#include "GlobalNamespace/GameplayModifierInfoListItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameplayModifierInfoListItemsList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierInfoListItemsList::*)()>(&GameplayModifierInfoListItemsList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierInfoListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierInfoListItemsList::*)()>(&GameplayModifierInfoListItemsList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierInfoListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ImageWithHintItemsList
#include "GlobalNamespace/ImageWithHintItemsList.hpp"
// Including type: HMUI.ImageWithHint
#include "HMUI/ImageWithHint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ImageWithHintItemsList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageWithHintItemsList::*)()>(&ImageWithHintItemsList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageWithHintItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImageWithHintItemsList::*)()>(&ImageWithHintItemsList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImageWithHintItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IncDecColorController
#include "GlobalNamespace/IncDecColorController.hpp"
// Including type: ColorStepValuePicker
#include "GlobalNamespace/ColorStepValuePicker.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IncDecColorController.set_enableDec
void GlobalNamespace::IncDecColorController::set_enableDec(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IncDecColorController::set_enableDec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableDec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IncDecColorController.set_enableInc
void GlobalNamespace::IncDecColorController::set_enableInc(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IncDecColorController::set_enableInc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableInc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IncDecColorController.set_color
void GlobalNamespace::IncDecColorController::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IncDecColorController::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IncDecColorController.Awake
void GlobalNamespace::IncDecColorController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IncDecColorController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IncDecColorController.OnDestroy
void GlobalNamespace::IncDecColorController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IncDecColorController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IncDecColorController.IncButtonPressed
void GlobalNamespace::IncDecColorController::IncButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IncDecColorController::IncButtonPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IncDecColorController.DecButtonPressed
void GlobalNamespace::IncDecColorController::DecButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IncDecColorController::DecButtonPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IncDecColorController::set_enableDec
// Il2CppName: set_enableDec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)(bool)>(&IncDecColorController::set_enableDec)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), "set_enableDec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IncDecColorController::set_enableInc
// Il2CppName: set_enableInc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)(bool)>(&IncDecColorController::set_enableInc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), "set_enableInc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IncDecColorController::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)(UnityEngine::Color)>(&IncDecColorController::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: IncDecColorController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)()>(&IncDecColorController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IncDecColorController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)()>(&IncDecColorController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IncDecColorController::IncButtonPressed
// Il2CppName: IncButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)()>(&IncDecColorController::IncButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), "IncButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IncDecColorController::DecButtonPressed
// Il2CppName: DecButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)()>(&IncDecColorController::DecButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), "DecButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IncDecColorController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)()>(&IncDecColorController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IncDecColorController::*)()>(&IncDecColorController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IncDecColorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LeaderboardTableCell
#include "GlobalNamespace/LeaderboardTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LeaderboardTableCell.set_rank
void GlobalNamespace::LeaderboardTableCell::set_rank(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardTableCell::set_rank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LeaderboardTableCell.set_playerName
void GlobalNamespace::LeaderboardTableCell::set_playerName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardTableCell::set_playerName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_playerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LeaderboardTableCell.set_score
void GlobalNamespace::LeaderboardTableCell::set_score(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardTableCell::set_score");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_score", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LeaderboardTableCell.set_showSeparator
void GlobalNamespace::LeaderboardTableCell::set_showSeparator(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardTableCell::set_showSeparator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showSeparator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LeaderboardTableCell.set_showFullCombo
void GlobalNamespace::LeaderboardTableCell::set_showFullCombo(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardTableCell::set_showFullCombo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showFullCombo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LeaderboardTableCell.set_specialScore
void GlobalNamespace::LeaderboardTableCell::set_specialScore(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardTableCell::set_specialScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_specialScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: LeaderboardTableCell::set_rank
// Il2CppName: set_rank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)(int)>(&LeaderboardTableCell::set_rank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), "set_rank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LeaderboardTableCell::set_playerName
// Il2CppName: set_playerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)(::Il2CppString*)>(&LeaderboardTableCell::set_playerName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), "set_playerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LeaderboardTableCell::set_score
// Il2CppName: set_score
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)(int)>(&LeaderboardTableCell::set_score)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), "set_score", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LeaderboardTableCell::set_showSeparator
// Il2CppName: set_showSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)(bool)>(&LeaderboardTableCell::set_showSeparator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), "set_showSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LeaderboardTableCell::set_showFullCombo
// Il2CppName: set_showFullCombo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)(bool)>(&LeaderboardTableCell::set_showFullCombo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), "set_showFullCombo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LeaderboardTableCell::set_specialScore
// Il2CppName: set_specialScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)(bool)>(&LeaderboardTableCell::set_specialScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), "set_specialScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LeaderboardTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)()>(&LeaderboardTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardTableCell::*)()>(&LeaderboardTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelListTableCell
#include "GlobalNamespace/LevelListTableCell.hpp"
// Including type: LevelListTableCell/<SetDataFromLevelAsync>d__17
#include "GlobalNamespace/LevelListTableCell_-SetDataFromLevelAsync-d__17.hpp"
// Including type: LevelListTableCell/<RefreshAvailabilityAsync>d__22
#include "GlobalNamespace/LevelListTableCell_-RefreshAvailabilityAsync-d__22.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelListTableCell.SetDataFromLevelAsync
void GlobalNamespace::LevelListTableCell::SetDataFromLevelAsync(GlobalNamespace::IPreviewBeatmapLevel* level, bool isFavorite) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::SetDataFromLevelAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDataFromLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(isFavorite)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level, isFavorite);
}
// Autogenerated method: LevelListTableCell.RefreshVisuals
void GlobalNamespace::LevelListTableCell::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelListTableCell.RefreshAvailabilityAsync
void GlobalNamespace::LevelListTableCell::RefreshAvailabilityAsync(GlobalNamespace::AdditionalContentModel* contentModel, ::Il2CppString* levelID) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::RefreshAvailabilityAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshAvailabilityAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contentModel), ::il2cpp_utils::ExtractType(levelID)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, contentModel, levelID);
}
// Autogenerated method: LevelListTableCell.CancelAsyncOperations
void GlobalNamespace::LevelListTableCell::CancelAsyncOperations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::CancelAsyncOperations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelAsyncOperations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelListTableCell.SelectionDidChange
void GlobalNamespace::LevelListTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: LevelListTableCell.HighlightDidChange
void GlobalNamespace::LevelListTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: LevelListTableCell.WasPreparedForReuse
void GlobalNamespace::LevelListTableCell::WasPreparedForReuse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::WasPreparedForReuse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WasPreparedForReuse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LevelListTableCell::SetDataFromLevelAsync
// Il2CppName: SetDataFromLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)(GlobalNamespace::IPreviewBeatmapLevel*, bool)>(&LevelListTableCell::SetDataFromLevelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), "SetDataFromLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)()>(&LevelListTableCell::RefreshVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::RefreshAvailabilityAsync
// Il2CppName: RefreshAvailabilityAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)(GlobalNamespace::AdditionalContentModel*, ::Il2CppString*)>(&LevelListTableCell::RefreshAvailabilityAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), "RefreshAvailabilityAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AdditionalContentModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::CancelAsyncOperations
// Il2CppName: CancelAsyncOperations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)()>(&LevelListTableCell::CancelAsyncOperations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), "CancelAsyncOperations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)(HMUI::SelectableCell::TransitionType)>(&LevelListTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)(HMUI::SelectableCell::TransitionType)>(&LevelListTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::WasPreparedForReuse
// Il2CppName: WasPreparedForReuse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)()>(&LevelListTableCell::WasPreparedForReuse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), "WasPreparedForReuse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)()>(&LevelListTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::*)()>(&LevelListTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelListTableCell/<SetDataFromLevelAsync>d__17
#include "GlobalNamespace/LevelListTableCell_-SetDataFromLevelAsync-d__17.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelListTableCell/<SetDataFromLevelAsync>d__17.MoveNext
void GlobalNamespace::LevelListTableCell::$SetDataFromLevelAsync$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::$SetDataFromLevelAsync$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LevelListTableCell/<SetDataFromLevelAsync>d__17.SetStateMachine
void GlobalNamespace::LevelListTableCell::$SetDataFromLevelAsync$d__17::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::$SetDataFromLevelAsync$d__17::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: LevelListTableCell::$SetDataFromLevelAsync$d__17::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::$SetDataFromLevelAsync$d__17::*)()>(&LevelListTableCell::$SetDataFromLevelAsync$d__17::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell::$SetDataFromLevelAsync$d__17), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::$SetDataFromLevelAsync$d__17::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::$SetDataFromLevelAsync$d__17::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&LevelListTableCell::$SetDataFromLevelAsync$d__17::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell::$SetDataFromLevelAsync$d__17), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelListTableCell/<RefreshAvailabilityAsync>d__22
#include "GlobalNamespace/LevelListTableCell_-RefreshAvailabilityAsync-d__22.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelListTableCell/<RefreshAvailabilityAsync>d__22.MoveNext
void GlobalNamespace::LevelListTableCell::$RefreshAvailabilityAsync$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::$RefreshAvailabilityAsync$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LevelListTableCell/<RefreshAvailabilityAsync>d__22.SetStateMachine
void GlobalNamespace::LevelListTableCell::$RefreshAvailabilityAsync$d__22::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelListTableCell::$RefreshAvailabilityAsync$d__22::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: LevelListTableCell::$RefreshAvailabilityAsync$d__22::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::$RefreshAvailabilityAsync$d__22::*)()>(&LevelListTableCell::$RefreshAvailabilityAsync$d__22::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell::$RefreshAvailabilityAsync$d__22), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelListTableCell::$RefreshAvailabilityAsync$d__22::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelListTableCell::$RefreshAvailabilityAsync$d__22::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&LevelListTableCell::$RefreshAvailabilityAsync$d__22::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelListTableCell::$RefreshAvailabilityAsync$d__22), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelPackHeaderTableCell
#include "GlobalNamespace/LevelPackHeaderTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelPackHeaderTableCell.SetData
void GlobalNamespace::LevelPackHeaderTableCell::SetData(::Il2CppString* headerText) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelPackHeaderTableCell::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headerText)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headerText);
}
// Autogenerated method: LevelPackHeaderTableCell.RefreshVisuals
void GlobalNamespace::LevelPackHeaderTableCell::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelPackHeaderTableCell::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelPackHeaderTableCell.SelectionDidChange
void GlobalNamespace::LevelPackHeaderTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelPackHeaderTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: LevelPackHeaderTableCell.HighlightDidChange
void GlobalNamespace::LevelPackHeaderTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelPackHeaderTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Writing MetadataGetter for method: LevelPackHeaderTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelPackHeaderTableCell::*)(::Il2CppString*)>(&LevelPackHeaderTableCell::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelPackHeaderTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LevelPackHeaderTableCell::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelPackHeaderTableCell::*)()>(&LevelPackHeaderTableCell::RefreshVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelPackHeaderTableCell*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelPackHeaderTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelPackHeaderTableCell::*)(HMUI::SelectableCell::TransitionType)>(&LevelPackHeaderTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelPackHeaderTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: LevelPackHeaderTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelPackHeaderTableCell::*)(HMUI::SelectableCell::TransitionType)>(&LevelPackHeaderTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelPackHeaderTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: LevelPackHeaderTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelPackHeaderTableCell::*)()>(&LevelPackHeaderTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelPackHeaderTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelPackHeaderTableCell::*)()>(&LevelPackHeaderTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelPackHeaderTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ListColorController
#include "GlobalNamespace/ListColorController.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ListColorController.GetInitValues
bool GlobalNamespace::ListColorController::GetInitValues(int& idx, int& numberOfElements) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::GetInitValues");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInitValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, idx, numberOfElements);
}
// Autogenerated method: ListColorController.ApplyValue
void GlobalNamespace::ListColorController::ApplyValue(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::ApplyValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: ListColorController.ColorForValue
UnityEngine::Color GlobalNamespace::ListColorController::ColorForValue(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::ColorForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, idx);
}
// Autogenerated method: ListColorController.OnEnable
void GlobalNamespace::ListColorController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ListColorController.RefreshUI
void GlobalNamespace::ListColorController::RefreshUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::RefreshUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ListColorController.Refresh
void GlobalNamespace::ListColorController::Refresh(bool applyValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(applyValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, applyValue);
}
// Autogenerated method: ListColorController.IncButtonPressed
void GlobalNamespace::ListColorController::IncButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::IncButtonPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ListColorController.DecButtonPressed
void GlobalNamespace::ListColorController::DecButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListColorController::DecButtonPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ListColorController::GetInitValues
// Il2CppName: GetInitValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ListColorController::*)(int&, int&)>(&ListColorController::GetInitValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "GetInitValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: ListColorController::ApplyValue
// Il2CppName: ApplyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)(int)>(&ListColorController::ApplyValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "ApplyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ListColorController::ColorForValue
// Il2CppName: ColorForValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ListColorController::*)(int)>(&ListColorController::ColorForValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "ColorForValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ListColorController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)()>(&ListColorController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ListColorController::RefreshUI
// Il2CppName: RefreshUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)()>(&ListColorController::RefreshUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "RefreshUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ListColorController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)(bool)>(&ListColorController::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ListColorController::IncButtonPressed
// Il2CppName: IncButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)()>(&ListColorController::IncButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "IncButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ListColorController::DecButtonPressed
// Il2CppName: DecButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)()>(&ListColorController::DecButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), "DecButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ListColorController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)()>(&ListColorController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListColorController::*)()>(&ListColorController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListColorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LoadingControl
#include "GlobalNamespace/LoadingControl.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LoadingControl.add_didPressRefreshButtonEvent
void GlobalNamespace::LoadingControl::add_didPressRefreshButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::add_didPressRefreshButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPressRefreshButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LoadingControl.remove_didPressRefreshButtonEvent
void GlobalNamespace::LoadingControl::remove_didPressRefreshButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::remove_didPressRefreshButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPressRefreshButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LoadingControl.get_isLoading
bool GlobalNamespace::LoadingControl::get_isLoading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::get_isLoading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isLoading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LoadingControl.Awake
void GlobalNamespace::LoadingControl::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LoadingControl.OnDestroy
void GlobalNamespace::LoadingControl::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LoadingControl.ShowLoading
void GlobalNamespace::LoadingControl::ShowLoading(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::ShowLoading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowLoading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: LoadingControl.ShowText
void GlobalNamespace::LoadingControl::ShowText(::Il2CppString* text, bool showRefreshButton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::ShowText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(showRefreshButton)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, showRefreshButton);
}
// Autogenerated method: LoadingControl.ShowDownloadingProgress
void GlobalNamespace::LoadingControl::ShowDownloadingProgress(::Il2CppString* text, float downloadingProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::ShowDownloadingProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDownloadingProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(downloadingProgress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, downloadingProgress);
}
// Autogenerated method: LoadingControl.Hide
void GlobalNamespace::LoadingControl::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LoadingControl.<Awake>b__14_0
void GlobalNamespace::LoadingControl::$Awake$b__14_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LoadingControl::<Awake>b__14_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__14_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LoadingControl::add_didPressRefreshButtonEvent
// Il2CppName: add_didPressRefreshButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)(System::Action*)>(&LoadingControl::add_didPressRefreshButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "add_didPressRefreshButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LoadingControl::remove_didPressRefreshButtonEvent
// Il2CppName: remove_didPressRefreshButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)(System::Action*)>(&LoadingControl::remove_didPressRefreshButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "remove_didPressRefreshButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: LoadingControl::get_isLoading
// Il2CppName: get_isLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LoadingControl::*)()>(&LoadingControl::get_isLoading)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "get_isLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LoadingControl::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)()>(&LoadingControl::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LoadingControl::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)()>(&LoadingControl::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LoadingControl::ShowLoading
// Il2CppName: ShowLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)(::Il2CppString*)>(&LoadingControl::ShowLoading)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "ShowLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LoadingControl::ShowText
// Il2CppName: ShowText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)(::Il2CppString*, bool)>(&LoadingControl::ShowText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "ShowText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LoadingControl::ShowDownloadingProgress
// Il2CppName: ShowDownloadingProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)(::Il2CppString*, float)>(&LoadingControl::ShowDownloadingProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "ShowDownloadingProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LoadingControl::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)()>(&LoadingControl::Hide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LoadingControl::$Awake$b__14_0
// Il2CppName: <Awake>b__14_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)()>(&LoadingControl::$Awake$b__14_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), "<Awake>b__14_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LoadingControl::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)()>(&LoadingControl::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LoadingControl::*)()>(&LoadingControl::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LoadingControl*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NamedColorListController
#include "GlobalNamespace/NamedColorListController.hpp"
// Including type: NamedColorListController/ColorValuePair
#include "GlobalNamespace/NamedColorListController_ColorValuePair.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NamedColorListController.add_valueChangedEvent
void GlobalNamespace::NamedColorListController::add_valueChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::add_valueChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_valueChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NamedColorListController.remove_valueChangedEvent
void GlobalNamespace::NamedColorListController::remove_valueChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::remove_valueChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_valueChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NamedColorListController.Init
void GlobalNamespace::NamedColorListController::Init(::Array<GlobalNamespace::NamedColorListController::ColorValuePair*>* values, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, values, value);
}
// Autogenerated method: NamedColorListController.SetValue
void GlobalNamespace::NamedColorListController::SetValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::SetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NamedColorListController.GetInitValues
bool GlobalNamespace::NamedColorListController::GetInitValues(int& idx, int& numberOfElements) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::GetInitValues");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInitValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, idx, numberOfElements);
}
// Autogenerated method: NamedColorListController.ApplyValue
void GlobalNamespace::NamedColorListController::ApplyValue(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::ApplyValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: NamedColorListController.ColorForValue
UnityEngine::Color GlobalNamespace::NamedColorListController::ColorForValue(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::ColorForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, idx);
}
// Writing MetadataGetter for method: NamedColorListController::add_valueChangedEvent
// Il2CppName: add_valueChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::*)(System::Action_1<int>*)>(&NamedColorListController::add_valueChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), "add_valueChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: NamedColorListController::remove_valueChangedEvent
// Il2CppName: remove_valueChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::*)(System::Action_1<int>*)>(&NamedColorListController::remove_valueChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), "remove_valueChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: NamedColorListController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::*)(::Array<GlobalNamespace::NamedColorListController::ColorValuePair*>*, int)>(&NamedColorListController::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::NamedColorListController::ColorValuePair*>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NamedColorListController::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::*)(int)>(&NamedColorListController::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NamedColorListController::GetInitValues
// Il2CppName: GetInitValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NamedColorListController::*)(int&, int&)>(&NamedColorListController::GetInitValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), "GetInitValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: NamedColorListController::ApplyValue
// Il2CppName: ApplyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::*)(int)>(&NamedColorListController::ApplyValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), "ApplyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NamedColorListController::ColorForValue
// Il2CppName: ColorForValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (NamedColorListController::*)(int)>(&NamedColorListController::ColorForValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), "ColorForValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NamedColorListController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::*)()>(&NamedColorListController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::*)()>(&NamedColorListController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NamedColorListController/ColorValuePair
#include "GlobalNamespace/NamedColorListController_ColorValuePair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NamedColorListController::ColorValuePair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::ColorValuePair::*)()>(&NamedColorListController::ColorValuePair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController::ColorValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedColorListController::ColorValuePair::*)()>(&NamedColorListController::ColorValuePair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedColorListController::ColorValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NamedIntListController
#include "GlobalNamespace/NamedIntListController.hpp"
// Including type: NamedIntListController/TextValuePair
#include "GlobalNamespace/NamedIntListController_TextValuePair.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NamedIntListController.add_valueChangedEvent
void GlobalNamespace::NamedIntListController::add_valueChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::add_valueChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_valueChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NamedIntListController.remove_valueChangedEvent
void GlobalNamespace::NamedIntListController::remove_valueChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::remove_valueChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_valueChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NamedIntListController.InitValues
void GlobalNamespace::NamedIntListController::InitValues(::Array<GlobalNamespace::NamedIntListController::TextValuePair*>* values) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::InitValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, values);
}
// Autogenerated method: NamedIntListController.SetValue
void GlobalNamespace::NamedIntListController::SetValue(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::SetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NamedIntListController.GetInitValues
bool GlobalNamespace::NamedIntListController::GetInitValues(int& idx, int& numberOfElements) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::GetInitValues");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInitValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, idx, numberOfElements);
}
// Autogenerated method: NamedIntListController.ApplyValue
void GlobalNamespace::NamedIntListController::ApplyValue(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::ApplyValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: NamedIntListController.TextForValue
::Il2CppString* GlobalNamespace::NamedIntListController::TextForValue(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, idx);
}
// Writing MetadataGetter for method: NamedIntListController::add_valueChangedEvent
// Il2CppName: add_valueChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::*)(System::Action_1<int>*)>(&NamedIntListController::add_valueChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), "add_valueChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: NamedIntListController::remove_valueChangedEvent
// Il2CppName: remove_valueChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::*)(System::Action_1<int>*)>(&NamedIntListController::remove_valueChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), "remove_valueChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: NamedIntListController::InitValues
// Il2CppName: InitValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::*)(::Array<GlobalNamespace::NamedIntListController::TextValuePair*>*)>(&NamedIntListController::InitValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), "InitValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::NamedIntListController::TextValuePair*>*>()});
  }
};
// Writing MetadataGetter for method: NamedIntListController::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::*)(int)>(&NamedIntListController::SetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NamedIntListController::GetInitValues
// Il2CppName: GetInitValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NamedIntListController::*)(int&, int&)>(&NamedIntListController::GetInitValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), "GetInitValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: NamedIntListController::ApplyValue
// Il2CppName: ApplyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::*)(int)>(&NamedIntListController::ApplyValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), "ApplyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NamedIntListController::TextForValue
// Il2CppName: TextForValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NamedIntListController::*)(int)>(&NamedIntListController::TextForValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), "TextForValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NamedIntListController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::*)()>(&NamedIntListController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::*)()>(&NamedIntListController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NamedIntListController/TextValuePair
#include "GlobalNamespace/NamedIntListController_TextValuePair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NamedIntListController/TextValuePair.get_localizedText
::Il2CppString* GlobalNamespace::NamedIntListController::TextValuePair::get_localizedText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedIntListController::TextValuePair::get_localizedText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NamedIntListController::TextValuePair::get_localizedText
// Il2CppName: get_localizedText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NamedIntListController::TextValuePair::*)()>(&NamedIntListController::TextValuePair::get_localizedText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController::TextValuePair*), "get_localizedText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NamedIntListController::TextValuePair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::TextValuePair::*)()>(&NamedIntListController::TextValuePair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController::TextValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamedIntListController::TextValuePair::*)()>(&NamedIntListController::TextValuePair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamedIntListController::TextValuePair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PackLevelListHeaderTableCell
#include "GlobalNamespace/PackLevelListHeaderTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PackLevelListHeaderTableCell.set_text
void GlobalNamespace::PackLevelListHeaderTableCell::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PackLevelListHeaderTableCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PackLevelListHeaderTableCell.get_text
::Il2CppString* GlobalNamespace::PackLevelListHeaderTableCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PackLevelListHeaderTableCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PackLevelListHeaderTableCell.RefreshVisuals
void GlobalNamespace::PackLevelListHeaderTableCell::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PackLevelListHeaderTableCell::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PackLevelListHeaderTableCell.SelectionDidChange
void GlobalNamespace::PackLevelListHeaderTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PackLevelListHeaderTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: PackLevelListHeaderTableCell.HighlightDidChange
void GlobalNamespace::PackLevelListHeaderTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PackLevelListHeaderTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Writing MetadataGetter for method: PackLevelListHeaderTableCell::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackLevelListHeaderTableCell::*)(::Il2CppString*)>(&PackLevelListHeaderTableCell::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackLevelListHeaderTableCell*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PackLevelListHeaderTableCell::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PackLevelListHeaderTableCell::*)()>(&PackLevelListHeaderTableCell::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackLevelListHeaderTableCell*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PackLevelListHeaderTableCell::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackLevelListHeaderTableCell::*)()>(&PackLevelListHeaderTableCell::RefreshVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackLevelListHeaderTableCell*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PackLevelListHeaderTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackLevelListHeaderTableCell::*)(HMUI::SelectableCell::TransitionType)>(&PackLevelListHeaderTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackLevelListHeaderTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: PackLevelListHeaderTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackLevelListHeaderTableCell::*)(HMUI::SelectableCell::TransitionType)>(&PackLevelListHeaderTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackLevelListHeaderTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: PackLevelListHeaderTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackLevelListHeaderTableCell::*)()>(&PackLevelListHeaderTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackLevelListHeaderTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackLevelListHeaderTableCell::*)()>(&PackLevelListHeaderTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackLevelListHeaderTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SafeAreaRectChecker
#include "GlobalNamespace/SafeAreaRectChecker.hpp"
// Including type: SafeAreaRectChecker/InitData
#include "GlobalNamespace/SafeAreaRectChecker_InitData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: MainCamera
#include "GlobalNamespace/MainCamera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SafeAreaRectChecker.Start
void GlobalNamespace::SafeAreaRectChecker::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SafeAreaRectChecker::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SafeAreaRectChecker.Update
void GlobalNamespace::SafeAreaRectChecker::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SafeAreaRectChecker::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SafeAreaRectChecker::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SafeAreaRectChecker::*)()>(&SafeAreaRectChecker::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SafeAreaRectChecker*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SafeAreaRectChecker::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SafeAreaRectChecker::*)()>(&SafeAreaRectChecker::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SafeAreaRectChecker*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SafeAreaRectChecker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SafeAreaRectChecker::*)()>(&SafeAreaRectChecker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SafeAreaRectChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SafeAreaRectChecker::*)()>(&SafeAreaRectChecker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SafeAreaRectChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SafeAreaRectChecker/InitData
#include "GlobalNamespace/SafeAreaRectChecker_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SafeAreaRectChecker::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SafeAreaRectChecker::InitData::*)(bool)>(&SafeAreaRectChecker::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SafeAreaRectChecker::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SafeAreaRectChecker::InitData::*)(bool)>(&SafeAreaRectChecker::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SafeAreaRectChecker::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StartMiddleEndButtonBackgroundController
#include "GlobalNamespace/StartMiddleEndButtonBackgroundController.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StartMiddleEndButtonBackgroundController.SetStartSprite
void GlobalNamespace::StartMiddleEndButtonBackgroundController::SetStartSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StartMiddleEndButtonBackgroundController::SetStartSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StartMiddleEndButtonBackgroundController.SetMiddleSprite
void GlobalNamespace::StartMiddleEndButtonBackgroundController::SetMiddleSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StartMiddleEndButtonBackgroundController::SetMiddleSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMiddleSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StartMiddleEndButtonBackgroundController.SetEndSprite
void GlobalNamespace::StartMiddleEndButtonBackgroundController::SetEndSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StartMiddleEndButtonBackgroundController::SetEndSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEndSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StartMiddleEndButtonBackgroundController::SetStartSprite
// Il2CppName: SetStartSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonBackgroundController::*)()>(&StartMiddleEndButtonBackgroundController::SetStartSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonBackgroundController*), "SetStartSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StartMiddleEndButtonBackgroundController::SetMiddleSprite
// Il2CppName: SetMiddleSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonBackgroundController::*)()>(&StartMiddleEndButtonBackgroundController::SetMiddleSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonBackgroundController*), "SetMiddleSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StartMiddleEndButtonBackgroundController::SetEndSprite
// Il2CppName: SetEndSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonBackgroundController::*)()>(&StartMiddleEndButtonBackgroundController::SetEndSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonBackgroundController*), "SetEndSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StartMiddleEndButtonBackgroundController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonBackgroundController::*)()>(&StartMiddleEndButtonBackgroundController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonBackgroundController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonBackgroundController::*)()>(&StartMiddleEndButtonBackgroundController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonBackgroundController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StartMiddleEndButtonsGroup
#include "GlobalNamespace/StartMiddleEndButtonsGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StartMiddleEndButtonsGroup.SetLayoutHorizontal
void GlobalNamespace::StartMiddleEndButtonsGroup::SetLayoutHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StartMiddleEndButtonsGroup::SetLayoutHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StartMiddleEndButtonsGroup.SetLayoutVertical
void GlobalNamespace::StartMiddleEndButtonsGroup::SetLayoutVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StartMiddleEndButtonsGroup::SetLayoutVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StartMiddleEndButtonsGroup::SetLayoutHorizontal
// Il2CppName: SetLayoutHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonsGroup::*)()>(&StartMiddleEndButtonsGroup::SetLayoutHorizontal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonsGroup*), "SetLayoutHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StartMiddleEndButtonsGroup::SetLayoutVertical
// Il2CppName: SetLayoutVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonsGroup::*)()>(&StartMiddleEndButtonsGroup::SetLayoutVertical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonsGroup*), "SetLayoutVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StartMiddleEndButtonsGroup::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonsGroup::*)()>(&StartMiddleEndButtonsGroup::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonsGroup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StartMiddleEndButtonsGroup::*)()>(&StartMiddleEndButtonsGroup::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StartMiddleEndButtonsGroup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StepValuePicker
#include "GlobalNamespace/StepValuePicker.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StepValuePicker.add_decButtonWasPressedEvent
void GlobalNamespace::StepValuePicker::add_decButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::add_decButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_decButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StepValuePicker.remove_decButtonWasPressedEvent
void GlobalNamespace::StepValuePicker::remove_decButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::remove_decButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_decButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StepValuePicker.add_incButtonWasPressedEvent
void GlobalNamespace::StepValuePicker::add_incButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::add_incButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_incButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StepValuePicker.remove_incButtonWasPressedEvent
void GlobalNamespace::StepValuePicker::remove_incButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::remove_incButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_incButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StepValuePicker.get_text
::Il2CppString* GlobalNamespace::StepValuePicker::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: StepValuePicker.set_text
void GlobalNamespace::StepValuePicker::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StepValuePicker.set_decButtonInteractable
void GlobalNamespace::StepValuePicker::set_decButtonInteractable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::set_decButtonInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_decButtonInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StepValuePicker.set_incButtonInteractable
void GlobalNamespace::StepValuePicker::set_incButtonInteractable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::set_incButtonInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_incButtonInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StepValuePicker.OnEnable
void GlobalNamespace::StepValuePicker::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StepValuePicker.OnDisable
void GlobalNamespace::StepValuePicker::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StepValuePicker.IncButtonPressed
void GlobalNamespace::StepValuePicker::IncButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::IncButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StepValuePicker.DecButtonPressed
void GlobalNamespace::StepValuePicker::DecButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StepValuePicker::DecButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StepValuePicker::add_decButtonWasPressedEvent
// Il2CppName: add_decButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)(System::Action*)>(&StepValuePicker::add_decButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "add_decButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StepValuePicker::remove_decButtonWasPressedEvent
// Il2CppName: remove_decButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)(System::Action*)>(&StepValuePicker::remove_decButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "remove_decButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StepValuePicker::add_incButtonWasPressedEvent
// Il2CppName: add_incButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)(System::Action*)>(&StepValuePicker::add_incButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "add_incButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StepValuePicker::remove_incButtonWasPressedEvent
// Il2CppName: remove_incButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)(System::Action*)>(&StepValuePicker::remove_incButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "remove_incButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StepValuePicker::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StepValuePicker::*)()>(&StepValuePicker::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StepValuePicker::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)(::Il2CppString*)>(&StepValuePicker::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StepValuePicker::set_decButtonInteractable
// Il2CppName: set_decButtonInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)(bool)>(&StepValuePicker::set_decButtonInteractable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "set_decButtonInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StepValuePicker::set_incButtonInteractable
// Il2CppName: set_incButtonInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)(bool)>(&StepValuePicker::set_incButtonInteractable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "set_incButtonInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StepValuePicker::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)()>(&StepValuePicker::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StepValuePicker::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)()>(&StepValuePicker::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StepValuePicker::IncButtonPressed
// Il2CppName: IncButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)()>(&StepValuePicker::IncButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "IncButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StepValuePicker::DecButtonPressed
// Il2CppName: DecButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)()>(&StepValuePicker::DecButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), "DecButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StepValuePicker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)()>(&StepValuePicker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StepValuePicker::*)()>(&StepValuePicker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StepValuePicker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TextButton
#include "GlobalNamespace/TextButton.hpp"
// Including type: UnityEngine.UI.Text
#include "UnityEngine/UI/Text.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TextButton.get_text
UnityEngine::UI::Text* GlobalNamespace::TextButton::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextButton::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Text*, false>(this, ___internal__method);
}
// Autogenerated method: TextButton.get_button
UnityEngine::UI::Button* GlobalNamespace::TextButton::get_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextButton::get_button");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TextButton::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Text* (TextButton::*)()>(&TextButton::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextButton*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextButton::get_button
// Il2CppName: get_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (TextButton::*)()>(&TextButton::get_button)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextButton*), "get_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextButton::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextButton::*)()>(&TextButton::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextButton::*)()>(&TextButton::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TextMeshProButton
#include "GlobalNamespace/TextMeshProButton.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TextMeshProButton.get_text
TMPro::TextMeshProUGUI* GlobalNamespace::TextMeshProButton::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextMeshProButton::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextMeshProUGUI*, false>(this, ___internal__method);
}
// Autogenerated method: TextMeshProButton.get_button
UnityEngine::UI::Button* GlobalNamespace::TextMeshProButton::get_button() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextMeshProButton::get_button");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TextMeshProButton::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextMeshProUGUI* (TextMeshProButton::*)()>(&TextMeshProButton::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProButton*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProButton::get_button
// Il2CppName: get_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (TextMeshProButton::*)()>(&TextMeshProButton::get_button)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProButton*), "get_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextMeshProButton::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProButton::*)()>(&TextMeshProButton::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextMeshProButton::*)()>(&TextMeshProButton::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextMeshProButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TextOnlyTableCell
#include "GlobalNamespace/TextOnlyTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: HMUI.SelectableCell/TransitionType
#include "HMUI/SelectableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TextOnlyTableCell.get_text
::Il2CppString* GlobalNamespace::TextOnlyTableCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextOnlyTableCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TextOnlyTableCell.set_text
void GlobalNamespace::TextOnlyTableCell::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextOnlyTableCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TextOnlyTableCell.RefreshVisuals
void GlobalNamespace::TextOnlyTableCell::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextOnlyTableCell::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TextOnlyTableCell.SelectionDidChange
void GlobalNamespace::TextOnlyTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextOnlyTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: TextOnlyTableCell.HighlightDidChange
void GlobalNamespace::TextOnlyTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TextOnlyTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Writing MetadataGetter for method: TextOnlyTableCell::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextOnlyTableCell::*)()>(&TextOnlyTableCell::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextOnlyTableCell*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextOnlyTableCell::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextOnlyTableCell::*)(::Il2CppString*)>(&TextOnlyTableCell::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextOnlyTableCell*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextOnlyTableCell::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextOnlyTableCell::*)()>(&TextOnlyTableCell::RefreshVisuals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextOnlyTableCell*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextOnlyTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextOnlyTableCell::*)(HMUI::SelectableCell::TransitionType)>(&TextOnlyTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextOnlyTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: TextOnlyTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextOnlyTableCell::*)(HMUI::SelectableCell::TransitionType)>(&TextOnlyTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextOnlyTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: TextOnlyTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextOnlyTableCell::*)()>(&TextOnlyTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextOnlyTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextOnlyTableCell::*)()>(&TextOnlyTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextOnlyTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseStateTransition
#include "GlobalNamespace/BaseStateTransition.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseStateTransition.get_tweeningManager
Tweening::TweeningManager* GlobalNamespace::BaseStateTransition::get_tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::get_tweeningManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweeningManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Tweening::TweeningManager*, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::BaseStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.SetState
void GlobalNamespace::BaseStateTransition::SetState(GlobalNamespace::SelectableStateController::ViewState viewState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewState);
}
// Autogenerated method: BaseStateTransition.OnEnable
void GlobalNamespace::BaseStateTransition::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.OnDisable
void GlobalNamespace::BaseStateTransition::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.HandleSelectableStateControllerStateDidChange
void GlobalNamespace::BaseStateTransition::HandleSelectableStateControllerStateDidChange(GlobalNamespace::SelectableStateController::ViewState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::HandleSelectableStateControllerStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSelectableStateControllerStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: BaseStateTransition.TransitionToNormalState
void GlobalNamespace::BaseStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.TransitionToHighlightedState
void GlobalNamespace::BaseStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.TransitionToPressedState
void GlobalNamespace::BaseStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.TransitionToDisabledState
void GlobalNamespace::BaseStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.TransitionToSelectedState
void GlobalNamespace::BaseStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::BaseStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.SetNormalState
void GlobalNamespace::BaseStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.SetHighlightedState
void GlobalNamespace::BaseStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.SetPressedState
void GlobalNamespace::BaseStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.SetDisabledState
void GlobalNamespace::BaseStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.SetSelectedState
void GlobalNamespace::BaseStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::BaseStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseStateTransition::get_tweeningManager
// Il2CppName: get_tweeningManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Tweening::TweeningManager* (BaseStateTransition::*)()>(&BaseStateTransition::get_tweeningManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "get_tweeningManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (BaseStateTransition::*)()>(&BaseStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)(GlobalNamespace::SelectableStateController::ViewState)>(&BaseStateTransition::SetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SelectableStateController::ViewState>()});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::HandleSelectableStateControllerStateDidChange
// Il2CppName: HandleSelectableStateControllerStateDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)(GlobalNamespace::SelectableStateController::ViewState)>(&BaseStateTransition::HandleSelectableStateControllerStateDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "HandleSelectableStateControllerStateDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SelectableStateController::ViewState>()});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseStateTransition::*)()>(&BaseStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
// Including type: TransitionTimingSO
#include "GlobalNamespace/TransitionTimingSO.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseTransitionSO.get_easeType
Tweening::EaseType GlobalNamespace::BaseTransitionSO::get_easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseTransitionSO::get_easeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Tweening::EaseType, false>(this, ___internal__method);
}
// Autogenerated method: BaseTransitionSO.get_easeDuration
float GlobalNamespace::BaseTransitionSO::get_easeDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseTransitionSO::get_easeDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseTransitionSO::get_easeType
// Il2CppName: get_easeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Tweening::EaseType (BaseTransitionSO::*)()>(&BaseTransitionSO::get_easeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTransitionSO*), "get_easeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseTransitionSO::get_easeDuration
// Il2CppName: get_easeDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BaseTransitionSO::*)()>(&BaseTransitionSO::get_easeDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTransitionSO*), "get_easeDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseTransitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseTransitionSO::*)()>(&BaseTransitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseTransitionSO::*)()>(&BaseTransitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorGraphicStateTransition
#include "GlobalNamespace/ColorGraphicStateTransition.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: ColorTransitionSO
#include "GlobalNamespace/ColorTransitionSO.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorGraphicStateTransition.StartTween
void GlobalNamespace::ColorGraphicStateTransition::StartTween(UnityEngine::Color endColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::StartTween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartTween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endColor);
}
// Autogenerated method: ColorGraphicStateTransition.<StartTween>b__16_0
void GlobalNamespace::ColorGraphicStateTransition::$StartTween$b__16_0(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::<StartTween>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: ColorGraphicStateTransition.<StartTween>b__16_1
void GlobalNamespace::ColorGraphicStateTransition::$StartTween$b__16_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::<StartTween>b__16_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::ColorGraphicStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.TransitionToNormalState
void GlobalNamespace::ColorGraphicStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.TransitionToHighlightedState
void GlobalNamespace::ColorGraphicStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.TransitionToPressedState
void GlobalNamespace::ColorGraphicStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.TransitionToDisabledState
void GlobalNamespace::ColorGraphicStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.TransitionToSelectedState
void GlobalNamespace::ColorGraphicStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::ColorGraphicStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.SetNormalState
void GlobalNamespace::ColorGraphicStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.SetHighlightedState
void GlobalNamespace::ColorGraphicStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.SetPressedState
void GlobalNamespace::ColorGraphicStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.SetDisabledState
void GlobalNamespace::ColorGraphicStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.SetSelectedState
void GlobalNamespace::ColorGraphicStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorGraphicStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::ColorGraphicStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorGraphicStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ColorGraphicStateTransition::StartTween
// Il2CppName: StartTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)(UnityEngine::Color)>(&ColorGraphicStateTransition::StartTween)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "StartTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::$StartTween$b__16_0
// Il2CppName: <StartTween>b__16_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)(UnityEngine::Color)>(&ColorGraphicStateTransition::$StartTween$b__16_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "<StartTween>b__16_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::$StartTween$b__16_1
// Il2CppName: <StartTween>b__16_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::$StartTween$b__16_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "<StartTween>b__16_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorGraphicStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorGraphicStateTransition::*)()>(&ColorGraphicStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorGraphicStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorTMPTextStateTransition
#include "GlobalNamespace/ColorTMPTextStateTransition.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: ColorTransitionSO
#include "GlobalNamespace/ColorTransitionSO.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorTMPTextStateTransition.StartTween
void GlobalNamespace::ColorTMPTextStateTransition::StartTween(UnityEngine::Color endColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::StartTween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartTween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endColor);
}
// Autogenerated method: ColorTMPTextStateTransition.<StartTween>b__16_0
void GlobalNamespace::ColorTMPTextStateTransition::$StartTween$b__16_0(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::<StartTween>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: ColorTMPTextStateTransition.<StartTween>b__16_1
void GlobalNamespace::ColorTMPTextStateTransition::$StartTween$b__16_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::<StartTween>b__16_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::ColorTMPTextStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.TransitionToNormalState
void GlobalNamespace::ColorTMPTextStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.TransitionToHighlightedState
void GlobalNamespace::ColorTMPTextStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.TransitionToPressedState
void GlobalNamespace::ColorTMPTextStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.TransitionToDisabledState
void GlobalNamespace::ColorTMPTextStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.TransitionToSelectedState
void GlobalNamespace::ColorTMPTextStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::ColorTMPTextStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.SetNormalState
void GlobalNamespace::ColorTMPTextStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.SetHighlightedState
void GlobalNamespace::ColorTMPTextStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.SetPressedState
void GlobalNamespace::ColorTMPTextStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.SetDisabledState
void GlobalNamespace::ColorTMPTextStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.SetSelectedState
void GlobalNamespace::ColorTMPTextStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorTMPTextStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::ColorTMPTextStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTMPTextStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ColorTMPTextStateTransition::StartTween
// Il2CppName: StartTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)(UnityEngine::Color)>(&ColorTMPTextStateTransition::StartTween)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "StartTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::$StartTween$b__16_0
// Il2CppName: <StartTween>b__16_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)(UnityEngine::Color)>(&ColorTMPTextStateTransition::$StartTween$b__16_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "<StartTween>b__16_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::$StartTween$b__16_1
// Il2CppName: <StartTween>b__16_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::$StartTween$b__16_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "<StartTween>b__16_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTMPTextStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTMPTextStateTransition::*)()>(&ColorTMPTextStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTMPTextStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorTransitionSO
#include "GlobalNamespace/ColorTransitionSO.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorTransitionSO.get_normalColor
UnityEngine::Color GlobalNamespace::ColorTransitionSO::get_normalColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTransitionSO::get_normalColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorTransitionSO.get_highlightedColor
UnityEngine::Color GlobalNamespace::ColorTransitionSO::get_highlightedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTransitionSO::get_highlightedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlightedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorTransitionSO.get_pressedColor
UnityEngine::Color GlobalNamespace::ColorTransitionSO::get_pressedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTransitionSO::get_pressedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorTransitionSO.get_disabledColor
UnityEngine::Color GlobalNamespace::ColorTransitionSO::get_disabledColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTransitionSO::get_disabledColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorTransitionSO.get_selectedColor
UnityEngine::Color GlobalNamespace::ColorTransitionSO::get_selectedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTransitionSO::get_selectedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorTransitionSO.get_selectedAndHighlightedColor
UnityEngine::Color GlobalNamespace::ColorTransitionSO::get_selectedAndHighlightedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorTransitionSO::get_selectedAndHighlightedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedAndHighlightedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ColorTransitionSO::get_normalColor
// Il2CppName: get_normalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorTransitionSO::*)()>(&ColorTransitionSO::get_normalColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), "get_normalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTransitionSO::get_highlightedColor
// Il2CppName: get_highlightedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorTransitionSO::*)()>(&ColorTransitionSO::get_highlightedColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), "get_highlightedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTransitionSO::get_pressedColor
// Il2CppName: get_pressedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorTransitionSO::*)()>(&ColorTransitionSO::get_pressedColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), "get_pressedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTransitionSO::get_disabledColor
// Il2CppName: get_disabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorTransitionSO::*)()>(&ColorTransitionSO::get_disabledColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), "get_disabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTransitionSO::get_selectedColor
// Il2CppName: get_selectedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorTransitionSO::*)()>(&ColorTransitionSO::get_selectedColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), "get_selectedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTransitionSO::get_selectedAndHighlightedColor
// Il2CppName: get_selectedAndHighlightedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorTransitionSO::*)()>(&ColorTransitionSO::get_selectedAndHighlightedColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), "get_selectedAndHighlightedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorTransitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTransitionSO::*)()>(&ColorTransitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorTransitionSO::*)()>(&ColorTransitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnabledTransitionSO
#include "GlobalNamespace/EnabledTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnabledTransitionSO.get_normalState
bool GlobalNamespace::EnabledTransitionSO::get_normalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledTransitionSO::get_normalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnabledTransitionSO.get_highlightedState
bool GlobalNamespace::EnabledTransitionSO::get_highlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledTransitionSO::get_highlightedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnabledTransitionSO.get_pressedState
bool GlobalNamespace::EnabledTransitionSO::get_pressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledTransitionSO::get_pressedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnabledTransitionSO.get_disabledState
bool GlobalNamespace::EnabledTransitionSO::get_disabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledTransitionSO::get_disabledState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnabledTransitionSO.get_selectedState
bool GlobalNamespace::EnabledTransitionSO::get_selectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledTransitionSO::get_selectedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnabledTransitionSO.get_selectedAndHighlightedState
bool GlobalNamespace::EnabledTransitionSO::get_selectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledTransitionSO::get_selectedAndHighlightedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnabledTransitionSO::get_normalState
// Il2CppName: get_normalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnabledTransitionSO::*)()>(&EnabledTransitionSO::get_normalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), "get_normalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledTransitionSO::get_highlightedState
// Il2CppName: get_highlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnabledTransitionSO::*)()>(&EnabledTransitionSO::get_highlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), "get_highlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledTransitionSO::get_pressedState
// Il2CppName: get_pressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnabledTransitionSO::*)()>(&EnabledTransitionSO::get_pressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), "get_pressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledTransitionSO::get_disabledState
// Il2CppName: get_disabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnabledTransitionSO::*)()>(&EnabledTransitionSO::get_disabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), "get_disabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledTransitionSO::get_selectedState
// Il2CppName: get_selectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnabledTransitionSO::*)()>(&EnabledTransitionSO::get_selectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), "get_selectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledTransitionSO::get_selectedAndHighlightedState
// Il2CppName: get_selectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnabledTransitionSO::*)()>(&EnabledTransitionSO::get_selectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), "get_selectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledTransitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledTransitionSO::*)()>(&EnabledTransitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledTransitionSO::*)()>(&EnabledTransitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnabledViewStateTransition
#include "GlobalNamespace/EnabledViewStateTransition.hpp"
// Including type: EnabledTransitionSO
#include "GlobalNamespace/EnabledTransitionSO.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnabledViewStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::EnabledViewStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.TransitionToNormalState
void GlobalNamespace::EnabledViewStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.TransitionToHighlightedState
void GlobalNamespace::EnabledViewStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.TransitionToPressedState
void GlobalNamespace::EnabledViewStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.TransitionToDisabledState
void GlobalNamespace::EnabledViewStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.TransitionToSelectedState
void GlobalNamespace::EnabledViewStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::EnabledViewStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.SetNormalState
void GlobalNamespace::EnabledViewStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.SetHighlightedState
void GlobalNamespace::EnabledViewStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.SetPressedState
void GlobalNamespace::EnabledViewStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.SetDisabledState
void GlobalNamespace::EnabledViewStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.SetSelectedState
void GlobalNamespace::EnabledViewStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnabledViewStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::EnabledViewStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnabledViewStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnabledViewStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GradientImageViewStateTransition
#include "GlobalNamespace/GradientImageViewStateTransition.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: GradientTransitionSO
#include "GlobalNamespace/GradientTransitionSO.hpp"
// Including type: Tweening.ColorTween
#include "Tweening/ColorTween.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GradientImageViewStateTransition.StartTweens
void GlobalNamespace::GradientImageViewStateTransition::StartTweens(UnityEngine::Color endColor1, UnityEngine::Color endColor2) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::StartTweens");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartTweens", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endColor1), ::il2cpp_utils::ExtractType(endColor2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endColor1, endColor2);
}
// Autogenerated method: GradientImageViewStateTransition.StartTween
void GlobalNamespace::GradientImageViewStateTransition::StartTween(UnityEngine::Color startColor, UnityEngine::Color endColor, System::Action_1<UnityEngine::Color>* tweenAction, System::Action* onCompleteAction, Tweening::ColorTween*& colorTween) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::StartTween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartTween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startColor), ::il2cpp_utils::ExtractType(endColor), ::il2cpp_utils::ExtractType(tweenAction), ::il2cpp_utils::ExtractType(onCompleteAction), ::il2cpp_utils::ExtractType(colorTween)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startColor, endColor, tweenAction, onCompleteAction, colorTween);
}
// Autogenerated method: GradientImageViewStateTransition.SetColors
void GlobalNamespace::GradientImageViewStateTransition::SetColors(UnityEngine::Color startColor, UnityEngine::Color endColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startColor), ::il2cpp_utils::ExtractType(endColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startColor, endColor);
}
// Autogenerated method: GradientImageViewStateTransition.<StartTweens>g__Color1CompleteAction|17_0
void GlobalNamespace::GradientImageViewStateTransition::$StartTweens$g__Color1CompleteAction_17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::<StartTweens>g__Color1CompleteAction|17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTweens>g__Color1CompleteAction|17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.<StartTweens>g__Color2CompleteAction|17_1
void GlobalNamespace::GradientImageViewStateTransition::$StartTweens$g__Color2CompleteAction_17_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::<StartTweens>g__Color2CompleteAction|17_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTweens>g__Color2CompleteAction|17_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.<StartTweens>b__17_2
void GlobalNamespace::GradientImageViewStateTransition::$StartTweens$b__17_2(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::<StartTweens>b__17_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTweens>b__17_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: GradientImageViewStateTransition.<StartTweens>b__17_3
void GlobalNamespace::GradientImageViewStateTransition::$StartTweens$b__17_3(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::<StartTweens>b__17_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTweens>b__17_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: GradientImageViewStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::GradientImageViewStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.TransitionToNormalState
void GlobalNamespace::GradientImageViewStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.TransitionToHighlightedState
void GlobalNamespace::GradientImageViewStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.TransitionToPressedState
void GlobalNamespace::GradientImageViewStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.TransitionToDisabledState
void GlobalNamespace::GradientImageViewStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.TransitionToSelectedState
void GlobalNamespace::GradientImageViewStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::GradientImageViewStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.SetNormalState
void GlobalNamespace::GradientImageViewStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.SetHighlightedState
void GlobalNamespace::GradientImageViewStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.SetPressedState
void GlobalNamespace::GradientImageViewStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.SetDisabledState
void GlobalNamespace::GradientImageViewStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.SetSelectedState
void GlobalNamespace::GradientImageViewStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GradientImageViewStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::GradientImageViewStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GradientImageViewStateTransition::StartTweens
// Il2CppName: StartTweens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)(UnityEngine::Color, UnityEngine::Color)>(&GradientImageViewStateTransition::StartTweens)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "StartTweens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::StartTween
// Il2CppName: StartTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)(UnityEngine::Color, UnityEngine::Color, System::Action_1<UnityEngine::Color>*, System::Action*, Tweening::ColorTween*&)>(&GradientImageViewStateTransition::StartTween)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "StartTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<Tweening::ColorTween*&>()});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)(UnityEngine::Color, UnityEngine::Color)>(&GradientImageViewStateTransition::SetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::$StartTweens$g__Color1CompleteAction_17_0
// Il2CppName: <StartTweens>g__Color1CompleteAction|17_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::$StartTweens$g__Color1CompleteAction_17_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "<StartTweens>g__Color1CompleteAction|17_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::$StartTweens$g__Color2CompleteAction_17_1
// Il2CppName: <StartTweens>g__Color2CompleteAction|17_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::$StartTweens$g__Color2CompleteAction_17_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "<StartTweens>g__Color2CompleteAction|17_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::$StartTweens$b__17_2
// Il2CppName: <StartTweens>b__17_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)(UnityEngine::Color)>(&GradientImageViewStateTransition::$StartTweens$b__17_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "<StartTweens>b__17_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::$StartTweens$b__17_3
// Il2CppName: <StartTweens>b__17_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)(UnityEngine::Color)>(&GradientImageViewStateTransition::$StartTweens$b__17_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "<StartTweens>b__17_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientImageViewStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientImageViewStateTransition::*)()>(&GradientImageViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientImageViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GradientTransitionSO
#include "GlobalNamespace/GradientTransitionSO.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GradientTransitionSO.get_normalColor1
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_normalColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_normalColor1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalColor1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_normalColor2
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_normalColor2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_normalColor2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalColor2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_highlightColor1
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_highlightColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_highlightColor1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlightColor1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_highlightColor2
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_highlightColor2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_highlightColor2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlightColor2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_pressedColor1
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_pressedColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_pressedColor1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedColor1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_pressedColor2
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_pressedColor2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_pressedColor2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedColor2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_disabledColor1
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_disabledColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_disabledColor1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledColor1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_disabledColor2
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_disabledColor2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_disabledColor2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledColor2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_selectedColor1
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_selectedColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_selectedColor1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedColor1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_selectedColor2
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_selectedColor2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_selectedColor2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedColor2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_selectedAndHighlightedColor1
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_selectedAndHighlightedColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_selectedAndHighlightedColor1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedAndHighlightedColor1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: GradientTransitionSO.get_selectedAndHighlightedColor2
UnityEngine::Color GlobalNamespace::GradientTransitionSO::get_selectedAndHighlightedColor2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::get_selectedAndHighlightedColor2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedAndHighlightedColor2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GradientTransitionSO::get_normalColor1
// Il2CppName: get_normalColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_normalColor1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_normalColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_normalColor2
// Il2CppName: get_normalColor2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_normalColor2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_normalColor2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_highlightColor1
// Il2CppName: get_highlightColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_highlightColor1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_highlightColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_highlightColor2
// Il2CppName: get_highlightColor2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_highlightColor2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_highlightColor2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_pressedColor1
// Il2CppName: get_pressedColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_pressedColor1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_pressedColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_pressedColor2
// Il2CppName: get_pressedColor2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_pressedColor2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_pressedColor2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_disabledColor1
// Il2CppName: get_disabledColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_disabledColor1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_disabledColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_disabledColor2
// Il2CppName: get_disabledColor2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_disabledColor2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_disabledColor2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_selectedColor1
// Il2CppName: get_selectedColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_selectedColor1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_selectedColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_selectedColor2
// Il2CppName: get_selectedColor2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_selectedColor2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_selectedColor2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_selectedAndHighlightedColor1
// Il2CppName: get_selectedAndHighlightedColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_selectedAndHighlightedColor1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_selectedAndHighlightedColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::get_selectedAndHighlightedColor2
// Il2CppName: get_selectedAndHighlightedColor2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GradientTransitionSO::*)()>(&GradientTransitionSO::get_selectedAndHighlightedColor2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), "get_selectedAndHighlightedColor2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GradientTransitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientTransitionSO::*)()>(&GradientTransitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GradientTransitionSO::*)()>(&GradientTransitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GradientTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoTransitionButtonSelectableStateController
#include "GlobalNamespace/NoTransitionButtonSelectableStateController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoTransitionButtonSelectableStateController.OnEnable
void GlobalNamespace::NoTransitionButtonSelectableStateController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoTransitionButtonSelectableStateController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoTransitionButtonSelectableStateController.OnDisable
void GlobalNamespace::NoTransitionButtonSelectableStateController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoTransitionButtonSelectableStateController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoTransitionButtonSelectableStateController.HandleNoTransitionButtonSelectionStateDidChange
void GlobalNamespace::NoTransitionButtonSelectableStateController::HandleNoTransitionButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoTransitionButtonSelectableStateController::HandleNoTransitionButtonSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoTransitionButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: NoTransitionButtonSelectableStateController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionButtonSelectableStateController::*)()>(&NoTransitionButtonSelectableStateController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionButtonSelectableStateController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoTransitionButtonSelectableStateController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionButtonSelectableStateController::*)()>(&NoTransitionButtonSelectableStateController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionButtonSelectableStateController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoTransitionButtonSelectableStateController::HandleNoTransitionButtonSelectionStateDidChange
// Il2CppName: HandleNoTransitionButtonSelectionStateDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionButtonSelectableStateController::*)(HMUI::NoTransitionsButton::SelectionState)>(&NoTransitionButtonSelectableStateController::HandleNoTransitionButtonSelectionStateDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionButtonSelectableStateController*), "HandleNoTransitionButtonSelectionStateDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::NoTransitionsButton::SelectionState>()});
  }
};
// Writing MetadataGetter for method: NoTransitionButtonSelectableStateController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionButtonSelectableStateController::*)()>(&NoTransitionButtonSelectableStateController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionButtonSelectableStateController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoTransitionButtonSelectableStateController::*)()>(&NoTransitionButtonSelectableStateController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoTransitionButtonSelectableStateController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PositionRectTransformViewStateTransition
#include "GlobalNamespace/PositionRectTransformViewStateTransition.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: Vector3TransitionSO
#include "GlobalNamespace/Vector3TransitionSO.hpp"
// Including type: Tweening.Vector3Tween
#include "Tweening/Vector3Tween.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PositionRectTransformViewStateTransition.StartTween
void GlobalNamespace::PositionRectTransformViewStateTransition::StartTween(UnityEngine::Vector3 endPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::StartTween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartTween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPosition);
}
// Autogenerated method: PositionRectTransformViewStateTransition.<StartTween>b__16_0
void GlobalNamespace::PositionRectTransformViewStateTransition::$StartTween$b__16_0(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::<StartTween>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: PositionRectTransformViewStateTransition.<StartTween>b__16_1
void GlobalNamespace::PositionRectTransformViewStateTransition::$StartTween$b__16_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::<StartTween>b__16_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::PositionRectTransformViewStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.TransitionToNormalState
void GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.TransitionToHighlightedState
void GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.TransitionToPressedState
void GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.TransitionToDisabledState
void GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.TransitionToSelectedState
void GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.SetNormalState
void GlobalNamespace::PositionRectTransformViewStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.SetHighlightedState
void GlobalNamespace::PositionRectTransformViewStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.SetPressedState
void GlobalNamespace::PositionRectTransformViewStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.SetDisabledState
void GlobalNamespace::PositionRectTransformViewStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.SetSelectedState
void GlobalNamespace::PositionRectTransformViewStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PositionRectTransformViewStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::PositionRectTransformViewStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PositionRectTransformViewStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::StartTween
// Il2CppName: StartTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)(UnityEngine::Vector3)>(&PositionRectTransformViewStateTransition::StartTween)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "StartTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::$StartTween$b__16_0
// Il2CppName: <StartTween>b__16_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)(UnityEngine::Vector3)>(&PositionRectTransformViewStateTransition::$StartTween$b__16_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "<StartTween>b__16_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::$StartTween$b__16_1
// Il2CppName: <StartTween>b__16_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::$StartTween$b__16_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "<StartTween>b__16_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PositionRectTransformViewStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PositionRectTransformViewStateTransition::*)()>(&PositionRectTransformViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PositionRectTransformViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScaleRectTransformViewStateTransition
#include "GlobalNamespace/ScaleRectTransformViewStateTransition.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: Vector3TransitionSO
#include "GlobalNamespace/Vector3TransitionSO.hpp"
// Including type: Tweening.Vector3Tween
#include "Tweening/Vector3Tween.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScaleRectTransformViewStateTransition.StartTween
void GlobalNamespace::ScaleRectTransformViewStateTransition::StartTween(UnityEngine::Vector3 endScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::StartTween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartTween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endScale);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.<StartTween>b__16_0
void GlobalNamespace::ScaleRectTransformViewStateTransition::$StartTween$b__16_0(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::<StartTween>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.<StartTween>b__16_1
void GlobalNamespace::ScaleRectTransformViewStateTransition::$StartTween$b__16_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::<StartTween>b__16_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartTween>b__16_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::ScaleRectTransformViewStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.TransitionToNormalState
void GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.TransitionToHighlightedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.TransitionToPressedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.TransitionToDisabledState
void GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.TransitionToSelectedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.SetNormalState
void GlobalNamespace::ScaleRectTransformViewStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.SetHighlightedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.SetPressedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.SetDisabledState
void GlobalNamespace::ScaleRectTransformViewStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.SetSelectedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScaleRectTransformViewStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::ScaleRectTransformViewStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScaleRectTransformViewStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::StartTween
// Il2CppName: StartTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)(UnityEngine::Vector3)>(&ScaleRectTransformViewStateTransition::StartTween)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "StartTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::$StartTween$b__16_0
// Il2CppName: <StartTween>b__16_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)(UnityEngine::Vector3)>(&ScaleRectTransformViewStateTransition::$StartTween$b__16_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "<StartTween>b__16_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::$StartTween$b__16_1
// Il2CppName: <StartTween>b__16_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::$StartTween$b__16_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "<StartTween>b__16_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScaleRectTransformViewStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScaleRectTransformViewStateTransition::*)()>(&ScaleRectTransformViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScaleRectTransformViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SelectableStateController
#include "GlobalNamespace/SelectableStateController.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SelectableStateController.add_stateDidChangeEvent
void GlobalNamespace::SelectableStateController::add_stateDidChangeEvent(System::Action_1<GlobalNamespace::SelectableStateController::ViewState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::add_stateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_stateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SelectableStateController.remove_stateDidChangeEvent
void GlobalNamespace::SelectableStateController::remove_stateDidChangeEvent(System::Action_1<GlobalNamespace::SelectableStateController::ViewState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::remove_stateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_stateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SelectableStateController.get_tweeningManager
Tweening::TweeningManager* GlobalNamespace::SelectableStateController::get_tweeningManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::get_tweeningManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tweeningManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Tweening::TweeningManager*, false>(this, ___internal__method);
}
// Autogenerated method: SelectableStateController.get_currentViewState
GlobalNamespace::SelectableStateController::ViewState GlobalNamespace::SelectableStateController::get_currentViewState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::get_currentViewState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentViewState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SelectableStateController::ViewState, false>(this, ___internal__method);
}
// Autogenerated method: SelectableStateController.set_currentViewState
void GlobalNamespace::SelectableStateController::set_currentViewState(GlobalNamespace::SelectableStateController::ViewState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::set_currentViewState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentViewState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SelectableStateController.SetState
void GlobalNamespace::SelectableStateController::SetState(GlobalNamespace::SelectableStateController::ViewState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::SetState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: SelectableStateController::add_stateDidChangeEvent
// Il2CppName: add_stateDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectableStateController::*)(System::Action_1<GlobalNamespace::SelectableStateController::ViewState>*)>(&SelectableStateController::add_stateDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), "add_stateDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::SelectableStateController::ViewState>*>()});
  }
};
// Writing MetadataGetter for method: SelectableStateController::remove_stateDidChangeEvent
// Il2CppName: remove_stateDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectableStateController::*)(System::Action_1<GlobalNamespace::SelectableStateController::ViewState>*)>(&SelectableStateController::remove_stateDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), "remove_stateDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::SelectableStateController::ViewState>*>()});
  }
};
// Writing MetadataGetter for method: SelectableStateController::get_tweeningManager
// Il2CppName: get_tweeningManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Tweening::TweeningManager* (SelectableStateController::*)()>(&SelectableStateController::get_tweeningManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), "get_tweeningManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SelectableStateController::get_currentViewState
// Il2CppName: get_currentViewState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SelectableStateController::ViewState (SelectableStateController::*)()>(&SelectableStateController::get_currentViewState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), "get_currentViewState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SelectableStateController::set_currentViewState
// Il2CppName: set_currentViewState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectableStateController::*)(GlobalNamespace::SelectableStateController::ViewState)>(&SelectableStateController::set_currentViewState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), "set_currentViewState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SelectableStateController::ViewState>()});
  }
};
// Writing MetadataGetter for method: SelectableStateController::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectableStateController::*)(GlobalNamespace::SelectableStateController::ViewState)>(&SelectableStateController::SetState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SelectableStateController::ViewState>()});
  }
};
// Writing MetadataGetter for method: SelectableStateController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectableStateController::*)()>(&SelectableStateController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectableStateController::*)()>(&SelectableStateController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectableStateController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SelectableStateController/ViewState
#include "GlobalNamespace/SelectableStateController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SelectableStateController/ViewState Normal
GlobalNamespace::SelectableStateController::ViewState GlobalNamespace::SelectableStateController::ViewState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SelectableStateController::ViewState>("", "SelectableStateController/ViewState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public SelectableStateController/ViewState Normal
void GlobalNamespace::SelectableStateController::ViewState::_set_Normal(GlobalNamespace::SelectableStateController::ViewState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SelectableStateController/ViewState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public SelectableStateController/ViewState Highlighted
GlobalNamespace::SelectableStateController::ViewState GlobalNamespace::SelectableStateController::ViewState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SelectableStateController::ViewState>("", "SelectableStateController/ViewState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public SelectableStateController/ViewState Highlighted
void GlobalNamespace::SelectableStateController::ViewState::_set_Highlighted(GlobalNamespace::SelectableStateController::ViewState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SelectableStateController/ViewState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public SelectableStateController/ViewState Pressed
GlobalNamespace::SelectableStateController::ViewState GlobalNamespace::SelectableStateController::ViewState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SelectableStateController::ViewState>("", "SelectableStateController/ViewState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public SelectableStateController/ViewState Pressed
void GlobalNamespace::SelectableStateController::ViewState::_set_Pressed(GlobalNamespace::SelectableStateController::ViewState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SelectableStateController/ViewState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public SelectableStateController/ViewState Disabled
GlobalNamespace::SelectableStateController::ViewState GlobalNamespace::SelectableStateController::ViewState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SelectableStateController::ViewState>("", "SelectableStateController/ViewState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public SelectableStateController/ViewState Disabled
void GlobalNamespace::SelectableStateController::ViewState::_set_Disabled(GlobalNamespace::SelectableStateController::ViewState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SelectableStateController/ViewState", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public SelectableStateController/ViewState Selected
GlobalNamespace::SelectableStateController::ViewState GlobalNamespace::SelectableStateController::ViewState::_get_Selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_get_Selected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SelectableStateController::ViewState>("", "SelectableStateController/ViewState", "Selected"));
}
// Autogenerated static field setter
// Set static field: static public SelectableStateController/ViewState Selected
void GlobalNamespace::SelectableStateController::ViewState::_set_Selected(GlobalNamespace::SelectableStateController::ViewState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_set_Selected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SelectableStateController/ViewState", "Selected", value));
}
// Autogenerated static field getter
// Get static field: static public SelectableStateController/ViewState SelectedAndHighlighted
GlobalNamespace::SelectableStateController::ViewState GlobalNamespace::SelectableStateController::ViewState::_get_SelectedAndHighlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_get_SelectedAndHighlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SelectableStateController::ViewState>("", "SelectableStateController/ViewState", "SelectedAndHighlighted"));
}
// Autogenerated static field setter
// Set static field: static public SelectableStateController/ViewState SelectedAndHighlighted
void GlobalNamespace::SelectableStateController::ViewState::_set_SelectedAndHighlighted(GlobalNamespace::SelectableStateController::ViewState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectableStateController::ViewState::_set_SelectedAndHighlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SelectableStateController/ViewState", "SelectedAndHighlighted", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpriteSwapGraphicViewStateTransition
#include "GlobalNamespace/SpriteSwapGraphicViewStateTransition.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: SpriteSwapTransitionSO
#include "GlobalNamespace/SpriteSwapTransitionSO.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpriteSwapGraphicViewStateTransition.get_transition
GlobalNamespace::BaseTransitionSO* GlobalNamespace::SpriteSwapGraphicViewStateTransition::get_transition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::get_transition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseTransitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.TransitionToNormalState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.TransitionToHighlightedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.TransitionToPressedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.TransitionToDisabledState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.TransitionToSelectedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.TransitionToSelectedAndHighlightedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::TransitionToSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.SetNormalState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetNormalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetNormalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.SetHighlightedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.SetPressedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetPressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetPressedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.SetDisabledState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetDisabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetDisabledState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.SetSelectedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetSelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetSelectedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapGraphicViewStateTransition.SetSelectedAndHighlightedState
void GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetSelectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapGraphicViewStateTransition::SetSelectedAndHighlightedState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::get_transition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::TransitionToNormalState
// Il2CppName: TransitionToNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::TransitionToNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::TransitionToHighlightedState
// Il2CppName: TransitionToHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::TransitionToHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::TransitionToPressedState
// Il2CppName: TransitionToPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::TransitionToPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::TransitionToDisabledState
// Il2CppName: TransitionToDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::TransitionToDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::TransitionToSelectedState
// Il2CppName: TransitionToSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::TransitionToSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::TransitionToSelectedAndHighlightedState
// Il2CppName: TransitionToSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::TransitionToSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::SetNormalState
// Il2CppName: SetNormalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::SetNormalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::SetHighlightedState
// Il2CppName: SetHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::SetHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::SetPressedState
// Il2CppName: SetPressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::SetPressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::SetDisabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::SetSelectedState
// Il2CppName: SetSelectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::SetSelectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::SetSelectedAndHighlightedState
// Il2CppName: SetSelectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::SetSelectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapGraphicViewStateTransition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapGraphicViewStateTransition::*)()>(&SpriteSwapGraphicViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapGraphicViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpriteSwapTransitionSO
#include "GlobalNamespace/SpriteSwapTransitionSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpriteSwapTransitionSO.get_normalSprite
UnityEngine::Sprite* GlobalNamespace::SpriteSwapTransitionSO::get_normalSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapTransitionSO::get_normalSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapTransitionSO.get_highlightedSprite
UnityEngine::Sprite* GlobalNamespace::SpriteSwapTransitionSO::get_highlightedSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapTransitionSO::get_highlightedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlightedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapTransitionSO.get_pressedSprite
UnityEngine::Sprite* GlobalNamespace::SpriteSwapTransitionSO::get_pressedSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapTransitionSO::get_pressedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapTransitionSO.get_disabledSprite
UnityEngine::Sprite* GlobalNamespace::SpriteSwapTransitionSO::get_disabledSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapTransitionSO::get_disabledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapTransitionSO.get_selectedSprite
UnityEngine::Sprite* GlobalNamespace::SpriteSwapTransitionSO::get_selectedSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapTransitionSO::get_selectedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: SpriteSwapTransitionSO.get_selectedAndHighlightedSprite
UnityEngine::Sprite* GlobalNamespace::SpriteSwapTransitionSO::get_selectedAndHighlightedSprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpriteSwapTransitionSO::get_selectedAndHighlightedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedAndHighlightedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SpriteSwapTransitionSO::get_normalSprite
// Il2CppName: get_normalSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::get_normalSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), "get_normalSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapTransitionSO::get_highlightedSprite
// Il2CppName: get_highlightedSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::get_highlightedSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), "get_highlightedSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapTransitionSO::get_pressedSprite
// Il2CppName: get_pressedSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::get_pressedSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), "get_pressedSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapTransitionSO::get_disabledSprite
// Il2CppName: get_disabledSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::get_disabledSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), "get_disabledSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapTransitionSO::get_selectedSprite
// Il2CppName: get_selectedSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::get_selectedSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), "get_selectedSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapTransitionSO::get_selectedAndHighlightedSprite
// Il2CppName: get_selectedAndHighlightedSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::get_selectedAndHighlightedSprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), "get_selectedAndHighlightedSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpriteSwapTransitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpriteSwapTransitionSO::*)()>(&SpriteSwapTransitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpriteSwapTransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TransitionTimingSO
#include "GlobalNamespace/TransitionTimingSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TransitionTimingSO.get_easeType
Tweening::EaseType GlobalNamespace::TransitionTimingSO::get_easeType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TransitionTimingSO::get_easeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Tweening::EaseType, false>(this, ___internal__method);
}
// Autogenerated method: TransitionTimingSO.get_easeDuration
float GlobalNamespace::TransitionTimingSO::get_easeDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TransitionTimingSO::get_easeDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_easeDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TransitionTimingSO::get_easeType
// Il2CppName: get_easeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Tweening::EaseType (TransitionTimingSO::*)()>(&TransitionTimingSO::get_easeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransitionTimingSO*), "get_easeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TransitionTimingSO::get_easeDuration
// Il2CppName: get_easeDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TransitionTimingSO::*)()>(&TransitionTimingSO::get_easeDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransitionTimingSO*), "get_easeDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TransitionTimingSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransitionTimingSO::*)()>(&TransitionTimingSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransitionTimingSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransitionTimingSO::*)()>(&TransitionTimingSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransitionTimingSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector3TransitionSO
#include "GlobalNamespace/Vector3TransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Vector3TransitionSO.get_normalState
UnityEngine::Vector3 GlobalNamespace::Vector3TransitionSO::get_normalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3TransitionSO::get_normalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Vector3TransitionSO.get_highlightedState
UnityEngine::Vector3 GlobalNamespace::Vector3TransitionSO::get_highlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3TransitionSO::get_highlightedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Vector3TransitionSO.get_pressedState
UnityEngine::Vector3 GlobalNamespace::Vector3TransitionSO::get_pressedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3TransitionSO::get_pressedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pressedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Vector3TransitionSO.get_disabledState
UnityEngine::Vector3 GlobalNamespace::Vector3TransitionSO::get_disabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3TransitionSO::get_disabledState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Vector3TransitionSO.get_selectedState
UnityEngine::Vector3 GlobalNamespace::Vector3TransitionSO::get_selectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3TransitionSO::get_selectedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: Vector3TransitionSO.get_selectedAndHighlightedState
UnityEngine::Vector3 GlobalNamespace::Vector3TransitionSO::get_selectedAndHighlightedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3TransitionSO::get_selectedAndHighlightedState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedAndHighlightedState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Vector3TransitionSO::get_normalState
// Il2CppName: get_normalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_normalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_normalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_highlightedState
// Il2CppName: get_highlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_highlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_highlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_pressedState
// Il2CppName: get_pressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_pressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_pressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_disabledState
// Il2CppName: get_disabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_disabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_disabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_selectedState
// Il2CppName: get_selectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_selectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_selectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_selectedAndHighlightedState
// Il2CppName: get_selectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_selectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_selectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3TransitionSO::*)()>(&Vector3TransitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3TransitionSO::*)()>(&Vector3TransitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UIKeyboard
#include "GlobalNamespace/UIKeyboard.hpp"
// Including type: UIKeyboard/<>c__DisplayClass21_0
#include "GlobalNamespace/UIKeyboard_--c__DisplayClass21_0.hpp"
// Including type: TextMeshProButton
#include "GlobalNamespace/TextMeshProButton.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UIKeyboard.add_textKeyWasPressedEvent
void GlobalNamespace::UIKeyboard::add_textKeyWasPressedEvent(System::Action_1<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::add_textKeyWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_textKeyWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.remove_textKeyWasPressedEvent
void GlobalNamespace::UIKeyboard::remove_textKeyWasPressedEvent(System::Action_1<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::remove_textKeyWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_textKeyWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.add_deleteButtonWasPressedEvent
void GlobalNamespace::UIKeyboard::add_deleteButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::add_deleteButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.remove_deleteButtonWasPressedEvent
void GlobalNamespace::UIKeyboard::remove_deleteButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::remove_deleteButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.add_okButtonWasPressedEvent
void GlobalNamespace::UIKeyboard::add_okButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::add_okButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_okButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.remove_okButtonWasPressedEvent
void GlobalNamespace::UIKeyboard::remove_okButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::remove_okButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_okButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.add_cancelButtonWasPressedEvent
void GlobalNamespace::UIKeyboard::add_cancelButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::add_cancelButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.remove_cancelButtonWasPressedEvent
void GlobalNamespace::UIKeyboard::remove_cancelButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::remove_cancelButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.set_enableOkButtonInteractivity
void GlobalNamespace::UIKeyboard::set_enableOkButtonInteractivity(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::set_enableOkButtonInteractivity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableOkButtonInteractivity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.set_hideCancelButton
void GlobalNamespace::UIKeyboard::set_hideCancelButton(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::set_hideCancelButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideCancelButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UIKeyboard.Awake
void GlobalNamespace::UIKeyboard::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboard.<Awake>b__21_0
void GlobalNamespace::UIKeyboard::$Awake$b__21_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::<Awake>b__21_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__21_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboard.<Awake>b__21_1
void GlobalNamespace::UIKeyboard::$Awake$b__21_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::<Awake>b__21_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__21_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboard.<Awake>b__21_2
void GlobalNamespace::UIKeyboard::$Awake$b__21_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::<Awake>b__21_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__21_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboard.<Awake>b__21_3
void GlobalNamespace::UIKeyboard::$Awake$b__21_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::<Awake>b__21_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__21_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UIKeyboard::add_textKeyWasPressedEvent
// Il2CppName: add_textKeyWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action_1<::Il2CppChar>*)>(&UIKeyboard::add_textKeyWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "add_textKeyWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::remove_textKeyWasPressedEvent
// Il2CppName: remove_textKeyWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action_1<::Il2CppChar>*)>(&UIKeyboard::remove_textKeyWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "remove_textKeyWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::add_deleteButtonWasPressedEvent
// Il2CppName: add_deleteButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action*)>(&UIKeyboard::add_deleteButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "add_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::remove_deleteButtonWasPressedEvent
// Il2CppName: remove_deleteButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action*)>(&UIKeyboard::remove_deleteButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "remove_deleteButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::add_okButtonWasPressedEvent
// Il2CppName: add_okButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action*)>(&UIKeyboard::add_okButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "add_okButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::remove_okButtonWasPressedEvent
// Il2CppName: remove_okButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action*)>(&UIKeyboard::remove_okButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "remove_okButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::add_cancelButtonWasPressedEvent
// Il2CppName: add_cancelButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action*)>(&UIKeyboard::add_cancelButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "add_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::remove_cancelButtonWasPressedEvent
// Il2CppName: remove_cancelButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(System::Action*)>(&UIKeyboard::remove_cancelButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "remove_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::set_enableOkButtonInteractivity
// Il2CppName: set_enableOkButtonInteractivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(bool)>(&UIKeyboard::set_enableOkButtonInteractivity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "set_enableOkButtonInteractivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::set_hideCancelButton
// Il2CppName: set_hideCancelButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)(bool)>(&UIKeyboard::set_hideCancelButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "set_hideCancelButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UIKeyboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)()>(&UIKeyboard::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboard::$Awake$b__21_0
// Il2CppName: <Awake>b__21_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)()>(&UIKeyboard::$Awake$b__21_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "<Awake>b__21_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboard::$Awake$b__21_1
// Il2CppName: <Awake>b__21_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)()>(&UIKeyboard::$Awake$b__21_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "<Awake>b__21_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboard::$Awake$b__21_2
// Il2CppName: <Awake>b__21_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)()>(&UIKeyboard::$Awake$b__21_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "<Awake>b__21_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboard::$Awake$b__21_3
// Il2CppName: <Awake>b__21_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)()>(&UIKeyboard::$Awake$b__21_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), "<Awake>b__21_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboard::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)()>(&UIKeyboard::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::*)()>(&UIKeyboard::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UIKeyboard/<>c__DisplayClass21_0
#include "GlobalNamespace/UIKeyboard_--c__DisplayClass21_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UIKeyboard/<>c__DisplayClass21_0.<Awake>b__4
void GlobalNamespace::UIKeyboard::$$c__DisplayClass21_0::$Awake$b__4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboard::$$c__DisplayClass21_0::<Awake>b__4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UIKeyboard::$$c__DisplayClass21_0::$Awake$b__4
// Il2CppName: <Awake>b__4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::$$c__DisplayClass21_0::*)()>(&UIKeyboard::$$c__DisplayClass21_0::$Awake$b__4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard::$$c__DisplayClass21_0*), "<Awake>b__4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboard::$$c__DisplayClass21_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::$$c__DisplayClass21_0::*)()>(&UIKeyboard::$$c__DisplayClass21_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard::$$c__DisplayClass21_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboard::$$c__DisplayClass21_0::*)()>(&UIKeyboard::$$c__DisplayClass21_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboard::$$c__DisplayClass21_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UIKeyboardManager
#include "GlobalNamespace/UIKeyboardManager.hpp"
// Including type: HMUI.UIKeyboard
#include "HMUI/UIKeyboard.hpp"
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: VRUIControls.VRInputModule
#include "VRUIControls/VRInputModule.hpp"
// Including type: HMUI.InputFieldView
#include "HMUI/InputFieldView.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kKeyboardTopOffset
float GlobalNamespace::UIKeyboardManager::_get_kKeyboardTopOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::_get_kKeyboardTopOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "UIKeyboardManager", "kKeyboardTopOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kKeyboardTopOffset
void GlobalNamespace::UIKeyboardManager::_set_kKeyboardTopOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::_set_kKeyboardTopOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UIKeyboardManager", "kKeyboardTopOffset", value));
}
// Autogenerated method: UIKeyboardManager.get_keyboard
HMUI::UIKeyboard* GlobalNamespace::UIKeyboardManager::get_keyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::get_keyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::UIKeyboard*, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboardManager.Start
void GlobalNamespace::UIKeyboardManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboardManager.OnEnable
void GlobalNamespace::UIKeyboardManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboardManager.OnDisable
void GlobalNamespace::UIKeyboardManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboardManager.OnDestroy
void GlobalNamespace::UIKeyboardManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboardManager.OpenKeyboardFor
void GlobalNamespace::UIKeyboardManager::OpenKeyboardFor(HMUI::InputFieldView* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::OpenKeyboardFor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenKeyboardFor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: UIKeyboardManager.CloseKeyboard
void GlobalNamespace::UIKeyboardManager::CloseKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::CloseKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CloseKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UIKeyboardManager.TransferKeyboardTo
void GlobalNamespace::UIKeyboardManager::TransferKeyboardTo(HMUI::InputFieldView* nextInput) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::TransferKeyboardTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransferKeyboardTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nextInput)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nextInput);
}
// Autogenerated method: UIKeyboardManager.ShouldCloseKeyboard
bool GlobalNamespace::UIKeyboardManager::ShouldCloseKeyboard(UnityEngine::GameObject* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::ShouldCloseKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldCloseKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, root);
}
// Autogenerated method: UIKeyboardManager.ProcessMousePress
void GlobalNamespace::UIKeyboardManager::ProcessMousePress(UnityEngine::GameObject* currentOverGo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::ProcessMousePress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMousePress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentOverGo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentOverGo);
}
// Autogenerated method: UIKeyboardManager.HandleKeyboardOkButton
void GlobalNamespace::UIKeyboardManager::HandleKeyboardOkButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UIKeyboardManager::HandleKeyboardOkButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleKeyboardOkButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UIKeyboardManager::get_keyboard
// Il2CppName: get_keyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::UIKeyboard* (UIKeyboardManager::*)()>(&UIKeyboardManager::get_keyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "get_keyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::OpenKeyboardFor
// Il2CppName: OpenKeyboardFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)(HMUI::InputFieldView*)>(&UIKeyboardManager::OpenKeyboardFor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "OpenKeyboardFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::InputFieldView*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::CloseKeyboard
// Il2CppName: CloseKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::CloseKeyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "CloseKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::TransferKeyboardTo
// Il2CppName: TransferKeyboardTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)(HMUI::InputFieldView*)>(&UIKeyboardManager::TransferKeyboardTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "TransferKeyboardTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::InputFieldView*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::ShouldCloseKeyboard
// Il2CppName: ShouldCloseKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UIKeyboardManager::*)(UnityEngine::GameObject*)>(&UIKeyboardManager::ShouldCloseKeyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "ShouldCloseKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::ProcessMousePress
// Il2CppName: ProcessMousePress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)(UnityEngine::GameObject*)>(&UIKeyboardManager::ProcessMousePress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "ProcessMousePress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::HandleKeyboardOkButton
// Il2CppName: HandleKeyboardOkButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::HandleKeyboardOkButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), "HandleKeyboardOkButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UIKeyboardManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UIKeyboardManager::*)()>(&UIKeyboardManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UIKeyboardManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRTextEntryController
#include "GlobalNamespace/VRTextEntryController.hpp"
// Including type: VRTextEntryController/<BlinkCursor>d__23
#include "GlobalNamespace/VRTextEntryController_-BlinkCursor-d__23.hpp"
// Including type: UIKeyboard
#include "GlobalNamespace/UIKeyboard.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRTextEntryController.add_textDidChangeEvent
void GlobalNamespace::VRTextEntryController::add_textDidChangeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::add_textDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_textDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.remove_textDidChangeEvent
void GlobalNamespace::VRTextEntryController::remove_textDidChangeEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::remove_textDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_textDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.add_okButtonWasPressedEvent
void GlobalNamespace::VRTextEntryController::add_okButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::add_okButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_okButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.remove_okButtonWasPressedEvent
void GlobalNamespace::VRTextEntryController::remove_okButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::remove_okButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_okButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.add_cancelButtonWasPressedEvent
void GlobalNamespace::VRTextEntryController::add_cancelButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::add_cancelButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.remove_cancelButtonWasPressedEvent
void GlobalNamespace::VRTextEntryController::remove_cancelButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::remove_cancelButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.set_hideCancelButton
void GlobalNamespace::VRTextEntryController::set_hideCancelButton(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::set_hideCancelButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideCancelButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.get_text
::Il2CppString* GlobalNamespace::VRTextEntryController::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController.set_text
void GlobalNamespace::VRTextEntryController::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRTextEntryController.Awake
void GlobalNamespace::VRTextEntryController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController.OnEnable
void GlobalNamespace::VRTextEntryController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController.OnDisable
void GlobalNamespace::VRTextEntryController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController.BlinkCursor
System::Collections::IEnumerator* GlobalNamespace::VRTextEntryController::BlinkCursor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::BlinkCursor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BlinkCursor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController.HandleUIKeyboardTextKeyWasPressed
void GlobalNamespace::VRTextEntryController::HandleUIKeyboardTextKeyWasPressed(::Il2CppChar key) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::HandleUIKeyboardTextKeyWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUIKeyboardTextKeyWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key);
}
// Autogenerated method: VRTextEntryController.HandleUIKeyboardDeleteButtonWasPressed
void GlobalNamespace::VRTextEntryController::HandleUIKeyboardDeleteButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::HandleUIKeyboardDeleteButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleUIKeyboardDeleteButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController.<Awake>b__20_0
void GlobalNamespace::VRTextEntryController::$Awake$b__20_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::<Awake>b__20_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__20_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController.<Awake>b__20_1
void GlobalNamespace::VRTextEntryController::$Awake$b__20_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::<Awake>b__20_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__20_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRTextEntryController::add_textDidChangeEvent
// Il2CppName: add_textDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(System::Action_1<::Il2CppString*>*)>(&VRTextEntryController::add_textDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "add_textDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::remove_textDidChangeEvent
// Il2CppName: remove_textDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(System::Action_1<::Il2CppString*>*)>(&VRTextEntryController::remove_textDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "remove_textDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::add_okButtonWasPressedEvent
// Il2CppName: add_okButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(System::Action*)>(&VRTextEntryController::add_okButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "add_okButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::remove_okButtonWasPressedEvent
// Il2CppName: remove_okButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(System::Action*)>(&VRTextEntryController::remove_okButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "remove_okButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::add_cancelButtonWasPressedEvent
// Il2CppName: add_cancelButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(System::Action*)>(&VRTextEntryController::add_cancelButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "add_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::remove_cancelButtonWasPressedEvent
// Il2CppName: remove_cancelButtonWasPressedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(System::Action*)>(&VRTextEntryController::remove_cancelButtonWasPressedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "remove_cancelButtonWasPressedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::set_hideCancelButton
// Il2CppName: set_hideCancelButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(bool)>(&VRTextEntryController::set_hideCancelButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "set_hideCancelButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (VRTextEntryController::*)()>(&VRTextEntryController::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(::Il2CppString*)>(&VRTextEntryController::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::BlinkCursor
// Il2CppName: BlinkCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (VRTextEntryController::*)()>(&VRTextEntryController::BlinkCursor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "BlinkCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::HandleUIKeyboardTextKeyWasPressed
// Il2CppName: HandleUIKeyboardTextKeyWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)(::Il2CppChar)>(&VRTextEntryController::HandleUIKeyboardTextKeyWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "HandleUIKeyboardTextKeyWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::HandleUIKeyboardDeleteButtonWasPressed
// Il2CppName: HandleUIKeyboardDeleteButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::HandleUIKeyboardDeleteButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "HandleUIKeyboardDeleteButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::$Awake$b__20_0
// Il2CppName: <Awake>b__20_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::$Awake$b__20_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "<Awake>b__20_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::$Awake$b__20_1
// Il2CppName: <Awake>b__20_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::$Awake$b__20_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), "<Awake>b__20_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::*)()>(&VRTextEntryController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRTextEntryController/<BlinkCursor>d__23
#include "GlobalNamespace/VRTextEntryController_-BlinkCursor-d__23.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRTextEntryController/<BlinkCursor>d__23.System.IDisposable.Dispose
void GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController/<BlinkCursor>d__23.MoveNext
bool GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController/<BlinkCursor>d__23.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController/<BlinkCursor>d__23.System.Collections.IEnumerator.Reset
void GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTextEntryController/<BlinkCursor>d__23.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTextEntryController::$BlinkCursor$d__23::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRTextEntryController::$BlinkCursor$d__23::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::$BlinkCursor$d__23::*)(int)>(&VRTextEntryController::$BlinkCursor$d__23::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController::$BlinkCursor$d__23*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::$BlinkCursor$d__23::*)(int)>(&VRTextEntryController::$BlinkCursor$d__23::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController::$BlinkCursor$d__23*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::$BlinkCursor$d__23::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::$BlinkCursor$d__23::*)()>(&VRTextEntryController::$BlinkCursor$d__23::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController::$BlinkCursor$d__23*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::$BlinkCursor$d__23::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRTextEntryController::$BlinkCursor$d__23::*)()>(&VRTextEntryController::$BlinkCursor$d__23::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController::$BlinkCursor$d__23*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::$BlinkCursor$d__23::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (VRTextEntryController::$BlinkCursor$d__23::*)()>(&VRTextEntryController::$BlinkCursor$d__23::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController::$BlinkCursor$d__23*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::$BlinkCursor$d__23::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTextEntryController::$BlinkCursor$d__23::*)()>(&VRTextEntryController::$BlinkCursor$d__23::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController::$BlinkCursor$d__23*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTextEntryController::$BlinkCursor$d__23::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (VRTextEntryController::$BlinkCursor$d__23::*)()>(&VRTextEntryController::$BlinkCursor$d__23::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTextEntryController::$BlinkCursor$d__23*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreditsContent
#include "GlobalNamespace/CreditsContent.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CreditsContent.get_normalTextPrefab
UnityEngine::GameObject* GlobalNamespace::CreditsContent::get_normalTextPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_normalTextPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalTextPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_normalLocalizedTextPrefab
UnityEngine::GameObject* GlobalNamespace::CreditsContent::get_normalLocalizedTextPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_normalLocalizedTextPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalLocalizedTextPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_titleTextPrefab
UnityEngine::GameObject* GlobalNamespace::CreditsContent::get_titleTextPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_titleTextPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_titleTextPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_titleLocalizedTextPrefab
UnityEngine::GameObject* GlobalNamespace::CreditsContent::get_titleLocalizedTextPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_titleLocalizedTextPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_titleLocalizedTextPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_headerTextPrefab
UnityEngine::GameObject* GlobalNamespace::CreditsContent::get_headerTextPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_headerTextPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headerTextPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_headerLocalizedTextPrefab
UnityEngine::GameObject* GlobalNamespace::CreditsContent::get_headerLocalizedTextPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_headerLocalizedTextPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headerLocalizedTextPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_columnCount
int GlobalNamespace::CreditsContent::get_columnCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_columnCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_columnCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_spaceHeight
float GlobalNamespace::CreditsContent::get_spaceHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_spaceHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spaceHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_titleHeight
float GlobalNamespace::CreditsContent::get_titleHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_titleHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_titleHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_contentRoot
UnityEngine::Transform* GlobalNamespace::CreditsContent::get_contentRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_contentRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_contentRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_rootRectTransform
UnityEngine::RectTransform* GlobalNamespace::CreditsContent::get_rootRectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_rootRectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootRectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsContent.get_creditsContentTextAsset
UnityEngine::TextAsset* GlobalNamespace::CreditsContent::get_creditsContentTextAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsContent::get_creditsContentTextAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_creditsContentTextAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TextAsset*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreditsContent::get_normalTextPrefab
// Il2CppName: get_normalTextPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (CreditsContent::*)()>(&CreditsContent::get_normalTextPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_normalTextPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_normalLocalizedTextPrefab
// Il2CppName: get_normalLocalizedTextPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (CreditsContent::*)()>(&CreditsContent::get_normalLocalizedTextPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_normalLocalizedTextPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_titleTextPrefab
// Il2CppName: get_titleTextPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (CreditsContent::*)()>(&CreditsContent::get_titleTextPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_titleTextPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_titleLocalizedTextPrefab
// Il2CppName: get_titleLocalizedTextPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (CreditsContent::*)()>(&CreditsContent::get_titleLocalizedTextPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_titleLocalizedTextPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_headerTextPrefab
// Il2CppName: get_headerTextPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (CreditsContent::*)()>(&CreditsContent::get_headerTextPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_headerTextPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_headerLocalizedTextPrefab
// Il2CppName: get_headerLocalizedTextPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (CreditsContent::*)()>(&CreditsContent::get_headerLocalizedTextPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_headerLocalizedTextPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_columnCount
// Il2CppName: get_columnCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CreditsContent::*)()>(&CreditsContent::get_columnCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_columnCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_spaceHeight
// Il2CppName: get_spaceHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CreditsContent::*)()>(&CreditsContent::get_spaceHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_spaceHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_titleHeight
// Il2CppName: get_titleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CreditsContent::*)()>(&CreditsContent::get_titleHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_titleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_contentRoot
// Il2CppName: get_contentRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (CreditsContent::*)()>(&CreditsContent::get_contentRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_contentRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_rootRectTransform
// Il2CppName: get_rootRectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (CreditsContent::*)()>(&CreditsContent::get_rootRectTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_rootRectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::get_creditsContentTextAsset
// Il2CppName: get_creditsContentTextAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextAsset* (CreditsContent::*)()>(&CreditsContent::get_creditsContentTextAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), "get_creditsContentTextAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsContent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsContent::*)()>(&CreditsContent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsContent::*)()>(&CreditsContent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsContent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreditsController
#include "GlobalNamespace/CreditsController.hpp"
// Including type: CreditsController/<ScrollCoroutine>d__13
#include "GlobalNamespace/CreditsController_-ScrollCoroutine-d__13.hpp"
// Including type: CreditsScenesTransitionSetupDataSO
#include "GlobalNamespace/CreditsScenesTransitionSetupDataSO.hpp"
// Including type: AudioPlayerBase
#include "GlobalNamespace/AudioPlayerBase.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CreditsController.Start
void GlobalNamespace::CreditsController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController.OnDestroy
void GlobalNamespace::CreditsController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController.Finish
void GlobalNamespace::CreditsController::Finish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::Finish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController.ScrollCoroutine
System::Collections::IEnumerator* GlobalNamespace::CreditsController::ScrollCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::ScrollCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController.HandleInputFocusCaptured
void GlobalNamespace::CreditsController::HandleInputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::HandleInputFocusCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController.HandleInputFocusReleased
void GlobalNamespace::CreditsController::HandleInputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::HandleInputFocusReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreditsController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::*)()>(&CreditsController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::*)()>(&CreditsController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::*)()>(&CreditsController::Finish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::ScrollCoroutine
// Il2CppName: ScrollCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (CreditsController::*)()>(&CreditsController::ScrollCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), "ScrollCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::HandleInputFocusCaptured
// Il2CppName: HandleInputFocusCaptured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::*)()>(&CreditsController::HandleInputFocusCaptured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), "HandleInputFocusCaptured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::HandleInputFocusReleased
// Il2CppName: HandleInputFocusReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::*)()>(&CreditsController::HandleInputFocusReleased)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), "HandleInputFocusReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::*)()>(&CreditsController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::*)()>(&CreditsController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CreditsController/<ScrollCoroutine>d__13
#include "GlobalNamespace/CreditsController_-ScrollCoroutine-d__13.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CreditsController/<ScrollCoroutine>d__13.System.IDisposable.Dispose
void GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController/<ScrollCoroutine>d__13.MoveNext
bool GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController/<ScrollCoroutine>d__13.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController/<ScrollCoroutine>d__13.System.Collections.IEnumerator.Reset
void GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CreditsController/<ScrollCoroutine>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsController::$ScrollCoroutine$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreditsController::$ScrollCoroutine$d__13::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::$ScrollCoroutine$d__13::*)(int)>(&CreditsController::$ScrollCoroutine$d__13::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController::$ScrollCoroutine$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::$ScrollCoroutine$d__13::*)(int)>(&CreditsController::$ScrollCoroutine$d__13::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController::$ScrollCoroutine$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CreditsController::$ScrollCoroutine$d__13::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::$ScrollCoroutine$d__13::*)()>(&CreditsController::$ScrollCoroutine$d__13::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController::$ScrollCoroutine$d__13*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::$ScrollCoroutine$d__13::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CreditsController::$ScrollCoroutine$d__13::*)()>(&CreditsController::$ScrollCoroutine$d__13::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController::$ScrollCoroutine$d__13*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::$ScrollCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (CreditsController::$ScrollCoroutine$d__13::*)()>(&CreditsController::$ScrollCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController::$ScrollCoroutine$d__13*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::$ScrollCoroutine$d__13::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsController::$ScrollCoroutine$d__13::*)()>(&CreditsController::$ScrollCoroutine$d__13::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController::$ScrollCoroutine$d__13*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsController::$ScrollCoroutine$d__13::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (CreditsController::$ScrollCoroutine$d__13::*)()>(&CreditsController::$ScrollCoroutine$d__13::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsController::$ScrollCoroutine$d__13*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CreditsData
#include "GlobalNamespace/CreditsData.hpp"
// Including type: CreditsData/TextStyle
#include "GlobalNamespace/CreditsData_TextStyle.hpp"
// Including type: CreditsData/Text
#include "GlobalNamespace/CreditsData_Text.hpp"
// Including type: CreditsData/RootCreditsItem
#include "GlobalNamespace/CreditsData_RootCreditsItem.hpp"
// Including type: CreditsData/ChildCreditsItem
#include "GlobalNamespace/CreditsData_ChildCreditsItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CreditsData.Deserialize
GlobalNamespace::CreditsData* GlobalNamespace::CreditsData::Deserialize(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CreditsData", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::CreditsData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text);
}
// Writing MetadataGetter for method: CreditsData::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::CreditsData* (*)(::Il2CppString*)>(&CreditsData::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CreditsData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::*)()>(&CreditsData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::*)()>(&CreditsData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreditsData/TextStyle
#include "GlobalNamespace/CreditsData_TextStyle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public CreditsData/TextStyle Normal
GlobalNamespace::CreditsData::TextStyle GlobalNamespace::CreditsData::TextStyle::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::TextStyle::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CreditsData::TextStyle>("", "CreditsData/TextStyle", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public CreditsData/TextStyle Normal
void GlobalNamespace::CreditsData::TextStyle::_set_Normal(GlobalNamespace::CreditsData::TextStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::TextStyle::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CreditsData/TextStyle", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public CreditsData/TextStyle Title
GlobalNamespace::CreditsData::TextStyle GlobalNamespace::CreditsData::TextStyle::_get_Title() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::TextStyle::_get_Title");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CreditsData::TextStyle>("", "CreditsData/TextStyle", "Title"));
}
// Autogenerated static field setter
// Set static field: static public CreditsData/TextStyle Title
void GlobalNamespace::CreditsData::TextStyle::_set_Title(GlobalNamespace::CreditsData::TextStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::TextStyle::_set_Title");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CreditsData/TextStyle", "Title", value));
}
// Autogenerated static field getter
// Get static field: static public CreditsData/TextStyle Header
GlobalNamespace::CreditsData::TextStyle GlobalNamespace::CreditsData::TextStyle::_get_Header() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::TextStyle::_get_Header");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::CreditsData::TextStyle>("", "CreditsData/TextStyle", "Header"));
}
// Autogenerated static field setter
// Set static field: static public CreditsData/TextStyle Header
void GlobalNamespace::CreditsData::TextStyle::_set_Header(GlobalNamespace::CreditsData::TextStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::TextStyle::_set_Header");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CreditsData/TextStyle", "Header", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CreditsData/Text
#include "GlobalNamespace/CreditsData_Text.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CreditsData/Text.IsEmpty
bool GlobalNamespace::CreditsData::Text::IsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::Text::IsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CreditsData/Text.ToString
::Il2CppString* GlobalNamespace::CreditsData::Text::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::Text::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreditsData::Text::IsEmpty
// Il2CppName: IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CreditsData::Text::*)()>(&CreditsData::Text::IsEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::Text*), "IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsData::Text::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CreditsData::Text::*)()>(&CreditsData::Text::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::Text*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsData::Text::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::Text::*)()>(&CreditsData::Text::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::Text*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::Text::*)()>(&CreditsData::Text::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::Text*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CreditsData/RootCreditsItem
#include "GlobalNamespace/CreditsData_RootCreditsItem.hpp"
// Including type: CreditsData/Text
#include "GlobalNamespace/CreditsData_Text.hpp"
// Including type: CreditsData/ChildCreditsItem
#include "GlobalNamespace/CreditsData_ChildCreditsItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CreditsData/RootCreditsItem.HasTitle
bool GlobalNamespace::CreditsData::RootCreditsItem::HasTitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::RootCreditsItem::HasTitle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CreditsData/RootCreditsItem.HasText
bool GlobalNamespace::CreditsData::RootCreditsItem::HasText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::RootCreditsItem::HasText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CreditsData/RootCreditsItem.HasRowItems
bool GlobalNamespace::CreditsData::RootCreditsItem::HasRowItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::RootCreditsItem::HasRowItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasRowItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreditsData::RootCreditsItem::HasTitle
// Il2CppName: HasTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CreditsData::RootCreditsItem::*)()>(&CreditsData::RootCreditsItem::HasTitle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::RootCreditsItem*), "HasTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsData::RootCreditsItem::HasText
// Il2CppName: HasText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CreditsData::RootCreditsItem::*)()>(&CreditsData::RootCreditsItem::HasText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::RootCreditsItem*), "HasText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsData::RootCreditsItem::HasRowItems
// Il2CppName: HasRowItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CreditsData::RootCreditsItem::*)()>(&CreditsData::RootCreditsItem::HasRowItems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::RootCreditsItem*), "HasRowItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsData::RootCreditsItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::RootCreditsItem::*)()>(&CreditsData::RootCreditsItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::RootCreditsItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::RootCreditsItem::*)()>(&CreditsData::RootCreditsItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::RootCreditsItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreditsData/ChildCreditsItem
#include "GlobalNamespace/CreditsData_ChildCreditsItem.hpp"
// Including type: CreditsData/Text
#include "GlobalNamespace/CreditsData_Text.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CreditsData/ChildCreditsItem.HasTitle
bool GlobalNamespace::CreditsData::ChildCreditsItem::HasTitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::ChildCreditsItem::HasTitle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CreditsData/ChildCreditsItem.HasText
bool GlobalNamespace::CreditsData::ChildCreditsItem::HasText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreditsData::ChildCreditsItem::HasText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CreditsData::ChildCreditsItem::HasTitle
// Il2CppName: HasTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CreditsData::ChildCreditsItem::*)()>(&CreditsData::ChildCreditsItem::HasTitle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::ChildCreditsItem*), "HasTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsData::ChildCreditsItem::HasText
// Il2CppName: HasText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CreditsData::ChildCreditsItem::*)()>(&CreditsData::ChildCreditsItem::HasText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::ChildCreditsItem*), "HasText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreditsData::ChildCreditsItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::ChildCreditsItem::*)()>(&CreditsData::ChildCreditsItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::ChildCreditsItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreditsData::ChildCreditsItem::*)()>(&CreditsData::ChildCreditsItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreditsData::ChildCreditsItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuShockwave
#include "GlobalNamespace/MenuShockwave.hpp"
// Including type: VRUIControls.VRPointer
#include "VRUIControls/VRPointer.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuShockwave.Awake
void GlobalNamespace::MenuShockwave::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuShockwave::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuShockwave.OnEnable
void GlobalNamespace::MenuShockwave::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuShockwave::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuShockwave.OnDisable
void GlobalNamespace::MenuShockwave::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuShockwave::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuShockwave.HandleButtonClickEvent
void GlobalNamespace::MenuShockwave::HandleButtonClickEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuShockwave::HandleButtonClickEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleButtonClickEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuShockwave.SpawnShockwave
void GlobalNamespace::MenuShockwave::SpawnShockwave(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuShockwave::SpawnShockwave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnShockwave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Writing MetadataGetter for method: MenuShockwave::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuShockwave::*)()>(&MenuShockwave::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuShockwave*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuShockwave::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuShockwave::*)()>(&MenuShockwave::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuShockwave*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuShockwave::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuShockwave::*)()>(&MenuShockwave::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuShockwave*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuShockwave::HandleButtonClickEvent
// Il2CppName: HandleButtonClickEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuShockwave::*)()>(&MenuShockwave::HandleButtonClickEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuShockwave*), "HandleButtonClickEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuShockwave::SpawnShockwave
// Il2CppName: SpawnShockwave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuShockwave::*)(UnityEngine::Vector3)>(&MenuShockwave::SpawnShockwave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuShockwave*), "SpawnShockwave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MenuShockwave::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuShockwave::*)()>(&MenuShockwave::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuShockwave*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuShockwave::*)()>(&MenuShockwave::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuShockwave*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnvironmentOverrideSettingsPanelController
#include "GlobalNamespace/EnvironmentOverrideSettingsPanelController.hpp"
// Including type: EnvironmentOverrideSettingsPanelController/Elements
#include "GlobalNamespace/EnvironmentOverrideSettingsPanelController_Elements.hpp"
// Including type: EnvironmentOverrideSettingsPanelController/<>c
#include "GlobalNamespace/EnvironmentOverrideSettingsPanelController_--c.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: HMUI.PanelAnimationSO
#include "HMUI/PanelAnimationSO.hpp"
// Including type: EnvironmentsListSO
#include "GlobalNamespace/EnvironmentsListSO.hpp"
// Including type: OverrideEnvironmentSettings
#include "GlobalNamespace/OverrideEnvironmentSettings.hpp"
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnvironmentOverrideSettingsPanelController.get_overrideEnvironmentSettings
GlobalNamespace::OverrideEnvironmentSettings* GlobalNamespace::EnvironmentOverrideSettingsPanelController::get_overrideEnvironmentSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::get_overrideEnvironmentSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overrideEnvironmentSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OverrideEnvironmentSettings*, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController.SetData
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::SetData(GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(overrideEnvironmentSettings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, overrideEnvironmentSettings);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController.OnDestroy
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController.Refresh
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController.HandleDropDownDidSelectCellWithIdx
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropDownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDropDownDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropDownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropDownWithTableView, idx);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController.HandleOverrideEnvironmentsToggleValueChanged
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::HandleOverrideEnvironmentsToggleValueChanged(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::HandleOverrideEnvironmentsToggleValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOverrideEnvironmentsToggleValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController.<HandleOverrideEnvironmentsToggleValueChanged>b__15_0
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::$HandleOverrideEnvironmentsToggleValueChanged$b__15_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::<HandleOverrideEnvironmentsToggleValueChanged>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleOverrideEnvironmentsToggleValueChanged>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::get_overrideEnvironmentSettings
// Il2CppName: get_overrideEnvironmentSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OverrideEnvironmentSettings* (EnvironmentOverrideSettingsPanelController::*)()>(&EnvironmentOverrideSettingsPanelController::get_overrideEnvironmentSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), "get_overrideEnvironmentSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)(GlobalNamespace::OverrideEnvironmentSettings*)>(&EnvironmentOverrideSettingsPanelController::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OverrideEnvironmentSettings*>()});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)()>(&EnvironmentOverrideSettingsPanelController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)()>(&EnvironmentOverrideSettingsPanelController::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx
// Il2CppName: HandleDropDownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)(HMUI::DropdownWithTableView*, int)>(&EnvironmentOverrideSettingsPanelController::HandleDropDownDidSelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), "HandleDropDownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::DropdownWithTableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::HandleOverrideEnvironmentsToggleValueChanged
// Il2CppName: HandleOverrideEnvironmentsToggleValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)(bool)>(&EnvironmentOverrideSettingsPanelController::HandleOverrideEnvironmentsToggleValueChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), "HandleOverrideEnvironmentsToggleValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::$HandleOverrideEnvironmentsToggleValueChanged$b__15_0
// Il2CppName: <HandleOverrideEnvironmentsToggleValueChanged>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)()>(&EnvironmentOverrideSettingsPanelController::$HandleOverrideEnvironmentsToggleValueChanged$b__15_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), "<HandleOverrideEnvironmentsToggleValueChanged>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)()>(&EnvironmentOverrideSettingsPanelController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::*)()>(&EnvironmentOverrideSettingsPanelController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentOverrideSettingsPanelController/Elements
#include "GlobalNamespace/EnvironmentOverrideSettingsPanelController_Elements.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: HMUI.SimpleTextDropdown
#include "HMUI/SimpleTextDropdown.hpp"
// Including type: EnvironmentTypeSO
#include "GlobalNamespace/EnvironmentTypeSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnvironmentOverrideSettingsPanelController/Elements.get_environmentInfos
System::Collections::Generic::List_1<GlobalNamespace::EnvironmentInfoSO*>* GlobalNamespace::EnvironmentOverrideSettingsPanelController::Elements::get_environmentInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::Elements::get_environmentInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::EnvironmentInfoSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController/Elements.set_environmentInfos
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::Elements::set_environmentInfos(System::Collections::Generic::List_1<GlobalNamespace::EnvironmentInfoSO*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::Elements::set_environmentInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_environmentInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::Elements::get_environmentInfos
// Il2CppName: get_environmentInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::EnvironmentInfoSO*>* (EnvironmentOverrideSettingsPanelController::Elements::*)()>(&EnvironmentOverrideSettingsPanelController::Elements::get_environmentInfos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::Elements*), "get_environmentInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::Elements::set_environmentInfos
// Il2CppName: set_environmentInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::Elements::*)(System::Collections::Generic::List_1<GlobalNamespace::EnvironmentInfoSO*>*)>(&EnvironmentOverrideSettingsPanelController::Elements::set_environmentInfos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::Elements*), "set_environmentInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::EnvironmentInfoSO*>*>()});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::Elements::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::Elements::*)()>(&EnvironmentOverrideSettingsPanelController::Elements::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::Elements*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::Elements::*)()>(&EnvironmentOverrideSettingsPanelController::Elements::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::Elements*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnvironmentOverrideSettingsPanelController/<>c
#include "GlobalNamespace/EnvironmentOverrideSettingsPanelController_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: EnvironmentInfoSO
#include "GlobalNamespace/EnvironmentInfoSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly EnvironmentOverrideSettingsPanelController/<>c <>9
GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c* GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c*>("", "EnvironmentOverrideSettingsPanelController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly EnvironmentOverrideSettingsPanelController/<>c <>9
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_set_$$9(GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "EnvironmentOverrideSettingsPanelController/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<EnvironmentInfoSO,System.String> <>9__11_0
System::Func_2<GlobalNamespace::EnvironmentInfoSO*, ::Il2CppString*>* GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::EnvironmentInfoSO*, ::Il2CppString*>*>("", "EnvironmentOverrideSettingsPanelController/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<EnvironmentInfoSO,System.String> <>9__11_0
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_set_$$9__11_0(System::Func_2<GlobalNamespace::EnvironmentInfoSO*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "EnvironmentOverrideSettingsPanelController/<>c", "<>9__11_0", value)));
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController/<>c..cctor
void GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnvironmentOverrideSettingsPanelController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: EnvironmentOverrideSettingsPanelController/<>c.<SetData>b__11_0
::Il2CppString* GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::$SetData$b__11_0(GlobalNamespace::EnvironmentInfoSO* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentOverrideSettingsPanelController::$$c::<SetData>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SetData>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&EnvironmentOverrideSettingsPanelController::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::$$c::$SetData$b__11_0
// Il2CppName: <SetData>b__11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EnvironmentOverrideSettingsPanelController::$$c::*)(GlobalNamespace::EnvironmentInfoSO*)>(&EnvironmentOverrideSettingsPanelController::$$c::$SetData$b__11_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::$$c*), "<SetData>b__11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnvironmentInfoSO*>()});
  }
};
// Writing MetadataGetter for method: EnvironmentOverrideSettingsPanelController::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::$$c::*)()>(&EnvironmentOverrideSettingsPanelController::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentOverrideSettingsPanelController::$$c::*)()>(&EnvironmentOverrideSettingsPanelController::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentOverrideSettingsPanelController::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FileBrowserTableCell
#include "GlobalNamespace/FileBrowserTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileBrowserTableCell.set_text
void GlobalNamespace::FileBrowserTableCell::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FileBrowserTableCell.get_text
::Il2CppString* GlobalNamespace::FileBrowserTableCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: FileBrowserTableCell.SelectionDidChange
void GlobalNamespace::FileBrowserTableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableCell::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: FileBrowserTableCell.HighlightDidChange
void GlobalNamespace::FileBrowserTableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableCell::HighlightDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Writing MetadataGetter for method: FileBrowserTableCell::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableCell::*)(::Il2CppString*)>(&FileBrowserTableCell::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableCell*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableCell::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FileBrowserTableCell::*)()>(&FileBrowserTableCell::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableCell*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileBrowserTableCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableCell::*)(HMUI::SelectableCell::TransitionType)>(&FileBrowserTableCell::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableCell::*)(HMUI::SelectableCell::TransitionType)>(&FileBrowserTableCell::HighlightDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SelectableCell::TransitionType>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableCell::*)()>(&FileBrowserTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableCell::*)()>(&FileBrowserTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
