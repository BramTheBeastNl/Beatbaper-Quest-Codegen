// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NavigationController/Orientation
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Orientation Horizontal
HMUI::NavigationController::Orientation HMUI::NavigationController::Orientation::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Orientation>("HMUI", "NavigationController/Orientation", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Orientation Horizontal
void HMUI::NavigationController::Orientation::_set_Horizontal(HMUI::NavigationController::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Orientation", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Orientation Vertical
HMUI::NavigationController::Orientation HMUI::NavigationController::Orientation::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Orientation>("HMUI", "NavigationController/Orientation", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Orientation Vertical
void HMUI::NavigationController::Orientation::_set_Vertical(HMUI::NavigationController::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Orientation", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NavigationController/Alignment
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Alignment Beginning
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_Beginning() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_Beginning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "Beginning"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Alignment Beginning
void HMUI::NavigationController::Alignment::_set_Beginning(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_Beginning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "Beginning", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Alignment Middle
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Alignment Middle
void HMUI::NavigationController::Alignment::_set_Middle(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Alignment End
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "End"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Alignment End
void HMUI::NavigationController::Alignment::_set_End(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "End", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController/<>c__DisplayClass8_0
#include "HMUI/NavigationController_--c__DisplayClass8_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController/<>c__DisplayClass8_0.<PushViewController>g__AnimationLayouter|0
void HMUI::NavigationController::$$c__DisplayClass8_0::$PushViewController$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::$$c__DisplayClass8_0::<PushViewController>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewController>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, viewControllers))));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController/<>c__DisplayClass10_0
#include "HMUI/NavigationController_--c__DisplayClass10_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController/<>c__DisplayClass10_0.<PopViewControllers>g__AnimationLayouter|0
void HMUI::NavigationController::$$c__DisplayClass10_0::$PopViewControllers$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* removingViewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::$$c__DisplayClass10_0::<PopViewControllers>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllers>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, viewControllers, removingViewControllers))));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers, removingViewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: HMUI.Screen/<TransitionCoroutine>d__5
#include "HMUI/Screen_-TransitionCoroutine-d__5.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Screen.get_isBeingDestroyed
bool HMUI::Screen::get_isBeingDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::get_isBeingDestroyed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isBeingDestroyed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen.SetRootViewController
void HMUI::Screen::SetRootViewController(HMUI::ViewController* newRootViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::SetRootViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetRootViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newRootViewController, animationType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newRootViewController, animationType);
}
// Autogenerated method: HMUI.Screen.TransitionCoroutine
System::Collections::IEnumerator* HMUI::Screen::TransitionCoroutine(HMUI::ViewController* newRootViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::TransitionCoroutine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TransitionCoroutine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newRootViewController, animationType)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newRootViewController, animationType);
}
// Autogenerated method: HMUI.Screen.OnDestroy
void HMUI::Screen::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.Screen/<TransitionCoroutine>d__5
#include "HMUI/Screen_-TransitionCoroutine-d__5.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.IDisposable.Dispose
void HMUI::Screen::$TransitionCoroutine$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.MoveNext
bool HMUI::Screen::$TransitionCoroutine$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_IEnumerator_MoveNext() {
  return HMUI::Screen::$TransitionCoroutine$d__5::MoveNext();
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.Collections.IEnumerator.Reset
void HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScreenModeController
#include "HMUI/ScreenModeController.hpp"
// Including type: HMUI.CurvedCanvasSettings
#include "HMUI/CurvedCanvasSettings.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenModeController.Awake
void HMUI::ScreenModeController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenModeController.SetMode
void HMUI::ScreenModeController::SetMode(HMUI::ScreenModeData* screenModeData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::SetMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenModeData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenModeData);
}
// Autogenerated method: HMUI.ScreenModeController.SetDefaultMode
void HMUI::ScreenModeController::SetDefaultMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::SetDefaultMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDefaultMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenModeSO
#include "HMUI/ScreenModeSO.hpp"
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenModeSO.get_data
HMUI::ScreenModeData* HMUI::ScreenModeSO::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeSO::get_data");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ScreenModeData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.TitleViewController
#include "HMUI/TitleViewController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenSystem.get_titleViewController
HMUI::TitleViewController* HMUI::ScreenSystem::get_titleViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_titleViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_titleViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TitleViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_mainScreen
HMUI::Screen* HMUI::ScreenSystem::get_mainScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_mainScreen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_mainScreen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_leftScreen
HMUI::Screen* HMUI::ScreenSystem::get_leftScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_leftScreen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_leftScreen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_rightScreen
HMUI::Screen* HMUI::ScreenSystem::get_rightScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_rightScreen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rightScreen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_bottomScreen
HMUI::Screen* HMUI::ScreenSystem::get_bottomScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_bottomScreen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_bottomScreen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_topScreen
HMUI::Screen* HMUI::ScreenSystem::get_topScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_topScreen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_topScreen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.add_backButtonWasPressedEvent
void HMUI::ScreenSystem::add_backButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::add_backButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_backButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScreenSystem.remove_backButtonWasPressedEvent
void HMUI::ScreenSystem::remove_backButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::remove_backButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_backButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScreenSystem.Awake
void HMUI::ScreenSystem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.OnDestroy
void HMUI::ScreenSystem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.SetBackButton
void HMUI::ScreenSystem::SetBackButton(bool visible, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::SetBackButton");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetBackButton", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(visible, animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, visible, animated);
}
// Autogenerated method: HMUI.ScreenSystem.<Awake>b__24_0
void HMUI::ScreenSystem::$Awake$b__24_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::<Awake>b__24_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__24_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.StackedController
#include "HMUI/StackedController.hpp"
// Including type: HMUI.StackedController/<>c
#include "HMUI/StackedController_--c.hpp"
// Including type: HMUI.StackedController/<>c__DisplayClass5_0
#include "HMUI/StackedController_--c__DisplayClass5_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.StackedController.get_topStackedViewController
HMUI::ViewController* HMUI::StackedController::get_topStackedViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::get_topStackedViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_topStackedViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackedController.PushViewController
void HMUI::StackedController::PushViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PushViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PushViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(viewController, finishedCallback, immediately)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.PopViewController
void HMUI::StackedController::PopViewController(System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PopViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PopViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(finishedCallback, immediately)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.PopViewControllers
void HMUI::StackedController::PopViewControllers(int numberOfViewControllersToPop, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PopViewControllers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PopViewControllers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(numberOfViewControllersToPop, finishedCallback, immediately)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numberOfViewControllersToPop, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.SetupViewControllerRect
void HMUI::StackedController::SetupViewControllerRect(HMUI::ViewController* viewController, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::SetupViewControllerRect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "StackedController", "SetupViewControllerRect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(viewController, index)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, viewController, index);
}
// Autogenerated method: HMUI.StackedController.LayoutViewControllers
void HMUI::StackedController::LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::LayoutViewControllers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LayoutViewControllers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(viewControllers)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.StackedController/<>c
#include "HMUI/StackedController_--c.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.StackedController/<>c <>9
HMUI::StackedController::$$c* HMUI::StackedController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::StackedController::$$c*>("HMUI", "StackedController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.StackedController/<>c <>9
void HMUI::StackedController::$$c::_set_$$9(HMUI::StackedController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "StackedController/<>c", "<>9", value)));
}
// Autogenerated method: HMUI.StackedController/<>c..cctor
void HMUI::StackedController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "StackedController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.StackedController/<>c.<PushViewController>g__AnimationLayouter|3_0
void HMUI::StackedController::$$c::$PushViewController$g__AnimationLayouter_3_0(float t, ::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::<PushViewController>g__AnimationLayouter|3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewController>g__AnimationLayouter|3_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, viewControllers))));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.StackedController/<>c__DisplayClass5_0
#include "HMUI/StackedController_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.StackedController/<>c__DisplayClass5_0.<PopViewControllers>g__AnimationLayouter|0
void HMUI::StackedController::$$c__DisplayClass5_0::$PopViewControllers$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* removingViewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c__DisplayClass5_0::<PopViewControllers>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllers>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, viewControllers, removingViewControllers))));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers, removingViewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TitleViewController
#include "HMUI/TitleViewController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TitleViewController.SetText
void HMUI::TitleViewController::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TitleViewController::SetText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(text)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewController/DidActivateDelegate
#include "HMUI/ViewController_DidActivateDelegate.hpp"
// Including type: HMUI.ViewController/DidDeactivateDelegate
#include "HMUI/ViewController_DidDeactivateDelegate.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: HMUI.ViewController/AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
// Including type: HMUI.ViewController/<PresentViewControllerCoroutine>d__58
#include "HMUI/ViewController_-PresentViewControllerCoroutine-d__58.hpp"
// Including type: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60
#include "HMUI/ViewController_-ReplaceViewControllerCoroutine-d__60.hpp"
// Including type: HMUI.ViewController/<DismissViewControllerCoroutine>d__62
#include "HMUI/ViewController_-DismissViewControllerCoroutine-d__62.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.ContainerViewController
#include "HMUI/ContainerViewController.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.EventSystems.BaseRaycaster
#include "UnityEngine/EventSystems/BaseRaycaster.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kTransitionDuration
float HMUI::ViewController::_get_kTransitionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_get_kTransitionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewController", "kTransitionDuration"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kTransitionDuration
void HMUI::ViewController::_set_kTransitionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_set_kTransitionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController", "kTransitionDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kTransitionMoveOffset
float HMUI::ViewController::_get_kTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_get_kTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewController", "kTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kTransitionMoveOffset
void HMUI::ViewController::_set_kTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_set_kTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController", "kTransitionMoveOffset", value));
}
// Autogenerated method: HMUI.ViewController.get_containerViewController
HMUI::ContainerViewController* HMUI::ViewController::get_containerViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_containerViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_containerViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ContainerViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_screen
HMUI::Screen* HMUI::ViewController::get_screen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_screen");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_screen", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_parentViewController
HMUI::ViewController* HMUI::ViewController::get_parentViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_parentViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_parentViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_childViewController
HMUI::ViewController* HMUI::ViewController::get_childViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_childViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_childViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isInViewControllerHierarchy
bool HMUI::ViewController::get_isInViewControllerHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isInViewControllerHierarchy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isInViewControllerHierarchy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isActivated
bool HMUI::ViewController::get_isActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isActivated");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isActivated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_wasActivatedBefore
bool HMUI::ViewController::get_wasActivatedBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_wasActivatedBefore");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_wasActivatedBefore", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isInTransition
bool HMUI::ViewController::get_isInTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isInTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_isInTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_isInTransition
void HMUI::ViewController::set_isInTransition(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_isInTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_isInTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_enableUserInteractions
bool HMUI::ViewController::get_enableUserInteractions() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_enableUserInteractions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_enableUserInteractions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_enableUserInteractions
void HMUI::ViewController::set_enableUserInteractions(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_enableUserInteractions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_enableUserInteractions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.add_didActivateEvent
void HMUI::ViewController::add_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::add_didActivateEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didActivateEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.remove_didActivateEvent
void HMUI::ViewController::remove_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::remove_didActivateEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didActivateEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.add_didDeactivateEvent
void HMUI::ViewController::add_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::add_didDeactivateEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didDeactivateEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.remove_didDeactivateEvent
void HMUI::ViewController::remove_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::remove_didDeactivateEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didDeactivateEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_buttonBinder
HMUI::ButtonBinder* HMUI::ViewController::get_buttonBinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_buttonBinder");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_buttonBinder", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ButtonBinder*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_buttonBinder
void HMUI::ViewController::set_buttonBinder(HMUI::ButtonBinder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_buttonBinder");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_buttonBinder", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_rectTransform
UnityEngine::RectTransform* HMUI::ViewController::get_rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_rectTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rectTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_canvasGroup
UnityEngine::CanvasGroup* HMUI::ViewController::get_canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_canvasGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_canvasGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::CanvasGroup*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_graphicRaycaster
UnityEngine::EventSystems::BaseRaycaster* HMUI::ViewController::get_graphicRaycaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_graphicRaycaster");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_graphicRaycaster", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::BaseRaycaster*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.OnDestroy
void HMUI::ViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.DidActivate
void HMUI::ViewController::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(firstActivation, addedToHierarchy, screenSystemEnabling)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController.DidDeactivate
void HMUI::ViewController::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(removedFromHierarchy, screenSystemDisabling)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController.__Init
void HMUI::ViewController::__Init(HMUI::Screen* screen, HMUI::ViewController* parentViewController, HMUI::ContainerViewController* containerViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Init");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__Init", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screen, parentViewController, containerViewController)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screen, parentViewController, containerViewController);
}
// Autogenerated method: HMUI.ViewController.__ResetViewController
void HMUI::ViewController::__ResetViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__ResetViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__ResetViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.__PresentViewController
void HMUI::ViewController::__PresentViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__PresentViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__PresentViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(viewController, finishedCallback, animationDirection, immediately)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.PresentViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::PresentViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::PresentViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PresentViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newViewController, finishedCallback, animationDirection, immediately)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.__ReplaceViewController
void HMUI::ViewController::__ReplaceViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__ReplaceViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__ReplaceViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(viewController, finishedCallback, animationType, animationDirection)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.ViewController.ReplaceViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::ReplaceViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::ReplaceViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReplaceViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newViewController, finishedCallback, animationType, animationDirection)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.ViewController.__DismissViewController
void HMUI::ViewController::__DismissViewController(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__DismissViewController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__DismissViewController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(finishedCallback, animationDirection, immediately)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.DismissViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::DismissViewControllerCoroutine(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DismissViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DismissViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(finishedCallback, animationDirection, immediately)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.__Activate
void HMUI::ViewController::__Activate(bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Activate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__Activate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(addedToHierarchy, screenSystemEnabling)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController.__Deactivate
void HMUI::ViewController::__Deactivate(bool removedFromHierarchy, bool deactivateGameObject, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Deactivate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__Deactivate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(removedFromHierarchy, deactivateGameObject, screenSystemDisabling)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, deactivateGameObject, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController.DeactivateGameObject
void HMUI::ViewController::DeactivateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DeactivateGameObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DeactivateGameObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.IsViewControllerInHierarchy
bool HMUI::ViewController::IsViewControllerInHierarchy(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::IsViewControllerInHierarchy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsViewControllerInHierarchy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(viewController)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HMUI.ViewController.Log
void HMUI::ViewController::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::Log");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ViewController", "Log", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/DidActivateDelegate
#include "HMUI/ViewController_DidActivateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/DidActivateDelegate.Invoke
void HMUI::ViewController::DidActivateDelegate::Invoke(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(firstActivation, addedToHierarchy, screenSystemEnabling)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController/DidActivateDelegate.BeginInvoke
System::IAsyncResult* HMUI::ViewController::DidActivateDelegate::BeginInvoke(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(firstActivation, addedToHierarchy, screenSystemEnabling, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling, callback, object);
}
// Autogenerated method: HMUI.ViewController/DidActivateDelegate.EndInvoke
void HMUI::ViewController::DidActivateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/DidDeactivateDelegate
#include "HMUI/ViewController_DidDeactivateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/DidDeactivateDelegate.Invoke
void HMUI::ViewController::DidDeactivateDelegate::Invoke(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(removedFromHierarchy, screenSystemDisabling)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController/DidDeactivateDelegate.BeginInvoke
System::IAsyncResult* HMUI::ViewController::DidDeactivateDelegate::BeginInvoke(bool removedFromHierarchy, bool screenSystemDisabling, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(removedFromHierarchy, screenSystemDisabling, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling, callback, object);
}
// Autogenerated method: HMUI.ViewController/DidDeactivateDelegate.EndInvoke
void HMUI::ViewController::DidDeactivateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationType None
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationType None
void HMUI::ViewController::AnimationType::_set_None(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationType In
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_In() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_In");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "In"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationType In
void HMUI::ViewController::AnimationType::_set_In(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_In");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "In", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationType Out
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_Out() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_Out");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "Out"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationType Out
void HMUI::ViewController::AnimationType::_set_Out(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_Out");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "Out", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewController/AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationDirection Horizontal
HMUI::ViewController::AnimationDirection HMUI::ViewController::AnimationDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationDirection>("HMUI", "ViewController/AnimationDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationDirection Horizontal
void HMUI::ViewController::AnimationDirection::_set_Horizontal(HMUI::ViewController::AnimationDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationDirection", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationDirection Vertical
HMUI::ViewController::AnimationDirection HMUI::ViewController::AnimationDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationDirection>("HMUI", "ViewController/AnimationDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationDirection Vertical
void HMUI::ViewController::AnimationDirection::_set_Vertical(HMUI::ViewController::AnimationDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationDirection", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/<PresentViewControllerCoroutine>d__58
#include "HMUI/ViewController_-PresentViewControllerCoroutine-d__58.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.IDisposable.Dispose
void HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.MoveNext
bool HMUI::ViewController::$PresentViewControllerCoroutine$d__58::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewController::$PresentViewControllerCoroutine$d__58::MoveNext();
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60
#include "HMUI/ViewController_-ReplaceViewControllerCoroutine-d__60.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.IDisposable.Dispose
void HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.MoveNext
bool HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::MoveNext();
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/<DismissViewControllerCoroutine>d__62
#include "HMUI/ViewController_-DismissViewControllerCoroutine-d__62.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.IDisposable.Dispose
void HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.MoveNext
bool HMUI::ViewController::$DismissViewControllerCoroutine$d__62::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewController::$DismissViewControllerCoroutine$d__62::MoveNext();
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers
#include "HMUI/ViewControllerTransitionHelpers.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3
#include "HMUI/ViewControllerTransitionHelpers_-DoPresentTransition-d__3.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4
#include "HMUI/ViewControllerTransitionHelpers_-DoDismissTransition-d__4.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5
#include "HMUI/ViewControllerTransitionHelpers_-DoHorizontalTransition-d__5.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6
#include "HMUI/ViewControllerTransitionHelpers_-DoVerticalTransition-d__6.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8
#include "HMUI/ViewControllerTransitionHelpers_-AnimationCoroutine-d__8.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ViewController/AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kTransitionDuration
float HMUI::ViewControllerTransitionHelpers::_get_kTransitionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kTransitionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kTransitionDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kTransitionDuration
void HMUI::ViewControllerTransitionHelpers::_set_kTransitionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kTransitionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kTransitionDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHorizontalTransitionMoveOffset
float HMUI::ViewControllerTransitionHelpers::_get_kHorizontalTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kHorizontalTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kHorizontalTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHorizontalTransitionMoveOffset
void HMUI::ViewControllerTransitionHelpers::_set_kHorizontalTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kHorizontalTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kHorizontalTransitionMoveOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kVerticalTransitionMoveOffset
float HMUI::ViewControllerTransitionHelpers::_get_kVerticalTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kVerticalTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kVerticalTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVerticalTransitionMoveOffset
void HMUI::ViewControllerTransitionHelpers::_set_kVerticalTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kVerticalTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kVerticalTransitionMoveOffset", value));
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoPresentTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoPresentTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, HMUI::ViewController::AnimationDirection animationDirection, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoPresentTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoPresentTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoDismissTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoDismissTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, HMUI::ViewController::AnimationDirection animationDirection, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoDismissTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoDismissTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoHorizontalTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoHorizontalTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoHorizontalTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoHorizontalTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toPresentViewController, toDismissViewController, moveOffsetMultiplier)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoVerticalTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoVerticalTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoVerticalTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoVerticalTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toPresentViewController, toDismissViewController, moveOffsetMultiplier)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.ImmediateTransition
void HMUI::ViewControllerTransitionHelpers::ImmediateTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::ImmediateTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "ImmediateTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toPresentViewController, toDismissViewController)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.AnimationCoroutine
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::AnimationCoroutine(System::Action_1<float>* transitionAnimation) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::AnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "AnimationCoroutine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transitionAnimation)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transitionAnimation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3
#include "HMUI/ViewControllerTransitionHelpers_-DoPresentTransition-d__3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::MoveNext();
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4
#include "HMUI/ViewControllerTransitionHelpers_-DoDismissTransition-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::MoveNext();
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0.<DoHorizontalTransition>b__0
void HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass5_0::$DoHorizontalTransition$b__0(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass5_0::<DoHorizontalTransition>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DoHorizontalTransition>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t))));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5
#include "HMUI/ViewControllerTransitionHelpers_-DoHorizontalTransition-d__5.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::MoveNext();
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0.<DoVerticalTransition>b__0
void HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass6_0::$DoVerticalTransition$b__0(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass6_0::<DoVerticalTransition>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DoVerticalTransition>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t))));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6
#include "HMUI/ViewControllerTransitionHelpers_-DoVerticalTransition-d__6.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::MoveNext();
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8
#include "HMUI/ViewControllerTransitionHelpers_-AnimationCoroutine-d__8.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_IEnumerator_MoveNext() {
  return HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::MoveNext();
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView
#include "HMUI/AnimatedSwitchView.hpp"
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
// Including type: HMUI.AnimatedSwitchView/GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: HMUI.AnimatedSwitchView/<>c
#include "HMUI/AnimatedSwitchView_--c.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.AnimatedSwitchView.Awake
void HMUI::AnimatedSwitchView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.Start
void HMUI::AnimatedSwitchView::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.OnDestroy
void HMUI::AnimatedSwitchView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.Update
void HMUI::AnimatedSwitchView::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpPosition
void HMUI::AnimatedSwitchView::LerpPosition(float switchAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LerpPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(switchAmount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpStretch
void HMUI::AnimatedSwitchView::LerpStretch(float switchAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpStretch");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LerpStretch", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(switchAmount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpColors
void HMUI::AnimatedSwitchView::LerpColors(float switchAmount, float highlightAmount, float disabledAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpColors");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LerpColors", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(switchAmount, highlightAmount, disabledAmount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount, highlightAmount, disabledAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpColor
UnityEngine::Color HMUI::AnimatedSwitchView::LerpColor(float switchAmount, float highlightAmount, float disabledAmount, HMUI::AnimatedSwitchView::GetColorDelegate* getColorDelegate) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LerpColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(switchAmount, highlightAmount, disabledAmount, getColorDelegate)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, switchAmount, highlightAmount, disabledAmount, getColorDelegate);
}
// Autogenerated method: HMUI.AnimatedSwitchView.HandleOnValueChanged
void HMUI::AnimatedSwitchView::HandleOnValueChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::HandleOnValueChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleOnValueChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.AnimatedSwitchView.HandleStateDidChange
void HMUI::AnimatedSwitchView::HandleStateDidChange(HMUI::ToggleWithCallbacks::SelectionState selectionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::HandleStateDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleStateDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(selectionState)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectionState);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/AnimationState
#include "HMUI/AnimatedSwitchView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState Idle
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "Idle"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState Idle
void HMUI::AnimatedSwitchView::AnimationState::_set_Idle(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "Idle", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOff", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.AnimatedSwitchView/GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.AnimatedSwitchView/GetColorDelegate.Invoke
UnityEngine::Color HMUI::AnimatedSwitchView::GetColorDelegate::Invoke(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/GetColorDelegate.BeginInvoke
System::IAsyncResult* HMUI::AnimatedSwitchView::GetColorDelegate::BeginInvoke(HMUI::AnimatedSwitchView::ColorBlock* colorBlock, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, colorBlock, callback, object);
}
// Autogenerated method: HMUI.AnimatedSwitchView/GetColorDelegate.EndInvoke
UnityEngine::Color HMUI::AnimatedSwitchView::GetColorDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/<>c
#include "HMUI/AnimatedSwitchView_--c.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: HMUI.AnimatedSwitchView/GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.AnimatedSwitchView/<>c <>9
HMUI::AnimatedSwitchView::$$c* HMUI::AnimatedSwitchView::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::$$c*>("HMUI", "AnimatedSwitchView/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.AnimatedSwitchView/<>c <>9
void HMUI::AnimatedSwitchView::$$c::_set_$$9(HMUI::AnimatedSwitchView::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_0
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_0")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_0
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_0(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_0", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_1
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_1")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_1
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_1(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_1", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_2
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_2")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_2
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_2(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_2", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_3
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_3")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_3
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_3(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_3", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_4
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_4")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_4
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_4(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_4", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_5
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_5")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_5
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_5(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_5", value)));
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c..cctor
void HMUI::AnimatedSwitchView::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "AnimatedSwitchView/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_0
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_0(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock))));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_1
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_1(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock))));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_2
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_2(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_2", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock))));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_3
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_3(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_3", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock))));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_4
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_4(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_4", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock))));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_5
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_5(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_5", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(colorBlock))));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ButtonSpriteSwap
#include "HMUI/ButtonSpriteSwap.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ButtonSpriteSwap.Awake
void HMUI::ButtonSpriteSwap::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.Start
void HMUI::ButtonSpriteSwap::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.OnEnable
void HMUI::ButtonSpriteSwap::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.OnDestroy
void HMUI::ButtonSpriteSwap::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.HandleButtonSelectionStateDidChange
void HMUI::ButtonSpriteSwap::HandleButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::HandleButtonSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ButtonStaticAnimations
#include "HMUI/ButtonStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ButtonStaticAnimations.Awake
void HMUI::ButtonStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.Start
void HMUI::ButtonStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.OnEnable
void HMUI::ButtonStaticAnimations::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.OnDestroy
void HMUI::ButtonStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.HandleButtonSelectionStateDidChange
void HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NoTransitionsButton
#include "HMUI/NoTransitionsButton.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.UI.Selectable/SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NoTransitionsButton.get_selectionState
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::NoTransitionsButton::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.NoTransitionsButton.add_selectionStateDidChangeEvent
void HMUI::NoTransitionsButton::add_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::add_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.NoTransitionsButton.remove_selectionStateDidChangeEvent
void HMUI::NoTransitionsButton::remove_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::remove_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.NoTransitionsButton.DoStateTransition
void HMUI::NoTransitionsButton::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::DoStateTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state, instant)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NoTransitionsButton/SelectionState
#include "HMUI/NoTransitionsButton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Normal
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Normal
void HMUI::NoTransitionsButton::SelectionState::_set_Normal(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Highlighted
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Highlighted
void HMUI::NoTransitionsButton::SelectionState::_set_Highlighted(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Pressed
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Pressed
void HMUI::NoTransitionsButton::SelectionState::_set_Pressed(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Disabled
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Disabled
void HMUI::NoTransitionsButton::SelectionState::_set_Disabled(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Disabled", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.DropdownWithTableView.add_didSelectCellWithIdxEvent
void HMUI::DropdownWithTableView::add_didSelectCellWithIdxEvent(System::Action_2<HMUI::DropdownWithTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.remove_didSelectCellWithIdxEvent
void HMUI::DropdownWithTableView::remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::DropdownWithTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.get_tableViewDataSource
HMUI::TableView::IDataSource* HMUI::DropdownWithTableView::get_tableViewDataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::get_tableViewDataSource");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_tableViewDataSource", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableView::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.get_selectedIndex
int HMUI::DropdownWithTableView::get_selectedIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::get_selectedIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_selectedIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.set_selectedIndex
void HMUI::DropdownWithTableView::set_selectedIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::set_selectedIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_selectedIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.Init
void HMUI::DropdownWithTableView::Init(HMUI::TableView::IDataSource* tableViewDataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Init");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableViewDataSource)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableViewDataSource);
}
// Autogenerated method: HMUI.DropdownWithTableView.ReloadData
void HMUI::DropdownWithTableView::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::ReloadData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.SelectCellWithIdx
void HMUI::DropdownWithTableView::SelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::SelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: HMUI.DropdownWithTableView.Awake
void HMUI::DropdownWithTableView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnDisable
void HMUI::DropdownWithTableView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnDestroy
void HMUI::DropdownWithTableView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.RefreshSize
void HMUI::DropdownWithTableView::RefreshSize(HMUI::TableView::IDataSource* dataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::RefreshSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dataSource)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataSource);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnButtonClick
void HMUI::DropdownWithTableView::OnButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnButtonClick");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnButtonClick", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.HandleTableViewDidSelectCellWithIdx
void HMUI::DropdownWithTableView::HandleTableViewDidSelectCellWithIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::HandleTableViewDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleTableViewDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView, idx)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: HMUI.DropdownWithTableView.Hide
void HMUI::DropdownWithTableView::Hide(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Hide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.DropdownWithTableView.Show
void HMUI::DropdownWithTableView::Show(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Show");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.DropdownWithTableView.HandleModalViewBlockerClicked
void HMUI::DropdownWithTableView::HandleModalViewBlockerClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::HandleModalViewBlockerClicked");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleModalViewBlockerClicked", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.GradientImage
#include "HMUI/GradientImage.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7558
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 kVec2Zero
UnityEngine::Vector2 HMUI::GradientImage::_get_kVec2Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec2Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("HMUI", "GradientImage", "kVec2Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 kVec2Zero
void HMUI::GradientImage::_set_kVec2Zero(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec2Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec2Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7568
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 kVec3Zero
UnityEngine::Vector3 HMUI::GradientImage::_get_kVec3Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec3Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("HMUI", "GradientImage", "kVec3Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 kVec3Zero
void HMUI::GradientImage::_set_kVec3Zero(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec3Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec3Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7578
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 kVec4Zero
UnityEngine::Vector4 HMUI::GradientImage::_get_kVec4Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec4Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("HMUI", "GradientImage", "kVec4Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 kVec4Zero
void HMUI::GradientImage::_set_kVec4Zero(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec4Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec4Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7588
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
::Array<UnityEngine::Vector2>* HMUI::GradientImage::_get_s_VertScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_VertScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "GradientImage", "s_VertScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
void HMUI::GradientImage::_set_s_VertScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_VertScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_VertScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7598
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
::Array<UnityEngine::Vector2>* HMUI::GradientImage::_get_s_UVScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_UVScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "GradientImage", "s_UVScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
void HMUI::GradientImage::_set_s_UVScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_UVScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_UVScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA75A8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color[] s_ColorScratch
::Array<UnityEngine::Color>* HMUI::GradientImage::_get_s_ColorScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_ColorScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Color>*>("HMUI", "GradientImage", "s_ColorScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color[] s_ColorScratch
void HMUI::GradientImage::_set_s_ColorScratch(::Array<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_ColorScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_ColorScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA75B8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Xy
::Array<UnityEngine::Vector3>* HMUI::GradientImage::_get_s_Xy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_Xy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "GradientImage", "s_Xy"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Xy
void HMUI::GradientImage::_set_s_Xy(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_Xy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_Xy", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA75C8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Uv
::Array<UnityEngine::Vector3>* HMUI::GradientImage::_get_s_Uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_Uv");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "GradientImage", "s_Uv"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Uv
void HMUI::GradientImage::_set_s_Uv(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_Uv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_Uv", value));
}
// Autogenerated method: HMUI.GradientImage.get_color0
UnityEngine::Color HMUI::GradientImage::get_color0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::get_color0");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_color0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.GradientImage.set_color0
void HMUI::GradientImage::set_color0(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::set_color0");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_color0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.GradientImage.get_color1
UnityEngine::Color HMUI::GradientImage::get_color1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::get_color1");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_color1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.GradientImage.set_color1
void HMUI::GradientImage::set_color1(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::set_color1");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_color1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.GradientImage.GenerateSimpleSprite
void HMUI::GradientImage::GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateSimpleSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateSimpleSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vh, lPreserveAspect, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, lPreserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.GenerateSlicedSprite
void HMUI::GradientImage::GenerateSlicedSprite(UnityEngine::UI::VertexHelper* vh, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateSlicedSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateSlicedSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vh, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, float elementWidthScale, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, elementWidthScale, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, elementWidthScale, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.OnPopulateMesh
void HMUI::GradientImage::OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::OnPopulateMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toFill)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.GradientImage.GenerateTiledSprite
void HMUI::GradientImage::GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateTiledSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateTiledSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toFill)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, quadPositions, color, quadUVs)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, quadPositions, color, quadUVs);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, posMin, posMax, color, uvMin, uvMax)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uvMin, uvMax);
}
// Autogenerated method: HMUI.GradientImage.GetAdjustedBorders
UnityEngine::Vector4 HMUI::GradientImage::GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GetAdjustedBorders");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetAdjustedBorders", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(border, rect)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, border, rect);
}
// Autogenerated method: HMUI.GradientImage.GenerateFilledSprite
void HMUI::GradientImage::GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateFilledSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateFilledSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toFill, preserveAspect)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, preserveAspect);
}
// Autogenerated method: HMUI.GradientImage.RadialCut
bool HMUI::GradientImage::RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::RadialCut");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "GradientImage", "RadialCut", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(xy, uv, fill, invert, corner)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, uv, fill, invert, corner);
}
// Autogenerated method: HMUI.GradientImage.RadialCut
void HMUI::GradientImage::RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::RadialCut");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "GradientImage", "RadialCut", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(xy, cos, sin, invert, corner)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, cos, sin, invert, corner);
}
// Autogenerated method: HMUI.GradientImage.GetDrawingDimensions
UnityEngine::Vector4 HMUI::GradientImage::GetDrawingDimensions(bool shouldPreserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GetDrawingDimensions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDrawingDimensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(shouldPreserveAspect)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, shouldPreserveAspect);
}
// Autogenerated method: HMUI.GradientImage..cctor
void HMUI::GradientImage::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "GradientImage", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7638
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 kVec2Zero
UnityEngine::Vector2 HMUI::ImageView::_get_kVec2Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec2Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("HMUI", "ImageView", "kVec2Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 kVec2Zero
void HMUI::ImageView::_set_kVec2Zero(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec2Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec2Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7648
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 kVec3Zero
UnityEngine::Vector3 HMUI::ImageView::_get_kVec3Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec3Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("HMUI", "ImageView", "kVec3Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 kVec3Zero
void HMUI::ImageView::_set_kVec3Zero(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec3Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec3Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7658
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 kVec4Zero
UnityEngine::Vector4 HMUI::ImageView::_get_kVec4Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec4Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("HMUI", "ImageView", "kVec4Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 kVec4Zero
void HMUI::ImageView::_set_kVec4Zero(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec4Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec4Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7668
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_VertScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_VertScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_VertScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
void HMUI::ImageView::_set_s_VertScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_VertScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_VertScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7678
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UVScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_UVScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UVScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
void HMUI::ImageView::_set_s_UVScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_UVScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UVScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7688
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UV1Scratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_UV1Scratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UV1Scratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
void HMUI::ImageView::_set_s_UV1Scratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_UV1Scratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UV1Scratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA7698
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color[] s_ColorScratch
::Array<UnityEngine::Color>* HMUI::ImageView::_get_s_ColorScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_ColorScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Color>*>("HMUI", "ImageView", "s_ColorScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color[] s_ColorScratch
void HMUI::ImageView::_set_s_ColorScratch(::Array<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_ColorScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_ColorScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA76A8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Xy
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Xy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_Xy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Xy"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Xy
void HMUI::ImageView::_set_s_Xy(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_Xy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Xy", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDA76B8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Uv
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_Uv");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Uv"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Uv
void HMUI::ImageView::_set_s_Uv(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_Uv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Uv", value));
}
// Autogenerated method: HMUI.ImageView.get_gradient
bool HMUI::ImageView::get_gradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_gradient");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_gradient", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.get_skew
float HMUI::ImageView::get_skew() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_skew");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_skew", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.set_color0
void HMUI::ImageView::set_color0(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::set_color0");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_color0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageView.set_color1
void HMUI::ImageView::set_color1(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::set_color1");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_color1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageView.GenerateSimpleSprite
void HMUI::ImageView::GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateSimpleSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateSimpleSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vh, lPreserveAspect, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, lPreserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GenerateSlicedSprite
void HMUI::ImageView::GenerateSlicedSprite(UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateSlicedSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateSlicedSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toFill, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GenerateTiledSprite
void HMUI::ImageView::GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateTiledSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateTiledSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toFill, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax, float elementWidthScale, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, posMin, posMax, color, uvMin, uvMax, elementWidthScale, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uvMin, uvMax, elementWidthScale, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, posMin, posMax, color, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.AddQuadWithHorizontalGradient
void HMUI::ImageView::AddQuadWithHorizontalGradient(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuadWithHorizontalGradient");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuadWithHorizontalGradient", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.AddQuadWithVerticalGradient
void HMUI::ImageView::AddQuadWithVerticalGradient(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuadWithVerticalGradient");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuadWithVerticalGradient", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.GenerateFilledSprite
void HMUI::ImageView::GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateFilledSprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GenerateFilledSprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toFill, preserveAspect, curvedUIRadius)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, preserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GetNumberOfElements
int HMUI::ImageView::GetNumberOfElements(float curvedUIRadius, float width) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetNumberOfElements");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "GetNumberOfElements", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(curvedUIRadius, width)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, curvedUIRadius, width);
}
// Autogenerated method: HMUI.ImageView.OnEnable
void HMUI::ImageView::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.OnPopulateMesh
void HMUI::ImageView::OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::OnPopulateMesh");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(toFill)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(vertexHelper, quadPositions, color, quadUVs)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, quadPositions, color, quadUVs);
}
// Autogenerated method: HMUI.ImageView.GetAdjustedBorders
UnityEngine::Vector4 HMUI::ImageView::GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetAdjustedBorders");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "GetAdjustedBorders", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(border, rect)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, border, rect);
}
// Autogenerated method: HMUI.ImageView.RadialCut
bool HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::RadialCut");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "RadialCut", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(xy, uv, fill, invert, corner)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, uv, fill, invert, corner);
}
// Autogenerated method: HMUI.ImageView.RadialCut
void HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::RadialCut");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", "RadialCut", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(xy, cos, sin, invert, corner)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, cos, sin, invert, corner);
}
// Autogenerated method: HMUI.ImageView.GetDrawingDimensions
UnityEngine::Vector4 HMUI::ImageView::GetDrawingDimensions(bool shouldPreserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetDrawingDimensions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDrawingDimensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(shouldPreserveAspect)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, shouldPreserveAspect);
}
// Autogenerated method: HMUI.ImageView..cctor
void HMUI::ImageView::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ImageView", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ImageView/GradientDirection
#include "HMUI/ImageView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ImageView/GradientDirection Horizontal
HMUI::ImageView::GradientDirection HMUI::ImageView::GradientDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ImageView::GradientDirection>("HMUI", "ImageView/GradientDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ImageView/GradientDirection Horizontal
void HMUI::ImageView::GradientDirection::_set_Horizontal(HMUI::ImageView::GradientDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView/GradientDirection", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ImageView/GradientDirection Vertical
HMUI::ImageView::GradientDirection HMUI::ImageView::GradientDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ImageView::GradientDirection>("HMUI", "ImageView/GradientDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ImageView/GradientDirection Vertical
void HMUI::ImageView::GradientDirection::_set_Vertical(HMUI::ImageView::GradientDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView/GradientDirection", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ImageWithHint
#include "HMUI/ImageWithHint.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ImageWithHint.set_sprite
void HMUI::ImageWithHint::set_sprite(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::set_sprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_sprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageWithHint.get_sprite
UnityEngine::Sprite* HMUI::ImageWithHint::get_sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::get_sprite");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_sprite", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageWithHint.set_hintText
void HMUI::ImageWithHint::set_hintText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::set_hintText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_hintText", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.InputFieldView
#include "HMUI/InputFieldView.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.InputFieldView/InputFieldChanged
#include "HMUI/InputFieldView_InputFieldChanged.hpp"
// Including type: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43
#include "HMUI/InputFieldView_-BlinkingCaretCoroutine-d__43.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.YieldInstruction
#include "UnityEngine/YieldInstruction.hpp"
// Including type: HMUI.UIKeyboard
#include "HMUI/UIKeyboard.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.UI.Selectable/SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kBlinkingRate
float HMUI::InputFieldView::_get_kBlinkingRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::_get_kBlinkingRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "InputFieldView", "kBlinkingRate"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kBlinkingRate
void HMUI::InputFieldView::_set_kBlinkingRate(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::_set_kBlinkingRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView", "kBlinkingRate", value));
}
// Autogenerated method: HMUI.InputFieldView.get_selectionState
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::InputFieldView::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.get_keyboardPositionOffset
UnityEngine::Vector3 HMUI::InputFieldView::get_keyboardPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_keyboardPositionOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_keyboardPositionOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.add_selectionStateDidChangeEvent
void HMUI::InputFieldView::add_selectionStateDidChangeEvent(System::Action_1<HMUI::InputFieldView::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::add_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.remove_selectionStateDidChangeEvent
void HMUI::InputFieldView::remove_selectionStateDidChangeEvent(System::Action_1<HMUI::InputFieldView::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::remove_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.get_onValueChanged
HMUI::InputFieldView::InputFieldChanged* HMUI::InputFieldView::get_onValueChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_onValueChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::InputFieldView::InputFieldChanged*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.set_onValueChanged
void HMUI::InputFieldView::set_onValueChanged(HMUI::InputFieldView::InputFieldChanged* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::set_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_onValueChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.get_useGlobalKeyboard
bool HMUI::InputFieldView::get_useGlobalKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_useGlobalKeyboard");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_useGlobalKeyboard", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.get_text
::Il2CppString* HMUI::InputFieldView::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_text");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.set_text
void HMUI::InputFieldView::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::set_text");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.ActivateKeyboard
void HMUI::InputFieldView::ActivateKeyboard(HMUI::UIKeyboard* keyboard) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::ActivateKeyboard");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ActivateKeyboard", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(keyboard)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboard);
}
// Autogenerated method: HMUI.InputFieldView.DeactivateKeyboard
void HMUI::InputFieldView::DeactivateKeyboard(HMUI::UIKeyboard* keyboard) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::DeactivateKeyboard");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DeactivateKeyboard", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(keyboard)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboard);
}
// Autogenerated method: HMUI.InputFieldView.SetText
void HMUI::InputFieldView::SetText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SetText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.ClearInput
void HMUI::InputFieldView::ClearInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::ClearInput");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearInput", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.KeyboardKeyPressed
void HMUI::InputFieldView::KeyboardKeyPressed(::Il2CppChar letter) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::KeyboardKeyPressed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "KeyboardKeyPressed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(letter)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, letter);
}
// Autogenerated method: HMUI.InputFieldView.KeyboardDeletePressed
void HMUI::InputFieldView::KeyboardDeletePressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::KeyboardDeletePressed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "KeyboardDeletePressed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.BlinkingCaretCoroutine
System::Collections::IEnumerator* HMUI::InputFieldView::BlinkingCaretCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::BlinkingCaretCoroutine");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BlinkingCaretCoroutine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdateCaretPosition
void HMUI::InputFieldView::UpdateCaretPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdateCaretPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateCaretPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdatePlaceholder
void HMUI::InputFieldView::UpdatePlaceholder() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdatePlaceholder");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdatePlaceholder", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdateClearButton
void HMUI::InputFieldView::UpdateClearButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdateClearButton");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateClearButton", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.<Awake>b__34_0
void HMUI::InputFieldView::$Awake$b__34_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::<Awake>b__34_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__34_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.Awake
void HMUI::InputFieldView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.OnDestroy
void HMUI::InputFieldView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.DoStateTransition
void HMUI::InputFieldView::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::DoStateTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state, instant)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldView/SelectionState
#include "HMUI/InputFieldView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Normal
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Normal
void HMUI::InputFieldView::SelectionState::_set_Normal(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Highlighted
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Highlighted
void HMUI::InputFieldView::SelectionState::_set_Highlighted(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Pressed
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Pressed
void HMUI::InputFieldView::SelectionState::_set_Pressed(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Disabled
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Disabled
void HMUI::InputFieldView::SelectionState::_set_Disabled(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Selected
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Selected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Selected"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Selected
void HMUI::InputFieldView::SelectionState::_set_Selected(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Selected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Selected", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldView/InputFieldChanged
#include "HMUI/InputFieldView_InputFieldChanged.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43
#include "HMUI/InputFieldView_-BlinkingCaretCoroutine-d__43.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.IDisposable.Dispose
void HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.MoveNext
bool HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::MoveNext");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
bool HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_IEnumerator_MoveNext() {
  return HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::MoveNext();
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_Generic_IEnumerator_1_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.Collections.IEnumerator.Reset
void HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.IEnumerator.Reset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.IEnumerator.get_Current");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldViewStaticAnimations
#include "HMUI/InputFieldViewStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.Awake
void HMUI::InputFieldViewStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.Start
void HMUI::InputFieldViewStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.OnEnable
void HMUI::InputFieldViewStaticAnimations::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.OnDestroy
void HMUI::InputFieldViewStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.HandleInputFieldViewSelectionStateDidChange
void HMUI::InputFieldViewStaticAnimations::HandleInputFieldViewSelectionStateDidChange(HMUI::InputFieldView::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::HandleInputFieldViewSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleInputFieldViewSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: HMUI.ModalView/<>c__DisplayClass16_0
#include "HMUI/ModalView_--c__DisplayClass16_0.hpp"
// Including type: HMUI.ModalView/<>c__DisplayClass20_0
#include "HMUI/ModalView_--c__DisplayClass20_0.hpp"
// Including type: HMUI.PanelAnimationSO
#include "HMUI/PanelAnimationSO.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView.add_blockerClickedEvent
void HMUI::ModalView::add_blockerClickedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::add_blockerClickedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_blockerClickedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ModalView.remove_blockerClickedEvent
void HMUI::ModalView::remove_blockerClickedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::remove_blockerClickedEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_blockerClickedEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ModalView.OnDisable
void HMUI::ModalView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.OnDestroy
void HMUI::ModalView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.SetupView
void HMUI::ModalView::SetupView(UnityEngine::Transform* screenTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::SetupView");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetupView", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(screenTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenTransform);
}
// Autogenerated method: HMUI.ModalView.Hide
void HMUI::ModalView::Hide(bool animated, System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::Hide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(animated, finishedCallback)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, finishedCallback);
}
// Autogenerated method: HMUI.ModalView.Show
void HMUI::ModalView::Show(bool animated, bool moveToCenter, System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::Show");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(animated, moveToCenter, finishedCallback)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, moveToCenter, finishedCallback);
}
// Autogenerated method: HMUI.ModalView.CreateBlocker
UnityEngine::GameObject* HMUI::ModalView::CreateBlocker() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::CreateBlocker");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateBlocker", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.HandleBlockerButtonClicked
void HMUI::ModalView::HandleBlockerButtonClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::HandleBlockerButtonClicked");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleBlockerButtonClicked", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.HandleParentViewControllerDidDeactivate
void HMUI::ModalView::HandleParentViewControllerDidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::HandleParentViewControllerDidDeactivate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleParentViewControllerDidDeactivate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(removedFromHierarchy, screenSystemDisabling)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ModalView.GetModalRootTransform
UnityEngine::Transform* HMUI::ModalView::GetModalRootTransform(UnityEngine::Transform* transform, UnityEngine::Canvas*& canvas, HMUI::ViewController*& viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::GetModalRootTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "ModalView", "GetModalRootTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform, canvas, viewController)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, canvas, viewController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView/<>c__DisplayClass16_0
#include "HMUI/ModalView_--c__DisplayClass16_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView/<>c__DisplayClass16_0.<Hide>b__0
void HMUI::ModalView::$$c__DisplayClass16_0::$Hide$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::$$c__DisplayClass16_0::<Hide>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Hide>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView/<>c__DisplayClass20_0
#include "HMUI/ModalView_--c__DisplayClass20_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView/<>c__DisplayClass20_0.<HandleParentViewControllerDidDeactivate>b__0
void HMUI::ModalView::$$c__DisplayClass20_0::$HandleParentViewControllerDidDeactivate$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::$$c__DisplayClass20_0::<HandleParentViewControllerDidDeactivate>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleParentViewControllerDidDeactivate>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ItemForFocussedScrolling
#include "HMUI/ItemForFocussedScrolling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollToTopOnEnable
#include "HMUI/ScrollToTopOnEnable.hpp"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollToTopOnEnable.OnEnable
void HMUI::ScrollToTopOnEnable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollToTopOnEnable::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: HMUI.ScrollView/<>c
#include "HMUI/ScrollView_--c.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass36_0
#include "HMUI/ScrollView_--c__DisplayClass36_0.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass37_0
#include "HMUI/ScrollView_--c__DisplayClass37_0.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass42_0
#include "HMUI/ScrollView_--c__DisplayClass42_0.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass42_1
#include "HMUI/ScrollView_--c__DisplayClass42_1.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.EventSystemListener
#include "HMUI/EventSystemListener.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: HMUI.ItemForFocussedScrolling
#include "HMUI/ItemForFocussedScrolling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView.get_scrollPageHeight
float HMUI::ScrollView::get_scrollPageHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_scrollPageHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_scrollPageHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_contentHeight
float HMUI::ScrollView::get_contentHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_contentHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_contentHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.Awake
void HMUI::ScrollView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.OnDestroy
void HMUI::ScrollView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.Update
void HMUI::ScrollView::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.SetContentHeight
void HMUI::ScrollView::SetContentHeight(float contentHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::SetContentHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetContentHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(contentHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, contentHeight);
}
// Autogenerated method: HMUI.ScrollView.ScrollDown
void HMUI::ScrollView::ScrollDown(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ScrollDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollToWorldPosition
void HMUI::ScrollView::ScrollToWorldPosition(UnityEngine::Vector3 worldPosition, float pageRelativePosition, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToWorldPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ScrollToWorldPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(worldPosition, pageRelativePosition, animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPosition, pageRelativePosition, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollToWorldPositionIfOutsideArea
void HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea(UnityEngine::Vector3 worldPosition, float pageRelativePosition, float relativeBoundaryStart, float relativeBoundaryEnd, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ScrollToWorldPositionIfOutsideArea", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(worldPosition, pageRelativePosition, relativeBoundaryStart, relativeBoundaryEnd, animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPosition, pageRelativePosition, relativeBoundaryStart, relativeBoundaryEnd, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollTo
void HMUI::ScrollView::ScrollTo(float destinationPosY, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollTo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ScrollTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(destinationPosY, animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destinationPosY, animated);
}
// Autogenerated method: HMUI.ScrollView.WorldPositionToScrollViewPosition
UnityEngine::Vector2 HMUI::ScrollView::WorldPositionToScrollViewPosition(UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::WorldPositionToScrollViewPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "WorldPositionToScrollViewPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(worldPosition)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, worldPosition);
}
// Autogenerated method: HMUI.ScrollView.SetDestinationPosY
void HMUI::ScrollView::SetDestinationPosY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::SetDestinationPosY");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDestinationPosY", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScrollView.UpdateVerticalScrollIndicator
void HMUI::ScrollView::UpdateVerticalScrollIndicator(float posY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::UpdateVerticalScrollIndicator");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateVerticalScrollIndicator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(posY)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, posY);
}
// Autogenerated method: HMUI.ScrollView.PageUpButtonPressed
void HMUI::ScrollView::PageUpButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::PageUpButtonPressed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PageUpButtonPressed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.PageDownButtonPressed
void HMUI::ScrollView::PageDownButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::PageDownButtonPressed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PageDownButtonPressed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.RefreshButtons
void HMUI::ScrollView::RefreshButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::RefreshButtons");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshButtons", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.HandlePointerDidEnter
void HMUI::ScrollView::HandlePointerDidEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandlePointerDidEnter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandlePointerDidEnter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.ScrollView.HandlePointerDidExit
void HMUI::ScrollView::HandlePointerDidExit(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandlePointerDidExit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandlePointerDidExit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.ScrollView.HandleJoystickWasNotCenteredThisFrame
void HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame(UnityEngine::Vector2 deltaPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleJoystickWasNotCenteredThisFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(deltaPos)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaPos);
}
// Autogenerated method: HMUI.ScrollView.HandleJoystickWasCenteredThisFrame
void HMUI::ScrollView::HandleJoystickWasCenteredThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandleJoystickWasCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleJoystickWasCenteredThisFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.<Awake>b__25_0
float HMUI::ScrollView::$Awake$b__25_0(HMUI::ItemForFocussedScrolling* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::<Awake>b__25_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__25_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/ScrollType
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollType PageSize
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_PageSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_PageSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "PageSize"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollType PageSize
void HMUI::ScrollView::ScrollType::_set_PageSize(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_PageSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "PageSize", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollType FixedCellSize
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_FixedCellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_FixedCellSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "FixedCellSize"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollType FixedCellSize
void HMUI::ScrollView::ScrollType::_set_FixedCellSize(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_FixedCellSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "FixedCellSize", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollType FocusItems
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_FocusItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_FocusItems");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "FocusItems"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollType FocusItems
void HMUI::ScrollView::ScrollType::_set_FocusItems(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_FocusItems");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "FocusItems", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/ScrollDirection
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection None
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection None
void HMUI::ScrollView::ScrollDirection::_set_None(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection Up
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection Up
void HMUI::ScrollView::ScrollDirection::_set_Up(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection Down
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection Down
void HMUI::ScrollView::ScrollDirection::_set_Down(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Down", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c
#include "HMUI/ScrollView_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.ScrollView/<>c <>9
HMUI::ScrollView::$$c* HMUI::ScrollView::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::ScrollView::$$c*>("HMUI", "ScrollView/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.ScrollView/<>c <>9
void HMUI::ScrollView::$$c::_set_$$9(HMUI::ScrollView::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Single,System.Single> <>9__25_1
System::Func_2<float, float>* HMUI::ScrollView::$$c::_get_$$9__25_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9__25_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<float, float>*>("HMUI", "ScrollView/<>c", "<>9__25_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Single,System.Single> <>9__25_1
void HMUI::ScrollView::$$c::_set_$$9__25_1(System::Func_2<float, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9__25_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9__25_1", value)));
}
// Autogenerated method: HMUI.ScrollView/<>c..cctor
void HMUI::ScrollView::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ScrollView/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.ScrollView/<>c.<Awake>b__25_1
float HMUI::ScrollView::$$c::$Awake$b__25_1(float i) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::<Awake>b__25_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__25_1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(i))));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, i);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c__DisplayClass36_0
#include "HMUI/ScrollView_--c__DisplayClass36_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/<>c__DisplayClass36_0.<PageUpButtonPressed>b__0
bool HMUI::ScrollView::$$c__DisplayClass36_0::$PageUpButtonPressed$b__0(float posy) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass36_0::<PageUpButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PageUpButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(posy))));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, posy);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c__DisplayClass37_0
#include "HMUI/ScrollView_--c__DisplayClass37_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/<>c__DisplayClass37_0.<PageDownButtonPressed>b__0
bool HMUI::ScrollView::$$c__DisplayClass37_0::$PageDownButtonPressed$b__0(float posy) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass37_0::<PageDownButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PageDownButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(posy))));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, posy);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c__DisplayClass42_0
#include "HMUI/ScrollView_--c__DisplayClass42_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/<>c__DisplayClass42_0.<HandleJoystickWasCenteredThisFrame>b__0
bool HMUI::ScrollView::$$c__DisplayClass42_0::$HandleJoystickWasCenteredThisFrame$b__0(float posy) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass42_0::<HandleJoystickWasCenteredThisFrame>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleJoystickWasCenteredThisFrame>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(posy))));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, posy);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c__DisplayClass42_1
#include "HMUI/ScrollView_--c__DisplayClass42_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/<>c__DisplayClass42_1.<HandleJoystickWasCenteredThisFrame>b__1
bool HMUI::ScrollView::$$c__DisplayClass42_1::$HandleJoystickWasCenteredThisFrame$b__1(float posy) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass42_1::<HandleJoystickWasCenteredThisFrame>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleJoystickWasCenteredThisFrame>b__1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(posy))));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, posy);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScrollViewItemForVisibilityController
#include "HMUI/ScrollViewItemForVisibilityController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollViewItemForVisibilityController.GetWorldCorners
void HMUI::ScrollViewItemForVisibilityController::GetWorldCorners(::Array<UnityEngine::Vector3>* fourCornersArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemForVisibilityController::GetWorldCorners");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWorldCorners", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(fourCornersArray)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fourCornersArray);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScrollViewItemsVisibilityController
#include "HMUI/ScrollViewItemsVisibilityController.hpp"
// Including type: HMUI.ScrollViewItemsVisibilityController/<>c
#include "HMUI/ScrollViewItemsVisibilityController_--c.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: HMUI.ScrollViewItemForVisibilityController
#include "HMUI/ScrollViewItemForVisibilityController.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.Start
void HMUI::ScrollViewItemsVisibilityController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.Update
void HMUI::ScrollViewItemsVisibilityController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.UpdateVisibilityUpDirection
void HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityUpDirection(float newContentAnchoredPositionY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityUpDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateVisibilityUpDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newContentAnchoredPositionY)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newContentAnchoredPositionY);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController.UpdateVisibilityDownDirection
void HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityDownDirection(float newContentAnchoredPositionY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::UpdateVisibilityDownDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateVisibilityDownDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newContentAnchoredPositionY)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newContentAnchoredPositionY);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollViewItemsVisibilityController/<>c
#include "HMUI/ScrollViewItemsVisibilityController_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: HMUI.ScrollViewItemForVisibilityController
#include "HMUI/ScrollViewItemForVisibilityController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.ScrollViewItemsVisibilityController/<>c <>9
HMUI::ScrollViewItemsVisibilityController::$$c* HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::ScrollViewItemsVisibilityController::$$c*>("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.ScrollViewItemsVisibilityController/<>c <>9
void HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9(HMUI::ScrollViewItemsVisibilityController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_0
System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>*>("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_0
void HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_0(System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_1
System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_get_$$9__11_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>*>("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Tuple`2<HMUI.ScrollViewItemForVisibilityController,System.Single>,System.Single> <>9__11_1
void HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_1(System::Func_2<System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::_set_$$9__11_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollViewItemsVisibilityController/<>c", "<>9__11_1", value)));
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController/<>c..cctor
void HMUI::ScrollViewItemsVisibilityController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ScrollViewItemsVisibilityController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController/<>c.<Start>b__11_0
float HMUI::ScrollViewItemsVisibilityController::$$c::$Start$b__11_0(System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::<Start>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__11_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated method: HMUI.ScrollViewItemsVisibilityController/<>c.<Start>b__11_1
float HMUI::ScrollViewItemsVisibilityController::$$c::$Start$b__11_1(System::Tuple_2<HMUI::ScrollViewItemForVisibilityController*, float>* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollViewItemsVisibilityController::$$c::<Start>b__11_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__11_1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SelectableCell
#include "HMUI/SelectableCell.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SelectableCell.add_selectionDidChangeEvent
void HMUI::SelectableCell::add_selectionDidChangeEvent(System::Action_3<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::add_selectionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_selectionDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.remove_selectionDidChangeEvent
void HMUI::SelectableCell::remove_selectionDidChangeEvent(System::Action_3<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType, ::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::remove_selectionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_selectionDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.add_highlightDidChangeEvent
void HMUI::SelectableCell::add_highlightDidChangeEvent(System::Action_2<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::add_highlightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_highlightDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.remove_highlightDidChangeEvent
void HMUI::SelectableCell::remove_highlightDidChangeEvent(System::Action_2<HMUI::SelectableCell*, HMUI::SelectableCell::TransitionType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::remove_highlightDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_highlightDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.get_highlighted
bool HMUI::SelectableCell::get_highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::get_highlighted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_highlighted", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.set_highlighted
void HMUI::SelectableCell::set_highlighted(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::set_highlighted");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_highlighted", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.get_selected
bool HMUI::SelectableCell::get_selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::get_selected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_selected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.set_selected
void HMUI::SelectableCell::set_selected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::set_selected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_selected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SelectableCell.Start
void HMUI::SelectableCell::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.SetSelected
void HMUI::SelectableCell::SetSelected(bool value, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner, bool ignoreCurrentValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::SetSelected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetSelected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value, transitionType, changeOwner, ignoreCurrentValue)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, transitionType, changeOwner, ignoreCurrentValue);
}
// Autogenerated method: HMUI.SelectableCell.ClearHighlight
void HMUI::SelectableCell::ClearHighlight(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::ClearHighlight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearHighlight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transitionType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: HMUI.SelectableCell.SetHighlight
void HMUI::SelectableCell::SetHighlight(bool value, HMUI::SelectableCell::TransitionType transitionType, bool ignoreCurrentValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::SetHighlight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetHighlight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value, transitionType, ignoreCurrentValue)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, transitionType, ignoreCurrentValue);
}
// Autogenerated method: HMUI.SelectableCell.InternalToggle
void HMUI::SelectableCell::InternalToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::InternalToggle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalToggle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCell.SelectionDidChange
void HMUI::SelectableCell::SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::SelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transitionType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: HMUI.SelectableCell.HighlightDidChange
void HMUI::SelectableCell::HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::HighlightDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HighlightDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transitionType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transitionType);
}
// Autogenerated method: HMUI.SelectableCell.OnPointerClick
void HMUI::SelectableCell::OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnPointerClick");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.SelectableCell.OnSubmit
void HMUI::SelectableCell::OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnSubmit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnSubmit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.SelectableCell.OnPointerEnter
void HMUI::SelectableCell::OnPointerEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnPointerEnter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.SelectableCell.OnPointerExit
void HMUI::SelectableCell::OnPointerExit(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::OnPointerExit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPointerExit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SelectableCell/TransitionType
#include "HMUI/SelectableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.SelectableCell/TransitionType Instant
HMUI::SelectableCell::TransitionType HMUI::SelectableCell::TransitionType::_get_Instant() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_get_Instant");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SelectableCell::TransitionType>("HMUI", "SelectableCell/TransitionType", "Instant"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SelectableCell/TransitionType Instant
void HMUI::SelectableCell::TransitionType::_set_Instant(HMUI::SelectableCell::TransitionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_set_Instant");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SelectableCell/TransitionType", "Instant", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.SelectableCell/TransitionType Animated
HMUI::SelectableCell::TransitionType HMUI::SelectableCell::TransitionType::_get_Animated() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_get_Animated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SelectableCell::TransitionType>("HMUI", "SelectableCell/TransitionType", "Animated"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SelectableCell/TransitionType Animated
void HMUI::SelectableCell::TransitionType::_set_Animated(HMUI::SelectableCell::TransitionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCell::TransitionType::_set_Animated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SelectableCell/TransitionType", "Animated", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SelectableCellStaticAnimations
#include "HMUI/SelectableCellStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SelectableCellStaticAnimations.Awake
void HMUI::SelectableCellStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.Start
void HMUI::SelectableCellStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.OnDestroy
void HMUI::SelectableCellStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.HandleSelectionDidChange
void HMUI::SelectableCellStaticAnimations::HandleSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::HandleSelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleSelectionDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(selectableCell, transitionType, changeOwner)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectableCell, transitionType, changeOwner);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.HandleHighlightDidChange
void HMUI::SelectableCellStaticAnimations::HandleHighlightDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::HandleHighlightDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleHighlightDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(selectableCell, transitionType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectableCell, transitionType);
}
// Autogenerated method: HMUI.SelectableCellStaticAnimations.RefreshVisuals
void HMUI::SelectableCellStaticAnimations::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SelectableCellStaticAnimations::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SetPropertyUtility
#include "HMUI/SetPropertyUtility.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SetPropertyUtility.SetColor
bool HMUI::SetPropertyUtility::SetColor(UnityEngine::Color& currentValue, UnityEngine::Color newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SetPropertyUtility::SetColor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("HMUI", "SetPropertyUtility", "SetColor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(currentValue, newValue)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, currentValue, newValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SimpleTextDropdown
#include "HMUI/SimpleTextDropdown.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: SimpleTextTableCell
#include "GlobalNamespace/SimpleTextTableCell.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCellReuseIdentifier
::Il2CppString* HMUI::SimpleTextDropdown::_get_kCellReuseIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::_get_kCellReuseIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("HMUI", "SimpleTextDropdown", "kCellReuseIdentifier"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCellReuseIdentifier
void HMUI::SimpleTextDropdown::_set_kCellReuseIdentifier(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::_set_kCellReuseIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SimpleTextDropdown", "kCellReuseIdentifier", value));
}
// Autogenerated method: HMUI.SimpleTextDropdown.LazyInit
void HMUI::SimpleTextDropdown::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::LazyInit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.SetTexts
void HMUI::SimpleTextDropdown::SetTexts(System::Collections::Generic::IReadOnlyList_1<::Il2CppString*>* texts) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::SetTexts");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetTexts", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(texts)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, texts);
}
// Autogenerated method: HMUI.SimpleTextDropdown.HandleDidSelectCellWithIdx
void HMUI::SimpleTextDropdown::HandleDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropdownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::HandleDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dropdownWithTableView, idx)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropdownWithTableView, idx);
}
// Autogenerated method: HMUI.SimpleTextDropdown.OnDestroy
void HMUI::SimpleTextDropdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.Init
void HMUI::SimpleTextDropdown::Init(HMUI::TableView::IDataSource* initTableViewDataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::Init");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(initTableViewDataSource)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, initTableViewDataSource);
}
// Autogenerated method: HMUI.SimpleTextDropdown.SelectCellWithIdx
void HMUI::SimpleTextDropdown::SelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::SelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: HMUI.SimpleTextDropdown.CellSize
float HMUI::SimpleTextDropdown::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::CellSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.NumberOfCells
int HMUI::SimpleTextDropdown::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::NumberOfCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SimpleTextDropdown.CellForIdx
HMUI::TableCell* HMUI::SimpleTextDropdown::CellForIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SimpleTextDropdown::CellForIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView, idx)));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SwitchView
#include "HMUI/SwitchView.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SwitchView.Awake
void HMUI::SwitchView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SwitchView.Start
void HMUI::SwitchView::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SwitchView.OnDestroy
void HMUI::SwitchView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SwitchView.HandleOnValueChanged
void HMUI::SwitchView::HandleOnValueChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::HandleOnValueChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleOnValueChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SwitchView.HandleStateDidChange
void HMUI::SwitchView::HandleStateDidChange(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::HandleStateDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleStateDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SwitchView.RefreshVisuals
void HMUI::SwitchView::RefreshVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::RefreshVisuals");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshVisuals", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SwitchView/AnimationType
#include "HMUI/SwitchView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.SwitchView/AnimationType OnOff
HMUI::SwitchView::AnimationType HMUI::SwitchView::AnimationType::_get_OnOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_get_OnOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SwitchView::AnimationType>("HMUI", "SwitchView/AnimationType", "OnOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SwitchView/AnimationType OnOff
void HMUI::SwitchView::AnimationType::_set_OnOff(HMUI::SwitchView::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_set_OnOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SwitchView/AnimationType", "OnOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.SwitchView/AnimationType SelectedState
HMUI::SwitchView::AnimationType HMUI::SwitchView::AnimationType::_get_SelectedState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_get_SelectedState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::SwitchView::AnimationType>("HMUI", "SwitchView/AnimationType", "SelectedState"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.SwitchView/AnimationType SelectedState
void HMUI::SwitchView::AnimationType::_set_SelectedState(HMUI::SwitchView::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SwitchView::AnimationType::_set_SelectedState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "SwitchView/AnimationType", "SelectedState", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableViewSelectionType
#include "HMUI/TableViewSelectionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewSelectionType None
HMUI::TableViewSelectionType HMUI::TableViewSelectionType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewSelectionType>("HMUI", "TableViewSelectionType", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewSelectionType None
void HMUI::TableViewSelectionType::_set_None(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewSelectionType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewSelectionType Single
HMUI::TableViewSelectionType HMUI::TableViewSelectionType::_get_Single() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_get_Single");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewSelectionType>("HMUI", "TableViewSelectionType", "Single"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewSelectionType Single
void HMUI::TableViewSelectionType::_set_Single(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_set_Single");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewSelectionType", "Single", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewSelectionType Multiple
HMUI::TableViewSelectionType HMUI::TableViewSelectionType::_get_Multiple() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_get_Multiple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewSelectionType>("HMUI", "TableViewSelectionType", "Multiple"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewSelectionType Multiple
void HMUI::TableViewSelectionType::_set_Multiple(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewSelectionType::_set_Multiple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewSelectionType", "Multiple", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
// Including type: HMUI.TableViewSelectionType
#include "HMUI/TableViewSelectionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ITableCellOwner.get_selectionType
HMUI::TableViewSelectionType HMUI::ITableCellOwner::get_selectionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ITableCellOwner::get_selectionType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_selectionType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableViewSelectionType, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ITableCellOwner.get_canSelectSelectedCell
bool HMUI::ITableCellOwner::get_canSelectSelectedCell() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ITableCellOwner::get_canSelectSelectedCell");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_canSelectSelectedCell", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ITableCellOwner.get_numberOfCells
int HMUI::ITableCellOwner::get_numberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ITableCellOwner::get_numberOfCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_numberOfCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SectionTableView
#include "HMUI/SectionTableView.hpp"
// Including type: HMUI.SectionTableView/IDataSource
#include "HMUI/SectionTableView_IDataSource.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: HMUI.TableViewScroller/ScrollPositionType
#include "HMUI/TableViewScroller_ScrollPositionType.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SectionTableView.add_didSelectRowInSectionEvent
void HMUI::SectionTableView::add_didSelectRowInSectionEvent(System::Action_3<HMUI::SectionTableView*, int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::add_didSelectRowInSectionEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didSelectRowInSectionEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.remove_didSelectRowInSectionEvent
void HMUI::SectionTableView::remove_didSelectRowInSectionEvent(System::Action_3<HMUI::SectionTableView*, int, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::remove_didSelectRowInSectionEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didSelectRowInSectionEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.add_didSelectHeaderEvent
void HMUI::SectionTableView::add_didSelectHeaderEvent(System::Action_2<HMUI::SectionTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::add_didSelectHeaderEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didSelectHeaderEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.remove_didSelectHeaderEvent
void HMUI::SectionTableView::remove_didSelectHeaderEvent(System::Action_2<HMUI::SectionTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::remove_didSelectHeaderEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didSelectHeaderEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.get_dataSource
HMUI::SectionTableView::IDataSource* HMUI::SectionTableView::get_dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::get_dataSource");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_dataSource", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::SectionTableView::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.set_dataSource
void HMUI::SectionTableView::set_dataSource(HMUI::SectionTableView::IDataSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::set_dataSource");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_dataSource", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SectionTableView.IsSectionUnfolded
bool HMUI::SectionTableView::IsSectionUnfolded(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IsSectionUnfolded");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsSectionUnfolded", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(section)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView.ReloadData
void HMUI::SectionTableView::ReloadData(bool resetFoldState) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::ReloadData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(resetFoldState)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resetFoldState);
}
// Autogenerated method: HMUI.SectionTableView.UnfoldAllSections
void HMUI::SectionTableView::UnfoldAllSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::UnfoldAllSections");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UnfoldAllSections", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.FoldAll
void HMUI::SectionTableView::FoldAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::FoldAll");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FoldAll", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.UnfoldSection
void HMUI::SectionTableView::UnfoldSection(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::UnfoldSection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UnfoldSection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(section)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView.FoldSection
void HMUI::SectionTableView::FoldSection(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::FoldSection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FoldSection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(section)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView.ScrollToRow
void HMUI::SectionTableView::ScrollToRow(int section, int row, HMUI::TableViewScroller::ScrollPositionType scrollPositionType, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::ScrollToRow");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ScrollToRow", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(section, row, scrollPositionType, animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, section, row, scrollPositionType, animated);
}
// Autogenerated method: HMUI.SectionTableView.SectionAndRowForBaseRow
void HMUI::SectionTableView::SectionAndRowForBaseRow(int baseRow, int& section, int& row, bool& isSectionHeader) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::SectionAndRowForBaseRow");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SectionAndRowForBaseRow", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(baseRow, section, row, isSectionHeader)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, baseRow, section, row, isSectionHeader);
}
// Autogenerated method: HMUI.SectionTableView.CellSize
float HMUI::SectionTableView::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::CellSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.NumberOfCells
int HMUI::SectionTableView::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::NumberOfCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.CellForIdx
HMUI::TableCell* HMUI::SectionTableView::CellForIdx(HMUI::TableView* tableView, int baseRow) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::CellForIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView, baseRow)));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, baseRow);
}
// Autogenerated method: HMUI.SectionTableView.ReloadData
void HMUI::SectionTableView::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::ReloadData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView.DidSelectCellWithIdx
void HMUI::SectionTableView::DidSelectCellWithIdx(int baseRow) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::DidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(baseRow)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, baseRow);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SectionTableView/IDataSource
#include "HMUI/SectionTableView_IDataSource.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SectionTableView/IDataSource.RowHeight
float HMUI::SectionTableView::IDataSource::RowHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::RowHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RowHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView/IDataSource.NumberOfSections
int HMUI::SectionTableView::IDataSource::NumberOfSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::NumberOfSections");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "NumberOfSections", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SectionTableView/IDataSource.NumberOfRowsInSection
int HMUI::SectionTableView::IDataSource::NumberOfRowsInSection(int section) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::NumberOfRowsInSection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "NumberOfRowsInSection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(section)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, section);
}
// Autogenerated method: HMUI.SectionTableView/IDataSource.CellForSectionHeader
HMUI::TableCell* HMUI::SectionTableView::IDataSource::CellForSectionHeader(int section, bool unfolded) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::CellForSectionHeader");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellForSectionHeader", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(section, unfolded)));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, section, unfolded);
}
// Autogenerated method: HMUI.SectionTableView/IDataSource.CellForRowInSection
HMUI::TableCell* HMUI::SectionTableView::IDataSource::CellForRowInSection(int section, int row) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::IDataSource::CellForRowInSection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellForRowInSection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(section, row)));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, section, row);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableCell.get_reuseIdentifier
::Il2CppString* HMUI::TableCell::get_reuseIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::get_reuseIdentifier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_reuseIdentifier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.set_reuseIdentifier
void HMUI::TableCell::set_reuseIdentifier(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::set_reuseIdentifier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_reuseIdentifier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableCell.get_idx
int HMUI::TableCell::get_idx() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::get_idx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_idx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.set_idx
void HMUI::TableCell::set_idx(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::set_idx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_idx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableCell.get_tableCellOwner
HMUI::ITableCellOwner* HMUI::TableCell::get_tableCellOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::get_tableCellOwner");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_tableCellOwner", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ITableCellOwner*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.TableViewSetup
void HMUI::TableCell::TableViewSetup(HMUI::ITableCellOwner* tableCellOwner, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::TableViewSetup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TableViewSetup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableCellOwner, idx)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableCellOwner, idx);
}
// Autogenerated method: HMUI.TableCell.MoveIdx
void HMUI::TableCell::MoveIdx(int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::MoveIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(offset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset);
}
// Autogenerated method: HMUI.TableCell.__WasPreparedForReuse
void HMUI::TableCell::__WasPreparedForReuse() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::__WasPreparedForReuse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "__WasPreparedForReuse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.WasPreparedForReuse
void HMUI::TableCell::WasPreparedForReuse() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::WasPreparedForReuse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "WasPreparedForReuse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableCell.InternalToggle
void HMUI::TableCell::InternalToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableCell::InternalToggle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalToggle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: HMUI.TableView/CellsGroup
#include "HMUI/TableView_CellsGroup.hpp"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.TableViewScroller/ScrollPositionType
#include "HMUI/TableViewScroller_ScrollPositionType.hpp"
// Including type: UnityEngine.UI.ScrollRect
#include "UnityEngine/UI/ScrollRect.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: UnityEngine.RectTransform/Axis
#include "UnityEngine/RectTransform_Axis.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableView.set_selectionType
void HMUI::TableView::set_selectionType(HMUI::TableViewSelectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::set_selectionType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_selectionType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didSelectCellWithIdxEvent
void HMUI::TableView::add_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didSelectCellWithIdxEvent
void HMUI::TableView::remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didReloadDataEvent
void HMUI::TableView::add_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didReloadDataEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didReloadDataEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didReloadDataEvent
void HMUI::TableView::remove_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didReloadDataEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didReloadDataEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didInsertCellsEvent
void HMUI::TableView::add_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didInsertCellsEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didInsertCellsEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didInsertCellsEvent
void HMUI::TableView::remove_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didInsertCellsEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didInsertCellsEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didDeleteCellsEvent
void HMUI::TableView::add_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didDeleteCellsEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didDeleteCellsEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didDeleteCellsEvent
void HMUI::TableView::remove_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didDeleteCellsEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didDeleteCellsEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.add_didChangeRectSize
void HMUI::TableView::add_didChangeRectSize(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::add_didChangeRectSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_didChangeRectSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.remove_didChangeRectSize
void HMUI::TableView::remove_didChangeRectSize(System::Action_1<HMUI::TableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::remove_didChangeRectSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_didChangeRectSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableView.get_dataSource
HMUI::TableView::IDataSource* HMUI::TableView::get_dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_dataSource");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_dataSource", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableView::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.SetDataSource
void HMUI::TableView::SetDataSource(HMUI::TableView::IDataSource* newDataSource, bool reloadData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::SetDataSource");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDataSource", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newDataSource, reloadData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newDataSource, reloadData);
}
// Autogenerated method: HMUI.TableView.get_visibleCells
System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>* HMUI::TableView::get_visibleCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_visibleCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_visibleCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_viewportTransform
UnityEngine::RectTransform* HMUI::TableView::get_viewportTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_viewportTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_viewportTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_contentTransform
UnityEngine::RectTransform* HMUI::TableView::get_contentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_contentTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_contentTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_scrollRect
UnityEngine::UI::ScrollRect* HMUI::TableView::get_scrollRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_scrollRect");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_scrollRect", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::ScrollRect*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_cellSize
float HMUI::TableView::get_cellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_cellSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_cellSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_tableType
HMUI::TableView::TableType HMUI::TableView::get_tableType() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_tableType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_tableType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableView::TableType, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.Awake
void HMUI::TableView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.OnEnable
void HMUI::TableView::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.LazyInit
void HMUI::TableView::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::LazyInit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.Hide
void HMUI::TableView::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::Hide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.Show
void HMUI::TableView::Show() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::Show");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.RefreshContentSize
void HMUI::TableView::RefreshContentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::RefreshContentSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshContentSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.RefreshCellsContent
void HMUI::TableView::RefreshCellsContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::RefreshCellsContent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshCellsContent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.GetVisibleCellsIdRange
System::Tuple_2<int, int>* HMUI::TableView::GetVisibleCellsIdRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::GetVisibleCellsIdRange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetVisibleCellsIdRange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Tuple_2<int, int>*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.RefreshCells
void HMUI::TableView::RefreshCells(bool forcedVisualsRefresh, bool forcedContentRefresh) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::RefreshCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(forcedVisualsRefresh, forcedContentRefresh)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, forcedVisualsRefresh, forcedContentRefresh);
}
// Autogenerated method: HMUI.TableView.LayoutCellForIdx
void HMUI::TableView::LayoutCellForIdx(HMUI::TableCell* cell, int idx, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::LayoutCellForIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LayoutCellForIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cell, idx, offset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cell, idx, offset);
}
// Autogenerated method: HMUI.TableView.AddCellToReusableCells
void HMUI::TableView::AddCellToReusableCells(HMUI::TableCell* cell) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::AddCellToReusableCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddCellToReusableCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(cell)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cell);
}
// Autogenerated method: HMUI.TableView.HandleScrollRectValueChanged
void HMUI::TableView::HandleScrollRectValueChanged(UnityEngine::Vector2 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::HandleScrollRectValueChanged");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleScrollRectValueChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pos)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: HMUI.TableView.HandleCellSelectionDidChange
void HMUI::TableView::HandleCellSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::HandleCellSelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleCellSelectionDidChange", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(selectableCell, transitionType, changeOwner)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectableCell, transitionType, changeOwner);
}
// Autogenerated method: HMUI.TableView.DidSelectCellWithIdx
void HMUI::TableView::DidSelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::DidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: HMUI.TableView.ReloadData
void HMUI::TableView::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ReloadData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.InsertCells
void HMUI::TableView::InsertCells(int idx, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::InsertCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InsertCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx, count)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, count);
}
// Autogenerated method: HMUI.TableView.DeleteCells
void HMUI::TableView::DeleteCells(int idx, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::DeleteCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DeleteCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx, count)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, count);
}
// Autogenerated method: HMUI.TableView.DequeueReusableCellForIdentifier
HMUI::TableCell* HMUI::TableView::DequeueReusableCellForIdentifier(::Il2CppString* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::DequeueReusableCellForIdentifier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DequeueReusableCellForIdentifier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(identifier)));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, identifier);
}
// Autogenerated method: HMUI.TableView.SelectCellWithIdx
void HMUI::TableView::SelectCellWithIdx(int idx, bool callbackTable) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::SelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx, callbackTable)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, callbackTable);
}
// Autogenerated method: HMUI.TableView.ClearSelection
void HMUI::TableView::ClearSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.ClearHighlights
void HMUI::TableView::ClearHighlights() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ClearHighlights");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearHighlights", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.ScrollToCellWithIdx
void HMUI::TableView::ScrollToCellWithIdx(int idx, HMUI::TableViewScroller::ScrollPositionType scrollPositionType, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ScrollToCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ScrollToCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx, scrollPositionType, animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, scrollPositionType, animated);
}
// Autogenerated method: HMUI.TableView.ChangeRectSize
void HMUI::TableView::ChangeRectSize(UnityEngine::RectTransform::Axis axis, float size) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::ChangeRectSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ChangeRectSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(axis, size)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, axis, size);
}
// Autogenerated method: HMUI.TableView.get_selectionType
HMUI::TableViewSelectionType HMUI::TableView::get_selectionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_selectionType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_selectionType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableViewSelectionType, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_canSelectSelectedCell
bool HMUI::TableView::get_canSelectSelectedCell() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_canSelectSelectedCell");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_canSelectSelectedCell", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView.get_numberOfCells
int HMUI::TableView::get_numberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::get_numberOfCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_numberOfCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableView/TableType
#include "HMUI/TableView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TableView/TableType Vertical
HMUI::TableView::TableType HMUI::TableView::TableType::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableView::TableType>("HMUI", "TableView/TableType", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableView/TableType Vertical
void HMUI::TableView::TableType::_set_Vertical(HMUI::TableView::TableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableView/TableType", "Vertical", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableView/TableType Horizontal
HMUI::TableView::TableType HMUI::TableView::TableType::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableView::TableType>("HMUI", "TableView/TableType", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableView/TableType Horizontal
void HMUI::TableView::TableType::_set_Horizontal(HMUI::TableView::TableType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::TableType::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableView/TableType", "Horizontal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableView/CellsGroup
#include "HMUI/TableView_CellsGroup.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableView/CellsGroup.get_reuseIdentifier
::Il2CppString* HMUI::TableView::CellsGroup::get_reuseIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::CellsGroup::get_reuseIdentifier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_reuseIdentifier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView/CellsGroup.get_cells
System::Collections::Generic::List_1<HMUI::TableCell*>* HMUI::TableView::CellsGroup::get_cells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::CellsGroup::get_cells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_cells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<HMUI::TableCell*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TableView/IDataSource.CellSize
float HMUI::TableView::IDataSource::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::IDataSource::CellSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView/IDataSource.NumberOfCells
int HMUI::TableView::IDataSource::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::IDataSource::NumberOfCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableView/IDataSource.CellForIdx
HMUI::TableCell* HMUI::TableView::IDataSource::CellForIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::IDataSource::CellForIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView, idx)));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableViewScroller
#include "HMUI/TableViewScroller.hpp"
// Including type: HMUI.TableViewScroller/ScrollPositionType
#include "HMUI/TableViewScroller_ScrollPositionType.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.EventSystemListener
#include "HMUI/EventSystemListener.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kJoystickScrollSpeed
float HMUI::TableViewScroller::_get_kJoystickScrollSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::_get_kJoystickScrollSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "TableViewScroller", "kJoystickScrollSpeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kJoystickScrollSpeed
void HMUI::TableViewScroller::_set_kJoystickScrollSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::_set_kJoystickScrollSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller", "kJoystickScrollSpeed", value));
}
// Autogenerated method: HMUI.TableViewScroller.add_positionDidChangeEvent
void HMUI::TableViewScroller::add_positionDidChangeEvent(System::Action_2<HMUI::TableViewScroller*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::add_positionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_positionDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableViewScroller.remove_positionDidChangeEvent
void HMUI::TableViewScroller::remove_positionDidChangeEvent(System::Action_2<HMUI::TableViewScroller*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::remove_positionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_positionDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableViewScroller.get_position
float HMUI::TableViewScroller::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::get_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.set_position
void HMUI::TableViewScroller::set_position(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::set_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TableViewScroller.get_targetPosition
float HMUI::TableViewScroller::get_targetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::get_targetPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_targetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.get_scrollableSize
float HMUI::TableViewScroller::get_scrollableSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::get_scrollableSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_scrollableSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.Init
void HMUI::TableViewScroller::Init(HMUI::TableView* tableView, UnityEngine::UI::Button* pageUpButton, UnityEngine::UI::Button* pageDownButton, HMUI::VerticalScrollIndicator* verticalScrollIndicator, HMUI::EventSystemListener* eventSystemListener, GlobalNamespace::IVRPlatformHelper* platformHelper, bool hideScrollButtonsIfNotNeeded, bool hideScrollIndicatorIfNotNeeded) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::Init");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView, pageUpButton, pageDownButton, verticalScrollIndicator, eventSystemListener, platformHelper, hideScrollButtonsIfNotNeeded, hideScrollIndicatorIfNotNeeded)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView, pageUpButton, pageDownButton, verticalScrollIndicator, eventSystemListener, platformHelper, hideScrollButtonsIfNotNeeded, hideScrollIndicatorIfNotNeeded);
}
// Autogenerated method: HMUI.TableViewScroller.OnDestroy
void HMUI::TableViewScroller::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.ScrollToCellWithIdx
void HMUI::TableViewScroller::ScrollToCellWithIdx(int idx, HMUI::TableViewScroller::ScrollPositionType scrollPositionType, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollToCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ScrollToCellWithIdx", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(idx, scrollPositionType, animated)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, scrollPositionType, animated);
}
// Autogenerated method: HMUI.TableViewScroller.Update
void HMUI::TableViewScroller::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.UpdateVerticalScrollIndicator
void HMUI::TableViewScroller::UpdateVerticalScrollIndicator(float posY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::UpdateVerticalScrollIndicator");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateVerticalScrollIndicator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(posY)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, posY);
}
// Autogenerated method: HMUI.TableViewScroller.GetNumberOfVisibleCells
float HMUI::TableViewScroller::GetNumberOfVisibleCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::GetNumberOfVisibleCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetNumberOfVisibleCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.RefreshScrollableSize
void HMUI::TableViewScroller::RefreshScrollableSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::RefreshScrollableSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshScrollableSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.HandleTableViewDidReloadData
void HMUI::TableViewScroller::HandleTableViewDidReloadData(HMUI::TableView* tableView) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandleTableViewDidReloadData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleTableViewDidReloadData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView);
}
// Autogenerated method: HMUI.TableViewScroller.HandleTableViewDidInsertCells
void HMUI::TableViewScroller::HandleTableViewDidInsertCells(HMUI::TableView* tableView) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandleTableViewDidInsertCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleTableViewDidInsertCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView);
}
// Autogenerated method: HMUI.TableViewScroller.HandleTableViewDidDeleteCells
void HMUI::TableViewScroller::HandleTableViewDidDeleteCells(HMUI::TableView* tableView) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandleTableViewDidDeleteCells");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleTableViewDidDeleteCells", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView);
}
// Autogenerated method: HMUI.TableViewScroller.HandleTableViewDidChangeRectSize
void HMUI::TableViewScroller::HandleTableViewDidChangeRectSize(HMUI::TableView* tableView) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandleTableViewDidChangeRectSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleTableViewDidChangeRectSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tableView)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView);
}
// Autogenerated method: HMUI.TableViewScroller.PageScrollUp
void HMUI::TableViewScroller::PageScrollUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::PageScrollUp");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PageScrollUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.PageScrollDown
void HMUI::TableViewScroller::PageScrollDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::PageScrollDown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PageScrollDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.RefreshScrollBar
void HMUI::TableViewScroller::RefreshScrollBar() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::RefreshScrollBar");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshScrollBar", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.HandlePointerDidEnter
void HMUI::TableViewScroller::HandlePointerDidEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandlePointerDidEnter");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandlePointerDidEnter", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TableViewScroller.HandlePointerDidExit
void HMUI::TableViewScroller::HandlePointerDidExit(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandlePointerDidExit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandlePointerDidExit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eventData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TableViewScroller.HandleJoystickWasNotCenteredThisFrame
void HMUI::TableViewScroller::HandleJoystickWasNotCenteredThisFrame(UnityEngine::Vector2 deltaPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandleJoystickWasNotCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleJoystickWasNotCenteredThisFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(deltaPos)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaPos);
}
// Autogenerated method: HMUI.TableViewScroller.HandleJoystickWasCenteredThisFrame
void HMUI::TableViewScroller::HandleJoystickWasCenteredThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::HandleJoystickWasCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HandleJoystickWasCenteredThisFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.<Init>b__27_0
void HMUI::TableViewScroller::$Init$b__27_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::<Init>b__27_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__27_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TableViewScroller.<Init>b__27_1
void HMUI::TableViewScroller::$Init$b__27_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::<Init>b__27_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__27_1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableViewScroller/ScrollPositionType
#include "HMUI/TableViewScroller_ScrollPositionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollPositionType Beginning
HMUI::TableViewScroller::ScrollPositionType HMUI::TableViewScroller::ScrollPositionType::_get_Beginning() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollPositionType::_get_Beginning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollPositionType>("HMUI", "TableViewScroller/ScrollPositionType", "Beginning"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollPositionType Beginning
void HMUI::TableViewScroller::ScrollPositionType::_set_Beginning(HMUI::TableViewScroller::ScrollPositionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollPositionType::_set_Beginning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollPositionType", "Beginning", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollPositionType Center
HMUI::TableViewScroller::ScrollPositionType HMUI::TableViewScroller::ScrollPositionType::_get_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollPositionType::_get_Center");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollPositionType>("HMUI", "TableViewScroller/ScrollPositionType", "Center"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollPositionType Center
void HMUI::TableViewScroller::ScrollPositionType::_set_Center(HMUI::TableViewScroller::ScrollPositionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollPositionType::_set_Center");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollPositionType", "Center", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollPositionType End
HMUI::TableViewScroller::ScrollPositionType HMUI::TableViewScroller::ScrollPositionType::_get_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollPositionType::_get_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollPositionType>("HMUI", "TableViewScroller/ScrollPositionType", "End"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollPositionType End
void HMUI::TableViewScroller::ScrollPositionType::_set_End(HMUI::TableViewScroller::ScrollPositionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollPositionType::_set_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollPositionType", "End", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TableViewScroller/ScrollDirection
#include "HMUI/TableViewScroller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollDirection None
HMUI::TableViewScroller::ScrollDirection HMUI::TableViewScroller::ScrollDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollDirection>("HMUI", "TableViewScroller/ScrollDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollDirection None
void HMUI::TableViewScroller::ScrollDirection::_set_None(HMUI::TableViewScroller::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollDirection", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollDirection Up
HMUI::TableViewScroller::ScrollDirection HMUI::TableViewScroller::ScrollDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollDirection>("HMUI", "TableViewScroller/ScrollDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollDirection Up
void HMUI::TableViewScroller::ScrollDirection::_set_Up(HMUI::TableViewScroller::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollDirection Left
HMUI::TableViewScroller::ScrollDirection HMUI::TableViewScroller::ScrollDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollDirection>("HMUI", "TableViewScroller/ScrollDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollDirection Left
void HMUI::TableViewScroller::ScrollDirection::_set_Left(HMUI::TableViewScroller::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollDirection Down
HMUI::TableViewScroller::ScrollDirection HMUI::TableViewScroller::ScrollDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollDirection>("HMUI", "TableViewScroller/ScrollDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollDirection Down
void HMUI::TableViewScroller::ScrollDirection::_set_Down(HMUI::TableViewScroller::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TableViewScroller/ScrollDirection Right
HMUI::TableViewScroller::ScrollDirection HMUI::TableViewScroller::ScrollDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TableViewScroller::ScrollDirection>("HMUI", "TableViewScroller/ScrollDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TableViewScroller/ScrollDirection Right
void HMUI::TableViewScroller::ScrollDirection::_set_Right(HMUI::TableViewScroller::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::ScrollDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TableViewScroller/ScrollDirection", "Right", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TextPageScrollView
#include "HMUI/TextPageScrollView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TextPageScrollView.SetText
void HMUI::TextPageScrollView::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextPageScrollView::SetText");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(text)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ToggleWithCallbacks
#include "HMUI/ToggleWithCallbacks.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.UI.Selectable/SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ToggleWithCallbacks.add_stateDidChangeEvent
void HMUI::ToggleWithCallbacks::add_stateDidChangeEvent(System::Action_1<HMUI::ToggleWithCallbacks::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::add_stateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "add_stateDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ToggleWithCallbacks.remove_stateDidChangeEvent
void HMUI::ToggleWithCallbacks::remove_stateDidChangeEvent(System::Action_1<HMUI::ToggleWithCallbacks::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::remove_stateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "remove_stateDidChangeEvent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ToggleWithCallbacks.get_selectionState
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ToggleWithCallbacks::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ToggleWithCallbacks.DoStateTransition
void HMUI::ToggleWithCallbacks::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::DoStateTransition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(state, instant)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ToggleWithCallbacks/SelectionState
#include "HMUI/ToggleWithCallbacks.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Normal
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Normal
void HMUI::ToggleWithCallbacks::SelectionState::_set_Normal(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Highlighted
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Highlighted
void HMUI::ToggleWithCallbacks::SelectionState::_set_Highlighted(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Pressed
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Pressed
void HMUI::ToggleWithCallbacks::SelectionState::_set_Pressed(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Selected
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Selected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Selected"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Selected
void HMUI::ToggleWithCallbacks::SelectionState::_set_Selected(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Selected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Selected", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Disabled
HMUI::ToggleWithCallbacks::SelectionState HMUI::ToggleWithCallbacks::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ToggleWithCallbacks::SelectionState>("HMUI", "ToggleWithCallbacks/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Disabled
void HMUI::ToggleWithCallbacks::SelectionState::_set_Disabled(HMUI::ToggleWithCallbacks::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ToggleWithCallbacks::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ToggleWithCallbacks/SelectionState", "Disabled", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.VerticalScrollIndicator.set_progress
void HMUI::VerticalScrollIndicator::set_progress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::set_progress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_progress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.get_progress
float HMUI::VerticalScrollIndicator::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::get_progress");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_progress", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.set_normalizedPageHeight
void HMUI::VerticalScrollIndicator::set_normalizedPageHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::set_normalizedPageHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_normalizedPageHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.get_normalizedPageHeight
float HMUI::VerticalScrollIndicator::get_normalizedPageHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::get_normalizedPageHeight");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_normalizedPageHeight", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.set_disabled
void HMUI::VerticalScrollIndicator::set_disabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::set_disabled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_disabled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.OnEnable
void HMUI::VerticalScrollIndicator::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.VerticalScrollIndicator.RefreshHandle
void HMUI::VerticalScrollIndicator::RefreshHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::VerticalScrollIndicator::RefreshHandle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RefreshHandle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppDummyDll.AddressAttribute
#include "Il2CppDummyDll/AddressAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppDummyDll.FieldOffsetAttribute
#include "Il2CppDummyDll/FieldOffsetAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppDummyDll.AttributeAttribute
#include "Il2CppDummyDll/AttributeAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppDummyDll.MetadataOffsetAttribute
#include "Il2CppDummyDll/MetadataOffsetAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Il2CppDummyDll.TokenAttribute
#include "Il2CppDummyDll/TokenAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.BaseChannel.get_PacketsInQueue
int LiteNetLib::BaseChannel::get_PacketsInQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::get_PacketsInQueue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_PacketsInQueue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.BaseChannel.AddToQueue
void LiteNetLib::BaseChannel::AddToQueue(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::AddToQueue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddToQueue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(packet)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.BaseChannel.SendNextPackets
void LiteNetLib::BaseChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::SendNextPackets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.BaseChannel.ProcessPacket
bool LiteNetLib::BaseChannel::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::ProcessPacket");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(packet)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectionRequestResult
#include "LiteNetLib/ConnectionRequestResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult None
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult None
void LiteNetLib::ConnectionRequestResult::_set_None(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult Accept
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_Accept");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "Accept"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult Accept
void LiteNetLib::ConnectionRequestResult::_set_Accept(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_Accept");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "Accept", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult Reject
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_Reject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "Reject"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult Reject
void LiteNetLib::ConnectionRequestResult::_set_Reject(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_Reject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "Reject", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult RejectForce
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_RejectForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_RejectForce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "RejectForce"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult RejectForce
void LiteNetLib::ConnectionRequestResult::_set_RejectForce(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_RejectForce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "RejectForce", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.ConnectionRequest.get_Result
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequest::get_Result() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::get_Result");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Result", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::ConnectionRequestResult, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.set_Result
void LiteNetLib::ConnectionRequest::set_Result(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::set_Result");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Result", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.TryActivate
bool LiteNetLib::ConnectionRequest::TryActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::TryActivate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TryActivate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.UpdateRequest
void LiteNetLib::ConnectionRequest::UpdateRequest(LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::UpdateRequest");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateRequest", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(connRequest)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connRequest);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.AcceptIfKey
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::AcceptIfKey(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::AcceptIfKey");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AcceptIfKey", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Accept
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Accept");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Accept", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData, int start, int length, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rejectData, start, length, force)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length, force);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rejectData, start, length)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::Array<uint8_t>* rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rejectData, start, length)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::Array<uint8_t>* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::Array<uint8_t>* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rejectData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.UnconnectedMessageType BasicMessage
LiteNetLib::UnconnectedMessageType LiteNetLib::UnconnectedMessageType::_get_BasicMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_get_BasicMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::UnconnectedMessageType>("LiteNetLib", "UnconnectedMessageType", "BasicMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.UnconnectedMessageType BasicMessage
void LiteNetLib::UnconnectedMessageType::_set_BasicMessage(LiteNetLib::UnconnectedMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_set_BasicMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "UnconnectedMessageType", "BasicMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.UnconnectedMessageType Broadcast
LiteNetLib::UnconnectedMessageType LiteNetLib::UnconnectedMessageType::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::UnconnectedMessageType>("LiteNetLib", "UnconnectedMessageType", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.UnconnectedMessageType Broadcast
void LiteNetLib::UnconnectedMessageType::_set_Broadcast(LiteNetLib::UnconnectedMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "UnconnectedMessageType", "Broadcast", value));
}
