// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.RaycastUITopLevelChecker
#include "HMUI/RaycastUITopLevelChecker.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.RaycastUITopLevelChecker.Awake
void HMUI::RaycastUITopLevelChecker::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RaycastUITopLevelChecker::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RaycastUITopLevelChecker.get_isOnTop
bool HMUI::RaycastUITopLevelChecker::get_isOnTop() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RaycastUITopLevelChecker::get_isOnTop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOnTop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.IconSegmentedControl
#include "HMUI/IconSegmentedControl.hpp"
// Including type: HMUI.IconSegmentedControl/DataItem
#include "HMUI/IconSegmentedControl_DataItem.hpp"
// Including type: HMUI.IconSegmentedControlCell
#include "HMUI/IconSegmentedControlCell.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.IconSegmentedControl.Init
void HMUI::IconSegmentedControl::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl.SetData
void HMUI::IconSegmentedControl::SetData(::Array<HMUI::IconSegmentedControl::DataItem*>* dataItems) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataItems)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataItems);
}
// Autogenerated method: HMUI.IconSegmentedControl.NumberOfCells
int HMUI::IconSegmentedControl::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl.CellForCellNumber
HMUI::SegmentedControlCell* HMUI::IconSegmentedControl::CellForCellNumber(int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::CellForCellNumber");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::SegmentedControlCell*, false>(this, ___internal__method, cellNumber);
}
// Autogenerated method: HMUI.IconSegmentedControl.InstantiateCell
HMUI::IconSegmentedControlCell* HMUI::IconSegmentedControl::InstantiateCell(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::InstantiateCell");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::IconSegmentedControlCell*, false>(this, ___internal__method, prefab);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.IconSegmentedControl/DataItem
#include "HMUI/IconSegmentedControl_DataItem.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.IconSegmentedControl/DataItem.get_icon
UnityEngine::Sprite* HMUI::IconSegmentedControl::DataItem::get_icon() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::DataItem::get_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl/DataItem.set_icon
void HMUI::IconSegmentedControl::DataItem::set_icon(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::DataItem::set_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControl/DataItem.get_hintText
::Il2CppString* HMUI::IconSegmentedControl::DataItem::get_hintText() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::DataItem::get_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControl/DataItem.set_hintText
void HMUI::IconSegmentedControl::DataItem::set_hintText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControl::DataItem::set_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.IconSegmentedControlCell
#include "HMUI/IconSegmentedControlCell.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.IconSegmentedControlCell.set_sprite
void HMUI::IconSegmentedControlCell::set_sprite(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControlCell::set_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.get_sprite
UnityEngine::Sprite* HMUI::IconSegmentedControlCell::get_sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControlCell::get_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.set_hintText
void HMUI::IconSegmentedControlCell::set_hintText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControlCell::set_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.set_iconSize
void HMUI::IconSegmentedControlCell::set_iconSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControlCell::set_iconSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_iconSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.IconSegmentedControlCell.set_hideBackgroundImage
void HMUI::IconSegmentedControlCell::set_hideBackgroundImage(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::IconSegmentedControlCell::set_hideBackgroundImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideBackgroundImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SegmentedControl
#include "HMUI/SegmentedControl.hpp"
// Including type: HMUI.SegmentedControl/IDataSource
#include "HMUI/SegmentedControl_IDataSource.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SegmentedControl.add_didSelectCellEvent
void HMUI::SegmentedControl::add_didSelectCellEvent(System::Action_2<HMUI::SegmentedControl*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::add_didSelectCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControl.remove_didSelectCellEvent
void HMUI::SegmentedControl::remove_didSelectCellEvent(System::Action_2<HMUI::SegmentedControl*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::remove_didSelectCellEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControl.get_dataSource
HMUI::SegmentedControl::IDataSource* HMUI::SegmentedControl::get_dataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::get_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::SegmentedControl::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.set_dataSource
void HMUI::SegmentedControl::set_dataSource(HMUI::SegmentedControl::IDataSource* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::set_dataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_dataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControl.get_selectedCellNumber
int HMUI::SegmentedControl::get_selectedCellNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::get_selectedCellNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.CreateCells
void HMUI::SegmentedControl::CreateCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::CreateCells");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.HandleCellSelectionDidChange
void HMUI::SegmentedControl::HandleCellSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::HandleCellSelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCellSelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectableCell), ::il2cpp_utils::ExtractType(transitionType), ::il2cpp_utils::ExtractType(changeOwner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectableCell, transitionType, changeOwner);
}
// Autogenerated method: HMUI.SegmentedControl.SetCallbackForCell
void HMUI::SegmentedControl::SetCallbackForCell(int cellNumber, System::Action_1<int>* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::SetCallbackForCell");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCallbackForCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cellNumber, callback);
}
// Autogenerated method: HMUI.SegmentedControl.ReloadData
void HMUI::SegmentedControl::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::ReloadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl.SelectCellWithNumber
void HMUI::SegmentedControl::SelectCellWithNumber(int selectCellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::SelectCellWithNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectCellNumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectCellNumber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SegmentedControl/IDataSource
#include "HMUI/SegmentedControl_IDataSource.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SegmentedControl/IDataSource.NumberOfCells
int HMUI::SegmentedControl::IDataSource::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::IDataSource::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControl/IDataSource.CellForCellNumber
HMUI::SegmentedControlCell* HMUI::SegmentedControl::IDataSource::CellForCellNumber(int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControl::IDataSource::CellForCellNumber");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::SegmentedControlCell*, false>(this, ___internal__method, cellNumber);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
// Including type: HMUI.SegmentedControl
#include "HMUI/SegmentedControl.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.SegmentedControlCell.get_cellNumber
int HMUI::SegmentedControlCell::get_cellNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControlCell::get_cellNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.SegmentedControlCell.set_cellNumber
void HMUI::SegmentedControlCell::set_cellNumber(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControlCell::set_cellNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.SegmentedControlCell.SegmentedControlSetup
void HMUI::SegmentedControlCell::SegmentedControlSetup(HMUI::SegmentedControl* segmentedControl, int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControlCell::SegmentedControlSetup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SegmentedControlSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(segmentedControl), ::il2cpp_utils::ExtractType(cellNumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, segmentedControl, cellNumber);
}
// Autogenerated method: HMUI.SegmentedControlCell.InternalToggle
void HMUI::SegmentedControlCell::InternalToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControlCell::InternalToggle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TextSegmentedControl
#include "HMUI/TextSegmentedControl.hpp"
// Including type: HMUI.TextSegmentedControlCell
#include "HMUI/TextSegmentedControlCell.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TextSegmentedControl.SetTexts
void HMUI::TextSegmentedControl::SetTexts(System::Collections::Generic::IReadOnlyList_1<::Il2CppString*>* texts) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControl::SetTexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texts)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, texts);
}
// Autogenerated method: HMUI.TextSegmentedControl.NumberOfCells
int HMUI::TextSegmentedControl::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControl::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSegmentedControl.CellForCellNumber
HMUI::SegmentedControlCell* HMUI::TextSegmentedControl::CellForCellNumber(int cellNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControl::CellForCellNumber");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForCellNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cellNumber)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::SegmentedControlCell*, false>(this, ___internal__method, cellNumber);
}
// Autogenerated method: HMUI.TextSegmentedControl.InstantiateCell
HMUI::TextSegmentedControlCell* HMUI::TextSegmentedControl::InstantiateCell(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControl::InstantiateCell");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstantiateCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TextSegmentedControlCell*, false>(this, ___internal__method, prefab);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TextSegmentedControlCell
#include "HMUI/TextSegmentedControlCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TextSegmentedControlCell.set_text
void HMUI::TextSegmentedControlCell::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControlCell::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.get_text
::Il2CppString* HMUI::TextSegmentedControlCell::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControlCell::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.set_fontSize
void HMUI::TextSegmentedControlCell::set_fontSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControlCell::set_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.get_fontSize
float HMUI::TextSegmentedControlCell::get_fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControlCell::get_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.set_hideBackgroundImage
void HMUI::TextSegmentedControlCell::set_hideBackgroundImage(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControlCell::set_hideBackgroundImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideBackgroundImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSegmentedControlCell.get_preferredWidth
float HMUI::TextSegmentedControlCell::get_preferredWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControlCell::get_preferredWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preferredWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CircleSlider
#include "HMUI/CircleSlider.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.CircleSlider.get_handleRect
UnityEngine::RectTransform* HMUI::CircleSlider::get_handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::get_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.set_handleRect
void HMUI::CircleSlider::set_handleRect(UnityEngine::RectTransform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::set_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.set_handleColor
void HMUI::CircleSlider::set_handleColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::set_handleColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.get_normalizedValue
float HMUI::CircleSlider::get_normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::get_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.set_normalizedValue
void HMUI::CircleSlider::set_normalizedValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::set_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.add_normalizedValueDidChangeEvent
void HMUI::CircleSlider::add_normalizedValueDidChangeEvent(System::Action_2<HMUI::CircleSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::add_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.remove_normalizedValueDidChangeEvent
void HMUI::CircleSlider::remove_normalizedValueDidChangeEvent(System::Action_2<HMUI::CircleSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::remove_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.CircleSlider.Rebuild
void HMUI::CircleSlider::Rebuild(UnityEngine::UI::CanvasUpdate executing) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, executing);
}
// Autogenerated method: HMUI.CircleSlider.LayoutComplete
void HMUI::CircleSlider::LayoutComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::LayoutComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.GraphicUpdateComplete
void HMUI::CircleSlider::GraphicUpdateComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::GraphicUpdateComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicUpdateComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.UpdateCachedReferences
void HMUI::CircleSlider::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.SetNormalizedValue
void HMUI::CircleSlider::SetNormalizedValue(float input) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: HMUI.CircleSlider.SetNormalizedValue
void HMUI::CircleSlider::SetNormalizedValue(float input, bool sendCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(sendCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, sendCallback);
}
// Autogenerated method: HMUI.CircleSlider.UpdateVisuals
void HMUI::CircleSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.UpdateDrag
void HMUI::CircleSlider::UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::UpdateDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.MayDrag
bool HMUI::CircleSlider::MayDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::MayDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MayDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.OnBeginDrag
void HMUI::CircleSlider::OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::OnBeginDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.OnDrag
void HMUI::CircleSlider::OnDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::OnDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.OnInitializePotentialDrag
void HMUI::CircleSlider::OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::OnInitializePotentialDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializePotentialDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.CircleSlider.UnityEngine.UI.ICanvasElement.get_transform
UnityEngine::Transform* HMUI::CircleSlider::UnityEngine_UI_ICanvasElement_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::UnityEngine.UI.ICanvasElement.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.OnEnable
void HMUI::CircleSlider::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.OnDisable
void HMUI::CircleSlider::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.OnRectTransformDimensionsChange
void HMUI::CircleSlider::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleSlider.OnPointerDown
void HMUI::CircleSlider::OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ColorGradientSlider
#include "HMUI/ColorGradientSlider.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17150
// Autogenerated static field getter
// Get static field: static private readonly System.Text.StringBuilder _stringBuilder
System::Text::StringBuilder* HMUI::ColorGradientSlider::_get__stringBuilder() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::_get__stringBuilder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Text::StringBuilder*>("HMUI", "ColorGradientSlider", "_stringBuilder"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Text.StringBuilder _stringBuilder
void HMUI::ColorGradientSlider::_set__stringBuilder(System::Text::StringBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::_set__stringBuilder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ColorGradientSlider", "_stringBuilder", value));
}
// Autogenerated method: HMUI.ColorGradientSlider.add_colorDidChangeEvent
void HMUI::ColorGradientSlider::add_colorDidChangeEvent(System::Action_3<HMUI::ColorGradientSlider*, UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::add_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ColorGradientSlider.remove_colorDidChangeEvent
void HMUI::ColorGradientSlider::remove_colorDidChangeEvent(System::Action_3<HMUI::ColorGradientSlider*, UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::remove_colorDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_colorDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ColorGradientSlider.SetColors
void HMUI::ColorGradientSlider::SetColors(UnityEngine::Color color0, UnityEngine::Color color1) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color0, color1);
}
// Autogenerated method: HMUI.ColorGradientSlider.HandleNormalizedValueDidChange
void HMUI::ColorGradientSlider::HandleNormalizedValueDidChange(HMUI::TextSlider* slider, float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::HandleNormalizedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(normalizedValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, slider, normalizedValue);
}
// Autogenerated method: HMUI.ColorGradientSlider.Awake
void HMUI::ColorGradientSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ColorGradientSlider.OnDestroy
void HMUI::ColorGradientSlider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ColorGradientSlider.UpdateVisuals
void HMUI::ColorGradientSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ColorGradientSlider.TextForNormalizedValue
::Il2CppString* HMUI::ColorGradientSlider::TextForNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::TextForNormalizedValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated method: HMUI.ColorGradientSlider.OnPointerUp
void HMUI::ColorGradientSlider::OnPointerUp(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::OnPointerUp");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.ColorGradientSlider..cctor
void HMUI::ColorGradientSlider::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ColorGradientSlider::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ColorGradientSlider", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.CustomFormatRangeValuesSlider
#include "HMUI/CustomFormatRangeValuesSlider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.CustomFormatRangeValuesSlider.TextForValue
::Il2CppString* HMUI::CustomFormatRangeValuesSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CustomFormatRangeValuesSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.PercentSlider
#include "HMUI/PercentSlider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.PercentSlider.TextForValue
::Il2CppString* HMUI::PercentSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::PercentSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.RangeValuesTextSlider
#include "HMUI/RangeValuesTextSlider.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.RangeValuesTextSlider.get_minValue
float HMUI::RangeValuesTextSlider::get_minValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::get_minValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.set_minValue
void HMUI::RangeValuesTextSlider::set_minValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::set_minValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_minValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.get_maxValue
float HMUI::RangeValuesTextSlider::get_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::get_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.set_maxValue
void HMUI::RangeValuesTextSlider::set_maxValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::set_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.set_value
void HMUI::RangeValuesTextSlider::set_value(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::set_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.get_value
float HMUI::RangeValuesTextSlider::get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::get_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.add_valueDidChangeEvent
void HMUI::RangeValuesTextSlider::add_valueDidChangeEvent(System::Action_2<HMUI::RangeValuesTextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::add_valueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_valueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.remove_valueDidChangeEvent
void HMUI::RangeValuesTextSlider::remove_valueDidChangeEvent(System::Action_2<HMUI::RangeValuesTextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::remove_valueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_valueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.HandleNormalizedValueDidChange
void HMUI::RangeValuesTextSlider::HandleNormalizedValueDidChange(HMUI::TextSlider* slider, float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::HandleNormalizedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNormalizedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(slider), ::il2cpp_utils::ExtractType(normalizedValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, slider, normalizedValue);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.ConvertFromNormalizedValue
float HMUI::RangeValuesTextSlider::ConvertFromNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::ConvertFromNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertFromNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.NormalizeValue
float HMUI::RangeValuesTextSlider::NormalizeValue(float rangeValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::NormalizeValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NormalizeValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rangeValue)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, rangeValue);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.TextForValue
::Il2CppString* HMUI::RangeValuesTextSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.<Awake>b__17_0
void HMUI::RangeValuesTextSlider::$Awake$b__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::<Awake>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.<Awake>b__17_1
void HMUI::RangeValuesTextSlider::$Awake$b__17_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::<Awake>b__17_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__17_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.Awake
void HMUI::RangeValuesTextSlider::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.OnDestroy
void HMUI::RangeValuesTextSlider::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.RangeValuesTextSlider.TextForNormalizedValue
::Il2CppString* HMUI::RangeValuesTextSlider::TextForNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::RangeValuesTextSlider::TextForNormalizedValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Slider2D
#include "HMUI/Slider2D.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Selectable/SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Slider2D.get_handleRect
UnityEngine::RectTransform* HMUI::Slider2D::get_handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::get_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.set_handleRect
void HMUI::Slider2D::set_handleRect(UnityEngine::RectTransform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::set_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.set_handleColor
void HMUI::Slider2D::set_handleColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::set_handleColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.get_normalizedValue
UnityEngine::Vector2 HMUI::Slider2D::get_normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::get_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.set_normalizedValue
void HMUI::Slider2D::set_normalizedValue(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::set_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.add_normalizedValueDidChangeEvent
void HMUI::Slider2D::add_normalizedValueDidChangeEvent(System::Action_2<HMUI::Slider2D*, UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::add_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.remove_normalizedValueDidChangeEvent
void HMUI::Slider2D::remove_normalizedValueDidChangeEvent(System::Action_2<HMUI::Slider2D*, UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::remove_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.Slider2D.Rebuild
void HMUI::Slider2D::Rebuild(UnityEngine::UI::CanvasUpdate executing) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, executing);
}
// Autogenerated method: HMUI.Slider2D.LayoutComplete
void HMUI::Slider2D::LayoutComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::LayoutComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.GraphicUpdateComplete
void HMUI::Slider2D::GraphicUpdateComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::GraphicUpdateComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicUpdateComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.UpdateCachedReferences
void HMUI::Slider2D::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.SetNormalizedValue
void HMUI::Slider2D::SetNormalizedValue(UnityEngine::Vector2 input) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: HMUI.Slider2D.SetNormalizedValue
void HMUI::Slider2D::SetNormalizedValue(UnityEngine::Vector2 input, bool sendCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(sendCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, sendCallback);
}
// Autogenerated method: HMUI.Slider2D.UpdateVisuals
void HMUI::Slider2D::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.UpdateDrag
void HMUI::Slider2D::UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::UpdateDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.MayDrag
bool HMUI::Slider2D::MayDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::MayDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MayDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnBeginDrag
void HMUI::Slider2D::OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnBeginDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnDrag
void HMUI::Slider2D::OnDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnInitializePotentialDrag
void HMUI::Slider2D::OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnInitializePotentialDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializePotentialDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.UnityEngine.UI.ICanvasElement.get_transform
UnityEngine::Transform* HMUI::Slider2D::UnityEngine_UI_ICanvasElement_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::UnityEngine.UI.ICanvasElement.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.OnEnable
void HMUI::Slider2D::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.OnDisable
void HMUI::Slider2D::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.OnRectTransformDimensionsChange
void HMUI::Slider2D::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Slider2D.OnPointerDown
void HMUI::Slider2D::OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.OnPointerEnter
void HMUI::Slider2D::OnPointerEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.Slider2D.DoStateTransition
void HMUI::Slider2D::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Slider2D::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TextSlider
#include "HMUI/TextSlider.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TextSlider.set_valueTextColor
void HMUI::TextSlider::set_valueTextColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_valueTextColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valueTextColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_handleRect
UnityEngine::RectTransform* HMUI::TextSlider::get_handleRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::get_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_handleRect
void HMUI::TextSlider::set_handleRect(UnityEngine::RectTransform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_handleRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.set_handleColor
void HMUI::TextSlider::set_handleColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_handleColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_handleSize
float HMUI::TextSlider::get_handleSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::get_handleSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_handleSize
void HMUI::TextSlider::set_handleSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_handleSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_valueSize
float HMUI::TextSlider::get_valueSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::get_valueSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_valueSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_valueSize
void HMUI::TextSlider::set_valueSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_valueSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valueSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_separatorSize
float HMUI::TextSlider::get_separatorSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::get_separatorSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_separatorSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_separatorSize
void HMUI::TextSlider::set_separatorSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_separatorSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_separatorSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_numberOfSteps
int HMUI::TextSlider::get_numberOfSteps() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::get_numberOfSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_numberOfSteps
void HMUI::TextSlider::set_numberOfSteps(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_numberOfSteps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_numberOfSteps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.get_normalizedValue
float HMUI::TextSlider::get_normalizedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::get_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.set_normalizedValue
void HMUI::TextSlider::set_normalizedValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::set_normalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.add_normalizedValueDidChangeEvent
void HMUI::TextSlider::add_normalizedValueDidChangeEvent(System::Action_2<HMUI::TextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::add_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.remove_normalizedValueDidChangeEvent
void HMUI::TextSlider::remove_normalizedValueDidChangeEvent(System::Action_2<HMUI::TextSlider*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::remove_normalizedValueDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.TextSlider.Rebuild
void HMUI::TextSlider::Rebuild(UnityEngine::UI::CanvasUpdate executing) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(executing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, executing);
}
// Autogenerated method: HMUI.TextSlider.LayoutComplete
void HMUI::TextSlider::LayoutComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::LayoutComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.GraphicUpdateComplete
void HMUI::TextSlider::GraphicUpdateComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::GraphicUpdateComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicUpdateComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.UpdateCachedReferences
void HMUI::TextSlider::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.SetNormalizedValue
void HMUI::TextSlider::SetNormalizedValue(float input) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: HMUI.TextSlider.SetNormalizedValue
void HMUI::TextSlider::SetNormalizedValue(float input, bool sendCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::SetNormalizedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(sendCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, sendCallback);
}
// Autogenerated method: HMUI.TextSlider.UpdateVisuals
void HMUI::TextSlider::UpdateVisuals() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::UpdateVisuals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVisuals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.UpdateDrag
void HMUI::TextSlider::UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::UpdateDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.MayDrag
bool HMUI::TextSlider::MayDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::MayDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MayDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.OnBeginDrag
void HMUI::TextSlider::OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::OnBeginDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.OnDrag
void HMUI::TextSlider::OnDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::OnDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.OnInitializePotentialDrag
void HMUI::TextSlider::OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::OnInitializePotentialDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitializePotentialDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.TextSlider.TextForNormalizedValue
::Il2CppString* HMUI::TextSlider::TextForNormalizedValue(float normalizedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::TextForNormalizedValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForNormalizedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedValue)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, normalizedValue);
}
// Autogenerated method: HMUI.TextSlider.UnityEngine.UI.ICanvasElement.get_transform
UnityEngine::Transform* HMUI::TextSlider::UnityEngine_UI_ICanvasElement_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::UnityEngine.UI.ICanvasElement.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.OnEnable
void HMUI::TextSlider::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.OnDisable
void HMUI::TextSlider::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.OnRectTransformDimensionsChange
void HMUI::TextSlider::OnRectTransformDimensionsChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::OnRectTransformDimensionsChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.TextSlider.OnPointerDown
void HMUI::TextSlider::OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSlider::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TimeSlider
#include "HMUI/TimeSlider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TimeSlider.TextForValue
::Il2CppString* HMUI::TimeSlider::TextForValue(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TimeSlider::TextForValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextForValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.TimeSlider/TimeType
#include "HMUI/TimeSlider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.TimeSlider/TimeType Default
HMUI::TimeSlider::TimeType HMUI::TimeSlider::TimeType::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TimeSlider::TimeType::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TimeSlider::TimeType>("HMUI", "TimeSlider/TimeType", "Default"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TimeSlider/TimeType Default
void HMUI::TimeSlider::TimeType::_set_Default(HMUI::TimeSlider::TimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TimeSlider::TimeType::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TimeSlider/TimeType", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.TimeSlider/TimeType Miliseconds
HMUI::TimeSlider::TimeType HMUI::TimeSlider::TimeType::_get_Miliseconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TimeSlider::TimeType::_get_Miliseconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::TimeSlider::TimeType>("HMUI", "TimeSlider/TimeType", "Miliseconds"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.TimeSlider/TimeType Miliseconds
void HMUI::TimeSlider::TimeType::_set_Miliseconds(HMUI::TimeSlider::TimeType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TimeSlider::TimeType::_set_Miliseconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "TimeSlider/TimeType", "Miliseconds", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.StackLayoutGroup
#include "HMUI/StackLayoutGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.StackLayoutGroup.get_childForceExpandWidth
bool HMUI::StackLayoutGroup::get_childForceExpandWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::get_childForceExpandWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childForceExpandWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.set_childForceExpandWidth
void HMUI::StackLayoutGroup::set_childForceExpandWidth(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::set_childForceExpandWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_childForceExpandWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.StackLayoutGroup.get_childForceExpandHeight
bool HMUI::StackLayoutGroup::get_childForceExpandHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::get_childForceExpandHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childForceExpandHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.set_childForceExpandHeight
void HMUI::StackLayoutGroup::set_childForceExpandHeight(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::set_childForceExpandHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_childForceExpandHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.StackLayoutGroup.CalcAlongAxis
void HMUI::StackLayoutGroup::CalcAlongAxis(int axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::CalcAlongAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalcAlongAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, axis);
}
// Autogenerated method: HMUI.StackLayoutGroup.SetChildrenAlongAxis
void HMUI::StackLayoutGroup::SetChildrenAlongAxis(int axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::SetChildrenAlongAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChildrenAlongAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axis)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, axis);
}
// Autogenerated method: HMUI.StackLayoutGroup.CalculateLayoutInputHorizontal
void HMUI::StackLayoutGroup::CalculateLayoutInputHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::CalculateLayoutInputHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.CalculateLayoutInputVertical
void HMUI::StackLayoutGroup::CalculateLayoutInputVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::CalculateLayoutInputVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.SetLayoutHorizontal
void HMUI::StackLayoutGroup::SetLayoutHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::SetLayoutHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackLayoutGroup.SetLayoutVertical
void HMUI::StackLayoutGroup::SetLayoutVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackLayoutGroup::SetLayoutVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.CircleTouchable
#include "HMUI/CircleTouchable.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.CircleTouchable.UpdateCachedReferences
void HMUI::CircleTouchable::UpdateCachedReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleTouchable::UpdateCachedReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCachedReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleTouchable.OnDrawGizmosSelected
void HMUI::CircleTouchable::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleTouchable::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleTouchable.DrawGizmoCircle
void HMUI::CircleTouchable::DrawGizmoCircle(UnityEngine::Vector3 center, float radius, int steps) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleTouchable::DrawGizmoCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawGizmoCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(center), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(steps)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, center, radius, steps);
}
// Autogenerated method: HMUI.CircleTouchable.OnEnable
void HMUI::CircleTouchable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleTouchable::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.CircleTouchable.Raycast
bool HMUI::CircleTouchable::Raycast(UnityEngine::Vector2 sp, UnityEngine::Camera* eventCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleTouchable::Raycast");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sp), ::il2cpp_utils::ExtractType(eventCamera)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sp, eventCamera);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.EmptyBoxGraphic
#include "HMUI/EmptyBoxGraphic.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.EmptyBoxGraphic.OnDrawGizmosSelected
void HMUI::EmptyBoxGraphic::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::EmptyBoxGraphic::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.EmptyBoxGraphic.OnPopulateMesh
void HMUI::EmptyBoxGraphic::OnPopulateMesh(UnityEngine::UI::VertexHelper* vh) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::EmptyBoxGraphic::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Touchable
#include "HMUI/Touchable.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Touchable.get_skew
float HMUI::Touchable::get_skew() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Touchable::get_skew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Touchable.OnPopulateMesh
void HMUI::Touchable::OnPopulateMesh(UnityEngine::UI::VertexHelper* vh) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Touchable::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ContainerViewController
#include "HMUI/ContainerViewController.hpp"
// Including type: HMUI.ContainerViewController/<AddViewControllerCoroutine>d__15
#include "HMUI/ContainerViewController_-AddViewControllerCoroutine-d__15.hpp"
// Including type: HMUI.ContainerViewController/<RemoveViewControllersCoroutine>d__17
#include "HMUI/ContainerViewController_-RemoveViewControllersCoroutine-d__17.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ContainerViewController.get_controllersContainer
UnityEngine::RectTransform* HMUI::ContainerViewController::get_controllersContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::get_controllersContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_controllersContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController.get_viewControllers
System::Collections::Generic::List_1<HMUI::ViewController*>* HMUI::ContainerViewController::get_viewControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::get_viewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_viewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<HMUI::ViewController*>*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController.LayoutViewControllers
void HMUI::ContainerViewController::LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::LayoutViewControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated method: HMUI.ContainerViewController.ClearChildViewControllers
void HMUI::ContainerViewController::ClearChildViewControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::ClearChildViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearChildViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController.SetChildViewController
void HMUI::ContainerViewController::SetChildViewController(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::SetChildViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChildViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HMUI.ContainerViewController.SetChildViewControllers
void HMUI::ContainerViewController::SetChildViewControllers(::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::SetChildViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChildViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers);
}
// Creating initializer_list -> params proxy for: System.Void SetChildViewControllers(params HMUI.ViewController[] viewControllers)
void HMUI::ContainerViewController::SetChildViewControllers(std::initializer_list<HMUI::ViewController*> viewControllers) {
  HMUI::ContainerViewController::SetChildViewControllers(::Array<HMUI::ViewController*>::New(viewControllers));
}
// Autogenerated method: HMUI.ContainerViewController.AddViewController
void HMUI::ContainerViewController::AddViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, System::Action_2<float, ::Array<HMUI::ViewController*>*>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::AddViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.AddViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ContainerViewController::AddViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, System::Action_2<float, ::Array<HMUI::ViewController*>*>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::AddViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.RemoveViewControllers
void HMUI::ContainerViewController::RemoveViewControllers(::Array<HMUI::ViewController*>* viewControllers, System::Action* finishedCallback, System::Action_3<float, ::Array<HMUI::ViewController*>*, System::Collections::Generic::HashSet_1<HMUI::ViewController*>*>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::RemoveViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.RemoveViewControllersCoroutine
System::Collections::IEnumerator* HMUI::ContainerViewController::RemoveViewControllersCoroutine(::Array<HMUI::ViewController*>* viewControllersToRemove, System::Action* finishedCallback, System::Action_3<float, ::Array<HMUI::ViewController*>*, System::Collections::Generic::HashSet_1<HMUI::ViewController*>*>* animationLayouter, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::RemoveViewControllersCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveViewControllersCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllersToRemove), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationLayouter), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, viewControllersToRemove, finishedCallback, animationLayouter, immediately);
}
// Autogenerated method: HMUI.ContainerViewController.GetNewXPositionsForViewControllers
::Array<float>* HMUI::ContainerViewController::GetNewXPositionsForViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers, int exludeFromEndCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::GetNewXPositionsForViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewXPositionsForViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(exludeFromEndCount)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<float>*, false>(this, ___internal__method, viewControllers, exludeFromEndCount);
}
// Autogenerated method: HMUI.ContainerViewController.__Init
void HMUI::ContainerViewController::__Init(HMUI::Screen* screen, HMUI::ViewController* parentViewController, HMUI::ContainerViewController* containerViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::__Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screen), ::il2cpp_utils::ExtractType(parentViewController), ::il2cpp_utils::ExtractType(containerViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screen, parentViewController, containerViewController);
}
// Autogenerated method: HMUI.ContainerViewController.__Activate
void HMUI::ContainerViewController::__Activate(bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::__Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ContainerViewController.__Deactivate
void HMUI::ContainerViewController::__Deactivate(bool removedFromHierarchy, bool deactivateGameObject, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::__Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(deactivateGameObject), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, deactivateGameObject, screenSystemDisabling);
}
// Autogenerated method: HMUI.ContainerViewController.DeactivateGameObject
void HMUI::ContainerViewController::DeactivateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::DeactivateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ContainerViewController/<AddViewControllerCoroutine>d__15
#include "HMUI/ContainerViewController_-AddViewControllerCoroutine-d__15.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ContainerViewController/<AddViewControllerCoroutine>d__15.System.IDisposable.Dispose
void HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<AddViewControllerCoroutine>d__15.MoveNext
bool HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<AddViewControllerCoroutine>d__15.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<AddViewControllerCoroutine>d__15.System.Collections.IEnumerator.Reset
void HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<AddViewControllerCoroutine>d__15.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ContainerViewController/<RemoveViewControllersCoroutine>d__17
#include "HMUI/ContainerViewController_-RemoveViewControllersCoroutine-d__17.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ContainerViewController/<RemoveViewControllersCoroutine>d__17.System.IDisposable.Dispose
void HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<RemoveViewControllersCoroutine>d__17.MoveNext
bool HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<RemoveViewControllersCoroutine>d__17.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<RemoveViewControllersCoroutine>d__17.System.Collections.IEnumerator.Reset
void HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ContainerViewController/<RemoveViewControllersCoroutine>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass35_0
#include "HMUI/FlowCoordinator_--c__DisplayClass35_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass36_0
#include "HMUI/FlowCoordinator_--c__DisplayClass36_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass37_0
#include "HMUI/FlowCoordinator_--c__DisplayClass37_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass38_0
#include "HMUI/FlowCoordinator_--c__DisplayClass38_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass38_1
#include "HMUI/FlowCoordinator_--c__DisplayClass38_1.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass39_0
#include "HMUI/FlowCoordinator_--c__DisplayClass39_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass41_0
#include "HMUI/FlowCoordinator_--c__DisplayClass41_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass42_0
#include "HMUI/FlowCoordinator_--c__DisplayClass42_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass45_0
#include "HMUI/FlowCoordinator_--c__DisplayClass45_0.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass46_0
#include "HMUI/FlowCoordinator_--c__DisplayClass46_0.hpp"
// Including type: UnityEngine.EventSystems.BaseInputModule
#include "UnityEngine/EventSystems/BaseInputModule.hpp"
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
// Including type: HMUI.ViewController/AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator.get_topViewController
HMUI::ViewController* HMUI::FlowCoordinator::get_topViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::get_topViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_topViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.get_childFlowCoordinator
HMUI::FlowCoordinator* HMUI::FlowCoordinator::get_childFlowCoordinator() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::get_childFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::FlowCoordinator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.get_isActivated
bool HMUI::FlowCoordinator::get_isActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::get_isActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.get_title
::Il2CppString* HMUI::FlowCoordinator::get_title() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::get_title");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_title", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.SetTitle
void HMUI::FlowCoordinator::SetTitle(::Il2CppString* value, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetTitle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.set_showBackButton
void HMUI::FlowCoordinator::set_showBackButton(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::set_showBackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showBackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.FlowCoordinator.get_showBackButton
bool HMUI::FlowCoordinator::get_showBackButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::get_showBackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showBackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.__StartOnScreenSystem
void HMUI::FlowCoordinator::__StartOnScreenSystem(HMUI::ScreenSystem* screenSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::__StartOnScreenSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__StartOnScreenSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenSystem)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenSystem);
}
// Autogenerated method: HMUI.FlowCoordinator.PresentFlowCoordinator
void HMUI::FlowCoordinator::PresentFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately, bool replaceTopViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::PresentFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately), ::il2cpp_utils::ExtractType(replaceTopViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator, finishedCallback, animationDirection, immediately, replaceTopViewController);
}
// Autogenerated method: HMUI.FlowCoordinator.DismissFlowCoordinator
void HMUI::FlowCoordinator::DismissFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, HMUI::ViewController::AnimationDirection animationDirection, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::DismissFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator, animationDirection, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceChildFlowCoordinator
void HMUI::FlowCoordinator::ReplaceChildFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::ReplaceChildFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceChildFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.PresentViewController
void HMUI::FlowCoordinator::PresentViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::PresentViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.DismissViewController
void HMUI::FlowCoordinator::DismissViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationDirection animationDirection, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::DismissViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, animationDirection, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceTopViewController
void HMUI::FlowCoordinator::ReplaceTopViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::ReplaceTopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceTopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.FlowCoordinator.ReplaceTopViewController
void HMUI::FlowCoordinator::ReplaceTopViewController(HMUI::ViewController* viewController, HMUI::FlowCoordinator* originalOwnerFlowCoordinator, HMUI::FlowCoordinator* newOwnerFlowCoordinator, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::ReplaceTopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceTopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(originalOwnerFlowCoordinator), ::il2cpp_utils::ExtractType(newOwnerFlowCoordinator), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, originalOwnerFlowCoordinator, newOwnerFlowCoordinator, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.FlowCoordinator.PushViewControllerToNavigationController
void HMUI::FlowCoordinator::PushViewControllerToNavigationController(HMUI::NavigationController* navigationController, HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::PushViewControllerToNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushViewControllerToNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, navigationController, viewController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.SetViewControllersToNavigationController
void HMUI::FlowCoordinator::SetViewControllersToNavigationController(HMUI::NavigationController* navigationController, ::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetViewControllersToNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetViewControllersToNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, navigationController, viewControllers);
}
// Creating initializer_list -> params proxy for: System.Void SetViewControllersToNavigationController(HMUI.NavigationController navigationController, params HMUI.ViewController[] viewControllers)
void HMUI::FlowCoordinator::SetViewControllersToNavigationController(HMUI::NavigationController* navigationController, std::initializer_list<HMUI::ViewController*> viewControllers) {
  HMUI::FlowCoordinator::SetViewControllersToNavigationController(navigationController, ::Array<HMUI::ViewController*>::New(viewControllers));
}
// Autogenerated method: HMUI.FlowCoordinator.SetViewControllerToNavigationController
void HMUI::FlowCoordinator::SetViewControllerToNavigationController(HMUI::NavigationController* navigationController, HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetViewControllerToNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetViewControllerToNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, navigationController, viewController);
}
// Autogenerated method: HMUI.FlowCoordinator.PopViewControllerFromNavigationController
void HMUI::FlowCoordinator::PopViewControllerFromNavigationController(HMUI::NavigationController* navigationController, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::PopViewControllerFromNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllerFromNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, navigationController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.PopViewControllersFromNavigationController
void HMUI::FlowCoordinator::PopViewControllersFromNavigationController(HMUI::NavigationController* navigationController, int numberOfControllers, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::PopViewControllersFromNavigationController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllersFromNavigationController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(navigationController), ::il2cpp_utils::ExtractType(numberOfControllers), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, navigationController, numberOfControllers, finishedCallback, immediately);
}
// Autogenerated method: HMUI.FlowCoordinator.SetLeftScreenViewController
void HMUI::FlowCoordinator::SetLeftScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetLeftScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLeftScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.SetRightScreenViewController
void HMUI::FlowCoordinator::SetRightScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetRightScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRightScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.SetBottomScreenViewController
void HMUI::FlowCoordinator::SetBottomScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetBottomScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBottomScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.SetTopScreenViewController
void HMUI::FlowCoordinator::SetTopScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetTopScreenViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTopScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.PresentTitle
void HMUI::FlowCoordinator::PresentTitle(::Il2CppString* title, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::PresentTitle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(title), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, title, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.IsFlowCoordinatorInHierarchy
bool HMUI::FlowCoordinator::IsFlowCoordinatorInHierarchy(HMUI::FlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::IsFlowCoordinatorInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsFlowCoordinatorInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: HMUI.FlowCoordinator.YoungestChildFlowCoordinatorOrSelf
HMUI::FlowCoordinator* HMUI::FlowCoordinator::YoungestChildFlowCoordinatorOrSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::YoungestChildFlowCoordinatorOrSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "YoungestChildFlowCoordinatorOrSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::FlowCoordinator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.ProvideInitialViewControllers
void HMUI::FlowCoordinator::ProvideInitialViewControllers(HMUI::ViewController* mainViewController, HMUI::ViewController* leftScreenViewController, HMUI::ViewController* rightScreenViewController, HMUI::ViewController* bottomScreenViewController, HMUI::ViewController* topScreenViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::ProvideInitialViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProvideInitialViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainViewController), ::il2cpp_utils::ExtractType(leftScreenViewController), ::il2cpp_utils::ExtractType(rightScreenViewController), ::il2cpp_utils::ExtractType(bottomScreenViewController), ::il2cpp_utils::ExtractType(topScreenViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainViewController, leftScreenViewController, rightScreenViewController, bottomScreenViewController, topScreenViewController);
}
// Autogenerated method: HMUI.FlowCoordinator.Activate
void HMUI::FlowCoordinator::Activate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.FlowCoordinator.Deactivate
void HMUI::FlowCoordinator::Deactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::Deactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.FlowCoordinator.__ExternalActivate
void HMUI::FlowCoordinator::__ExternalActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::__ExternalActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ExternalActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.__ExternalDeactivate
void HMUI::FlowCoordinator::__ExternalDeactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::__ExternalDeactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ExternalDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.HandleScreenSystemBackButtonWasPressed
void HMUI::FlowCoordinator::HandleScreenSystemBackButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::HandleScreenSystemBackButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScreenSystemBackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.SetGlobalUserInteraction
void HMUI::FlowCoordinator::SetGlobalUserInteraction(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::SetGlobalUserInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalUserInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.FlowCoordinator.DidActivate
void HMUI::FlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.FlowCoordinator.DidDeactivate
void HMUI::FlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.FlowCoordinator.TransitionDidStart
void HMUI::FlowCoordinator::TransitionDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::TransitionDidStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.TransitionDidFinish
void HMUI::FlowCoordinator::TransitionDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::TransitionDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.TopViewControllerWillChange
void HMUI::FlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: HMUI.FlowCoordinator.InitialViewControllerWasPresented
void HMUI::FlowCoordinator::InitialViewControllerWasPresented() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::InitialViewControllerWasPresented");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitialViewControllerWasPresented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator.BackButtonWasPressed
void HMUI::FlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Autogenerated method: HMUI.FlowCoordinator.Log
void HMUI::FlowCoordinator::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "FlowCoordinator", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass35_0
#include "HMUI/FlowCoordinator_--c__DisplayClass35_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass35_0.<PresentFlowCoordinator>b__1
void HMUI::FlowCoordinator::$$c__DisplayClass35_0::$PresentFlowCoordinator$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass35_0::<PresentFlowCoordinator>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentFlowCoordinator>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass35_0.<PresentFlowCoordinator>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass35_0::$PresentFlowCoordinator$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass35_0::<PresentFlowCoordinator>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentFlowCoordinator>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass36_0
#include "HMUI/FlowCoordinator_--c__DisplayClass36_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass36_0.<DismissFlowCoordinator>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass36_0::$DismissFlowCoordinator$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass36_0::<DismissFlowCoordinator>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DismissFlowCoordinator>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass37_0
#include "HMUI/FlowCoordinator_--c__DisplayClass37_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass37_0.<ReplaceChildFlowCoordinator>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass37_0::$ReplaceChildFlowCoordinator$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass37_0::<ReplaceChildFlowCoordinator>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceChildFlowCoordinator>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass38_0
#include "HMUI/FlowCoordinator_--c__DisplayClass38_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass38_1
#include "HMUI/FlowCoordinator_--c__DisplayClass38_1.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass38_0
#include "HMUI/FlowCoordinator_--c__DisplayClass38_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass38_1.<PresentViewController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass38_1::$PresentViewController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass38_1::<PresentViewController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentViewController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass39_0
#include "HMUI/FlowCoordinator_--c__DisplayClass39_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass39_0.<DismissViewController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass39_0::$DismissViewController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass39_0::<DismissViewController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DismissViewController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass41_0
#include "HMUI/FlowCoordinator_--c__DisplayClass41_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass41_0.<ReplaceTopViewController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass41_0::$ReplaceTopViewController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass41_0::<ReplaceTopViewController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceTopViewController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass42_0
#include "HMUI/FlowCoordinator_--c__DisplayClass42_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass42_0.<PushViewControllerToNavigationController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass42_0::$PushViewControllerToNavigationController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass42_0::<PushViewControllerToNavigationController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewControllerToNavigationController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass45_0
#include "HMUI/FlowCoordinator_--c__DisplayClass45_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass45_0.<PopViewControllerFromNavigationController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass45_0::$PopViewControllerFromNavigationController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass45_0::<PopViewControllerFromNavigationController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllerFromNavigationController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.FlowCoordinator/<>c__DisplayClass46_0
#include "HMUI/FlowCoordinator_--c__DisplayClass46_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.FlowCoordinator/<>c__DisplayClass46_0.<PopViewControllersFromNavigationController>b__0
void HMUI::FlowCoordinator::$$c__DisplayClass46_0::$PopViewControllersFromNavigationController$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::$$c__DisplayClass46_0::<PopViewControllersFromNavigationController>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllersFromNavigationController>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.HierarchyManager
#include "HMUI/HierarchyManager.hpp"
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.HierarchyManager.Start
void HMUI::HierarchyManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HierarchyManager.OnDestroy
void HMUI::HierarchyManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HierarchyManager.HandleSceneTransitionDidFinish
void HMUI::HierarchyManager::HandleSceneTransitionDidFinish(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::HandleSceneTransitionDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneTransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, container);
}
// Autogenerated method: HMUI.HierarchyManager.HandleBeforeDismissingScenes
void HMUI::HierarchyManager::HandleBeforeDismissingScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::HandleBeforeDismissingScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeforeDismissingScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.HierarchyManager.StartWithFlowCoordinator
void HMUI::HierarchyManager::StartWithFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::HierarchyManager::StartWithFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartWithFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.NavigationController/<>c__DisplayClass8_0
#include "HMUI/NavigationController_--c__DisplayClass8_0.hpp"
// Including type: HMUI.NavigationController/<>c__DisplayClass10_0
#include "HMUI/NavigationController_--c__DisplayClass10_0.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController.PushViewController
void HMUI::NavigationController::PushViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PushViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.NavigationController.PopViewController
void HMUI::NavigationController::PopViewController(System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, immediately);
}
// Autogenerated method: HMUI.NavigationController.PopViewControllers
void HMUI::NavigationController::PopViewControllers(int numberOfViewControllersToPop, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PopViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfViewControllersToPop), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numberOfViewControllersToPop, finishedCallback, immediately);
}
// Autogenerated method: HMUI.NavigationController.PositionVector
UnityEngine::Vector3 HMUI::NavigationController::PositionVector(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::PositionVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PositionVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: HMUI.NavigationController.SetupViewControllerRect
void HMUI::NavigationController::SetupViewControllerRect(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::SetupViewControllerRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupViewControllerRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HMUI.NavigationController.GetNewPositionsForViewControllers
::Array<float>* HMUI::NavigationController::GetNewPositionsForViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* fixedViewControllers, float fixedEndPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::GetNewPositionsForViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewPositionsForViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(fixedViewControllers), ::il2cpp_utils::ExtractType(fixedEndPos)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<float>*, false>(this, ___internal__method, viewControllers, fixedViewControllers, fixedEndPos);
}
// Autogenerated method: HMUI.NavigationController.LayoutViewControllers
void HMUI::NavigationController::LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::LayoutViewControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NavigationController/Orientation
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Orientation Horizontal
HMUI::NavigationController::Orientation HMUI::NavigationController::Orientation::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Orientation>("HMUI", "NavigationController/Orientation", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Orientation Horizontal
void HMUI::NavigationController::Orientation::_set_Horizontal(HMUI::NavigationController::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Orientation", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Orientation Vertical
HMUI::NavigationController::Orientation HMUI::NavigationController::Orientation::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Orientation>("HMUI", "NavigationController/Orientation", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Orientation Vertical
void HMUI::NavigationController::Orientation::_set_Vertical(HMUI::NavigationController::Orientation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Orientation::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Orientation", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NavigationController/Alignment
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Alignment Beginning
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_Beginning() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_Beginning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "Beginning"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Alignment Beginning
void HMUI::NavigationController::Alignment::_set_Beginning(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_Beginning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "Beginning", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Alignment Middle
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Alignment Middle
void HMUI::NavigationController::Alignment::_set_Middle(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NavigationController/Alignment End
HMUI::NavigationController::Alignment HMUI::NavigationController::Alignment::_get_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_get_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NavigationController::Alignment>("HMUI", "NavigationController/Alignment", "End"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NavigationController/Alignment End
void HMUI::NavigationController::Alignment::_set_End(HMUI::NavigationController::Alignment value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::Alignment::_set_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NavigationController/Alignment", "End", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController/<>c__DisplayClass8_0
#include "HMUI/NavigationController_--c__DisplayClass8_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController/<>c__DisplayClass8_0.<PushViewController>g__AnimationLayouter|0
void HMUI::NavigationController::$$c__DisplayClass8_0::$PushViewController$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::$$c__DisplayClass8_0::<PushViewController>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewController>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController/<>c__DisplayClass10_0
#include "HMUI/NavigationController_--c__DisplayClass10_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NavigationController/<>c__DisplayClass10_0.<PopViewControllers>g__AnimationLayouter|0
void HMUI::NavigationController::$$c__DisplayClass10_0::$PopViewControllers$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* removingViewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NavigationController::$$c__DisplayClass10_0::<PopViewControllers>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllers>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(removingViewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers, removingViewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: HMUI.Screen/<TransitionCoroutine>d__5
#include "HMUI/Screen_-TransitionCoroutine-d__5.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Screen.get_isBeingDestroyed
bool HMUI::Screen::get_isBeingDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::get_isBeingDestroyed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isBeingDestroyed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen.SetRootViewController
void HMUI::Screen::SetRootViewController(HMUI::ViewController* newRootViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::SetRootViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRootViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newRootViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newRootViewController, animationType);
}
// Autogenerated method: HMUI.Screen.TransitionCoroutine
System::Collections::IEnumerator* HMUI::Screen::TransitionCoroutine(HMUI::ViewController* newRootViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::TransitionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newRootViewController), ::il2cpp_utils::ExtractType(animationType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newRootViewController, animationType);
}
// Autogenerated method: HMUI.Screen.OnDestroy
void HMUI::Screen::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.Screen/<TransitionCoroutine>d__5
#include "HMUI/Screen_-TransitionCoroutine-d__5.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.IDisposable.Dispose
void HMUI::Screen::$TransitionCoroutine$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.MoveNext
bool HMUI::Screen::$TransitionCoroutine$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.Collections.IEnumerator.Reset
void HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.Screen/<TransitionCoroutine>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::Screen::$TransitionCoroutine$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::Screen::$TransitionCoroutine$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScreenModeController
#include "HMUI/ScreenModeController.hpp"
// Including type: HMUI.CurvedCanvasSettings
#include "HMUI/CurvedCanvasSettings.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenModeController.Awake
void HMUI::ScreenModeController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenModeController.SetMode
void HMUI::ScreenModeController::SetMode(HMUI::ScreenModeData* screenModeData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::SetMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenModeData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenModeData);
}
// Autogenerated method: HMUI.ScreenModeController.SetDefaultMode
void HMUI::ScreenModeController::SetDefaultMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::SetDefaultMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenModeSO
#include "HMUI/ScreenModeSO.hpp"
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenModeSO.get_data
HMUI::ScreenModeData* HMUI::ScreenModeSO::get_data() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeSO::get_data");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_data", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ScreenModeData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenModeData
#include "HMUI/ScreenModeData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScreenSystem
#include "HMUI/ScreenSystem.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.TitleViewController
#include "HMUI/TitleViewController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScreenSystem.get_titleViewController
HMUI::TitleViewController* HMUI::ScreenSystem::get_titleViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_titleViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_titleViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TitleViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_mainScreen
HMUI::Screen* HMUI::ScreenSystem::get_mainScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_mainScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_leftScreen
HMUI::Screen* HMUI::ScreenSystem::get_leftScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_leftScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_rightScreen
HMUI::Screen* HMUI::ScreenSystem::get_rightScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_rightScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_bottomScreen
HMUI::Screen* HMUI::ScreenSystem::get_bottomScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_bottomScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bottomScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.get_topScreen
HMUI::Screen* HMUI::ScreenSystem::get_topScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::get_topScreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_topScreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.add_backButtonWasPressedEvent
void HMUI::ScreenSystem::add_backButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::add_backButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_backButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScreenSystem.remove_backButtonWasPressedEvent
void HMUI::ScreenSystem::remove_backButtonWasPressedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::remove_backButtonWasPressedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_backButtonWasPressedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScreenSystem.Awake
void HMUI::ScreenSystem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.OnDestroy
void HMUI::ScreenSystem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScreenSystem.SetBackButton
void HMUI::ScreenSystem::SetBackButton(bool visible, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::SetBackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(visible), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, visible, animated);
}
// Autogenerated method: HMUI.ScreenSystem.<Awake>b__24_0
void HMUI::ScreenSystem::$Awake$b__24_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenSystem::<Awake>b__24_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__24_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.StackedController
#include "HMUI/StackedController.hpp"
// Including type: HMUI.StackedController/<>c
#include "HMUI/StackedController_--c.hpp"
// Including type: HMUI.StackedController/<>c__DisplayClass5_0
#include "HMUI/StackedController_--c__DisplayClass5_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.StackedController.get_topStackedViewController
HMUI::ViewController* HMUI::StackedController::get_topStackedViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::get_topStackedViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_topStackedViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.StackedController.PushViewController
void HMUI::StackedController::PushViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PushViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.PopViewController
void HMUI::StackedController::PopViewController(System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PopViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.PopViewControllers
void HMUI::StackedController::PopViewControllers(int numberOfViewControllersToPop, System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::PopViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfViewControllersToPop), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numberOfViewControllersToPop, finishedCallback, immediately);
}
// Autogenerated method: HMUI.StackedController.SetupViewControllerRect
void HMUI::StackedController::SetupViewControllerRect(HMUI::ViewController* viewController, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::SetupViewControllerRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "StackedController", "SetupViewControllerRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, viewController, index);
}
// Autogenerated method: HMUI.StackedController.LayoutViewControllers
void HMUI::StackedController::LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::LayoutViewControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.StackedController/<>c
#include "HMUI/StackedController_--c.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.StackedController/<>c <>9
HMUI::StackedController::$$c* HMUI::StackedController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::StackedController::$$c*>("HMUI", "StackedController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.StackedController/<>c <>9
void HMUI::StackedController::$$c::_set_$$9(HMUI::StackedController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "StackedController/<>c", "<>9", value)));
}
// Autogenerated method: HMUI.StackedController/<>c..cctor
void HMUI::StackedController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "StackedController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.StackedController/<>c.<PushViewController>g__AnimationLayouter|3_0
void HMUI::StackedController::$$c::$PushViewController$g__AnimationLayouter_3_0(float t, ::Array<HMUI::ViewController*>* viewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c::<PushViewController>g__AnimationLayouter|3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushViewController>g__AnimationLayouter|3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.StackedController/<>c__DisplayClass5_0
#include "HMUI/StackedController_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.StackedController/<>c__DisplayClass5_0.<PopViewControllers>g__AnimationLayouter|0
void HMUI::StackedController::$$c__DisplayClass5_0::$PopViewControllers$g__AnimationLayouter_0(float t, ::Array<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* removingViewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::StackedController::$$c__DisplayClass5_0::<PopViewControllers>g__AnimationLayouter|0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopViewControllers>g__AnimationLayouter|0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(viewControllers), ::il2cpp_utils::ExtractType(removingViewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t, viewControllers, removingViewControllers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TitleViewController
#include "HMUI/TitleViewController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.TitleViewController.SetText
void HMUI::TitleViewController::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TitleViewController::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewController/DidActivateDelegate
#include "HMUI/ViewController_DidActivateDelegate.hpp"
// Including type: HMUI.ViewController/DidDeactivateDelegate
#include "HMUI/ViewController_DidDeactivateDelegate.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: HMUI.ViewController/AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
// Including type: HMUI.ViewController/<PresentViewControllerCoroutine>d__58
#include "HMUI/ViewController_-PresentViewControllerCoroutine-d__58.hpp"
// Including type: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60
#include "HMUI/ViewController_-ReplaceViewControllerCoroutine-d__60.hpp"
// Including type: HMUI.ViewController/<DismissViewControllerCoroutine>d__62
#include "HMUI/ViewController_-DismissViewControllerCoroutine-d__62.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.ContainerViewController
#include "HMUI/ContainerViewController.hpp"
// Including type: HMUI.Screen
#include "HMUI/Screen.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.EventSystems.BaseRaycaster
#include "UnityEngine/EventSystems/BaseRaycaster.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kTransitionDuration
float HMUI::ViewController::_get_kTransitionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_get_kTransitionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewController", "kTransitionDuration"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kTransitionDuration
void HMUI::ViewController::_set_kTransitionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_set_kTransitionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController", "kTransitionDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kTransitionMoveOffset
float HMUI::ViewController::_get_kTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_get_kTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewController", "kTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kTransitionMoveOffset
void HMUI::ViewController::_set_kTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::_set_kTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController", "kTransitionMoveOffset", value));
}
// Autogenerated method: HMUI.ViewController.get_containerViewController
HMUI::ContainerViewController* HMUI::ViewController::get_containerViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_containerViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_containerViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ContainerViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_screen
HMUI::Screen* HMUI::ViewController::get_screen() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_screen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_screen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::Screen*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_parentViewController
HMUI::ViewController* HMUI::ViewController::get_parentViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_parentViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_childViewController
HMUI::ViewController* HMUI::ViewController::get_childViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_childViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isInViewControllerHierarchy
bool HMUI::ViewController::get_isInViewControllerHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isInViewControllerHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInViewControllerHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isActivated
bool HMUI::ViewController::get_isActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isActivated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActivated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_wasActivatedBefore
bool HMUI::ViewController::get_wasActivatedBefore() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_wasActivatedBefore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasActivatedBefore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_isInTransition
bool HMUI::ViewController::get_isInTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_isInTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_isInTransition
void HMUI::ViewController::set_isInTransition(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_isInTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isInTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_enableUserInteractions
bool HMUI::ViewController::get_enableUserInteractions() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_enableUserInteractions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableUserInteractions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_enableUserInteractions
void HMUI::ViewController::set_enableUserInteractions(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_enableUserInteractions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableUserInteractions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.add_didActivateEvent
void HMUI::ViewController::add_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::add_didActivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didActivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.remove_didActivateEvent
void HMUI::ViewController::remove_didActivateEvent(HMUI::ViewController::DidActivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::remove_didActivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didActivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.add_didDeactivateEvent
void HMUI::ViewController::add_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::add_didDeactivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didDeactivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.remove_didDeactivateEvent
void HMUI::ViewController::remove_didDeactivateEvent(HMUI::ViewController::DidDeactivateDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::remove_didDeactivateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didDeactivateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_buttonBinder
HMUI::ButtonBinder* HMUI::ViewController::get_buttonBinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_buttonBinder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buttonBinder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ButtonBinder*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.set_buttonBinder
void HMUI::ViewController::set_buttonBinder(HMUI::ButtonBinder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::set_buttonBinder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_buttonBinder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ViewController.get_rectTransform
UnityEngine::RectTransform* HMUI::ViewController::get_rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_rectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_canvasGroup
UnityEngine::CanvasGroup* HMUI::ViewController::get_canvasGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_canvasGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canvasGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::CanvasGroup*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.get_graphicRaycaster
UnityEngine::EventSystems::BaseRaycaster* HMUI::ViewController::get_graphicRaycaster() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::get_graphicRaycaster");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_graphicRaycaster", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::BaseRaycaster*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.OnDestroy
void HMUI::ViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.DidActivate
void HMUI::ViewController::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController.DidDeactivate
void HMUI::ViewController::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController.__Init
void HMUI::ViewController::__Init(HMUI::Screen* screen, HMUI::ViewController* parentViewController, HMUI::ContainerViewController* containerViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screen), ::il2cpp_utils::ExtractType(parentViewController), ::il2cpp_utils::ExtractType(containerViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screen, parentViewController, containerViewController);
}
// Autogenerated method: HMUI.ViewController.__ResetViewController
void HMUI::ViewController::__ResetViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__ResetViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ResetViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.__PresentViewController
void HMUI::ViewController::__PresentViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__PresentViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__PresentViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.PresentViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::PresentViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::PresentViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.__ReplaceViewController
void HMUI::ViewController::__ReplaceViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__ReplaceViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__ReplaceViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.ViewController.ReplaceViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::ReplaceViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::ReplaceViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType), ::il2cpp_utils::ExtractType(animationDirection)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, newViewController, finishedCallback, animationType, animationDirection);
}
// Autogenerated method: HMUI.ViewController.__DismissViewController
void HMUI::ViewController::__DismissViewController(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__DismissViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__DismissViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.DismissViewControllerCoroutine
System::Collections::IEnumerator* HMUI::ViewController::DismissViewControllerCoroutine(System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DismissViewControllerCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissViewControllerCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(immediately)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, finishedCallback, animationDirection, immediately);
}
// Autogenerated method: HMUI.ViewController.__Activate
void HMUI::ViewController::__Activate(bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController.__Deactivate
void HMUI::ViewController::__Deactivate(bool removedFromHierarchy, bool deactivateGameObject, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::__Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "__Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(deactivateGameObject), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, deactivateGameObject, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController.DeactivateGameObject
void HMUI::ViewController::DeactivateGameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DeactivateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController.IsViewControllerInHierarchy
bool HMUI::ViewController::IsViewControllerInHierarchy(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::IsViewControllerInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsViewControllerInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HMUI.ViewController.Log
void HMUI::ViewController::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewController", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/DidActivateDelegate
#include "HMUI/ViewController_DidActivateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/DidActivateDelegate.Invoke
void HMUI::ViewController::DidActivateDelegate::Invoke(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HMUI.ViewController/DidActivateDelegate.BeginInvoke
System::IAsyncResult* HMUI::ViewController::DidActivateDelegate::BeginInvoke(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling, callback, object);
}
// Autogenerated method: HMUI.ViewController/DidActivateDelegate.EndInvoke
void HMUI::ViewController::DidActivateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidActivateDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/DidDeactivateDelegate
#include "HMUI/ViewController_DidDeactivateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/DidDeactivateDelegate.Invoke
void HMUI::ViewController::DidDeactivateDelegate::Invoke(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ViewController/DidDeactivateDelegate.BeginInvoke
System::IAsyncResult* HMUI::ViewController::DidDeactivateDelegate::BeginInvoke(bool removedFromHierarchy, bool screenSystemDisabling, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling, callback, object);
}
// Autogenerated method: HMUI.ViewController/DidDeactivateDelegate.EndInvoke
void HMUI::ViewController::DidDeactivateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::DidDeactivateDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationType None
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationType None
void HMUI::ViewController::AnimationType::_set_None(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationType In
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_In() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_In");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "In"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationType In
void HMUI::ViewController::AnimationType::_set_In(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_In");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "In", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationType Out
HMUI::ViewController::AnimationType HMUI::ViewController::AnimationType::_get_Out() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_get_Out");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationType>("HMUI", "ViewController/AnimationType", "Out"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationType Out
void HMUI::ViewController::AnimationType::_set_Out(HMUI::ViewController::AnimationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationType::_set_Out");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationType", "Out", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewController/AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationDirection Horizontal
HMUI::ViewController::AnimationDirection HMUI::ViewController::AnimationDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationDirection>("HMUI", "ViewController/AnimationDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationDirection Horizontal
void HMUI::ViewController::AnimationDirection::_set_Horizontal(HMUI::ViewController::AnimationDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationDirection", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ViewController/AnimationDirection Vertical
HMUI::ViewController::AnimationDirection HMUI::ViewController::AnimationDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ViewController::AnimationDirection>("HMUI", "ViewController/AnimationDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ViewController/AnimationDirection Vertical
void HMUI::ViewController::AnimationDirection::_set_Vertical(HMUI::ViewController::AnimationDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::AnimationDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewController/AnimationDirection", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/<PresentViewControllerCoroutine>d__58
#include "HMUI/ViewController_-PresentViewControllerCoroutine-d__58.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.IDisposable.Dispose
void HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.MoveNext
bool HMUI::ViewController::$PresentViewControllerCoroutine$d__58::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<PresentViewControllerCoroutine>d__58.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$PresentViewControllerCoroutine$d__58::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60
#include "HMUI/ViewController_-ReplaceViewControllerCoroutine-d__60.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.IDisposable.Dispose
void HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.MoveNext
bool HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<ReplaceViewControllerCoroutine>d__60.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$ReplaceViewControllerCoroutine$d__60::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController/<DismissViewControllerCoroutine>d__62
#include "HMUI/ViewController_-DismissViewControllerCoroutine-d__62.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.IDisposable.Dispose
void HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.MoveNext
bool HMUI::ViewController::$DismissViewControllerCoroutine$d__62::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.Collections.IEnumerator.Reset
void HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewController/<DismissViewControllerCoroutine>d__62.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewController::$DismissViewControllerCoroutine$d__62::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers
#include "HMUI/ViewControllerTransitionHelpers.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3
#include "HMUI/ViewControllerTransitionHelpers_-DoPresentTransition-d__3.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4
#include "HMUI/ViewControllerTransitionHelpers_-DoDismissTransition-d__4.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5
#include "HMUI/ViewControllerTransitionHelpers_-DoHorizontalTransition-d__5.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6
#include "HMUI/ViewControllerTransitionHelpers_-DoVerticalTransition-d__6.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8
#include "HMUI/ViewControllerTransitionHelpers_-AnimationCoroutine-d__8.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ViewController/AnimationDirection
#include "HMUI/ViewController_AnimationDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kTransitionDuration
float HMUI::ViewControllerTransitionHelpers::_get_kTransitionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kTransitionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kTransitionDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kTransitionDuration
void HMUI::ViewControllerTransitionHelpers::_set_kTransitionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kTransitionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kTransitionDuration", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHorizontalTransitionMoveOffset
float HMUI::ViewControllerTransitionHelpers::_get_kHorizontalTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kHorizontalTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kHorizontalTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHorizontalTransitionMoveOffset
void HMUI::ViewControllerTransitionHelpers::_set_kHorizontalTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kHorizontalTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kHorizontalTransitionMoveOffset", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kVerticalTransitionMoveOffset
float HMUI::ViewControllerTransitionHelpers::_get_kVerticalTransitionMoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_get_kVerticalTransitionMoveOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "ViewControllerTransitionHelpers", "kVerticalTransitionMoveOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVerticalTransitionMoveOffset
void HMUI::ViewControllerTransitionHelpers::_set_kVerticalTransitionMoveOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::_set_kVerticalTransitionMoveOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ViewControllerTransitionHelpers", "kVerticalTransitionMoveOffset", value));
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoPresentTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoPresentTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, HMUI::ViewController::AnimationDirection animationDirection, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoPresentTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoPresentTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoDismissTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoDismissTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, HMUI::ViewController::AnimationDirection animationDirection, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoDismissTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoDismissTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(animationDirection), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, animationDirection, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoHorizontalTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoHorizontalTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoHorizontalTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoHorizontalTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.DoVerticalTransition
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::DoVerticalTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController, float moveOffsetMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::DoVerticalTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "DoVerticalTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController), ::il2cpp_utils::ExtractType(moveOffsetMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController, moveOffsetMultiplier);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.ImmediateTransition
void HMUI::ViewControllerTransitionHelpers::ImmediateTransition(HMUI::ViewController* toPresentViewController, HMUI::ViewController* toDismissViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::ImmediateTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "ImmediateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toPresentViewController), ::il2cpp_utils::ExtractType(toDismissViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, toPresentViewController, toDismissViewController);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers.AnimationCoroutine
System::Collections::IEnumerator* HMUI::ViewControllerTransitionHelpers::AnimationCoroutine(System::Action_1<float>* transitionAnimation) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::AnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ViewControllerTransitionHelpers", "AnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transitionAnimation)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transitionAnimation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3
#include "HMUI/ViewControllerTransitionHelpers_-DoPresentTransition-d__3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoPresentTransition>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoPresentTransition$d__3::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4
#include "HMUI/ViewControllerTransitionHelpers_-DoDismissTransition-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoDismissTransition>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoDismissTransition$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0.<DoHorizontalTransition>b__0
void HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass5_0::$DoHorizontalTransition$b__0(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass5_0::<DoHorizontalTransition>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DoHorizontalTransition>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5
#include "HMUI/ViewControllerTransitionHelpers_-DoHorizontalTransition-d__5.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass5_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoHorizontalTransition>d__5.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoHorizontalTransition$d__5::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0.<DoVerticalTransition>b__0
void HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass6_0::$DoVerticalTransition$b__0(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$$c__DisplayClass6_0::<DoVerticalTransition>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DoVerticalTransition>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6
#include "HMUI/ViewControllerTransitionHelpers_-DoVerticalTransition-d__6.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: HMUI.ViewControllerTransitionHelpers/<>c__DisplayClass6_0
#include "HMUI/ViewControllerTransitionHelpers_--c__DisplayClass6_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<DoVerticalTransition>d__6.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$DoVerticalTransition$d__6::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8
#include "HMUI/ViewControllerTransitionHelpers_-AnimationCoroutine-d__8.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.IDisposable.Dispose
void HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.MoveNext
bool HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.Collections.IEnumerator.Reset
void HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ViewControllerTransitionHelpers/<AnimationCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ViewControllerTransitionHelpers::$AnimationCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView
#include "HMUI/AnimatedSwitchView.hpp"
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
// Including type: HMUI.AnimatedSwitchView/GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: HMUI.AnimatedSwitchView/<>c
#include "HMUI/AnimatedSwitchView_--c.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.AnimatedSwitchView.Awake
void HMUI::AnimatedSwitchView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.Start
void HMUI::AnimatedSwitchView::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.OnDestroy
void HMUI::AnimatedSwitchView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.Update
void HMUI::AnimatedSwitchView::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpPosition
void HMUI::AnimatedSwitchView::LerpPosition(float switchAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpStretch
void HMUI::AnimatedSwitchView::LerpStretch(float switchAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpStretch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpStretch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpColors
void HMUI::AnimatedSwitchView::LerpColors(float switchAmount, float highlightAmount, float disabledAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount), ::il2cpp_utils::ExtractType(highlightAmount), ::il2cpp_utils::ExtractType(disabledAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, switchAmount, highlightAmount, disabledAmount);
}
// Autogenerated method: HMUI.AnimatedSwitchView.LerpColor
UnityEngine::Color HMUI::AnimatedSwitchView::LerpColor(float switchAmount, float highlightAmount, float disabledAmount, HMUI::AnimatedSwitchView::GetColorDelegate* getColorDelegate) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::LerpColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(switchAmount), ::il2cpp_utils::ExtractType(highlightAmount), ::il2cpp_utils::ExtractType(disabledAmount), ::il2cpp_utils::ExtractType(getColorDelegate)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, switchAmount, highlightAmount, disabledAmount, getColorDelegate);
}
// Autogenerated method: HMUI.AnimatedSwitchView.HandleOnValueChanged
void HMUI::AnimatedSwitchView::HandleOnValueChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::HandleOnValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOnValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.AnimatedSwitchView.HandleStateDidChange
void HMUI::AnimatedSwitchView::HandleStateDidChange(HMUI::ToggleWithCallbacks::SelectionState selectionState) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::HandleStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectionState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectionState);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/AnimationState
#include "HMUI/AnimatedSwitchView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState Idle
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "Idle"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState Idle
void HMUI::AnimatedSwitchView::AnimationState::_set_Idle(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "Idle", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_SwitchingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState SwitchingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_SwitchingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "SwitchingOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_HighlightingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState HighlightingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_HighlightingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "HighlightingOff", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOn
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOn");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOn"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOn
void HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOn(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOn");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOn", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOff
HMUI::AnimatedSwitchView::AnimationState HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_get_DisablingOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::AnimationState>("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOff"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/AnimationState DisablingOff
void HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOff(HMUI::AnimatedSwitchView::AnimationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::AnimationState::_set_DisablingOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/AnimationState", "DisablingOff", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.AnimatedSwitchView/GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.AnimatedSwitchView/GetColorDelegate.Invoke
UnityEngine::Color HMUI::AnimatedSwitchView::GetColorDelegate::Invoke(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/GetColorDelegate.BeginInvoke
System::IAsyncResult* HMUI::AnimatedSwitchView::GetColorDelegate::BeginInvoke(HMUI::AnimatedSwitchView::ColorBlock* colorBlock, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, colorBlock, callback, object);
}
// Autogenerated method: HMUI.AnimatedSwitchView/GetColorDelegate.EndInvoke
UnityEngine::Color HMUI::AnimatedSwitchView::GetColorDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::GetColorDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.AnimatedSwitchView/<>c
#include "HMUI/AnimatedSwitchView_--c.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: HMUI.AnimatedSwitchView/GetColorDelegate
#include "HMUI/AnimatedSwitchView_GetColorDelegate.hpp"
// Including type: HMUI.AnimatedSwitchView/ColorBlock
#include "HMUI/AnimatedSwitchView_ColorBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.AnimatedSwitchView/<>c <>9
HMUI::AnimatedSwitchView::$$c* HMUI::AnimatedSwitchView::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::$$c*>("HMUI", "AnimatedSwitchView/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.AnimatedSwitchView/<>c <>9
void HMUI::AnimatedSwitchView::$$c::_set_$$9(HMUI::AnimatedSwitchView::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_0
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_0")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_0
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_0(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_0", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_1
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_1")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_1
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_1(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_1", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_2
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_2")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_2
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_2(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_2", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_3
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_3")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_3
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_3(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_3", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_4
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_4")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_4
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_4(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_4", value)));
}
// Autogenerated static field getter
// Get static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_5
HMUI::AnimatedSwitchView::GetColorDelegate* HMUI::AnimatedSwitchView::$$c::_get_$$9__31_5() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_get_$$9__31_5");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::AnimatedSwitchView::GetColorDelegate*>("HMUI", "AnimatedSwitchView/<>c", "<>9__31_5")));
}
// Autogenerated static field setter
// Set static field: static public HMUI.AnimatedSwitchView/GetColorDelegate <>9__31_5
void HMUI::AnimatedSwitchView::$$c::_set_$$9__31_5(HMUI::AnimatedSwitchView::GetColorDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::_set_$$9__31_5");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "AnimatedSwitchView/<>c", "<>9__31_5", value)));
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c..cctor
void HMUI::AnimatedSwitchView::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "AnimatedSwitchView/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_0
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_0(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_1
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_1(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_2
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_2(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_3
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_3(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_4
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_4(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated method: HMUI.AnimatedSwitchView/<>c.<LerpColors>b__31_5
UnityEngine::Color HMUI::AnimatedSwitchView::$$c::$LerpColors$b__31_5(HMUI::AnimatedSwitchView::ColorBlock* colorBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::AnimatedSwitchView::$$c::<LerpColors>b__31_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LerpColors>b__31_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorBlock)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, colorBlock);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ButtonSpriteSwap
#include "HMUI/ButtonSpriteSwap.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ButtonSpriteSwap.Awake
void HMUI::ButtonSpriteSwap::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.Start
void HMUI::ButtonSpriteSwap::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.OnEnable
void HMUI::ButtonSpriteSwap::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.OnDestroy
void HMUI::ButtonSpriteSwap::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonSpriteSwap.HandleButtonSelectionStateDidChange
void HMUI::ButtonSpriteSwap::HandleButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonSpriteSwap::HandleButtonSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ButtonStaticAnimations
#include "HMUI/ButtonStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ButtonStaticAnimations.Awake
void HMUI::ButtonStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.Start
void HMUI::ButtonStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.OnEnable
void HMUI::ButtonStaticAnimations::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.OnDestroy
void HMUI::ButtonStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ButtonStaticAnimations.HandleButtonSelectionStateDidChange
void HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange(HMUI::NoTransitionsButton::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ButtonStaticAnimations::HandleButtonSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleButtonSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NoTransitionsButton
#include "HMUI/NoTransitionsButton.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.UI.Selectable/SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.NoTransitionsButton.get_selectionState
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::NoTransitionsButton::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.NoTransitionsButton.add_selectionStateDidChangeEvent
void HMUI::NoTransitionsButton::add_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::add_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.NoTransitionsButton.remove_selectionStateDidChangeEvent
void HMUI::NoTransitionsButton::remove_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::remove_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.NoTransitionsButton.DoStateTransition
void HMUI::NoTransitionsButton::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.NoTransitionsButton/SelectionState
#include "HMUI/NoTransitionsButton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Normal
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Normal
void HMUI::NoTransitionsButton::SelectionState::_set_Normal(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Highlighted
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Highlighted
void HMUI::NoTransitionsButton::SelectionState::_set_Highlighted(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Pressed
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Pressed
void HMUI::NoTransitionsButton::SelectionState::_set_Pressed(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.NoTransitionsButton/SelectionState Disabled
HMUI::NoTransitionsButton::SelectionState HMUI::NoTransitionsButton::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::NoTransitionsButton::SelectionState>("HMUI", "NoTransitionsButton/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.NoTransitionsButton/SelectionState Disabled
void HMUI::NoTransitionsButton::SelectionState::_set_Disabled(HMUI::NoTransitionsButton::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "NoTransitionsButton/SelectionState", "Disabled", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.DropdownWithTableView.add_didSelectCellWithIdxEvent
void HMUI::DropdownWithTableView::add_didSelectCellWithIdxEvent(System::Action_2<HMUI::DropdownWithTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.remove_didSelectCellWithIdxEvent
void HMUI::DropdownWithTableView::remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::DropdownWithTableView*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.get_tableViewDataSource
HMUI::TableView::IDataSource* HMUI::DropdownWithTableView::get_tableViewDataSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::get_tableViewDataSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tableViewDataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableView::IDataSource*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.get_selectedIndex
int HMUI::DropdownWithTableView::get_selectedIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::get_selectedIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.set_selectedIndex
void HMUI::DropdownWithTableView::set_selectedIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::set_selectedIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectedIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.DropdownWithTableView.Init
void HMUI::DropdownWithTableView::Init(HMUI::TableView::IDataSource* tableViewDataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableViewDataSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableViewDataSource);
}
// Autogenerated method: HMUI.DropdownWithTableView.ReloadData
void HMUI::DropdownWithTableView::ReloadData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::ReloadData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.SelectCellWithIdx
void HMUI::DropdownWithTableView::SelectCellWithIdx(int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::SelectCellWithIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx);
}
// Autogenerated method: HMUI.DropdownWithTableView.Awake
void HMUI::DropdownWithTableView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnDisable
void HMUI::DropdownWithTableView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnDestroy
void HMUI::DropdownWithTableView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.RefreshSize
void HMUI::DropdownWithTableView::RefreshSize(HMUI::TableView::IDataSource* dataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::RefreshSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataSource);
}
// Autogenerated method: HMUI.DropdownWithTableView.OnButtonClick
void HMUI::DropdownWithTableView::OnButtonClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::OnButtonClick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnButtonClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.DropdownWithTableView.HandleTableViewDidSelectCellWithIdx
void HMUI::DropdownWithTableView::HandleTableViewDidSelectCellWithIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::HandleTableViewDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleTableViewDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: HMUI.DropdownWithTableView.Hide
void HMUI::DropdownWithTableView::Hide(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.DropdownWithTableView.Show
void HMUI::DropdownWithTableView::Show(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.DropdownWithTableView.HandleModalViewBlockerClicked
void HMUI::DropdownWithTableView::HandleModalViewBlockerClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::DropdownWithTableView::HandleModalViewBlockerClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleModalViewBlockerClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.GradientImage
#include "HMUI/GradientImage.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD179C8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 kVec2Zero
UnityEngine::Vector2 HMUI::GradientImage::_get_kVec2Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec2Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("HMUI", "GradientImage", "kVec2Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 kVec2Zero
void HMUI::GradientImage::_set_kVec2Zero(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec2Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec2Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD179D8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 kVec3Zero
UnityEngine::Vector3 HMUI::GradientImage::_get_kVec3Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec3Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("HMUI", "GradientImage", "kVec3Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 kVec3Zero
void HMUI::GradientImage::_set_kVec3Zero(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec3Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec3Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD179E8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 kVec4Zero
UnityEngine::Vector4 HMUI::GradientImage::_get_kVec4Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_kVec4Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("HMUI", "GradientImage", "kVec4Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 kVec4Zero
void HMUI::GradientImage::_set_kVec4Zero(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_kVec4Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "kVec4Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD179F8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
::Array<UnityEngine::Vector2>* HMUI::GradientImage::_get_s_VertScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_VertScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "GradientImage", "s_VertScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
void HMUI::GradientImage::_set_s_VertScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_VertScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_VertScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17A08
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
::Array<UnityEngine::Vector2>* HMUI::GradientImage::_get_s_UVScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_UVScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "GradientImage", "s_UVScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
void HMUI::GradientImage::_set_s_UVScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_UVScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_UVScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17A18
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color[] s_ColorScratch
::Array<UnityEngine::Color>* HMUI::GradientImage::_get_s_ColorScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_ColorScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Color>*>("HMUI", "GradientImage", "s_ColorScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color[] s_ColorScratch
void HMUI::GradientImage::_set_s_ColorScratch(::Array<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_ColorScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_ColorScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17A28
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Xy
::Array<UnityEngine::Vector3>* HMUI::GradientImage::_get_s_Xy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_Xy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "GradientImage", "s_Xy"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Xy
void HMUI::GradientImage::_set_s_Xy(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_Xy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_Xy", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17A38
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Uv
::Array<UnityEngine::Vector3>* HMUI::GradientImage::_get_s_Uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_get_s_Uv");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "GradientImage", "s_Uv"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Uv
void HMUI::GradientImage::_set_s_Uv(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::_set_s_Uv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "GradientImage", "s_Uv", value));
}
// Autogenerated method: HMUI.GradientImage.get_color0
UnityEngine::Color HMUI::GradientImage::get_color0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::get_color0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.GradientImage.set_color0
void HMUI::GradientImage::set_color0(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::set_color0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.GradientImage.get_color1
UnityEngine::Color HMUI::GradientImage::get_color1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::get_color1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.GradientImage.set_color1
void HMUI::GradientImage::set_color1(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::set_color1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.GradientImage.GenerateSimpleSprite
void HMUI::GradientImage::GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateSimpleSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSimpleSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh), ::il2cpp_utils::ExtractType(lPreserveAspect), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, lPreserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.GenerateSlicedSprite
void HMUI::GradientImage::GenerateSlicedSprite(UnityEngine::UI::VertexHelper* vh, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateSlicedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSlicedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, float elementWidthScale, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, elementWidthScale, curvedUIRadius);
}
// Autogenerated method: HMUI.GradientImage.OnPopulateMesh
void HMUI::GradientImage::OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.GradientImage.GenerateTiledSprite
void HMUI::GradientImage::GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateTiledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTiledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(quadPositions), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(quadUVs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, quadPositions, color, quadUVs);
}
// Autogenerated method: HMUI.GradientImage.AddQuad
void HMUI::GradientImage::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(uvMin), ::il2cpp_utils::ExtractType(uvMax)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uvMin, uvMax);
}
// Autogenerated method: HMUI.GradientImage.GetAdjustedBorders
UnityEngine::Vector4 HMUI::GradientImage::GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GetAdjustedBorders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAdjustedBorders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(border), ::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, border, rect);
}
// Autogenerated method: HMUI.GradientImage.GenerateFilledSprite
void HMUI::GradientImage::GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GenerateFilledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateFilledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(preserveAspect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, preserveAspect);
}
// Autogenerated method: HMUI.GradientImage.RadialCut
bool HMUI::GradientImage::RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(uv), ::il2cpp_utils::ExtractType(fill), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, uv, fill, invert, corner);
}
// Autogenerated method: HMUI.GradientImage.RadialCut
void HMUI::GradientImage::RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(cos), ::il2cpp_utils::ExtractType(sin), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, cos, sin, invert, corner);
}
// Autogenerated method: HMUI.GradientImage.GetDrawingDimensions
UnityEngine::Vector4 HMUI::GradientImage::GetDrawingDimensions(bool shouldPreserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::GetDrawingDimensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDrawingDimensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldPreserveAspect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, shouldPreserveAspect);
}
// Autogenerated method: HMUI.GradientImage..cctor
void HMUI::GradientImage::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::GradientImage::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "GradientImage", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: HMUI.CurvedCanvasSettingsHelper
#include "HMUI/CurvedCanvasSettingsHelper.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17AA8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 kVec2Zero
UnityEngine::Vector2 HMUI::ImageView::_get_kVec2Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec2Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("HMUI", "ImageView", "kVec2Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 kVec2Zero
void HMUI::ImageView::_set_kVec2Zero(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec2Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec2Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17AB8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 kVec3Zero
UnityEngine::Vector3 HMUI::ImageView::_get_kVec3Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec3Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("HMUI", "ImageView", "kVec3Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 kVec3Zero
void HMUI::ImageView::_set_kVec3Zero(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec3Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec3Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17AC8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 kVec4Zero
UnityEngine::Vector4 HMUI::ImageView::_get_kVec4Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_kVec4Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("HMUI", "ImageView", "kVec4Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 kVec4Zero
void HMUI::ImageView::_set_kVec4Zero(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_kVec4Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "kVec4Zero", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17AD8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_VertScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_VertScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_VertScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
void HMUI::ImageView::_set_s_VertScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_VertScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_VertScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17AE8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UVScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_UVScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UVScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
void HMUI::ImageView::_set_s_UVScratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_UVScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UVScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17AF8
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
::Array<UnityEngine::Vector2>* HMUI::ImageView::_get_s_UV1Scratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_UV1Scratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector2>*>("HMUI", "ImageView", "s_UV1Scratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2[] s_UV1Scratch
void HMUI::ImageView::_set_s_UV1Scratch(::Array<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_UV1Scratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_UV1Scratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17B08
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color[] s_ColorScratch
::Array<UnityEngine::Color>* HMUI::ImageView::_get_s_ColorScratch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_ColorScratch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Color>*>("HMUI", "ImageView", "s_ColorScratch"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color[] s_ColorScratch
void HMUI::ImageView::_set_s_ColorScratch(::Array<UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_ColorScratch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_ColorScratch", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17B18
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Xy
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Xy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_Xy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Xy"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Xy
void HMUI::ImageView::_set_s_Xy(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_Xy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Xy", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD17B28
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] s_Uv
::Array<UnityEngine::Vector3>* HMUI::ImageView::_get_s_Uv() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_get_s_Uv");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("HMUI", "ImageView", "s_Uv"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] s_Uv
void HMUI::ImageView::_set_s_Uv(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::_set_s_Uv");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView", "s_Uv", value));
}
// Autogenerated method: HMUI.ImageView.get_gradient
bool HMUI::ImageView::get_gradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_gradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.get_skew
float HMUI::ImageView::get_skew() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::get_skew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.set_color0
void HMUI::ImageView::set_color0(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::set_color0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageView.set_color1
void HMUI::ImageView::set_color1(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::set_color1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageView.GenerateSimpleSprite
void HMUI::ImageView::GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateSimpleSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSimpleSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vh), ::il2cpp_utils::ExtractType(lPreserveAspect), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vh, lPreserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GenerateSlicedSprite
void HMUI::ImageView::GenerateSlicedSprite(UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateSlicedSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateSlicedSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GenerateTiledSprite
void HMUI::ImageView::GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateTiledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTiledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax, float elementWidthScale, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(uvMin), ::il2cpp_utils::ExtractType(uvMax), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uvMin, uvMax, elementWidthScale, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(uv1Min), ::il2cpp_utils::ExtractType(uv1Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(skewFactor), ::il2cpp_utils::ExtractType(skewOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.AddQuadWithHorizontalGradient
void HMUI::ImageView::AddQuadWithHorizontalGradient(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuadWithHorizontalGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuadWithHorizontalGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(uv1Min), ::il2cpp_utils::ExtractType(uv1Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(skewFactor), ::il2cpp_utils::ExtractType(skewOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.AddQuadWithVerticalGradient
void HMUI::ImageView::AddQuadWithVerticalGradient(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color0, UnityEngine::Color32 color1, UnityEngine::Vector2 uv0Min, UnityEngine::Vector2 uv0Max, UnityEngine::Vector2 uv1Min, UnityEngine::Vector2 uv1Max, float elementWidthScale, float curvedUIRadius, float skewFactor, float skewOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuadWithVerticalGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuadWithVerticalGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(posMin), ::il2cpp_utils::ExtractType(posMax), ::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1), ::il2cpp_utils::ExtractType(uv0Min), ::il2cpp_utils::ExtractType(uv0Max), ::il2cpp_utils::ExtractType(uv1Min), ::il2cpp_utils::ExtractType(uv1Max), ::il2cpp_utils::ExtractType(elementWidthScale), ::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(skewFactor), ::il2cpp_utils::ExtractType(skewOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, posMin, posMax, color0, color1, uv0Min, uv0Max, uv1Min, uv1Max, elementWidthScale, curvedUIRadius, skewFactor, skewOffset);
}
// Autogenerated method: HMUI.ImageView.GenerateFilledSprite
void HMUI::ImageView::GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect, float curvedUIRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GenerateFilledSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateFilledSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill), ::il2cpp_utils::ExtractType(preserveAspect), ::il2cpp_utils::ExtractType(curvedUIRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill, preserveAspect, curvedUIRadius);
}
// Autogenerated method: HMUI.ImageView.GetNumberOfElements
int HMUI::ImageView::GetNumberOfElements(float curvedUIRadius, float width) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetNumberOfElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "GetNumberOfElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curvedUIRadius), ::il2cpp_utils::ExtractType(width)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, curvedUIRadius, width);
}
// Autogenerated method: HMUI.ImageView.OnEnable
void HMUI::ImageView::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageView.OnPopulateMesh
void HMUI::ImageView::OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::OnPopulateMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPopulateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toFill)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toFill);
}
// Autogenerated method: HMUI.ImageView.AddQuad
void HMUI::ImageView::AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::AddQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "AddQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexHelper), ::il2cpp_utils::ExtractType(quadPositions), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(quadUVs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vertexHelper, quadPositions, color, quadUVs);
}
// Autogenerated method: HMUI.ImageView.GetAdjustedBorders
UnityEngine::Vector4 HMUI::ImageView::GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetAdjustedBorders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "GetAdjustedBorders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(border), ::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, border, rect);
}
// Autogenerated method: HMUI.ImageView.RadialCut
bool HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(uv), ::il2cpp_utils::ExtractType(fill), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, uv, fill, invert, corner);
}
// Autogenerated method: HMUI.ImageView.RadialCut
void HMUI::ImageView::RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::RadialCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", "RadialCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xy), ::il2cpp_utils::ExtractType(cos), ::il2cpp_utils::ExtractType(sin), ::il2cpp_utils::ExtractType(invert), ::il2cpp_utils::ExtractType(corner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, xy, cos, sin, invert, corner);
}
// Autogenerated method: HMUI.ImageView.GetDrawingDimensions
UnityEngine::Vector4 HMUI::ImageView::GetDrawingDimensions(bool shouldPreserveAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GetDrawingDimensions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDrawingDimensions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldPreserveAspect)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method, shouldPreserveAspect);
}
// Autogenerated method: HMUI.ImageView..cctor
void HMUI::ImageView::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ImageView", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ImageView/GradientDirection
#include "HMUI/ImageView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ImageView/GradientDirection Horizontal
HMUI::ImageView::GradientDirection HMUI::ImageView::GradientDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ImageView::GradientDirection>("HMUI", "ImageView/GradientDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ImageView/GradientDirection Horizontal
void HMUI::ImageView::GradientDirection::_set_Horizontal(HMUI::ImageView::GradientDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView/GradientDirection", "Horizontal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ImageView/GradientDirection Vertical
HMUI::ImageView::GradientDirection HMUI::ImageView::GradientDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ImageView::GradientDirection>("HMUI", "ImageView/GradientDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ImageView/GradientDirection Vertical
void HMUI::ImageView::GradientDirection::_set_Vertical(HMUI::ImageView::GradientDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageView::GradientDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ImageView/GradientDirection", "Vertical", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ImageWithHint
#include "HMUI/ImageWithHint.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ImageWithHint.set_sprite
void HMUI::ImageWithHint::set_sprite(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::set_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ImageWithHint.get_sprite
UnityEngine::Sprite* HMUI::ImageWithHint::get_sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::get_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ImageWithHint.set_hintText
void HMUI::ImageWithHint::set_hintText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ImageWithHint::set_hintText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hintText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.InputFieldView
#include "HMUI/InputFieldView.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.InputFieldView/InputFieldChanged
#include "HMUI/InputFieldView_InputFieldChanged.hpp"
// Including type: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43
#include "HMUI/InputFieldView_-BlinkingCaretCoroutine-d__43.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.YieldInstruction
#include "UnityEngine/YieldInstruction.hpp"
// Including type: HMUI.UIKeyboard
#include "HMUI/UIKeyboard.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.UI.Selectable/SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kBlinkingRate
float HMUI::InputFieldView::_get_kBlinkingRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::_get_kBlinkingRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("HMUI", "InputFieldView", "kBlinkingRate"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kBlinkingRate
void HMUI::InputFieldView::_set_kBlinkingRate(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::_set_kBlinkingRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView", "kBlinkingRate", value));
}
// Autogenerated method: HMUI.InputFieldView.get_selectionState
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::get_selectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_selectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::InputFieldView::SelectionState, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.get_keyboardPositionOffset
UnityEngine::Vector3 HMUI::InputFieldView::get_keyboardPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_keyboardPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keyboardPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.add_selectionStateDidChangeEvent
void HMUI::InputFieldView::add_selectionStateDidChangeEvent(System::Action_1<HMUI::InputFieldView::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::add_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.remove_selectionStateDidChangeEvent
void HMUI::InputFieldView::remove_selectionStateDidChangeEvent(System::Action_1<HMUI::InputFieldView::SelectionState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::remove_selectionStateDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectionStateDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.get_onValueChanged
HMUI::InputFieldView::InputFieldChanged* HMUI::InputFieldView::get_onValueChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::InputFieldView::InputFieldChanged*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.set_onValueChanged
void HMUI::InputFieldView::set_onValueChanged(HMUI::InputFieldView::InputFieldChanged* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::set_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.get_useGlobalKeyboard
bool HMUI::InputFieldView::get_useGlobalKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_useGlobalKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useGlobalKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.get_text
::Il2CppString* HMUI::InputFieldView::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.set_text
void HMUI::InputFieldView::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.ActivateKeyboard
void HMUI::InputFieldView::ActivateKeyboard(HMUI::UIKeyboard* keyboard) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::ActivateKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboard)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboard);
}
// Autogenerated method: HMUI.InputFieldView.DeactivateKeyboard
void HMUI::InputFieldView::DeactivateKeyboard(HMUI::UIKeyboard* keyboard) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::DeactivateKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboard)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboard);
}
// Autogenerated method: HMUI.InputFieldView.SetText
void HMUI::InputFieldView::SetText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.InputFieldView.ClearInput
void HMUI::InputFieldView::ClearInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::ClearInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.KeyboardKeyPressed
void HMUI::InputFieldView::KeyboardKeyPressed(::Il2CppChar letter) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::KeyboardKeyPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeyboardKeyPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(letter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, letter);
}
// Autogenerated method: HMUI.InputFieldView.KeyboardDeletePressed
void HMUI::InputFieldView::KeyboardDeletePressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::KeyboardDeletePressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeyboardDeletePressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.BlinkingCaretCoroutine
System::Collections::IEnumerator* HMUI::InputFieldView::BlinkingCaretCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::BlinkingCaretCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BlinkingCaretCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdateCaretPosition
void HMUI::InputFieldView::UpdateCaretPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdateCaretPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCaretPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdatePlaceholder
void HMUI::InputFieldView::UpdatePlaceholder() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdatePlaceholder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePlaceholder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.UpdateClearButton
void HMUI::InputFieldView::UpdateClearButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::UpdateClearButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateClearButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.<Awake>b__34_0
void HMUI::InputFieldView::$Awake$b__34_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::<Awake>b__34_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__34_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.Awake
void HMUI::InputFieldView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.OnDestroy
void HMUI::InputFieldView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView.DoStateTransition
void HMUI::InputFieldView::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldView/SelectionState
#include "HMUI/InputFieldView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Normal
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Normal
void HMUI::InputFieldView::SelectionState::_set_Normal(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Highlighted
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Highlighted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Highlighted"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Highlighted
void HMUI::InputFieldView::SelectionState::_set_Highlighted(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Highlighted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Highlighted", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Pressed
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Pressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Pressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Pressed"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Pressed
void HMUI::InputFieldView::SelectionState::_set_Pressed(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Pressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Pressed", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Disabled
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Disabled
void HMUI::InputFieldView::SelectionState::_set_Disabled(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.InputFieldView/SelectionState Selected
HMUI::InputFieldView::SelectionState HMUI::InputFieldView::SelectionState::_get_Selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_get_Selected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::InputFieldView::SelectionState>("HMUI", "InputFieldView/SelectionState", "Selected"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.InputFieldView/SelectionState Selected
void HMUI::InputFieldView::SelectionState::_set_Selected(HMUI::InputFieldView::SelectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::SelectionState::_set_Selected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "InputFieldView/SelectionState", "Selected", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldView/InputFieldChanged
#include "HMUI/InputFieldView_InputFieldChanged.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43
#include "HMUI/InputFieldView_-BlinkingCaretCoroutine-d__43.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.IDisposable.Dispose
void HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.MoveNext
bool HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.Collections.IEnumerator.Reset
void HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldView/<BlinkingCaretCoroutine>d__43.System.Collections.IEnumerator.get_Current
::Il2CppObject* HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldView::$BlinkingCaretCoroutine$d__43::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.InputFieldViewStaticAnimations
#include "HMUI/InputFieldViewStaticAnimations.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.Awake
void HMUI::InputFieldViewStaticAnimations::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.Start
void HMUI::InputFieldViewStaticAnimations::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.OnEnable
void HMUI::InputFieldViewStaticAnimations::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.OnDestroy
void HMUI::InputFieldViewStaticAnimations::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.InputFieldViewStaticAnimations.HandleInputFieldViewSelectionStateDidChange
void HMUI::InputFieldViewStaticAnimations::HandleInputFieldViewSelectionStateDidChange(HMUI::InputFieldView::SelectionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::InputFieldViewStaticAnimations::HandleInputFieldViewSelectionStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFieldViewSelectionStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView
#include "HMUI/ModalView.hpp"
// Including type: HMUI.ModalView/<>c__DisplayClass17_0
#include "HMUI/ModalView_--c__DisplayClass17_0.hpp"
// Including type: HMUI.ModalView/<>c__DisplayClass21_0
#include "HMUI/ModalView_--c__DisplayClass21_0.hpp"
// Including type: HMUI.PanelAnimationSO
#include "HMUI/PanelAnimationSO.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Canvas
#include "UnityEngine/Canvas.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView.add_blockerClickedEvent
void HMUI::ModalView::add_blockerClickedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::add_blockerClickedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_blockerClickedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ModalView.remove_blockerClickedEvent
void HMUI::ModalView::remove_blockerClickedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::remove_blockerClickedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_blockerClickedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ModalView.OnDisable
void HMUI::ModalView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.OnDestroy
void HMUI::ModalView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.SetupView
void HMUI::ModalView::SetupView(UnityEngine::Transform* screenTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::SetupView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, screenTransform);
}
// Autogenerated method: HMUI.ModalView.Hide
void HMUI::ModalView::Hide(bool animated, System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, finishedCallback);
}
// Autogenerated method: HMUI.ModalView.Show
void HMUI::ModalView::Show(bool animated, bool moveToCenter, System::Action* finishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(moveToCenter), ::il2cpp_utils::ExtractType(finishedCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, moveToCenter, finishedCallback);
}
// Autogenerated method: HMUI.ModalView.CreateBlocker
UnityEngine::GameObject* HMUI::ModalView::CreateBlocker() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::CreateBlocker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBlocker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.HandleBlockerButtonClicked
void HMUI::ModalView::HandleBlockerButtonClicked() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::HandleBlockerButtonClicked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBlockerButtonClicked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ModalView.HandleParentViewControllerDidDeactivate
void HMUI::ModalView::HandleParentViewControllerDidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::HandleParentViewControllerDidDeactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleParentViewControllerDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HMUI.ModalView.GetModalRootTransform
UnityEngine::Transform* HMUI::ModalView::GetModalRootTransform(UnityEngine::Transform* transform, UnityEngine::Canvas*& canvas, HMUI::ViewController*& viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::GetModalRootTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ModalView", "GetModalRootTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Canvas*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, canvas, viewController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView/<>c__DisplayClass17_0
#include "HMUI/ModalView_--c__DisplayClass17_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView/<>c__DisplayClass17_0.<Hide>b__0
void HMUI::ModalView::$$c__DisplayClass17_0::$Hide$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::$$c__DisplayClass17_0::<Hide>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Hide>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ModalView/<>c__DisplayClass21_0
#include "HMUI/ModalView_--c__DisplayClass21_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ModalView/<>c__DisplayClass21_0.<HandleParentViewControllerDidDeactivate>b__0
void HMUI::ModalView::$$c__DisplayClass21_0::$HandleParentViewControllerDidDeactivate$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ModalView::$$c__DisplayClass21_0::<HandleParentViewControllerDidDeactivate>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleParentViewControllerDidDeactivate>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ItemForFocussedScrolling
#include "HMUI/ItemForFocussedScrolling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollToTopOnEnable
#include "HMUI/ScrollToTopOnEnable.hpp"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollToTopOnEnable.OnEnable
void HMUI::ScrollToTopOnEnable::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollToTopOnEnable::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ScrollView/<>c
#include "HMUI/ScrollView_--c.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass50_0
#include "HMUI/ScrollView_--c__DisplayClass50_0.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass51_0
#include "HMUI/ScrollView_--c__DisplayClass51_0.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass56_0
#include "HMUI/ScrollView_--c__DisplayClass56_0.hpp"
// Including type: HMUI.ScrollView/<>c__DisplayClass56_1
#include "HMUI/ScrollView_--c__DisplayClass56_1.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: HMUI.VerticalScrollIndicator
#include "HMUI/VerticalScrollIndicator.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.EventSystemListener
#include "HMUI/EventSystemListener.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: HMUI.ItemForFocussedScrolling
#include "HMUI/ItemForFocussedScrolling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView.add_scrollPositionChangedEvent
void HMUI::ScrollView::add_scrollPositionChangedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::add_scrollPositionChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_scrollPositionChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScrollView.remove_scrollPositionChangedEvent
void HMUI::ScrollView::remove_scrollPositionChangedEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::remove_scrollPositionChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_scrollPositionChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScrollView.get_viewportTransform
UnityEngine::RectTransform* HMUI::ScrollView::get_viewportTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_viewportTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_viewportTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_contentTransform
UnityEngine::RectTransform* HMUI::ScrollView::get_contentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_contentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_contentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_position
float HMUI::ScrollView::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_scrollableSize
float HMUI::ScrollView::get_scrollableSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_scrollableSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scrollableSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_scrollPageSize
float HMUI::ScrollView::get_scrollPageSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_scrollPageSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scrollPageSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.get_contentSize
float HMUI::ScrollView::get_contentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::get_contentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_contentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.Awake
void HMUI::ScrollView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.OnDestroy
void HMUI::ScrollView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.Update
void HMUI::ScrollView::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.SetContentSize
void HMUI::ScrollView::SetContentSize(float contentSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::SetContentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contentSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, contentSize);
}
// Autogenerated method: HMUI.ScrollView.UpdateContentSize
void HMUI::ScrollView::UpdateContentSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::UpdateContentSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateContentSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.ScrollToEnd
void HMUI::ScrollView::ScrollToEnd(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollToWorldPosition
void HMUI::ScrollView::ScrollToWorldPosition(UnityEngine::Vector3 worldPosition, float pageRelativePosition, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToWorldPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToWorldPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPosition), ::il2cpp_utils::ExtractType(pageRelativePosition), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPosition, pageRelativePosition, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollToWorldPositionIfOutsideArea
void HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea(UnityEngine::Vector3 worldPosition, float pageRelativePosition, float relativeBoundaryStart, float relativeBoundaryEnd, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollToWorldPositionIfOutsideArea");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToWorldPositionIfOutsideArea", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPosition), ::il2cpp_utils::ExtractType(pageRelativePosition), ::il2cpp_utils::ExtractType(relativeBoundaryStart), ::il2cpp_utils::ExtractType(relativeBoundaryEnd), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPosition, pageRelativePosition, relativeBoundaryStart, relativeBoundaryEnd, animated);
}
// Autogenerated method: HMUI.ScrollView.ScrollTo
void HMUI::ScrollView::ScrollTo(float destinationPos, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destinationPos), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destinationPos, animated);
}
// Autogenerated method: HMUI.ScrollView.WorldPositionToScrollViewPosition
UnityEngine::Vector2 HMUI::ScrollView::WorldPositionToScrollViewPosition(UnityEngine::Vector3 worldPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::WorldPositionToScrollViewPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WorldPositionToScrollViewPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPosition)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, worldPosition);
}
// Autogenerated method: HMUI.ScrollView.SetDestinationPos
void HMUI::ScrollView::SetDestinationPos(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::SetDestinationPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDestinationPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMUI.ScrollView.UpdateVerticalScrollIndicator
void HMUI::ScrollView::UpdateVerticalScrollIndicator(float posY) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::UpdateVerticalScrollIndicator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVerticalScrollIndicator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(posY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, posY);
}
// Autogenerated method: HMUI.ScrollView.PageUpButtonPressed
void HMUI::ScrollView::PageUpButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::PageUpButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PageUpButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.PageDownButtonPressed
void HMUI::ScrollView::PageDownButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::PageDownButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PageDownButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.RefreshButtons
void HMUI::ScrollView::RefreshButtons() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::RefreshButtons");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshButtons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.HandlePointerDidEnter
void HMUI::ScrollView::HandlePointerDidEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandlePointerDidEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePointerDidEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.ScrollView.HandlePointerDidExit
void HMUI::ScrollView::HandlePointerDidExit(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandlePointerDidExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePointerDidExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: HMUI.ScrollView.HandleJoystickWasNotCenteredThisFrame
void HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame(UnityEngine::Vector2 deltaPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandleJoystickWasNotCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoystickWasNotCenteredThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaPos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaPos);
}
// Autogenerated method: HMUI.ScrollView.HandleJoystickWasCenteredThisFrame
void HMUI::ScrollView::HandleJoystickWasCenteredThisFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::HandleJoystickWasCenteredThisFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoystickWasCenteredThisFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMUI.ScrollView.ResolveScrollDirection
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ResolveScrollDirection(UnityEngine::Vector2 deltaPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ResolveScrollDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveScrollDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaPos)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ScrollView::ScrollDirection, false>(this, ___internal__method, deltaPos);
}
// Autogenerated method: HMUI.ScrollView.<Awake>b__38_0
float HMUI::ScrollView::$Awake$b__38_0(HMUI::ItemForFocussedScrolling* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::<Awake>b__38_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated method: HMUI.ScrollView.<Awake>b__38_2
float HMUI::ScrollView::$Awake$b__38_2(HMUI::ItemForFocussedScrolling* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::<Awake>b__38_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, item);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/ScrollType
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollType PageSize
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_PageSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_PageSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "PageSize"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollType PageSize
void HMUI::ScrollView::ScrollType::_set_PageSize(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_PageSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "PageSize", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollType FixedCellSize
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_FixedCellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_FixedCellSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "FixedCellSize"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollType FixedCellSize
void HMUI::ScrollView::ScrollType::_set_FixedCellSize(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_FixedCellSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "FixedCellSize", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollType FocusItems
HMUI::ScrollView::ScrollType HMUI::ScrollView::ScrollType::_get_FocusItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_get_FocusItems");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollType>("HMUI", "ScrollView/ScrollType", "FocusItems"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollType FocusItems
void HMUI::ScrollView::ScrollType::_set_FocusItems(HMUI::ScrollView::ScrollType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollType::_set_FocusItems");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollType", "FocusItems", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/ScrollDirection
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection None
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "None"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection None
void HMUI::ScrollView::ScrollDirection::_set_None(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "None", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection Up
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection Up
void HMUI::ScrollView::ScrollDirection::_set_Up(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection Down
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection Down
void HMUI::ScrollView::ScrollDirection::_set_Down(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection Left
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection Left
void HMUI::ScrollView::ScrollDirection::_set_Left(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollDirection Right
HMUI::ScrollView::ScrollDirection HMUI::ScrollView::ScrollDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollDirection>("HMUI", "ScrollView/ScrollDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollDirection Right
void HMUI::ScrollView::ScrollDirection::_set_Right(HMUI::ScrollView::ScrollDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollDirection", "Right", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/ScrollViewDirection
#include "HMUI/ScrollView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollViewDirection Vertical
HMUI::ScrollView::ScrollViewDirection HMUI::ScrollView::ScrollViewDirection::_get_Vertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_get_Vertical");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollViewDirection>("HMUI", "ScrollView/ScrollViewDirection", "Vertical"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollViewDirection Vertical
void HMUI::ScrollView::ScrollViewDirection::_set_Vertical(HMUI::ScrollView::ScrollViewDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_set_Vertical");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollViewDirection", "Vertical", value));
}
// Autogenerated static field getter
// Get static field: static public HMUI.ScrollView/ScrollViewDirection Horizontal
HMUI::ScrollView::ScrollViewDirection HMUI::ScrollView::ScrollViewDirection::_get_Horizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_get_Horizontal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HMUI::ScrollView::ScrollViewDirection>("HMUI", "ScrollView/ScrollViewDirection", "Horizontal"));
}
// Autogenerated static field setter
// Set static field: static public HMUI.ScrollView/ScrollViewDirection Horizontal
void HMUI::ScrollView::ScrollViewDirection::_set_Horizontal(HMUI::ScrollView::ScrollViewDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::ScrollViewDirection::_set_Horizontal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HMUI", "ScrollView/ScrollViewDirection", "Horizontal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c
#include "HMUI/ScrollView_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HMUI.ScrollView/<>c <>9
HMUI::ScrollView::$$c* HMUI::ScrollView::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HMUI::ScrollView::$$c*>("HMUI", "ScrollView/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HMUI.ScrollView/<>c <>9
void HMUI::ScrollView::$$c::_set_$$9(HMUI::ScrollView::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Single,System.Single> <>9__38_1
System::Func_2<float, float>* HMUI::ScrollView::$$c::_get_$$9__38_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9__38_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<float, float>*>("HMUI", "ScrollView/<>c", "<>9__38_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Single,System.Single> <>9__38_1
void HMUI::ScrollView::$$c::_set_$$9__38_1(System::Func_2<float, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9__38_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9__38_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Single,System.Single> <>9__38_3
System::Func_2<float, float>* HMUI::ScrollView::$$c::_get_$$9__38_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_get_$$9__38_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<float, float>*>("HMUI", "ScrollView/<>c", "<>9__38_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Single,System.Single> <>9__38_3
void HMUI::ScrollView::$$c::_set_$$9__38_3(System::Func_2<float, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::_set_$$9__38_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HMUI", "ScrollView/<>c", "<>9__38_3", value)));
}
// Autogenerated method: HMUI.ScrollView/<>c..cctor
void HMUI::ScrollView::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HMUI", "ScrollView/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMUI.ScrollView/<>c.<Awake>b__38_1
float HMUI::ScrollView::$$c::$Awake$b__38_1(float i) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::<Awake>b__38_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, i);
}
// Autogenerated method: HMUI.ScrollView/<>c.<Awake>b__38_3
float HMUI::ScrollView::$$c::$Awake$b__38_3(float i) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c::<Awake>b__38_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__38_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, i);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c__DisplayClass50_0
#include "HMUI/ScrollView_--c__DisplayClass50_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/<>c__DisplayClass50_0.<PageUpButtonPressed>b__0
bool HMUI::ScrollView::$$c__DisplayClass50_0::$PageUpButtonPressed$b__0(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass50_0::<PageUpButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PageUpButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c__DisplayClass51_0
#include "HMUI/ScrollView_--c__DisplayClass51_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/<>c__DisplayClass51_0.<PageDownButtonPressed>b__0
bool HMUI::ScrollView::$$c__DisplayClass51_0::$PageDownButtonPressed$b__0(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass51_0::<PageDownButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PageDownButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMUI.ScrollView/<>c__DisplayClass56_0
#include "HMUI/ScrollView_--c__DisplayClass56_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMUI.ScrollView/<>c__DisplayClass56_0.<HandleJoystickWasCenteredThisFrame>b__0
bool HMUI::ScrollView::$$c__DisplayClass56_0::$HandleJoystickWasCenteredThisFrame$b__0(float pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::$$c__DisplayClass56_0::<HandleJoystickWasCenteredThisFrame>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleJoystickWasCenteredThisFrame>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pos);
}
