// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectTypeInfo/InjectConstructorInfo
#include "Zenject/InjectTypeInfo_InjectConstructorInfo.hpp"
// Including type: Zenject.ZenFactoryMethod
#include "Zenject/ZenFactoryMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InjectTypeInfo::InjectConstructorInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::InjectConstructorInfo::*)(Zenject::ZenFactoryMethod*, ::Array<Zenject::InjectableInfo*>*)>(&InjectTypeInfo::InjectConstructorInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo::InjectConstructorInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenFactoryMethod*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectableInfo*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::InjectConstructorInfo::*)(Zenject::ZenFactoryMethod*, ::Array<Zenject::InjectableInfo*>*)>(&InjectTypeInfo::InjectConstructorInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo::InjectConstructorInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenFactoryMethod*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectableInfo*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectTypeInfo/InjectMethodInfo
#include "Zenject/InjectTypeInfo_InjectMethodInfo.hpp"
// Including type: Zenject.ZenInjectMethod
#include "Zenject/ZenInjectMethod.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InjectTypeInfo::InjectMethodInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::InjectMethodInfo::*)(Zenject::ZenInjectMethod*, ::Array<Zenject::InjectableInfo*>*, ::Il2CppString*)>(&InjectTypeInfo::InjectMethodInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo::InjectMethodInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenInjectMethod*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectableInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectTypeInfo::InjectMethodInfo::*)(Zenject::ZenInjectMethod*, ::Array<Zenject::InjectableInfo*>*, ::Il2CppString*)>(&InjectTypeInfo::InjectMethodInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectTypeInfo::InjectMethodInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenInjectMethod*>(), ::il2cpp_utils::ExtractIndependentType<::Array<Zenject::InjectableInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IPoolable.OnDespawned
void Zenject::IPoolable::OnDespawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPoolable::OnDespawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IPoolable.OnSpawned
void Zenject::IPoolable::OnSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IPoolable::OnSpawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPoolable::OnDespawned
// Il2CppName: OnDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPoolable::*)()>(&IPoolable::OnDespawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPoolable*), "OnDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPoolable::OnSpawned
// Il2CppName: OnSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPoolable::*)()>(&IPoolable::OnSpawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPoolable*), "OnSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ITickable.Tick
void Zenject::ITickable::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ITickable::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ITickable::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ITickable::*)()>(&ITickable::Tick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITickable*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IFixedTickable.FixedTick
void Zenject::IFixedTickable::FixedTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IFixedTickable::FixedTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IFixedTickable::FixedTick
// Il2CppName: FixedTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IFixedTickable::*)()>(&IFixedTickable::FixedTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IFixedTickable*), "FixedTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ILateTickable.LateTick
void Zenject::ILateTickable::LateTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ILateTickable::LateTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ILateTickable::LateTick
// Il2CppName: LateTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILateTickable::*)()>(&ILateTickable::LateTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILateTickable*), "LateTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ILateDisposable.LateDispose
void Zenject::ILateDisposable::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ILateDisposable::LateDispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ILateDisposable::LateDispose
// Il2CppName: LateDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILateDisposable::*)()>(&ILateDisposable::LateDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILateDisposable*), "LateDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CanBeNullAttribute
#include "JetBrains/Annotations/CanBeNullAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CanBeNullAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanBeNullAttribute::*)()>(&CanBeNullAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanBeNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanBeNullAttribute::*)()>(&CanBeNullAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanBeNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ItemNotNullAttribute
#include "JetBrains/Annotations/ItemNotNullAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ItemNotNullAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ItemNotNullAttribute::*)()>(&ItemNotNullAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ItemNotNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ItemNotNullAttribute::*)()>(&ItemNotNullAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ItemNotNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ItemCanBeNullAttribute
#include "JetBrains/Annotations/ItemCanBeNullAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ItemCanBeNullAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ItemCanBeNullAttribute::*)()>(&ItemCanBeNullAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ItemCanBeNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ItemCanBeNullAttribute::*)()>(&ItemCanBeNullAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ItemCanBeNullAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.StringFormatMethodAttribute
#include "JetBrains/Annotations/StringFormatMethodAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.get_FormatParameterName
::Il2CppString* JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::get_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.StringFormatMethodAttribute.set_FormatParameterName
void JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::StringFormatMethodAttribute::set_FormatParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FormatParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: StringFormatMethodAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringFormatMethodAttribute::*)(::Il2CppString*)>(&StringFormatMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringFormatMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringFormatMethodAttribute::*)(::Il2CppString*)>(&StringFormatMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringFormatMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringFormatMethodAttribute::get_FormatParameterName
// Il2CppName: get_FormatParameterName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringFormatMethodAttribute::*)()>(&StringFormatMethodAttribute::get_FormatParameterName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringFormatMethodAttribute*), "get_FormatParameterName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringFormatMethodAttribute::set_FormatParameterName
// Il2CppName: set_FormatParameterName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringFormatMethodAttribute::*)(::Il2CppString*)>(&StringFormatMethodAttribute::set_FormatParameterName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringFormatMethodAttribute*), "set_FormatParameterName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.ValueProviderAttribute
#include "JetBrains/Annotations/ValueProviderAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.get_Name
::Il2CppString* JetBrains::Annotations::ValueProviderAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ValueProviderAttribute.set_Name
void JetBrains::Annotations::ValueProviderAttribute::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ValueProviderAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ValueProviderAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueProviderAttribute::*)(::Il2CppString*)>(&ValueProviderAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueProviderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueProviderAttribute::*)(::Il2CppString*)>(&ValueProviderAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueProviderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ValueProviderAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ValueProviderAttribute::*)()>(&ValueProviderAttribute::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueProviderAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ValueProviderAttribute::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueProviderAttribute::*)(::Il2CppString*)>(&ValueProviderAttribute::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueProviderAttribute*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InvokerParameterNameAttribute
#include "JetBrains/Annotations/InvokerParameterNameAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InvokerParameterNameAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InvokerParameterNameAttribute::*)()>(&InvokerParameterNameAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InvokerParameterNameAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InvokerParameterNameAttribute::*)()>(&InvokerParameterNameAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InvokerParameterNameAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute
#include "JetBrains/Annotations/NotifyPropertyChangedInvocatorAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.get_ParameterName
::Il2CppString* JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::get_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute.set_ParameterName
void JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::NotifyPropertyChangedInvocatorAttribute::set_ParameterName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParameterName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: NotifyPropertyChangedInvocatorAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotifyPropertyChangedInvocatorAttribute::*)(::Il2CppString*)>(&NotifyPropertyChangedInvocatorAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotifyPropertyChangedInvocatorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotifyPropertyChangedInvocatorAttribute::*)(::Il2CppString*)>(&NotifyPropertyChangedInvocatorAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotifyPropertyChangedInvocatorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NotifyPropertyChangedInvocatorAttribute::get_ParameterName
// Il2CppName: get_ParameterName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NotifyPropertyChangedInvocatorAttribute::*)()>(&NotifyPropertyChangedInvocatorAttribute::get_ParameterName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotifyPropertyChangedInvocatorAttribute*), "get_ParameterName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NotifyPropertyChangedInvocatorAttribute::set_ParameterName
// Il2CppName: set_ParameterName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotifyPropertyChangedInvocatorAttribute::*)(::Il2CppString*)>(&NotifyPropertyChangedInvocatorAttribute::set_ParameterName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotifyPropertyChangedInvocatorAttribute*), "set_ParameterName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NotifyPropertyChangedInvocatorAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotifyPropertyChangedInvocatorAttribute::*)()>(&NotifyPropertyChangedInvocatorAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotifyPropertyChangedInvocatorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotifyPropertyChangedInvocatorAttribute::*)()>(&NotifyPropertyChangedInvocatorAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotifyPropertyChangedInvocatorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.ContractAnnotationAttribute
#include "JetBrains/Annotations/ContractAnnotationAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_Contract
::Il2CppString* JetBrains::Annotations::ContractAnnotationAttribute::get_Contract() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::get_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_Contract
void JetBrains::Annotations::ContractAnnotationAttribute::set_Contract(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::set_Contract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Contract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.get_ForceFullStates
bool JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::get_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.ContractAnnotationAttribute.set_ForceFullStates
void JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::ContractAnnotationAttribute::set_ForceFullStates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ForceFullStates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ContractAnnotationAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContractAnnotationAttribute::*)(::Il2CppString*)>(&ContractAnnotationAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContractAnnotationAttribute::*)(::Il2CppString*)>(&ContractAnnotationAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ContractAnnotationAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContractAnnotationAttribute::*)(::Il2CppString*, bool)>(&ContractAnnotationAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContractAnnotationAttribute::*)(::Il2CppString*, bool)>(&ContractAnnotationAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ContractAnnotationAttribute::get_Contract
// Il2CppName: get_Contract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ContractAnnotationAttribute::*)()>(&ContractAnnotationAttribute::get_Contract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), "get_Contract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ContractAnnotationAttribute::set_Contract
// Il2CppName: set_Contract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContractAnnotationAttribute::*)(::Il2CppString*)>(&ContractAnnotationAttribute::set_Contract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), "set_Contract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ContractAnnotationAttribute::get_ForceFullStates
// Il2CppName: get_ForceFullStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ContractAnnotationAttribute::*)()>(&ContractAnnotationAttribute::get_ForceFullStates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), "get_ForceFullStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ContractAnnotationAttribute::set_ForceFullStates
// Il2CppName: set_ForceFullStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContractAnnotationAttribute::*)(bool)>(&ContractAnnotationAttribute::set_ForceFullStates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContractAnnotationAttribute*), "set_ForceFullStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LocalizationRequiredAttribute
#include "JetBrains/Annotations/LocalizationRequiredAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.get_Required
bool JetBrains::Annotations::LocalizationRequiredAttribute::get_Required() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::get_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.LocalizationRequiredAttribute.set_Required
void JetBrains::Annotations::LocalizationRequiredAttribute::set_Required(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::LocalizationRequiredAttribute::set_Required");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Required", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: LocalizationRequiredAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizationRequiredAttribute::*)(bool)>(&LocalizationRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizationRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizationRequiredAttribute::*)(bool)>(&LocalizationRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizationRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalizationRequiredAttribute::get_Required
// Il2CppName: get_Required
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizationRequiredAttribute::*)()>(&LocalizationRequiredAttribute::get_Required)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizationRequiredAttribute*), "get_Required", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizationRequiredAttribute::set_Required
// Il2CppName: set_Required
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizationRequiredAttribute::*)(bool)>(&LocalizationRequiredAttribute::set_Required)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizationRequiredAttribute*), "set_Required", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalizationRequiredAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizationRequiredAttribute::*)()>(&LocalizationRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizationRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizationRequiredAttribute::*)()>(&LocalizationRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizationRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CannotApplyEqualityOperatorAttribute
#include "JetBrains/Annotations/CannotApplyEqualityOperatorAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CannotApplyEqualityOperatorAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CannotApplyEqualityOperatorAttribute::*)()>(&CannotApplyEqualityOperatorAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CannotApplyEqualityOperatorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CannotApplyEqualityOperatorAttribute::*)()>(&CannotApplyEqualityOperatorAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CannotApplyEqualityOperatorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.BaseTypeRequiredAttribute
#include "JetBrains/Annotations/BaseTypeRequiredAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.get_BaseType
System::Type* JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.BaseTypeRequiredAttribute.set_BaseType
void JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: BaseTypeRequiredAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseTypeRequiredAttribute::*)(System::Type*)>(&BaseTypeRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTypeRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseTypeRequiredAttribute::*)(System::Type*)>(&BaseTypeRequiredAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTypeRequiredAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BaseTypeRequiredAttribute::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (BaseTypeRequiredAttribute::*)()>(&BaseTypeRequiredAttribute::get_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTypeRequiredAttribute*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseTypeRequiredAttribute::set_BaseType
// Il2CppName: set_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseTypeRequiredAttribute::*)(System::Type*)>(&BaseTypeRequiredAttribute::set_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseTypeRequiredAttribute*), "set_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.MeansImplicitUseAttribute
#include "JetBrains/Annotations/MeansImplicitUseAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_UseKindFlags
JetBrains::Annotations::ImplicitUseKindFlags JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::get_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<JetBrains::Annotations::ImplicitUseKindFlags, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_UseKindFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags(JetBrains::Annotations::ImplicitUseKindFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::set_UseKindFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UseKindFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.get_TargetFlags
JetBrains::Annotations::ImplicitUseTargetFlags JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::get_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<JetBrains::Annotations::ImplicitUseTargetFlags, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MeansImplicitUseAttribute.set_TargetFlags
void JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags(JetBrains::Annotations::ImplicitUseTargetFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MeansImplicitUseAttribute::set_TargetFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseKindFlags)>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseKindFlags>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseKindFlags)>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseKindFlags>()});
  }
};
// Writing MetadataGetter for method: MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseTargetFlags)>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseTargetFlags>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseTargetFlags)>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseTargetFlags>()});
  }
};
// Writing MetadataGetter for method: MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseKindFlags, JetBrains::Annotations::ImplicitUseTargetFlags)>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseKindFlags>(), ::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseTargetFlags>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseKindFlags, JetBrains::Annotations::ImplicitUseTargetFlags)>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseKindFlags>(), ::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseTargetFlags>()});
  }
};
// Writing MetadataGetter for method: MeansImplicitUseAttribute::get_UseKindFlags
// Il2CppName: get_UseKindFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<JetBrains::Annotations::ImplicitUseKindFlags (MeansImplicitUseAttribute::*)()>(&MeansImplicitUseAttribute::get_UseKindFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), "get_UseKindFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeansImplicitUseAttribute::set_UseKindFlags
// Il2CppName: set_UseKindFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseKindFlags)>(&MeansImplicitUseAttribute::set_UseKindFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), "set_UseKindFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseKindFlags>()});
  }
};
// Writing MetadataGetter for method: MeansImplicitUseAttribute::get_TargetFlags
// Il2CppName: get_TargetFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<JetBrains::Annotations::ImplicitUseTargetFlags (MeansImplicitUseAttribute::*)()>(&MeansImplicitUseAttribute::get_TargetFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), "get_TargetFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MeansImplicitUseAttribute::set_TargetFlags
// Il2CppName: set_TargetFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)(JetBrains::Annotations::ImplicitUseTargetFlags)>(&MeansImplicitUseAttribute::set_TargetFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), "set_TargetFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::ImplicitUseTargetFlags>()});
  }
};
// Writing MetadataGetter for method: MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)()>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MeansImplicitUseAttribute::*)()>(&MeansImplicitUseAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MeansImplicitUseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.PublicAPIAttribute
#include "JetBrains/Annotations/PublicAPIAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.get_Comment
::Il2CppString* JetBrains::Annotations::PublicAPIAttribute::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PublicAPIAttribute.set_Comment
void JetBrains::Annotations::PublicAPIAttribute::set_Comment(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PublicAPIAttribute::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: PublicAPIAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicAPIAttribute::*)(::Il2CppString*)>(&PublicAPIAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicAPIAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicAPIAttribute::*)(::Il2CppString*)>(&PublicAPIAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicAPIAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PublicAPIAttribute::get_Comment
// Il2CppName: get_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PublicAPIAttribute::*)()>(&PublicAPIAttribute::get_Comment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicAPIAttribute*), "get_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PublicAPIAttribute::set_Comment
// Il2CppName: set_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicAPIAttribute::*)(::Il2CppString*)>(&PublicAPIAttribute::set_Comment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicAPIAttribute*), "set_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PublicAPIAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicAPIAttribute::*)()>(&PublicAPIAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicAPIAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PublicAPIAttribute::*)()>(&PublicAPIAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PublicAPIAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.InstantHandleAttribute
#include "JetBrains/Annotations/InstantHandleAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InstantHandleAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantHandleAttribute::*)()>(&InstantHandleAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantHandleAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantHandleAttribute::*)()>(&InstantHandleAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantHandleAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.PureAttribute
#include "JetBrains/Annotations/PureAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PureAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PureAttribute::*)()>(&PureAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PureAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PureAttribute::*)()>(&PureAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PureAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.MustUseReturnValueAttribute
#include "JetBrains/Annotations/MustUseReturnValueAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.get_Justification
::Il2CppString* JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::get_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MustUseReturnValueAttribute.set_Justification
void JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MustUseReturnValueAttribute::set_Justification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Justification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MustUseReturnValueAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MustUseReturnValueAttribute::*)(::Il2CppString*)>(&MustUseReturnValueAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MustUseReturnValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MustUseReturnValueAttribute::*)(::Il2CppString*)>(&MustUseReturnValueAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MustUseReturnValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MustUseReturnValueAttribute::get_Justification
// Il2CppName: get_Justification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MustUseReturnValueAttribute::*)()>(&MustUseReturnValueAttribute::get_Justification)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MustUseReturnValueAttribute*), "get_Justification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MustUseReturnValueAttribute::set_Justification
// Il2CppName: set_Justification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MustUseReturnValueAttribute::*)(::Il2CppString*)>(&MustUseReturnValueAttribute::set_Justification)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MustUseReturnValueAttribute*), "set_Justification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MustUseReturnValueAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MustUseReturnValueAttribute::*)()>(&MustUseReturnValueAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MustUseReturnValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MustUseReturnValueAttribute::*)()>(&MustUseReturnValueAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MustUseReturnValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.ProvidesContextAttribute
#include "JetBrains/Annotations/ProvidesContextAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ProvidesContextAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProvidesContextAttribute::*)()>(&ProvidesContextAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProvidesContextAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProvidesContextAttribute::*)()>(&ProvidesContextAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProvidesContextAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.PathReferenceAttribute
#include "JetBrains/Annotations/PathReferenceAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.get_BasePath
::Il2CppString* JetBrains::Annotations::PathReferenceAttribute::get_BasePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::get_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.PathReferenceAttribute.set_BasePath
void JetBrains::Annotations::PathReferenceAttribute::set_BasePath(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::PathReferenceAttribute::set_BasePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BasePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: PathReferenceAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathReferenceAttribute::*)(::Il2CppString*)>(&PathReferenceAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathReferenceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathReferenceAttribute::*)(::Il2CppString*)>(&PathReferenceAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathReferenceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PathReferenceAttribute::get_BasePath
// Il2CppName: get_BasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PathReferenceAttribute::*)()>(&PathReferenceAttribute::get_BasePath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathReferenceAttribute*), "get_BasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PathReferenceAttribute::set_BasePath
// Il2CppName: set_BasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathReferenceAttribute::*)(::Il2CppString*)>(&PathReferenceAttribute::set_BasePath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathReferenceAttribute*), "set_BasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PathReferenceAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathReferenceAttribute::*)()>(&PathReferenceAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathReferenceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PathReferenceAttribute::*)()>(&PathReferenceAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PathReferenceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.SourceTemplateAttribute
#include "JetBrains/Annotations/SourceTemplateAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SourceTemplateAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SourceTemplateAttribute::*)()>(&SourceTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SourceTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SourceTemplateAttribute::*)()>(&SourceTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SourceTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.MacroAttribute
#include "JetBrains/Annotations/MacroAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Expression
::Il2CppString* JetBrains::Annotations::MacroAttribute::get_Expression() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Expression
void JetBrains::Annotations::MacroAttribute::set_Expression(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Expression");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Expression", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Editable
int JetBrains::Annotations::MacroAttribute::get_Editable() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Editable
void JetBrains::Annotations::MacroAttribute::set_Editable(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Editable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Editable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.get_Target
::Il2CppString* JetBrains::Annotations::MacroAttribute::get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::get_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.MacroAttribute.set_Target
void JetBrains::Annotations::MacroAttribute::set_Target(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::MacroAttribute::set_Target");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Target", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MacroAttribute::get_Expression
// Il2CppName: get_Expression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MacroAttribute::*)()>(&MacroAttribute::get_Expression)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), "get_Expression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MacroAttribute::set_Expression
// Il2CppName: set_Expression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MacroAttribute::*)(::Il2CppString*)>(&MacroAttribute::set_Expression)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), "set_Expression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MacroAttribute::get_Editable
// Il2CppName: get_Editable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MacroAttribute::*)()>(&MacroAttribute::get_Editable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), "get_Editable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MacroAttribute::set_Editable
// Il2CppName: set_Editable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MacroAttribute::*)(int)>(&MacroAttribute::set_Editable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), "set_Editable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MacroAttribute::get_Target
// Il2CppName: get_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MacroAttribute::*)()>(&MacroAttribute::get_Target)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), "get_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MacroAttribute::set_Target
// Il2CppName: set_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MacroAttribute::*)(::Il2CppString*)>(&MacroAttribute::set_Target)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), "set_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MacroAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MacroAttribute::*)()>(&MacroAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MacroAttribute::*)()>(&MacroAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MacroAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaMasterLocationFormatAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.get_Format
::Il2CppString* JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcAreaMasterLocationFormatAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaMasterLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaMasterLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaMasterLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaMasterLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaMasterLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaMasterLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcAreaMasterLocationFormatAttribute::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcAreaMasterLocationFormatAttribute::*)()>(&AspMvcAreaMasterLocationFormatAttribute::get_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaMasterLocationFormatAttribute*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcAreaMasterLocationFormatAttribute::set_Format
// Il2CppName: set_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaMasterLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaMasterLocationFormatAttribute::set_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaMasterLocationFormatAttribute*), "set_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaPartialViewLocationFormatAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.get_Format
::Il2CppString* JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcAreaPartialViewLocationFormatAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaPartialViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaPartialViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaPartialViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaPartialViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaPartialViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaPartialViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcAreaPartialViewLocationFormatAttribute::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcAreaPartialViewLocationFormatAttribute::*)()>(&AspMvcAreaPartialViewLocationFormatAttribute::get_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaPartialViewLocationFormatAttribute*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcAreaPartialViewLocationFormatAttribute::set_Format
// Il2CppName: set_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaPartialViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaPartialViewLocationFormatAttribute::set_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaPartialViewLocationFormatAttribute*), "set_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcAreaViewLocationFormatAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.get_Format
::Il2CppString* JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcAreaViewLocationFormatAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcAreaViewLocationFormatAttribute::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcAreaViewLocationFormatAttribute::*)()>(&AspMvcAreaViewLocationFormatAttribute::get_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaViewLocationFormatAttribute*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcAreaViewLocationFormatAttribute::set_Format
// Il2CppName: set_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcAreaViewLocationFormatAttribute::set_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaViewLocationFormatAttribute*), "set_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcMasterLocationFormatAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.get_Format
::Il2CppString* JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcMasterLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcMasterLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcMasterLocationFormatAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcMasterLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcMasterLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcMasterLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcMasterLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcMasterLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcMasterLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcMasterLocationFormatAttribute::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcMasterLocationFormatAttribute::*)()>(&AspMvcMasterLocationFormatAttribute::get_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcMasterLocationFormatAttribute*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcMasterLocationFormatAttribute::set_Format
// Il2CppName: set_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcMasterLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcMasterLocationFormatAttribute::set_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcMasterLocationFormatAttribute*), "set_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcPartialViewLocationFormatAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.get_Format
::Il2CppString* JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcPartialViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcPartialViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcPartialViewLocationFormatAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcPartialViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcPartialViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcPartialViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcPartialViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcPartialViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcPartialViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcPartialViewLocationFormatAttribute::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcPartialViewLocationFormatAttribute::*)()>(&AspMvcPartialViewLocationFormatAttribute::get_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcPartialViewLocationFormatAttribute*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcPartialViewLocationFormatAttribute::set_Format
// Il2CppName: set_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcPartialViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcPartialViewLocationFormatAttribute::set_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcPartialViewLocationFormatAttribute*), "set_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcViewLocationFormatAttribute
#include "JetBrains/Annotations/AspMvcViewLocationFormatAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.get_Format
::Il2CppString* JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcViewLocationFormatAttribute::get_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcViewLocationFormatAttribute.set_Format
void JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcViewLocationFormatAttribute::set_Format");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Format", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcViewLocationFormatAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcViewLocationFormatAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewLocationFormatAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcViewLocationFormatAttribute::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcViewLocationFormatAttribute::*)()>(&AspMvcViewLocationFormatAttribute::get_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewLocationFormatAttribute*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcViewLocationFormatAttribute::set_Format
// Il2CppName: set_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewLocationFormatAttribute::*)(::Il2CppString*)>(&AspMvcViewLocationFormatAttribute::set_Format)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewLocationFormatAttribute*), "set_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcActionAttribute
#include "JetBrains/Annotations/AspMvcActionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.get_AnonymousProperty
::Il2CppString* JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcActionAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcActionAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcActionAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcActionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcActionAttribute::*)(::Il2CppString*)>(&AspMvcActionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcActionAttribute::*)(::Il2CppString*)>(&AspMvcActionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcActionAttribute::get_AnonymousProperty
// Il2CppName: get_AnonymousProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcActionAttribute::*)()>(&AspMvcActionAttribute::get_AnonymousProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionAttribute*), "get_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcActionAttribute::set_AnonymousProperty
// Il2CppName: set_AnonymousProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcActionAttribute::*)(::Il2CppString*)>(&AspMvcActionAttribute::set_AnonymousProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionAttribute*), "set_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcActionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcActionAttribute::*)()>(&AspMvcActionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcActionAttribute::*)()>(&AspMvcActionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcAreaAttribute
#include "JetBrains/Annotations/AspMvcAreaAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.get_AnonymousProperty
::Il2CppString* JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcAreaAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcAreaAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcAreaAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaAttribute::*)(::Il2CppString*)>(&AspMvcAreaAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaAttribute::*)(::Il2CppString*)>(&AspMvcAreaAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcAreaAttribute::get_AnonymousProperty
// Il2CppName: get_AnonymousProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcAreaAttribute::*)()>(&AspMvcAreaAttribute::get_AnonymousProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaAttribute*), "get_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcAreaAttribute::set_AnonymousProperty
// Il2CppName: set_AnonymousProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaAttribute::*)(::Il2CppString*)>(&AspMvcAreaAttribute::set_AnonymousProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaAttribute*), "set_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcAreaAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaAttribute::*)()>(&AspMvcAreaAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcAreaAttribute::*)()>(&AspMvcAreaAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcAreaAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspMvcControllerAttribute
#include "JetBrains/Annotations/AspMvcControllerAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.get_AnonymousProperty
::Il2CppString* JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcControllerAttribute::get_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspMvcControllerAttribute.set_AnonymousProperty
void JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcControllerAttribute::set_AnonymousProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AnonymousProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspMvcControllerAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)(::Il2CppString*)>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)(::Il2CppString*)>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcControllerAttribute::get_AnonymousProperty
// Il2CppName: get_AnonymousProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcControllerAttribute::*)()>(&AspMvcControllerAttribute::get_AnonymousProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), "get_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspMvcControllerAttribute::set_AnonymousProperty
// Il2CppName: set_AnonymousProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)(::Il2CppString*)>(&AspMvcControllerAttribute::set_AnonymousProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), "set_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspMvcControllerAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)()>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)()>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcMasterAttribute
#include "JetBrains/Annotations/AspMvcMasterAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcMasterAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcMasterAttribute::*)()>(&AspMvcMasterAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcMasterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcMasterAttribute::*)()>(&AspMvcMasterAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcMasterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcModelTypeAttribute
#include "JetBrains/Annotations/AspMvcModelTypeAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcModelTypeAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcModelTypeAttribute::*)()>(&AspMvcModelTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcModelTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcModelTypeAttribute::*)()>(&AspMvcModelTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcModelTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcPartialViewAttribute
#include "JetBrains/Annotations/AspMvcPartialViewAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcPartialViewAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcPartialViewAttribute::*)()>(&AspMvcPartialViewAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcPartialViewAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcPartialViewAttribute::*)()>(&AspMvcPartialViewAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcPartialViewAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcSuppressViewErrorAttribute
#include "JetBrains/Annotations/AspMvcSuppressViewErrorAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcSuppressViewErrorAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcSuppressViewErrorAttribute::*)()>(&AspMvcSuppressViewErrorAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcSuppressViewErrorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcSuppressViewErrorAttribute::*)()>(&AspMvcSuppressViewErrorAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcSuppressViewErrorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcDisplayTemplateAttribute
#include "JetBrains/Annotations/AspMvcDisplayTemplateAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcDisplayTemplateAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcDisplayTemplateAttribute::*)()>(&AspMvcDisplayTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcDisplayTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcDisplayTemplateAttribute::*)()>(&AspMvcDisplayTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcDisplayTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcEditorTemplateAttribute
#include "JetBrains/Annotations/AspMvcEditorTemplateAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcEditorTemplateAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcEditorTemplateAttribute::*)()>(&AspMvcEditorTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcEditorTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcEditorTemplateAttribute::*)()>(&AspMvcEditorTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcEditorTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcTemplateAttribute
#include "JetBrains/Annotations/AspMvcTemplateAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcTemplateAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcTemplateAttribute::*)()>(&AspMvcTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcTemplateAttribute::*)()>(&AspMvcTemplateAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcTemplateAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewAttribute
#include "JetBrains/Annotations/AspMvcViewAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcViewAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewAttribute::*)()>(&AspMvcViewAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewAttribute::*)()>(&AspMvcViewAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentAttribute
#include "JetBrains/Annotations/AspMvcViewComponentAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcViewComponentAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewComponentAttribute::*)()>(&AspMvcViewComponentAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewComponentAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewComponentAttribute::*)()>(&AspMvcViewComponentAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewComponentAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcViewComponentViewAttribute
#include "JetBrains/Annotations/AspMvcViewComponentViewAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcViewComponentViewAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewComponentViewAttribute::*)()>(&AspMvcViewComponentViewAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewComponentViewAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcViewComponentViewAttribute::*)()>(&AspMvcViewComponentViewAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcViewComponentViewAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMvcActionSelectorAttribute
#include "JetBrains/Annotations/AspMvcActionSelectorAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMvcActionSelectorAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcActionSelectorAttribute::*)()>(&AspMvcActionSelectorAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionSelectorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcActionSelectorAttribute::*)()>(&AspMvcActionSelectorAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMvcActionSelectorAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.HtmlElementAttributesAttribute
#include "JetBrains/Annotations/HtmlElementAttributesAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.get_Name
::Il2CppString* JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlElementAttributesAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlElementAttributesAttribute.set_Name
void JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlElementAttributesAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: HtmlElementAttributesAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlElementAttributesAttribute::*)(::Il2CppString*)>(&HtmlElementAttributesAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlElementAttributesAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlElementAttributesAttribute::*)(::Il2CppString*)>(&HtmlElementAttributesAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlElementAttributesAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlElementAttributesAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HtmlElementAttributesAttribute::*)()>(&HtmlElementAttributesAttribute::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlElementAttributesAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlElementAttributesAttribute::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlElementAttributesAttribute::*)(::Il2CppString*)>(&HtmlElementAttributesAttribute::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlElementAttributesAttribute*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlElementAttributesAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlElementAttributesAttribute::*)()>(&HtmlElementAttributesAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlElementAttributesAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlElementAttributesAttribute::*)()>(&HtmlElementAttributesAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlElementAttributesAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.HtmlAttributeValueAttribute
#include "JetBrains/Annotations/HtmlAttributeValueAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.get_Name
::Il2CppString* JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlAttributeValueAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.HtmlAttributeValueAttribute.set_Name
void JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::HtmlAttributeValueAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: HtmlAttributeValueAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlAttributeValueAttribute::*)(::Il2CppString*)>(&HtmlAttributeValueAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlAttributeValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlAttributeValueAttribute::*)(::Il2CppString*)>(&HtmlAttributeValueAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlAttributeValueAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlAttributeValueAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HtmlAttributeValueAttribute::*)()>(&HtmlAttributeValueAttribute::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlAttributeValueAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlAttributeValueAttribute::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlAttributeValueAttribute::*)(::Il2CppString*)>(&HtmlAttributeValueAttribute::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlAttributeValueAttribute*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorSectionAttribute
#include "JetBrains/Annotations/RazorSectionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RazorSectionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorSectionAttribute::*)()>(&RazorSectionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorSectionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorSectionAttribute::*)()>(&RazorSectionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorSectionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessAttribute
#include "JetBrains/Annotations/CollectionAccessAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.get_CollectionAccessType
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessAttribute::get_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<JetBrains::Annotations::CollectionAccessType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.CollectionAccessAttribute.set_CollectionAccessType
void JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessAttribute::set_CollectionAccessType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CollectionAccessType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: CollectionAccessAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CollectionAccessAttribute::*)(JetBrains::Annotations::CollectionAccessType)>(&CollectionAccessAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionAccessAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::CollectionAccessType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CollectionAccessAttribute::*)(JetBrains::Annotations::CollectionAccessType)>(&CollectionAccessAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionAccessAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::CollectionAccessType>()});
  }
};
// Writing MetadataGetter for method: CollectionAccessAttribute::get_CollectionAccessType
// Il2CppName: get_CollectionAccessType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<JetBrains::Annotations::CollectionAccessType (CollectionAccessAttribute::*)()>(&CollectionAccessAttribute::get_CollectionAccessType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionAccessAttribute*), "get_CollectionAccessType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CollectionAccessAttribute::set_CollectionAccessType
// Il2CppName: set_CollectionAccessType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CollectionAccessAttribute::*)(JetBrains::Annotations::CollectionAccessType)>(&CollectionAccessAttribute::set_CollectionAccessType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionAccessAttribute*), "set_CollectionAccessType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::CollectionAccessType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.CollectionAccessType
#include "JetBrains/Annotations/CollectionAccessType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType None
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "None"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType None
void JetBrains::Annotations::CollectionAccessType::_set_None(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType Read
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_Read");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "Read"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType Read
void JetBrains::Annotations::CollectionAccessType::_set_Read(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_Read");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "Read", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_ModifyExistingContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType ModifyExistingContent
void JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_ModifyExistingContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "ModifyExistingContent", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
JetBrains::Annotations::CollectionAccessType JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_get_UpdatedContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::CollectionAccessType>("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.CollectionAccessType UpdatedContent
void JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent(JetBrains::Annotations::CollectionAccessType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::CollectionAccessType::_set_UpdatedContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "CollectionAccessType", "UpdatedContent", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionMethodAttribute
#include "JetBrains/Annotations/AssertionMethodAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AssertionMethodAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssertionMethodAttribute::*)()>(&AssertionMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssertionMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssertionMethodAttribute::*)()>(&AssertionMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssertionMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionAttribute
#include "JetBrains/Annotations/AssertionConditionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.get_ConditionType
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionAttribute::get_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<JetBrains::Annotations::AssertionConditionType, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AssertionConditionAttribute.set_ConditionType
void JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionAttribute::set_ConditionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConditionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AssertionConditionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssertionConditionAttribute::*)(JetBrains::Annotations::AssertionConditionType)>(&AssertionConditionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssertionConditionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::AssertionConditionType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssertionConditionAttribute::*)(JetBrains::Annotations::AssertionConditionType)>(&AssertionConditionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssertionConditionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::AssertionConditionType>()});
  }
};
// Writing MetadataGetter for method: AssertionConditionAttribute::get_ConditionType
// Il2CppName: get_ConditionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<JetBrains::Annotations::AssertionConditionType (AssertionConditionAttribute::*)()>(&AssertionConditionAttribute::get_ConditionType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssertionConditionAttribute*), "get_ConditionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AssertionConditionAttribute::set_ConditionType
// Il2CppName: set_ConditionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssertionConditionAttribute::*)(JetBrains::Annotations::AssertionConditionType)>(&AssertionConditionAttribute::set_ConditionType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssertionConditionAttribute*), "set_ConditionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<JetBrains::Annotations::AssertionConditionType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AssertionConditionType
#include "JetBrains/Annotations/AssertionConditionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_TRUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_TRUE
void JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_TRUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_TRUE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_FALSE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_FALSE
void JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_FALSE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_FALSE", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NULL(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NULL", value));
}
// Autogenerated static field getter
// Get static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
JetBrains::Annotations::AssertionConditionType JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_get_IS_NOT_NULL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<JetBrains::Annotations::AssertionConditionType>("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL"));
}
// Autogenerated static field setter
// Set static field: static public JetBrains.Annotations.AssertionConditionType IS_NOT_NULL
void JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL(JetBrains::Annotations::AssertionConditionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionType::_set_IS_NOT_NULL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("JetBrains.Annotations", "AssertionConditionType", "IS_NOT_NULL", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.TerminatesProgramAttribute
#include "JetBrains/Annotations/TerminatesProgramAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TerminatesProgramAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TerminatesProgramAttribute::*)()>(&TerminatesProgramAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TerminatesProgramAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TerminatesProgramAttribute::*)()>(&TerminatesProgramAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TerminatesProgramAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.LinqTunnelAttribute
#include "JetBrains/Annotations/LinqTunnelAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LinqTunnelAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LinqTunnelAttribute::*)()>(&LinqTunnelAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LinqTunnelAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LinqTunnelAttribute::*)()>(&LinqTunnelAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LinqTunnelAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoEnumerationAttribute
#include "JetBrains/Annotations/NoEnumerationAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NoEnumerationAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoEnumerationAttribute::*)()>(&NoEnumerationAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoEnumerationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoEnumerationAttribute::*)()>(&NoEnumerationAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoEnumerationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RegexPatternAttribute
#include "JetBrains/Annotations/RegexPatternAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RegexPatternAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegexPatternAttribute::*)()>(&RegexPatternAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RegexPatternAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegexPatternAttribute::*)()>(&RegexPatternAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RegexPatternAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.NoReorderAttribute
#include "JetBrains/Annotations/NoReorderAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NoReorderAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoReorderAttribute::*)()>(&NoReorderAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoReorderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoReorderAttribute::*)()>(&NoReorderAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoReorderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemsControlAttribute
#include "JetBrains/Annotations/XamlItemsControlAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: XamlItemsControlAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XamlItemsControlAttribute::*)()>(&XamlItemsControlAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XamlItemsControlAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XamlItemsControlAttribute::*)()>(&XamlItemsControlAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XamlItemsControlAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute
#include "JetBrains/Annotations/XamlItemBindingOfItemsControlAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: XamlItemBindingOfItemsControlAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XamlItemBindingOfItemsControlAttribute::*)()>(&XamlItemBindingOfItemsControlAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XamlItemBindingOfItemsControlAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XamlItemBindingOfItemsControlAttribute::*)()>(&XamlItemBindingOfItemsControlAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XamlItemBindingOfItemsControlAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspChildControlTypeAttribute
#include "JetBrains/Annotations/AspChildControlTypeAttribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_TagName
::Il2CppString* JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::get_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_TagName
void JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::set_TagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.get_ControlType
System::Type* JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::get_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspChildControlTypeAttribute.set_ControlType
void JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspChildControlTypeAttribute::set_ControlType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ControlType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspChildControlTypeAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspChildControlTypeAttribute::*)(::Il2CppString*, System::Type*)>(&AspChildControlTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspChildControlTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspChildControlTypeAttribute::*)(::Il2CppString*, System::Type*)>(&AspChildControlTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspChildControlTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AspChildControlTypeAttribute::get_TagName
// Il2CppName: get_TagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspChildControlTypeAttribute::*)()>(&AspChildControlTypeAttribute::get_TagName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspChildControlTypeAttribute*), "get_TagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspChildControlTypeAttribute::set_TagName
// Il2CppName: set_TagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspChildControlTypeAttribute::*)(::Il2CppString*)>(&AspChildControlTypeAttribute::set_TagName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspChildControlTypeAttribute*), "set_TagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspChildControlTypeAttribute::get_ControlType
// Il2CppName: get_ControlType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (AspChildControlTypeAttribute::*)()>(&AspChildControlTypeAttribute::get_ControlType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspChildControlTypeAttribute*), "get_ControlType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspChildControlTypeAttribute::set_ControlType
// Il2CppName: set_ControlType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspChildControlTypeAttribute::*)(System::Type*)>(&AspChildControlTypeAttribute::set_ControlType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspChildControlTypeAttribute*), "set_ControlType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldAttribute
#include "JetBrains/Annotations/AspDataFieldAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspDataFieldAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspDataFieldAttribute::*)()>(&AspDataFieldAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspDataFieldAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspDataFieldAttribute::*)()>(&AspDataFieldAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspDataFieldAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspDataFieldsAttribute
#include "JetBrains/Annotations/AspDataFieldsAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspDataFieldsAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspDataFieldsAttribute::*)()>(&AspDataFieldsAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspDataFieldsAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspDataFieldsAttribute::*)()>(&AspDataFieldsAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspDataFieldsAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspMethodPropertyAttribute
#include "JetBrains/Annotations/AspMethodPropertyAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AspMethodPropertyAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMethodPropertyAttribute::*)()>(&AspMethodPropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMethodPropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMethodPropertyAttribute::*)()>(&AspMethodPropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspMethodPropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.AspRequiredAttributeAttribute
#include "JetBrains/Annotations/AspRequiredAttributeAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspRequiredAttributeAttribute.get_Attribute
::Il2CppString* JetBrains::Annotations::AspRequiredAttributeAttribute::get_Attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspRequiredAttributeAttribute::get_Attribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspRequiredAttributeAttribute.set_Attribute
void JetBrains::Annotations::AspRequiredAttributeAttribute::set_Attribute(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspRequiredAttributeAttribute::set_Attribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Attribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspRequiredAttributeAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspRequiredAttributeAttribute::*)(::Il2CppString*)>(&AspRequiredAttributeAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspRequiredAttributeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspRequiredAttributeAttribute::*)(::Il2CppString*)>(&AspRequiredAttributeAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspRequiredAttributeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AspRequiredAttributeAttribute::get_Attribute
// Il2CppName: get_Attribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspRequiredAttributeAttribute::*)()>(&AspRequiredAttributeAttribute::get_Attribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspRequiredAttributeAttribute*), "get_Attribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspRequiredAttributeAttribute::set_Attribute
// Il2CppName: set_Attribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspRequiredAttributeAttribute::*)(::Il2CppString*)>(&AspRequiredAttributeAttribute::set_Attribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspRequiredAttributeAttribute*), "set_Attribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.AspTypePropertyAttribute
#include "JetBrains/Annotations/AspTypePropertyAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.AspTypePropertyAttribute.get_CreateConstructorReferences
bool JetBrains::Annotations::AspTypePropertyAttribute::get_CreateConstructorReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspTypePropertyAttribute::get_CreateConstructorReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CreateConstructorReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.AspTypePropertyAttribute.set_CreateConstructorReferences
void JetBrains::Annotations::AspTypePropertyAttribute::set_CreateConstructorReferences(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspTypePropertyAttribute::set_CreateConstructorReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CreateConstructorReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AspTypePropertyAttribute::get_CreateConstructorReferences
// Il2CppName: get_CreateConstructorReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AspTypePropertyAttribute::*)()>(&AspTypePropertyAttribute::get_CreateConstructorReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspTypePropertyAttribute*), "get_CreateConstructorReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AspTypePropertyAttribute::set_CreateConstructorReferences
// Il2CppName: set_CreateConstructorReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspTypePropertyAttribute::*)(bool)>(&AspTypePropertyAttribute::set_CreateConstructorReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspTypePropertyAttribute*), "set_CreateConstructorReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AspTypePropertyAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspTypePropertyAttribute::*)(bool)>(&AspTypePropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspTypePropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspTypePropertyAttribute::*)(bool)>(&AspTypePropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AspTypePropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.RazorImportNamespaceAttribute
#include "JetBrains/Annotations/RazorImportNamespaceAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.RazorImportNamespaceAttribute.get_Name
::Il2CppString* JetBrains::Annotations::RazorImportNamespaceAttribute::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorImportNamespaceAttribute::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorImportNamespaceAttribute.set_Name
void JetBrains::Annotations::RazorImportNamespaceAttribute::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorImportNamespaceAttribute::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: RazorImportNamespaceAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorImportNamespaceAttribute::*)(::Il2CppString*)>(&RazorImportNamespaceAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorImportNamespaceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorImportNamespaceAttribute::*)(::Il2CppString*)>(&RazorImportNamespaceAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorImportNamespaceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RazorImportNamespaceAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RazorImportNamespaceAttribute::*)()>(&RazorImportNamespaceAttribute::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorImportNamespaceAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RazorImportNamespaceAttribute::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorImportNamespaceAttribute::*)(::Il2CppString*)>(&RazorImportNamespaceAttribute::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorImportNamespaceAttribute*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.RazorInjectionAttribute
#include "JetBrains/Annotations/RazorInjectionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.get_Type
::Il2CppString* JetBrains::Annotations::RazorInjectionAttribute::get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::get_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.set_Type
void JetBrains::Annotations::RazorInjectionAttribute::set_Type(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::set_Type");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.get_FieldName
::Il2CppString* JetBrains::Annotations::RazorInjectionAttribute::get_FieldName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::get_FieldName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FieldName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorInjectionAttribute.set_FieldName
void JetBrains::Annotations::RazorInjectionAttribute::set_FieldName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorInjectionAttribute::set_FieldName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FieldName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: RazorInjectionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorInjectionAttribute::*)(::Il2CppString*, ::Il2CppString*)>(&RazorInjectionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorInjectionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorInjectionAttribute::*)(::Il2CppString*, ::Il2CppString*)>(&RazorInjectionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorInjectionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RazorInjectionAttribute::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RazorInjectionAttribute::*)()>(&RazorInjectionAttribute::get_Type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorInjectionAttribute*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RazorInjectionAttribute::set_Type
// Il2CppName: set_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorInjectionAttribute::*)(::Il2CppString*)>(&RazorInjectionAttribute::set_Type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorInjectionAttribute*), "set_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RazorInjectionAttribute::get_FieldName
// Il2CppName: get_FieldName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RazorInjectionAttribute::*)()>(&RazorInjectionAttribute::get_FieldName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorInjectionAttribute*), "get_FieldName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RazorInjectionAttribute::set_FieldName
// Il2CppName: set_FieldName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorInjectionAttribute::*)(::Il2CppString*)>(&RazorInjectionAttribute::set_FieldName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorInjectionAttribute*), "set_FieldName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.RazorDirectiveAttribute
#include "JetBrains/Annotations/RazorDirectiveAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.RazorDirectiveAttribute.get_Directive
::Il2CppString* JetBrains::Annotations::RazorDirectiveAttribute::get_Directive() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorDirectiveAttribute::get_Directive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Directive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorDirectiveAttribute.set_Directive
void JetBrains::Annotations::RazorDirectiveAttribute::set_Directive(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorDirectiveAttribute::set_Directive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Directive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: RazorDirectiveAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorDirectiveAttribute::*)(::Il2CppString*)>(&RazorDirectiveAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorDirectiveAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorDirectiveAttribute::*)(::Il2CppString*)>(&RazorDirectiveAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorDirectiveAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RazorDirectiveAttribute::get_Directive
// Il2CppName: get_Directive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RazorDirectiveAttribute::*)()>(&RazorDirectiveAttribute::get_Directive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorDirectiveAttribute*), "get_Directive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RazorDirectiveAttribute::set_Directive
// Il2CppName: set_Directive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorDirectiveAttribute::*)(::Il2CppString*)>(&RazorDirectiveAttribute::set_Directive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorDirectiveAttribute*), "set_Directive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JetBrains.Annotations.RazorPageBaseTypeAttribute
#include "JetBrains/Annotations/RazorPageBaseTypeAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.get_BaseType
::Il2CppString* JetBrains::Annotations::RazorPageBaseTypeAttribute::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::get_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.set_BaseType
void JetBrains::Annotations::RazorPageBaseTypeAttribute::set_BaseType(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::set_BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.get_PageName
::Il2CppString* JetBrains::Annotations::RazorPageBaseTypeAttribute::get_PageName() {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::get_PageName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PageName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: JetBrains.Annotations.RazorPageBaseTypeAttribute.set_PageName
void JetBrains::Annotations::RazorPageBaseTypeAttribute::set_PageName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::RazorPageBaseTypeAttribute::set_PageName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PageName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: RazorPageBaseTypeAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorPageBaseTypeAttribute::*)(::Il2CppString*)>(&RazorPageBaseTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorPageBaseTypeAttribute::*)(::Il2CppString*)>(&RazorPageBaseTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RazorPageBaseTypeAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorPageBaseTypeAttribute::*)(::Il2CppString*, ::Il2CppString*)>(&RazorPageBaseTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorPageBaseTypeAttribute::*)(::Il2CppString*, ::Il2CppString*)>(&RazorPageBaseTypeAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RazorPageBaseTypeAttribute::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RazorPageBaseTypeAttribute::*)()>(&RazorPageBaseTypeAttribute::get_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RazorPageBaseTypeAttribute::set_BaseType
// Il2CppName: set_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorPageBaseTypeAttribute::*)(::Il2CppString*)>(&RazorPageBaseTypeAttribute::set_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), "set_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: RazorPageBaseTypeAttribute::get_PageName
// Il2CppName: get_PageName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RazorPageBaseTypeAttribute::*)()>(&RazorPageBaseTypeAttribute::get_PageName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), "get_PageName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RazorPageBaseTypeAttribute::set_PageName
// Il2CppName: set_PageName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorPageBaseTypeAttribute::*)(::Il2CppString*)>(&RazorPageBaseTypeAttribute::set_PageName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorPageBaseTypeAttribute*), "set_PageName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorHelperCommonAttribute
#include "JetBrains/Annotations/RazorHelperCommonAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RazorHelperCommonAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorHelperCommonAttribute::*)()>(&RazorHelperCommonAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorHelperCommonAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorHelperCommonAttribute::*)()>(&RazorHelperCommonAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorHelperCommonAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorLayoutAttribute
#include "JetBrains/Annotations/RazorLayoutAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RazorLayoutAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorLayoutAttribute::*)()>(&RazorLayoutAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorLayoutAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorLayoutAttribute::*)()>(&RazorLayoutAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorLayoutAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteLiteralMethodAttribute
#include "JetBrains/Annotations/RazorWriteLiteralMethodAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RazorWriteLiteralMethodAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorWriteLiteralMethodAttribute::*)()>(&RazorWriteLiteralMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorWriteLiteralMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorWriteLiteralMethodAttribute::*)()>(&RazorWriteLiteralMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorWriteLiteralMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteMethodAttribute
#include "JetBrains/Annotations/RazorWriteMethodAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RazorWriteMethodAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorWriteMethodAttribute::*)()>(&RazorWriteMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorWriteMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorWriteMethodAttribute::*)()>(&RazorWriteMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorWriteMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JetBrains.Annotations.RazorWriteMethodParameterAttribute
#include "JetBrains/Annotations/RazorWriteMethodParameterAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RazorWriteMethodParameterAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorWriteMethodParameterAttribute::*)()>(&RazorWriteMethodParameterAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorWriteMethodParameterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RazorWriteMethodParameterAttribute::*)()>(&RazorWriteMethodParameterAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RazorWriteMethodParameterAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.NoReflectionBakingAttribute
#include "Zenject/NoReflectionBakingAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NoReflectionBakingAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoReflectionBakingAttribute::*)()>(&NoReflectionBakingAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoReflectionBakingAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoReflectionBakingAttribute::*)()>(&NoReflectionBakingAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoReflectionBakingAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ZenjectAllowDuringValidationAttribute
#include "Zenject/ZenjectAllowDuringValidationAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ZenjectAllowDuringValidationAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectAllowDuringValidationAttribute::*)()>(&ZenjectAllowDuringValidationAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectAllowDuringValidationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ZenjectAllowDuringValidationAttribute::*)()>(&ZenjectAllowDuringValidationAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ZenjectAllowDuringValidationAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HashSetExtensions
#include "GlobalNamespace/HashSetExtensions.hpp"
// Including type: HashSetExtensions/HashSetDelegateHolder`1
#include "GlobalNamespace/HashSetExtensions_HashSetDelegateHolder_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: HashSetExtensions::SetCapacity
// Il2CppName: SetCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HashSetExtensions::GetHashSet
// Il2CppName: GetHashSet
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Assert
#include "ModestTree/_Assert.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Zenject.ZenjectException
#include "Zenject/ZenjectException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.IsNotEmpty
void ModestTree::_Assert::IsNotEmpty(::Il2CppString* str) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str);
}
// Autogenerated method: ModestTree.Assert.DerivesFrom
void ModestTree::_Assert::DerivesFrom(System::Type* childType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childType), ::il2cpp_utils::ExtractType(parentType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.DerivesFromOrEqual
void ModestTree::_Assert::DerivesFromOrEqual(System::Type* childType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childType), ::il2cpp_utils::ExtractType(parentType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, childType, parentType);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsApproximately
void ModestTree::_Assert::IsApproximately(float left, float right, float epsilon) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsApproximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsApproximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(epsilon)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, epsilon);
}
// Autogenerated method: ModestTree.Assert.IsEqual
void ModestTree::_Assert::IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNull
void ModestTree::_Assert::IsNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message, p1);
}
// Autogenerated method: ModestTree.Assert.IsNotNull
void ModestTree::_Assert::IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotNull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.IsNotEqual
void ModestTree::_Assert::IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, message);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition, System::Func_1<::Il2CppString*>* messageGenerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(messageGenerator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, messageGenerator);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message, p1);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message, p1, p2);
}
// Autogenerated method: ModestTree.Assert.That
void ModestTree::_Assert::That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2, ::Il2CppObject* p3) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::That");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "That", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractType(p3)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message, p1, p2, p3);
}
// Autogenerated method: ModestTree.Assert.Warn
void ModestTree::_Assert::Warn(bool condition, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, condition, message);
}
// Autogenerated method: ModestTree.Assert.Throws
void ModestTree::_Assert::Throws(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Throws");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "Throws", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException(::Il2CppString* message, ::Array<::Il2CppObject*>* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, parameters);
}
// Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
Zenject::ZenjectException* ModestTree::_Assert::CreateException(::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters) {
  return ModestTree::_Assert::CreateException(message, ::Array<::Il2CppObject*>::New(parameters));
}
// Autogenerated method: ModestTree.Assert.CreateException
Zenject::ZenjectException* ModestTree::_Assert::CreateException(System::Exception* innerException, ::Il2CppString* message, ::Array<::Il2CppObject*>* parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Assert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerException), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ZenjectException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, innerException, message, parameters);
}
// Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
Zenject::ZenjectException* ModestTree::_Assert::CreateException(System::Exception* innerException, ::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters) {
  return ModestTree::_Assert::CreateException(innerException, message, ::Array<::Il2CppObject*>::New(parameters));
}
// Writing MetadataGetter for method: _Assert::That
// Il2CppName: That
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&_Assert::That)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "That", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotEmpty
// Il2CppName: IsNotEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&_Assert::IsNotEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsEmpty
// Il2CppName: IsEmpty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::IsEmpty
// Il2CppName: IsEmpty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::IsType
// Il2CppName: IsType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::IsType
// Il2CppName: IsType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::DerivesFrom
// Il2CppName: DerivesFrom
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::DerivesFromOrEqual
// Il2CppName: DerivesFromOrEqual
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::DerivesFrom
// Il2CppName: DerivesFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*, System::Type*)>(&_Assert::DerivesFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "DerivesFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: _Assert::DerivesFromOrEqual
// Il2CppName: DerivesFromOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*, System::Type*)>(&_Assert::DerivesFromOrEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "DerivesFromOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsEqual
// Il2CppName: IsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*)>(&_Assert::IsEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsEqual
// Il2CppName: IsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*, System::Func_1<::Il2CppString*>*)>(&_Assert::IsEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsApproximately
// Il2CppName: IsApproximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float)>(&_Assert::IsApproximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsApproximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsEqual
// Il2CppName: IsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*, ::Il2CppString*)>(&_Assert::IsEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotEqual
// Il2CppName: IsNotEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*)>(&_Assert::IsNotEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotEqual
// Il2CppName: IsNotEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*, System::Func_1<::Il2CppString*>*)>(&_Assert::IsNotEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&_Assert::IsNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*)>(&_Assert::IsNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*, ::Il2CppObject*)>(&_Assert::IsNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotNull
// Il2CppName: IsNotNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&_Assert::IsNotNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotNull
// Il2CppName: IsNotNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*)>(&_Assert::IsNotNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotNull
// Il2CppName: IsNotNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*, ::Il2CppObject*)>(&_Assert::IsNotNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotNull
// Il2CppName: IsNotNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&_Assert::IsNotNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::IsNotEmpty
// Il2CppName: IsNotEmpty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::IsNotEqual
// Il2CppName: IsNotEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*, ::Il2CppString*)>(&_Assert::IsNotEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "IsNotEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::Warn
// Il2CppName: Warn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&_Assert::Warn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "Warn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: _Assert::Warn
// Il2CppName: Warn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, System::Func_1<::Il2CppString*>*)>(&_Assert::Warn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "Warn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Func_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: _Assert::That
// Il2CppName: That
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::Il2CppString*)>(&_Assert::That)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "That", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::That
// Il2CppName: That
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::Il2CppString*, ::Il2CppObject*)>(&_Assert::That)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "That", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::That
// Il2CppName: That
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&_Assert::That)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "That", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::That
// Il2CppName: That
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&_Assert::That)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "That", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: _Assert::Warn
// Il2CppName: Warn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::Il2CppString*)>(&_Assert::Warn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "Warn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::Throws
// Il2CppName: Throws
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Action*)>(&_Assert::Throws)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "Throws", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: _Assert::Throws
// Il2CppName: Throws
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: _Assert::CreateException
// Il2CppName: CreateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ZenjectException* (*)()>(&_Assert::CreateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "CreateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: _Assert::CreateException
// Il2CppName: CreateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ZenjectException* (*)(::Il2CppString*)>(&_Assert::CreateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "CreateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: _Assert::CreateException
// Il2CppName: CreateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ZenjectException* (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&_Assert::CreateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "CreateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: _Assert::CreateException
// Il2CppName: CreateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ZenjectException* (*)(System::Exception*, ::Il2CppString*, ::Array<::Il2CppObject*>*)>(&_Assert::CreateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(_Assert*), "CreateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.LinqExtensions
#include "ModestTree/LinqExtensions.hpp"
// Including type: ModestTree.LinqExtensions/<Yield>d__0`1
#include "ModestTree/LinqExtensions_-Yield-d__0_1.hpp"
// Including type: ModestTree.LinqExtensions/<>c__7`1
#include "ModestTree/LinqExtensions_--c__7_1.hpp"
// Including type: ModestTree.LinqExtensions/<>c__DisplayClass9_0`1
#include "ModestTree/LinqExtensions_--c__DisplayClass9_0_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LinqExtensions::Yield
// Il2CppName: Yield
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::OnlyOrDefault
// Il2CppName: OnlyOrDefault
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::HasAtLeast
// Il2CppName: HasAtLeast
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::HasMoreThan
// Il2CppName: HasMoreThan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::HasLessThan
// Il2CppName: HasLessThan
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::HasAtMost
// Il2CppName: HasAtMost
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::IsEmpty
// Il2CppName: IsEmpty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::GetDuplicates
// Il2CppName: GetDuplicates
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::Except
// Il2CppName: Except
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LinqExtensions::ContainsItem
// Il2CppName: ContainsItem
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Log
#include "ModestTree/Log.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Log.Debug
void ModestTree::Log::Debug(::Il2CppString* message, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Debug");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Debug", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, args);
}
// Creating initializer_list -> params proxy for: System.Void Debug(System.String message, params System.Object[] args)
void ModestTree::Log::Debug(::Il2CppString* message, std::initializer_list<::Il2CppObject*> args) {
  ModestTree::Log::Debug(message, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: ModestTree.Log.Info
void ModestTree::Log::Info(::Il2CppString* message, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Info");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Info", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, args);
}
// Creating initializer_list -> params proxy for: System.Void Info(System.String message, params System.Object[] args)
void ModestTree::Log::Info(::Il2CppString* message, std::initializer_list<::Il2CppObject*> args) {
  ModestTree::Log::Info(message, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: ModestTree.Log.Warn
void ModestTree::Log::Warn(::Il2CppString* message, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Warn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Warn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, args);
}
// Creating initializer_list -> params proxy for: System.Void Warn(System.String message, params System.Object[] args)
void ModestTree::Log::Warn(::Il2CppString* message, std::initializer_list<::Il2CppObject*> args) {
  ModestTree::Log::Warn(message, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: ModestTree.Log.Trace
void ModestTree::Log::Trace(::Il2CppString* message, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Trace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Trace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, args);
}
// Creating initializer_list -> params proxy for: System.Void Trace(System.String message, params System.Object[] args)
void ModestTree::Log::Trace(::Il2CppString* message, std::initializer_list<::Il2CppObject*> args) {
  ModestTree::Log::Trace(message, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: ModestTree.Log.ErrorException
void ModestTree::Log::ErrorException(System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::ErrorException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "ErrorException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, e);
}
// Autogenerated method: ModestTree.Log.ErrorException
void ModestTree::Log::ErrorException(::Il2CppString* message, System::Exception* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::ErrorException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "ErrorException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, e);
}
// Autogenerated method: ModestTree.Log.Error
void ModestTree::Log::Error(::Il2CppString* message, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Log::Error");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "Log", "Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, args);
}
// Creating initializer_list -> params proxy for: System.Void Error(System.String message, params System.Object[] args)
void ModestTree::Log::Error(::Il2CppString* message, std::initializer_list<::Il2CppObject*> args) {
  ModestTree::Log::Error(message, ::Array<::Il2CppObject*>::New(args));
}
// Writing MetadataGetter for method: Log::Debug
// Il2CppName: Debug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&Log::Debug)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Log*), "Debug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: Log::Info
// Il2CppName: Info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&Log::Info)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Log*), "Info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: Log::Warn
// Il2CppName: Warn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&Log::Warn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Log*), "Warn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: Log::Trace
// Il2CppName: Trace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&Log::Trace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Log*), "Trace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: Log::ErrorException
// Il2CppName: ErrorException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Exception*)>(&Log::ErrorException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Log*), "ErrorException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: Log::ErrorException
// Il2CppName: ErrorException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, System::Exception*)>(&Log::ErrorException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Log*), "ErrorException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: Log::Error
// Il2CppName: Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&Log::Error)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Log*), "Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.MiscExtensions
#include "ModestTree/MiscExtensions.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.LinkedList`1
#include "System/Collections/Generic/LinkedList_1.hpp"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.MiscExtensions.Fmt
::Il2CppString* ModestTree::MiscExtensions::Fmt(::Il2CppString* s, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::MiscExtensions::Fmt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "MiscExtensions", "Fmt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s, args);
}
// Creating initializer_list -> params proxy for: System.String Fmt(System.String s, params System.Object[] args)
::Il2CppString* ModestTree::MiscExtensions::Fmt(::Il2CppString* s, std::initializer_list<::Il2CppObject*> args) {
  return ModestTree::MiscExtensions::Fmt(s, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: ModestTree.MiscExtensions.Join
::Il2CppString* ModestTree::MiscExtensions::Join(System::Collections::Generic::IEnumerable_1<::Il2CppString*>* values, ::Il2CppString* separator) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::MiscExtensions::Join");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "MiscExtensions", "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(separator)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, values, separator);
}
// Writing MetadataGetter for method: MiscExtensions::Fmt
// Il2CppName: Fmt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&MiscExtensions::Fmt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiscExtensions*), "Fmt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: MiscExtensions::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MiscExtensions::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*, ::Il2CppString*)>(&MiscExtensions::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MiscExtensions*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MiscExtensions::AllocFreeAddRange
// Il2CppName: AllocFreeAddRange
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MiscExtensions::RemoveWithConfirm
// Il2CppName: RemoveWithConfirm
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MiscExtensions::RemoveWithConfirm
// Il2CppName: RemoveWithConfirm
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MiscExtensions::RemoveWithConfirm
// Il2CppName: RemoveWithConfirm
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MiscExtensions::RemoveWithConfirm
// Il2CppName: RemoveWithConfirm
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: MiscExtensions::GetValueAndRemove
// Il2CppName: GetValueAndRemove
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions
#include "ModestTree/TypeExtensions.hpp"
// Including type: ModestTree.TypeExtensions/<GetParentTypes>d__28
#include "ModestTree/TypeExtensions_-GetParentTypes-d__28.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass35_0
#include "ModestTree/TypeExtensions_--c__DisplayClass35_0.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass35_1
#include "ModestTree/TypeExtensions_--c__DisplayClass35_1.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass39_0
#include "ModestTree/TypeExtensions_--c__DisplayClass39_0.hpp"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass39_1
#include "ModestTree/TypeExtensions_--c__DisplayClass39_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Reflection.PropertyInfo
#include "System/Reflection/PropertyInfo.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
// Including type: System.Delegate
#include "System/Delegate.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Reflection.ParameterInfo
#include "System/Reflection/ParameterInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isClosedGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__isClosedGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isClosedGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isClosedGenericType
void ModestTree::TypeExtensions::_set__isClosedGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__isClosedGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isClosedGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isOpenGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__isOpenGenericType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isOpenGenericType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isOpenGenericType
void ModestTree::TypeExtensions::_set__isOpenGenericType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__isOpenGenericType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isOpenGenericType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
System::Collections::Generic::Dictionary_2<System::Type*, bool>* ModestTree::TypeExtensions::_get__isValueType() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__isValueType");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, bool>*>("ModestTree", "TypeExtensions", "_isValueType")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Boolean> _isValueType
void ModestTree::TypeExtensions::_set__isValueType(System::Collections::Generic::Dictionary_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__isValueType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_isValueType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>* ModestTree::TypeExtensions::_get__interfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_get__interfaces");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>*>("ModestTree", "TypeExtensions", "_interfaces")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Type[]> _interfaces
void ModestTree::TypeExtensions::_set__interfaces(System::Collections::Generic::Dictionary_2<System::Type*, ::Array<System::Type*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::_set__interfaces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeExtensions", "_interfaces", value));
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFrom
bool ModestTree::TypeExtensions::DerivesFrom(System::Type* a, System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DerivesFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.DerivesFromOrEqual
bool ModestTree::TypeExtensions::DerivesFromOrEqual(System::Type* a, System::Type* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAssignableToGenericType
bool ModestTree::TypeExtensions::IsAssignableToGenericType(System::Type* givenType, System::Type* genericType) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsAssignableToGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAssignableToGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(givenType), ::il2cpp_utils::ExtractType(genericType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, givenType, genericType);
}
// Autogenerated method: ModestTree.TypeExtensions.IsEnum
bool ModestTree::TypeExtensions::IsEnum(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsValueType
bool ModestTree::TypeExtensions::IsValueType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsValueType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsValueType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceMethods
::Array<System::Reflection::MethodInfo*>* ModestTree::TypeExtensions::DeclaredInstanceMethods(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DeclaredInstanceMethods");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::MethodInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceProperties
::Array<System::Reflection::PropertyInfo*>* ModestTree::TypeExtensions::DeclaredInstanceProperties(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DeclaredInstanceProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::PropertyInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.DeclaredInstanceFields
::Array<System::Reflection::FieldInfo*>* ModestTree::TypeExtensions::DeclaredInstanceFields(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::DeclaredInstanceFields");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "DeclaredInstanceFields", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::FieldInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.BaseType
System::Type* ModestTree::TypeExtensions::BaseType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::BaseType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericType
bool ModestTree::TypeExtensions::IsGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsGenericTypeDefinition
bool ModestTree::TypeExtensions::IsGenericTypeDefinition(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsGenericTypeDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsGenericTypeDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsPrimitive
bool ModestTree::TypeExtensions::IsPrimitive(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsPrimitive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsPrimitive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsInterface
bool ModestTree::TypeExtensions::IsInterface(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.ContainsGenericParameters
bool ModestTree::TypeExtensions::ContainsGenericParameters(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::ContainsGenericParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsAbstract
bool ModestTree::TypeExtensions::IsAbstract(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsAbstract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsSealed
bool ModestTree::TypeExtensions::IsSealed(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsSealed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsSealed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Method
System::Reflection::MethodInfo* ModestTree::TypeExtensions::Method(System::Delegate* del) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::Method");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(del)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, del);
}
// Autogenerated method: ModestTree.TypeExtensions.GenericArguments
::Array<System::Type*>* ModestTree::TypeExtensions::GenericArguments(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::GenericArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GenericArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Interfaces
::Array<System::Type*>* ModestTree::TypeExtensions::Interfaces(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::Interfaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Interfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.Constructors
::Array<System::Reflection::ConstructorInfo*>* ModestTree::TypeExtensions::Constructors(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::Constructors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "Constructors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Reflection::ConstructorInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetDefaultValue
::Il2CppObject* ModestTree::TypeExtensions::GetDefaultValue(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::GetDefaultValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetDefaultValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsClosedGenericType
bool ModestTree::TypeExtensions::IsClosedGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsClosedGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsClosedGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.GetParentTypes
System::Collections::Generic::IEnumerable_1<System::Type*>* ModestTree::TypeExtensions::GetParentTypes(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::GetParentTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "GetParentTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.IsOpenGenericType
bool ModestTree::TypeExtensions::IsOpenGenericType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::IsOpenGenericType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "IsOpenGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::MemberInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::HasAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Boolean HasAttribute(System.Reflection.MemberInfo provider, params System.Type[] attributeTypes)
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::MemberInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::HasAttribute(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::MemberInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::AllAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Attribute*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Collections.Generic.IEnumerable`1<System.Attribute> AllAttributes(System.Reflection.MemberInfo provider, params System.Type[] attributeTypes)
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::MemberInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::AllAttributes(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions.HasAttribute
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::ParameterInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::HasAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "HasAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Boolean HasAttribute(System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes)
bool ModestTree::TypeExtensions::HasAttribute(System::Reflection::ParameterInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::HasAttribute(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions.AllAttributes
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::ParameterInfo* provider, ::Array<System::Type*>* attributeTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::AllAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", "AllAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(provider), ::il2cpp_utils::ExtractType(attributeTypes)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Attribute*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, provider, attributeTypes);
}
// Creating initializer_list -> params proxy for: System.Collections.Generic.IEnumerable`1<System.Attribute> AllAttributes(System.Reflection.ParameterInfo provider, params System.Type[] attributeTypes)
System::Collections::Generic::IEnumerable_1<System::Attribute*>* ModestTree::TypeExtensions::AllAttributes(System::Reflection::ParameterInfo* provider, std::initializer_list<System::Type*> attributeTypes) {
  return ModestTree::TypeExtensions::AllAttributes(provider, ::Array<System::Type*>::New(attributeTypes));
}
// Autogenerated method: ModestTree.TypeExtensions..cctor
void ModestTree::TypeExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TypeExtensions::DerivesFrom
// Il2CppName: DerivesFrom
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::DerivesFrom
// Il2CppName: DerivesFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, System::Type*)>(&TypeExtensions::DerivesFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "DerivesFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::DerivesFromOrEqual
// Il2CppName: DerivesFromOrEqual
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::DerivesFromOrEqual
// Il2CppName: DerivesFromOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, System::Type*)>(&TypeExtensions::DerivesFromOrEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "DerivesFromOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsAssignableToGenericType
// Il2CppName: IsAssignableToGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, System::Type*)>(&TypeExtensions::IsAssignableToGenericType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsAssignableToGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsEnum
// Il2CppName: IsEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsValueType
// Il2CppName: IsValueType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsValueType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsValueType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::DeclaredInstanceMethods
// Il2CppName: DeclaredInstanceMethods
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::MethodInfo*>* (*)(System::Type*)>(&TypeExtensions::DeclaredInstanceMethods)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "DeclaredInstanceMethods", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::DeclaredInstanceProperties
// Il2CppName: DeclaredInstanceProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::PropertyInfo*>* (*)(System::Type*)>(&TypeExtensions::DeclaredInstanceProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "DeclaredInstanceProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::DeclaredInstanceFields
// Il2CppName: DeclaredInstanceFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::FieldInfo*>* (*)(System::Type*)>(&TypeExtensions::DeclaredInstanceFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "DeclaredInstanceFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::BaseType
// Il2CppName: BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::Type*)>(&TypeExtensions::BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsGenericType
// Il2CppName: IsGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsGenericType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsGenericTypeDefinition
// Il2CppName: IsGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsGenericTypeDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsPrimitive
// Il2CppName: IsPrimitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsPrimitive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsPrimitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsInterface
// Il2CppName: IsInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsInterface)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::ContainsGenericParameters
// Il2CppName: ContainsGenericParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::ContainsGenericParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsAbstract
// Il2CppName: IsAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsAbstract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsSealed
// Il2CppName: IsSealed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsSealed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsSealed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::Method
// Il2CppName: Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (*)(System::Delegate*)>(&TypeExtensions::Method)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Delegate*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::GenericArguments
// Il2CppName: GenericArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (*)(System::Type*)>(&TypeExtensions::GenericArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "GenericArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::Interfaces
// Il2CppName: Interfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (*)(System::Type*)>(&TypeExtensions::Interfaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "Interfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::Constructors
// Il2CppName: Constructors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Reflection::ConstructorInfo*>* (*)(System::Type*)>(&TypeExtensions::Constructors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "Constructors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::GetDefaultValue
// Il2CppName: GetDefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*)>(&TypeExtensions::GetDefaultValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "GetDefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsClosedGenericType
// Il2CppName: IsClosedGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsClosedGenericType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsClosedGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::GetParentTypes
// Il2CppName: GetParentTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Type*>* (*)(System::Type*)>(&TypeExtensions::GetParentTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "GetParentTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::IsOpenGenericType
// Il2CppName: IsOpenGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&TypeExtensions::IsOpenGenericType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "IsOpenGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::GetAttribute
// Il2CppName: GetAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::TryGetAttribute
// Il2CppName: TryGetAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::HasAttribute
// Il2CppName: HasAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Reflection::MemberInfo*, ::Array<System::Type*>*)>(&TypeExtensions::HasAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "HasAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MemberInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::HasAttribute
// Il2CppName: HasAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::AllAttributes
// Il2CppName: AllAttributes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::AllAttributes
// Il2CppName: AllAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Attribute*>* (*)(System::Reflection::MemberInfo*, ::Array<System::Type*>*)>(&TypeExtensions::AllAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "AllAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MemberInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::HasAttribute
// Il2CppName: HasAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Reflection::ParameterInfo*, ::Array<System::Type*>*)>(&TypeExtensions::HasAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "HasAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::ParameterInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::HasAttribute
// Il2CppName: HasAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::AllAttributes
// Il2CppName: AllAttributes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TypeExtensions::AllAttributes
// Il2CppName: AllAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Attribute*>* (*)(System::Reflection::ParameterInfo*, ::Array<System::Type*>*)>(&TypeExtensions::AllAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), "AllAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::ParameterInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TypeExtensions::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions/<GetParentTypes>d__28
#include "ModestTree/TypeExtensions_-GetParentTypes-d__28.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.System.IDisposable.Dispose
void ModestTree::TypeExtensions::$GetParentTypes$d__28::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.MoveNext
bool ModestTree::TypeExtensions::$GetParentTypes$d__28::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.<>m__Finally1
void ModestTree::TypeExtensions::$GetParentTypes$d__28::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.System.Collections.Generic.IEnumerator<System.Type>.get_Current
System::Type* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerator$System_Type$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.Generic.IEnumerator<System.Type>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.System.Collections.IEnumerator.Reset
void ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
System::Collections::Generic::IEnumerator_1<System::Type*>* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.TypeExtensions/<GetParentTypes>d__28.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$GetParentTypes$d__28::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$GetParentTypes$d__28::*)(int)>(&TypeExtensions::$GetParentTypes$d__28::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$GetParentTypes$d__28::*)(int)>(&TypeExtensions::$GetParentTypes$d__28::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerator$System_Type$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Type>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerator$System_Type$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<System::Type*>* (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TypeExtensions::$GetParentTypes$d__28::*)()>(&TypeExtensions::$GetParentTypes$d__28::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$GetParentTypes$d__28*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass35_0
#include "ModestTree/TypeExtensions_--c__DisplayClass35_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.TypeExtensions/<>c__DisplayClass35_0.<AllAttributes>b__0
bool ModestTree::TypeExtensions::$$c__DisplayClass35_0::$AllAttributes$b__0(System::Attribute* a) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass35_0::<AllAttributes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, a);
}
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass35_0::$AllAttributes$b__0
// Il2CppName: <AllAttributes>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeExtensions::$$c__DisplayClass35_0::*)(System::Attribute*)>(&TypeExtensions::$$c__DisplayClass35_0::$AllAttributes$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass35_0*), "<AllAttributes>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Attribute*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass35_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass35_0::*)()>(&TypeExtensions::$$c__DisplayClass35_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass35_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass35_0::*)()>(&TypeExtensions::$$c__DisplayClass35_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass35_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass35_1
#include "ModestTree/TypeExtensions_--c__DisplayClass35_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.TypeExtensions/<>c__DisplayClass35_1.<AllAttributes>b__1
bool ModestTree::TypeExtensions::$$c__DisplayClass35_1::$AllAttributes$b__1(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass35_1::<AllAttributes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass35_1::$AllAttributes$b__1
// Il2CppName: <AllAttributes>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeExtensions::$$c__DisplayClass35_1::*)(System::Type*)>(&TypeExtensions::$$c__DisplayClass35_1::$AllAttributes$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass35_1*), "<AllAttributes>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass35_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass35_1::*)()>(&TypeExtensions::$$c__DisplayClass35_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass35_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass35_1::*)()>(&TypeExtensions::$$c__DisplayClass35_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass35_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass39_0
#include "ModestTree/TypeExtensions_--c__DisplayClass39_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.TypeExtensions/<>c__DisplayClass39_0.<AllAttributes>b__0
bool ModestTree::TypeExtensions::$$c__DisplayClass39_0::$AllAttributes$b__0(System::Attribute* a) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass39_0::<AllAttributes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, a);
}
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass39_0::$AllAttributes$b__0
// Il2CppName: <AllAttributes>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeExtensions::$$c__DisplayClass39_0::*)(System::Attribute*)>(&TypeExtensions::$$c__DisplayClass39_0::$AllAttributes$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass39_0*), "<AllAttributes>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Attribute*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass39_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass39_0::*)()>(&TypeExtensions::$$c__DisplayClass39_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass39_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass39_0::*)()>(&TypeExtensions::$$c__DisplayClass39_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass39_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.TypeExtensions/<>c__DisplayClass39_1
#include "ModestTree/TypeExtensions_--c__DisplayClass39_1.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.TypeExtensions/<>c__DisplayClass39_1.<AllAttributes>b__1
bool ModestTree::TypeExtensions::$$c__DisplayClass39_1::$AllAttributes$b__1(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeExtensions::$$c__DisplayClass39_1::<AllAttributes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAttributes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass39_1::$AllAttributes$b__1
// Il2CppName: <AllAttributes>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TypeExtensions::$$c__DisplayClass39_1::*)(System::Type*)>(&TypeExtensions::$$c__DisplayClass39_1::$AllAttributes$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass39_1*), "<AllAttributes>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeExtensions::$$c__DisplayClass39_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass39_1::*)()>(&TypeExtensions::$$c__DisplayClass39_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass39_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeExtensions::$$c__DisplayClass39_1::*)()>(&TypeExtensions::$$c__DisplayClass39_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeExtensions::$$c__DisplayClass39_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeStringFormatter
#include "ModestTree/TypeStringFormatter.hpp"
// Including type: ModestTree.TypeStringFormatter/<>c
#include "ModestTree/TypeStringFormatter_--c.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _prettyNameCache
System::Collections::Generic::Dictionary_2<System::Type*, ::Il2CppString*>* ModestTree::TypeStringFormatter::_get__prettyNameCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::_get__prettyNameCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Type*, ::Il2CppString*>*>("ModestTree", "TypeStringFormatter", "_prettyNameCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _prettyNameCache
void ModestTree::TypeStringFormatter::_set__prettyNameCache(System::Collections::Generic::Dictionary_2<System::Type*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::_set__prettyNameCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter", "_prettyNameCache", value));
}
// Autogenerated method: ModestTree.TypeStringFormatter.PrettyName
::Il2CppString* ModestTree::TypeStringFormatter::PrettyName(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::PrettyName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "PrettyName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeStringFormatter.PrettyNameInternal
::Il2CppString* ModestTree::TypeStringFormatter::PrettyNameInternal(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::PrettyNameInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "PrettyNameInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: ModestTree.TypeStringFormatter.GetCSharpTypeName
::Il2CppString* ModestTree::TypeStringFormatter::GetCSharpTypeName(::Il2CppString* typeName) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::GetCSharpTypeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", "GetCSharpTypeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeName)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, typeName);
}
// Autogenerated method: ModestTree.TypeStringFormatter..cctor
void ModestTree::TypeStringFormatter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TypeStringFormatter::PrettyName
// Il2CppName: PrettyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Type*)>(&TypeStringFormatter::PrettyName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter*), "PrettyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeStringFormatter::PrettyNameInternal
// Il2CppName: PrettyNameInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Type*)>(&TypeStringFormatter::PrettyNameInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter*), "PrettyNameInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeStringFormatter::GetCSharpTypeName
// Il2CppName: GetCSharpTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&TypeStringFormatter::GetCSharpTypeName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter*), "GetCSharpTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TypeStringFormatter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TypeStringFormatter::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.TypeStringFormatter/<>c
#include "ModestTree/TypeStringFormatter_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ModestTree.TypeStringFormatter/<>c <>9
ModestTree::TypeStringFormatter::$$c* ModestTree::TypeStringFormatter::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<ModestTree::TypeStringFormatter::$$c*>("ModestTree", "TypeStringFormatter/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly ModestTree.TypeStringFormatter/<>c <>9
void ModestTree::TypeStringFormatter::$$c::_set_$$9(ModestTree::TypeStringFormatter::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.String> <>9__2_0
System::Func_2<System::Type*, ::Il2CppString*>* ModestTree::TypeStringFormatter::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, ::Il2CppString*>*>("ModestTree", "TypeStringFormatter/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.String> <>9__2_0
void ModestTree::TypeStringFormatter::$$c::_set_$$9__2_0(System::Func_2<System::Type*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree", "TypeStringFormatter/<>c", "<>9__2_0", value)));
}
// Autogenerated method: ModestTree.TypeStringFormatter/<>c..cctor
void ModestTree::TypeStringFormatter::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "TypeStringFormatter/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.TypeStringFormatter/<>c.<PrettyNameInternal>b__2_0
::Il2CppString* ModestTree::TypeStringFormatter::$$c::$PrettyNameInternal$b__2_0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::TypeStringFormatter::$$c::<PrettyNameInternal>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PrettyNameInternal>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: TypeStringFormatter::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TypeStringFormatter::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TypeStringFormatter::$$c::$PrettyNameInternal$b__2_0
// Il2CppName: <PrettyNameInternal>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TypeStringFormatter::$$c::*)(System::Type*)>(&TypeStringFormatter::$$c::$PrettyNameInternal$b__2_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter::$$c*), "<PrettyNameInternal>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: TypeStringFormatter::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeStringFormatter::$$c::*)()>(&TypeStringFormatter::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeStringFormatter::$$c::*)()>(&TypeStringFormatter::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeStringFormatter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.ReflectionUtil
#include "ModestTree/ReflectionUtil.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: System.Action`4
#include "System/Action_4.hpp"
// Including type: System.Action`5
#include "System/Action_5.hpp"
// Including type: System.Action`6
#include "System/Action_6.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Func`4
#include "System/Func_4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.ReflectionUtil.CreateArray
System::Array* ModestTree::ReflectionUtil::CreateArray(System::Type* elementType, System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::CreateArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "CreateArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementType), ::il2cpp_utils::ExtractType(instances)})));
  return ::il2cpp_utils::RunMethodThrow<System::Array*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, elementType, instances);
}
// Autogenerated method: ModestTree.ReflectionUtil.CreateGenericList
System::Collections::IList* ModestTree::ReflectionUtil::CreateGenericList(System::Type* elementType, System::Collections::Generic::List_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::CreateGenericList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "CreateGenericList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(elementType), ::il2cpp_utils::ExtractType(instances)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IList*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, elementType, instances);
}
// Autogenerated method: ModestTree.ReflectionUtil.ToDebugString
::Il2CppString* ModestTree::ReflectionUtil::ToDebugString(System::Reflection::MethodInfo* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::ToDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "ToDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, method);
}
// Autogenerated method: ModestTree.ReflectionUtil.ToDebugString
::Il2CppString* ModestTree::ReflectionUtil::ToDebugString(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::ReflectionUtil::ToDebugString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree", "ReflectionUtil", "ToDebugString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action);
}
// Writing MetadataGetter for method: ReflectionUtil::CreateArray
// Il2CppName: CreateArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Array* (*)(System::Type*, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&ReflectionUtil::CreateArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionUtil*), "CreateArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ReflectionUtil::CreateGenericList
// Il2CppName: CreateGenericList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IList* (*)(System::Type*, System::Collections::Generic::List_1<::Il2CppObject*>*)>(&ReflectionUtil::CreateGenericList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionUtil*), "CreateGenericList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Reflection::MethodInfo*)>(&ReflectionUtil::ToDebugString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionUtil*), "ToDebugString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::MethodInfo*>()});
  }
};
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Action*)>(&ReflectionUtil::ToDebugString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionUtil*), "ToDebugString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ReflectionUtil::ToDebugString
// Il2CppName: ToDebugString
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.PreserveAttribute
#include "ModestTree/Util/PreserveAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PreserveAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreserveAttribute::*)()>(&PreserveAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreserveAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreserveAttribute::*)()>(&PreserveAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreserveAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.ValuePair
#include "ModestTree/Util/ValuePair.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: ModestTree.Util.ValuePair`3
#include "ModestTree/Util/ValuePair_3.hpp"
// Including type: ModestTree.Util.ValuePair`4
#include "ModestTree/Util/ValuePair_4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ValuePair::New
// Il2CppName: New
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ValuePair::New
// Il2CppName: New
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ValuePair::New
// Il2CppName: New
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.UnityUtil
#include "ModestTree/Util/UnityUtil.hpp"
// Including type: ModestTree.Util.UnityUtil/<get_AllScenes>d__1
#include "ModestTree/Util/UnityUtil_-get_AllScenes-d__1.hpp"
// Including type: ModestTree.Util.UnityUtil/<>c
#include "ModestTree/Util/UnityUtil_--c.hpp"
// Including type: ModestTree.Util.UnityUtil/<GetParents>d__16
#include "ModestTree/Util/UnityUtil_-GetParents-d__16.hpp"
// Including type: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17
#include "ModestTree/Util/UnityUtil_-GetParentsAndSelf-d__17.hpp"
// Including type: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20
#include "ModestTree/Util/UnityUtil_-GetDirectChildrenAndSelf-d__20.hpp"
// Including type: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21
#include "ModestTree/Util/UnityUtil_-GetDirectChildren-d__21.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil.get_AllScenes
System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::get_AllScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_AllScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_AllScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_AllLoadedScenes
System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::get_AllLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_AllLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_AllLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsAltKeyDown
bool ModestTree::Util::UnityUtil::get_IsAltKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_IsAltKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsAltKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsControlKeyDown
bool ModestTree::Util::UnityUtil::get_IsControlKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_IsControlKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsControlKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_IsShiftKeyDown
bool ModestTree::Util::UnityUtil::get_IsShiftKeyDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_IsShiftKeyDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_IsShiftKeyDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_WasShiftKeyJustPressed
bool ModestTree::Util::UnityUtil::get_WasShiftKeyJustPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_WasShiftKeyJustPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_WasShiftKeyJustPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.get_WasAltKeyJustPressed
bool ModestTree::Util::UnityUtil::get_WasAltKeyJustPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::get_WasAltKeyJustPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "get_WasAltKeyJustPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDepthLevel
int ModestTree::Util::UnityUtil::GetDepthLevel(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetDepthLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDepthLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetRootParentOrSelf
UnityEngine::GameObject* ModestTree::Util::UnityUtil::GetRootParentOrSelf(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetRootParentOrSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetRootParentOrSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameObject);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetParents
System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>* ModestTree::Util::UnityUtil::GetParents(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetParents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetParents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetParentsAndSelf
System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>* ModestTree::Util::UnityUtil::GetParentsAndSelf(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetParentsAndSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetParentsAndSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetComponentsInChildrenTopDown
System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>* ModestTree::Util::UnityUtil::GetComponentsInChildrenTopDown(UnityEngine::GameObject* gameObject, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetComponentsInChildrenTopDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetComponentsInChildrenTopDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameObject, includeInactive);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetComponentsInChildrenBottomUp
System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>* ModestTree::Util::UnityUtil::GetComponentsInChildrenBottomUp(UnityEngine::GameObject* gameObject, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetComponentsInChildrenBottomUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetComponentsInChildrenBottomUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameObject, includeInactive);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDirectChildrenAndSelf
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetDirectChildrenAndSelf(UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetDirectChildrenAndSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDirectChildrenAndSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetDirectChildren
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetDirectChildren(UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetDirectChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetDirectChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetAllGameObjects
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetAllGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetAllGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetAllGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil.GetAllRootGameObjects
System::Collections::Generic::List_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::GetAllRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::GetAllRootGameObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil", "GetAllRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: UnityUtil::get_AllScenes
// Il2CppName: get_AllScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>* (*)()>(&UnityUtil::get_AllScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "get_AllScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::get_AllLoadedScenes
// Il2CppName: get_AllLoadedScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::SceneManagement::Scene>* (*)()>(&UnityUtil::get_AllLoadedScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "get_AllLoadedScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::get_IsAltKeyDown
// Il2CppName: get_IsAltKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityUtil::get_IsAltKeyDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "get_IsAltKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::get_IsControlKeyDown
// Il2CppName: get_IsControlKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityUtil::get_IsControlKeyDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "get_IsControlKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::get_IsShiftKeyDown
// Il2CppName: get_IsShiftKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityUtil::get_IsShiftKeyDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "get_IsShiftKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::get_WasShiftKeyJustPressed
// Il2CppName: get_WasShiftKeyJustPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityUtil::get_WasShiftKeyJustPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "get_WasShiftKeyJustPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::get_WasAltKeyJustPressed
// Il2CppName: get_WasAltKeyJustPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityUtil::get_WasAltKeyJustPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "get_WasAltKeyJustPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetDepthLevel
// Il2CppName: GetDepthLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Transform*)>(&UnityUtil::GetDepthLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetDepthLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetRootParentOrSelf
// Il2CppName: GetRootParentOrSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (*)(UnityEngine::GameObject*)>(&UnityUtil::GetRootParentOrSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetRootParentOrSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetParents
// Il2CppName: GetParents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>* (*)(UnityEngine::Transform*)>(&UnityUtil::GetParents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetParents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetParentsAndSelf
// Il2CppName: GetParentsAndSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Transform*>* (*)(UnityEngine::Transform*)>(&UnityUtil::GetParentsAndSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetParentsAndSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetComponentsInChildrenTopDown
// Il2CppName: GetComponentsInChildrenTopDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>* (*)(UnityEngine::GameObject*, bool)>(&UnityUtil::GetComponentsInChildrenTopDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetComponentsInChildrenTopDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetComponentsInChildrenBottomUp
// Il2CppName: GetComponentsInChildrenBottomUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Component*>* (*)(UnityEngine::GameObject*, bool)>(&UnityUtil::GetComponentsInChildrenBottomUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetComponentsInChildrenBottomUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetDirectChildrenAndSelf
// Il2CppName: GetDirectChildrenAndSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (*)(UnityEngine::GameObject*)>(&UnityUtil::GetDirectChildrenAndSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetDirectChildrenAndSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetDirectChildren
// Il2CppName: GetDirectChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (*)(UnityEngine::GameObject*)>(&UnityUtil::GetDirectChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetDirectChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetAllGameObjects
// Il2CppName: GetAllGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (*)()>(&UnityUtil::GetAllGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetAllGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::GetAllRootGameObjects
// Il2CppName: GetAllRootGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::GameObject*>* (*)()>(&UnityUtil::GetAllRootGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil*), "GetAllRootGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/<get_AllScenes>d__1
#include "ModestTree/Util/UnityUtil_-get_AllScenes-d__1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil/<get_AllScenes>d__1.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<get_AllScenes>d__1.MoveNext
bool ModestTree::Util::UnityUtil::$get_AllScenes$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<get_AllScenes>d__1.System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current
UnityEngine::SceneManagement::Scene ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerator$UnityEngine_SceneManagement_Scene$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::SceneManagement::Scene, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<get_AllScenes>d__1.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<get_AllScenes>d__1.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<get_AllScenes>d__1.System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::SceneManagement::Scene>* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerable$UnityEngine_SceneManagement_Scene$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::SceneManagement::Scene>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<get_AllScenes>d__1.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$get_AllScenes$d__1::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$get_AllScenes$d__1::*)(int)>(&UnityUtil::$get_AllScenes$d__1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$get_AllScenes$d__1::*)(int)>(&UnityUtil::$get_AllScenes$d__1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$get_AllScenes$d__1::*)()>(&UnityUtil::$get_AllScenes$d__1::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityUtil::$get_AllScenes$d__1::*)()>(&UnityUtil::$get_AllScenes$d__1::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerator$UnityEngine_SceneManagement_Scene$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::SceneManagement::Scene (UnityUtil::$get_AllScenes$d__1::*)()>(&UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerator$UnityEngine_SceneManagement_Scene$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), "System.Collections.Generic.IEnumerator<UnityEngine.SceneManagement.Scene>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$get_AllScenes$d__1::*)()>(&UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityUtil::$get_AllScenes$d__1::*)()>(&UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerable$UnityEngine_SceneManagement_Scene$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::SceneManagement::Scene>* (UnityUtil::$get_AllScenes$d__1::*)()>(&UnityUtil::$get_AllScenes$d__1::System_Collections_Generic_IEnumerable$UnityEngine_SceneManagement_Scene$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), "System.Collections.Generic.IEnumerable<UnityEngine.SceneManagement.Scene>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnityUtil::$get_AllScenes$d__1::*)()>(&UnityUtil::$get_AllScenes$d__1::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$get_AllScenes$d__1*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModestTree.Util.UnityUtil/<>c
#include "ModestTree/Util/UnityUtil_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly ModestTree.Util.UnityUtil/<>c <>9
ModestTree::Util::UnityUtil::$$c* ModestTree::Util::UnityUtil::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<ModestTree::Util::UnityUtil::$$c*>("ModestTree.Util", "UnityUtil/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly ModestTree.Util.UnityUtil/<>c <>9
void ModestTree::Util::UnityUtil::$$c::_set_$$9(ModestTree::Util::UnityUtil::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Boolean> <>9__3_0
System::Func_2<UnityEngine::SceneManagement::Scene, bool>* ModestTree::Util::UnityUtil::$$c::_get_$$9__3_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__3_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::SceneManagement::Scene, bool>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__3_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Boolean> <>9__3_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__3_0(System::Func_2<UnityEngine::SceneManagement::Scene, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__3_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__3_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__15_0
System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$$c::_get_$$9__15_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__15_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__15_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__15_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__15_0(System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__15_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__15_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__18_0
System::Func_2<UnityEngine::Component*, int>* ModestTree::Util::UnityUtil::$$c::_get_$$9__18_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__18_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Component*, int>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__18_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__18_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__18_0(System::Func_2<UnityEngine::Component*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__18_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__18_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__19_0
System::Func_2<UnityEngine::Component*, int>* ModestTree::Util::UnityUtil::$$c::_get_$$9__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__19_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Component*, int>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__19_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Component,System.Int32> <>9__19_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__19_0(System::Func_2<UnityEngine::Component*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__19_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__19_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__22_0
System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$$c::_get_$$9__22_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__22_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__22_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.Transform,UnityEngine.GameObject> <>9__22_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__22_0(System::Func_2<UnityEngine::Transform*, UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__22_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__22_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.GameObject,System.Boolean> <>9__23_0
System::Func_2<UnityEngine::GameObject*, bool>* ModestTree::Util::UnityUtil::$$c::_get_$$9__23_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_get_$$9__23_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::GameObject*, bool>*>("ModestTree.Util", "UnityUtil/<>c", "<>9__23_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.GameObject,System.Boolean> <>9__23_0
void ModestTree::Util::UnityUtil::$$c::_set_$$9__23_0(System::Func_2<UnityEngine::GameObject*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::_set_$$9__23_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("ModestTree.Util", "UnityUtil/<>c", "<>9__23_0", value)));
}
// Autogenerated method: ModestTree.Util.UnityUtil/<>c..cctor
void ModestTree::Util::UnityUtil::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("ModestTree.Util", "UnityUtil/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<>c.<get_AllLoadedScenes>b__3_0
bool ModestTree::Util::UnityUtil::$$c::$get_AllLoadedScenes$b__3_0(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<get_AllLoadedScenes>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_AllLoadedScenes>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, scene);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<>c.<GetRootParentOrSelf>b__15_0
UnityEngine::GameObject* ModestTree::Util::UnityUtil::$$c::$GetRootParentOrSelf$b__15_0(UnityEngine::Transform* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetRootParentOrSelf>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetRootParentOrSelf>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<>c.<GetComponentsInChildrenTopDown>b__18_0
int ModestTree::Util::UnityUtil::$$c::$GetComponentsInChildrenTopDown$b__18_0(UnityEngine::Component* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetComponentsInChildrenTopDown>b__18_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetComponentsInChildrenTopDown>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<>c.<GetComponentsInChildrenBottomUp>b__19_0
int ModestTree::Util::UnityUtil::$$c::$GetComponentsInChildrenBottomUp$b__19_0(UnityEngine::Component* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetComponentsInChildrenBottomUp>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetComponentsInChildrenBottomUp>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<>c.<GetAllGameObjects>b__22_0
UnityEngine::GameObject* ModestTree::Util::UnityUtil::$$c::$GetAllGameObjects$b__22_0(UnityEngine::Transform* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetAllGameObjects>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllGameObjects>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, x);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<>c.<GetAllRootGameObjects>b__23_0
bool ModestTree::Util::UnityUtil::$$c::$GetAllRootGameObjects$b__23_0(UnityEngine::GameObject* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$$c::<GetAllRootGameObjects>b__23_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllRootGameObjects>b__23_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: UnityUtil::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityUtil::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$$c::$get_AllLoadedScenes$b__3_0
// Il2CppName: <get_AllLoadedScenes>b__3_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityUtil::$$c::*)(UnityEngine::SceneManagement::Scene)>(&UnityUtil::$$c::$get_AllLoadedScenes$b__3_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), "<get_AllLoadedScenes>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::Scene>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$$c::$GetRootParentOrSelf$b__15_0
// Il2CppName: <GetRootParentOrSelf>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (UnityUtil::$$c::*)(UnityEngine::Transform*)>(&UnityUtil::$$c::$GetRootParentOrSelf$b__15_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), "<GetRootParentOrSelf>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$$c::$GetComponentsInChildrenTopDown$b__18_0
// Il2CppName: <GetComponentsInChildrenTopDown>b__18_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityUtil::$$c::*)(UnityEngine::Component*)>(&UnityUtil::$$c::$GetComponentsInChildrenTopDown$b__18_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), "<GetComponentsInChildrenTopDown>b__18_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Component*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$$c::$GetComponentsInChildrenBottomUp$b__19_0
// Il2CppName: <GetComponentsInChildrenBottomUp>b__19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityUtil::$$c::*)(UnityEngine::Component*)>(&UnityUtil::$$c::$GetComponentsInChildrenBottomUp$b__19_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), "<GetComponentsInChildrenBottomUp>b__19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Component*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$$c::$GetAllGameObjects$b__22_0
// Il2CppName: <GetAllGameObjects>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (UnityUtil::$$c::*)(UnityEngine::Transform*)>(&UnityUtil::$$c::$GetAllGameObjects$b__22_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), "<GetAllGameObjects>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$$c::$GetAllRootGameObjects$b__23_0
// Il2CppName: <GetAllRootGameObjects>b__23_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityUtil::$$c::*)(UnityEngine::GameObject*)>(&UnityUtil::$$c::$GetAllRootGameObjects$b__23_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), "<GetAllRootGameObjects>b__23_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$$c::*)()>(&UnityUtil::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$$c::*)()>(&UnityUtil::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/<GetParents>d__16
#include "ModestTree/Util/UnityUtil_-GetParents-d__16.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetParents$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.MoveNext
bool ModestTree::Util::UnityUtil::$GetParents$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetParents$d__16::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current
UnityEngine::Transform* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParents>d__16.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetParents$d__16::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParents$d__16::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParents$d__16::*)(int)>(&UnityUtil::$GetParents$d__16::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParents$d__16::*)(int)>(&UnityUtil::$GetParents$d__16::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>* (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParents$d__16::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnityUtil::$GetParents$d__16::*)()>(&UnityUtil::$GetParents$d__16::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParents$d__16*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17
#include "ModestTree/Util/UnityUtil_-GetParentsAndSelf-d__17.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.MoveNext
bool ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current
UnityEngine::Transform* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetParentsAndSelf>d__17.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetParentsAndSelf$d__17::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParentsAndSelf$d__17::*)(int)>(&UnityUtil::$GetParentsAndSelf$d__17::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParentsAndSelf$d__17::*)(int)>(&UnityUtil::$GetParentsAndSelf$d__17::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerator$UnityEngine_Transform$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "System.Collections.Generic.IEnumerator<UnityEngine.Transform>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::Transform*>* (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::System_Collections_Generic_IEnumerable$UnityEngine_Transform$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnityUtil::$GetParentsAndSelf$d__17::*)()>(&UnityUtil::$GetParentsAndSelf$d__17::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetParentsAndSelf$d__17*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20
#include "ModestTree/Util/UnityUtil_-GetDirectChildrenAndSelf-d__20.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.MoveNext
bool ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current
UnityEngine::GameObject* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildrenAndSelf>d__20.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildrenAndSelf$d__20::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)(int)>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)(int)>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::GameObject*>* (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnityUtil::$GetDirectChildrenAndSelf$d__20::*)()>(&UnityUtil::$GetDirectChildrenAndSelf$d__20::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildrenAndSelf$d__20*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21
#include "ModestTree/Util/UnityUtil_-GetDirectChildren-d__21.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.System.IDisposable.Dispose
void ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.MoveNext
bool ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.<>m__Finally1
void ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current
UnityEngine::GameObject* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.System.Collections.IEnumerator.Reset
void ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator
System::Collections::Generic::IEnumerator_1<UnityEngine::GameObject*>* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: ModestTree.Util.UnityUtil/<GetDirectChildren>d__21.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::Util::UnityUtil::$GetDirectChildren$d__21::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildren$d__21::*)(int)>(&UnityUtil::$GetDirectChildren$d__21::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildren$d__21::*)(int)>(&UnityUtil::$GetDirectChildren$d__21::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerator$UnityEngine_GameObject$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "System.Collections.Generic.IEnumerator<UnityEngine.GameObject>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<UnityEngine::GameObject*>* (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::System_Collections_Generic_IEnumerable$UnityEngine_GameObject$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "System.Collections.Generic.IEnumerable<UnityEngine.GameObject>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnityUtil::$GetDirectChildren$d__21::*)()>(&UnityUtil::$GetDirectChildren$d__21::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityUtil::$GetDirectChildren$d__21*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ScopeTypes
#include "Zenject/ScopeTypes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ScopeTypes Unset
Zenject::ScopeTypes Zenject::ScopeTypes::_get_Unset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopeTypes::_get_Unset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ScopeTypes>("Zenject", "ScopeTypes", "Unset"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ScopeTypes Unset
void Zenject::ScopeTypes::_set_Unset(Zenject::ScopeTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopeTypes::_set_Unset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ScopeTypes", "Unset", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ScopeTypes Transient
Zenject::ScopeTypes Zenject::ScopeTypes::_get_Transient() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopeTypes::_get_Transient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ScopeTypes>("Zenject", "ScopeTypes", "Transient"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ScopeTypes Transient
void Zenject::ScopeTypes::_set_Transient(Zenject::ScopeTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopeTypes::_set_Transient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ScopeTypes", "Transient", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ScopeTypes Singleton
Zenject::ScopeTypes Zenject::ScopeTypes::_get_Singleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopeTypes::_get_Singleton");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ScopeTypes>("Zenject", "ScopeTypes", "Singleton"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ScopeTypes Singleton
void Zenject::ScopeTypes::_set_Singleton(Zenject::ScopeTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopeTypes::_set_Singleton");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ScopeTypes", "Singleton", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ToChoices
#include "Zenject/ToChoices.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.ToChoices Self
Zenject::ToChoices Zenject::ToChoices::_get_Self() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ToChoices::_get_Self");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ToChoices>("Zenject", "ToChoices", "Self"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ToChoices Self
void Zenject::ToChoices::_set_Self(Zenject::ToChoices value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ToChoices::_set_Self");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ToChoices", "Self", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.ToChoices Concrete
Zenject::ToChoices Zenject::ToChoices::_get_Concrete() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ToChoices::_get_Concrete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ToChoices>("Zenject", "ToChoices", "Concrete"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.ToChoices Concrete
void Zenject::ToChoices::_set_Concrete(Zenject::ToChoices value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ToChoices::_set_Concrete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ToChoices", "Concrete", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InvalidBindResponses
#include "Zenject/InvalidBindResponses.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.InvalidBindResponses Assert
Zenject::InvalidBindResponses Zenject::InvalidBindResponses::_get_Assert() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InvalidBindResponses::_get_Assert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InvalidBindResponses>("Zenject", "InvalidBindResponses", "Assert"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InvalidBindResponses Assert
void Zenject::InvalidBindResponses::_set_Assert(Zenject::InvalidBindResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InvalidBindResponses::_set_Assert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InvalidBindResponses", "Assert", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.InvalidBindResponses Skip
Zenject::InvalidBindResponses Zenject::InvalidBindResponses::_get_Skip() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InvalidBindResponses::_get_Skip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::InvalidBindResponses>("Zenject", "InvalidBindResponses", "Skip"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.InvalidBindResponses Skip
void Zenject::InvalidBindResponses::_set_Skip(Zenject::InvalidBindResponses value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InvalidBindResponses::_set_Skip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "InvalidBindResponses", "Skip", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods None
Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "None"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods None
void Zenject::BindingInheritanceMethods::_set_None(Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods CopyIntoAll
Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_CopyIntoAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_get_CopyIntoAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "CopyIntoAll"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods CopyIntoAll
void Zenject::BindingInheritanceMethods::_set_CopyIntoAll(Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_set_CopyIntoAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "CopyIntoAll", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods CopyDirectOnly
Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_CopyDirectOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_get_CopyDirectOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "CopyDirectOnly"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods CopyDirectOnly
void Zenject::BindingInheritanceMethods::_set_CopyDirectOnly(Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_set_CopyDirectOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "CopyDirectOnly", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods MoveIntoAll
Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_MoveIntoAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_get_MoveIntoAll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "MoveIntoAll"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods MoveIntoAll
void Zenject::BindingInheritanceMethods::_set_MoveIntoAll(Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_set_MoveIntoAll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "MoveIntoAll", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.BindingInheritanceMethods MoveDirectOnly
Zenject::BindingInheritanceMethods Zenject::BindingInheritanceMethods::_get_MoveDirectOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_get_MoveDirectOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::BindingInheritanceMethods>("Zenject", "BindingInheritanceMethods", "MoveDirectOnly"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.BindingInheritanceMethods MoveDirectOnly
void Zenject::BindingInheritanceMethods::_set_MoveDirectOnly(Zenject::BindingInheritanceMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingInheritanceMethods::_set_MoveDirectOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "BindingInheritanceMethods", "MoveDirectOnly", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.BindInfo.Dispose
void Zenject::BindInfo::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindInfo::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindInfo.SetContextInfo
void Zenject::BindInfo::SetContextInfo(::Il2CppString* contextInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindInfo::SetContextInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContextInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contextInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, contextInfo);
}
// Autogenerated method: Zenject.BindInfo.Reset
void Zenject::BindInfo::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindInfo::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BindInfo::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindInfo::*)()>(&BindInfo::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindInfo*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindInfo::SetContextInfo
// Il2CppName: SetContextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindInfo::*)(::Il2CppString*)>(&BindInfo::SetContextInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindInfo*), "SetContextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BindInfo::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindInfo::*)()>(&BindInfo::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindInfo*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindInfo::*)()>(&BindInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindInfo::*)()>(&BindInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.BindStatement
#include "Zenject/BindStatement.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IBindingFinalizer
#include "Zenject/IBindingFinalizer.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.BindStatement.get_BindingInheritanceMethod
Zenject::BindingInheritanceMethods Zenject::BindStatement::get_BindingInheritanceMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::get_BindingInheritanceMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindingInheritanceMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.get_HasFinalizer
bool Zenject::BindStatement::get_HasFinalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::get_HasFinalizer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasFinalizer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.SetFinalizer
void Zenject::BindStatement::SetFinalizer(Zenject::IBindingFinalizer* bindingFinalizer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::SetFinalizer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFinalizer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindingFinalizer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bindingFinalizer);
}
// Autogenerated method: Zenject.BindStatement.AssertHasFinalizer
void Zenject::BindStatement::AssertHasFinalizer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::AssertHasFinalizer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssertHasFinalizer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.AddDisposable
void Zenject::BindStatement::AddDisposable(System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::AddDisposable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDisposable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposable);
}
// Autogenerated method: Zenject.BindStatement.SpawnBindInfo
Zenject::BindInfo* Zenject::BindStatement::SpawnBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::SpawnBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.FinalizeBinding
void Zenject::BindStatement::FinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::FinalizeBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.BindStatement.Reset
void Zenject::BindStatement::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.BindStatement.Dispose
void Zenject::BindStatement::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindStatement::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BindStatement::get_BindingInheritanceMethod
// Il2CppName: get_BindingInheritanceMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindingInheritanceMethods (BindStatement::*)()>(&BindStatement::get_BindingInheritanceMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "get_BindingInheritanceMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindStatement::get_HasFinalizer
// Il2CppName: get_HasFinalizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BindStatement::*)()>(&BindStatement::get_HasFinalizer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "get_HasFinalizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindStatement::SetFinalizer
// Il2CppName: SetFinalizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)(Zenject::IBindingFinalizer*)>(&BindStatement::SetFinalizer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "SetFinalizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IBindingFinalizer*>()});
  }
};
// Writing MetadataGetter for method: BindStatement::AssertHasFinalizer
// Il2CppName: AssertHasFinalizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)()>(&BindStatement::AssertHasFinalizer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "AssertHasFinalizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindStatement::AddDisposable
// Il2CppName: AddDisposable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)(System::IDisposable*)>(&BindStatement::AddDisposable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "AddDisposable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IDisposable*>()});
  }
};
// Writing MetadataGetter for method: BindStatement::SpawnBindInfo
// Il2CppName: SpawnBindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindInfo* (BindStatement::*)()>(&BindStatement::SpawnBindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "SpawnBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindStatement::FinalizeBinding
// Il2CppName: FinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)(Zenject::DiContainer*)>(&BindStatement::FinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "FinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: BindStatement::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)()>(&BindStatement::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindStatement::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)()>(&BindStatement::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BindStatement::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)()>(&BindStatement::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BindStatement::*)()>(&BindStatement::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindStatement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryBindInfo
#include "Zenject/FactoryBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.FactoryBindInfo.get_FactoryType
System::Type* Zenject::FactoryBindInfo::get_FactoryType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryBindInfo::get_FactoryType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FactoryType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryBindInfo.set_FactoryType
void Zenject::FactoryBindInfo::set_FactoryType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryBindInfo::set_FactoryType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FactoryType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryBindInfo.get_ProviderFunc
System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* Zenject::FactoryBindInfo::get_ProviderFunc() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryBindInfo::get_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryBindInfo.set_ProviderFunc
void Zenject::FactoryBindInfo::set_ProviderFunc(System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryBindInfo::set_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryBindInfo.get_Arguments
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::FactoryBindInfo::get_Arguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryBindInfo::get_Arguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Arguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::TypeValuePair>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryBindInfo.set_Arguments
void Zenject::FactoryBindInfo::set_Arguments(System::Collections::Generic::List_1<Zenject::TypeValuePair>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryBindInfo::set_Arguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Arguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: FactoryBindInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryBindInfo::*)(System::Type*)>(&FactoryBindInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryBindInfo::*)(System::Type*)>(&FactoryBindInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: FactoryBindInfo::get_FactoryType
// Il2CppName: get_FactoryType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FactoryBindInfo::*)()>(&FactoryBindInfo::get_FactoryType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), "get_FactoryType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryBindInfo::set_FactoryType
// Il2CppName: set_FactoryType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryBindInfo::*)(System::Type*)>(&FactoryBindInfo::set_FactoryType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), "set_FactoryType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: FactoryBindInfo::get_ProviderFunc
// Il2CppName: get_ProviderFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* (FactoryBindInfo::*)()>(&FactoryBindInfo::get_ProviderFunc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), "get_ProviderFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryBindInfo::set_ProviderFunc
// Il2CppName: set_ProviderFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryBindInfo::*)(System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*)>(&FactoryBindInfo::set_ProviderFunc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), "set_ProviderFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: FactoryBindInfo::get_Arguments
// Il2CppName: get_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>* (FactoryBindInfo::*)()>(&FactoryBindInfo::get_Arguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), "get_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryBindInfo::set_Arguments
// Il2CppName: set_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryBindInfo::*)(System::Collections::Generic::List_1<Zenject::TypeValuePair>*)>(&FactoryBindInfo::set_Arguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryBindInfo*), "set_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.GameObjectCreationParameters Default
Zenject::GameObjectCreationParameters* Zenject::GameObjectCreationParameters::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::GameObjectCreationParameters*>("Zenject", "GameObjectCreationParameters", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.GameObjectCreationParameters Default
void Zenject::GameObjectCreationParameters::_set_Default(Zenject::GameObjectCreationParameters* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "GameObjectCreationParameters", "Default", value));
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_Name
::Il2CppString* Zenject::GameObjectCreationParameters::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_Name
void Zenject::GameObjectCreationParameters::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_GroupName
::Il2CppString* Zenject::GameObjectCreationParameters::get_GroupName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::get_GroupName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GroupName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_GroupName
void Zenject::GameObjectCreationParameters::set_GroupName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::set_GroupName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_GroupName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_ParentTransform
UnityEngine::Transform* Zenject::GameObjectCreationParameters::get_ParentTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::get_ParentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_ParentTransform
void Zenject::GameObjectCreationParameters::set_ParentTransform(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::set_ParentTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_ParentTransformGetter
System::Func_2<Zenject::InjectContext*, UnityEngine::Transform*>* Zenject::GameObjectCreationParameters::get_ParentTransformGetter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::get_ParentTransformGetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentTransformGetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Func_2<Zenject::InjectContext*, UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_ParentTransformGetter
void Zenject::GameObjectCreationParameters::set_ParentTransformGetter(System::Func_2<Zenject::InjectContext*, UnityEngine::Transform*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::set_ParentTransformGetter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentTransformGetter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_Position
System::Nullable_1<UnityEngine::Vector3> Zenject::GameObjectCreationParameters::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::get_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<UnityEngine::Vector3>, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_Position
void Zenject::GameObjectCreationParameters::set_Position(System::Nullable_1<UnityEngine::Vector3> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::set_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.get_Rotation
System::Nullable_1<UnityEngine::Quaternion> Zenject::GameObjectCreationParameters::get_Rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::get_Rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<UnityEngine::Quaternion>, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.set_Rotation
void Zenject::GameObjectCreationParameters::set_Rotation(System::Nullable_1<UnityEngine::Quaternion> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::set_Rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.Equals
bool Zenject::GameObjectCreationParameters::Equals(Zenject::GameObjectCreationParameters* that) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(that)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, that);
}
// Autogenerated method: Zenject.GameObjectCreationParameters..cctor
void Zenject::GameObjectCreationParameters::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GameObjectCreationParameters", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.GetHashCode
int Zenject::GameObjectCreationParameters::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.Equals
bool Zenject::GameObjectCreationParameters::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.op_Equality
bool Zenject::operator ==(Zenject::GameObjectCreationParameters* left, Zenject::GameObjectCreationParameters& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GameObjectCreationParameters", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, &right);
}
// Autogenerated method: Zenject.GameObjectCreationParameters.op_Inequality
bool Zenject::operator !=(Zenject::GameObjectCreationParameters* left, Zenject::GameObjectCreationParameters& right) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectCreationParameters::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GameObjectCreationParameters", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(&right)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, &right);
}
// Writing MetadataGetter for method: GameObjectCreationParameters::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)(::Il2CppString*)>(&GameObjectCreationParameters::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::get_GroupName
// Il2CppName: get_GroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::get_GroupName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "get_GroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::set_GroupName
// Il2CppName: set_GroupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)(::Il2CppString*)>(&GameObjectCreationParameters::set_GroupName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "set_GroupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::get_ParentTransform
// Il2CppName: get_ParentTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::get_ParentTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "get_ParentTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::set_ParentTransform
// Il2CppName: set_ParentTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)(UnityEngine::Transform*)>(&GameObjectCreationParameters::set_ParentTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "set_ParentTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::get_ParentTransformGetter
// Il2CppName: get_ParentTransformGetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Func_2<Zenject::InjectContext*, UnityEngine::Transform*>* (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::get_ParentTransformGetter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "get_ParentTransformGetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::set_ParentTransformGetter
// Il2CppName: set_ParentTransformGetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)(System::Func_2<Zenject::InjectContext*, UnityEngine::Transform*>*)>(&GameObjectCreationParameters::set_ParentTransformGetter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "set_ParentTransformGetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::Transform*>*>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<UnityEngine::Vector3> (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::get_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)(System::Nullable_1<UnityEngine::Vector3>)>(&GameObjectCreationParameters::set_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<UnityEngine::Vector3>>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<UnityEngine::Quaternion> (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::get_Rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::set_Rotation
// Il2CppName: set_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)(System::Nullable_1<UnityEngine::Quaternion>)>(&GameObjectCreationParameters::set_Rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "set_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<UnityEngine::Quaternion>>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObjectCreationParameters::*)(Zenject::GameObjectCreationParameters*)>(&GameObjectCreationParameters::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GameObjectCreationParameters::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObjectCreationParameters::*)(::Il2CppObject*)>(&GameObjectCreationParameters::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectCreationParameters::*)()>(&GameObjectCreationParameters::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(Zenject::GameObjectCreationParameters*, Zenject::GameObjectCreationParameters&)>(&GameObjectCreationParameters::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters&>()});
  }
};
// Writing MetadataGetter for method: GameObjectCreationParameters::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(Zenject::GameObjectCreationParameters*, Zenject::GameObjectCreationParameters&)>(&GameObjectCreationParameters::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectCreationParameters*), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolExpandMethods
#include "Zenject/PoolExpandMethods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Zenject.PoolExpandMethods OneAtATime
Zenject::PoolExpandMethods Zenject::PoolExpandMethods::_get_OneAtATime() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolExpandMethods::_get_OneAtATime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::PoolExpandMethods>("Zenject", "PoolExpandMethods", "OneAtATime"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.PoolExpandMethods OneAtATime
void Zenject::PoolExpandMethods::_set_OneAtATime(Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolExpandMethods::_set_OneAtATime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "PoolExpandMethods", "OneAtATime", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.PoolExpandMethods Double
Zenject::PoolExpandMethods Zenject::PoolExpandMethods::_get_Double() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolExpandMethods::_get_Double");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::PoolExpandMethods>("Zenject", "PoolExpandMethods", "Double"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.PoolExpandMethods Double
void Zenject::PoolExpandMethods::_set_Double(Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolExpandMethods::_set_Double");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "PoolExpandMethods", "Double", value));
}
// Autogenerated static field getter
// Get static field: static public Zenject.PoolExpandMethods Disabled
Zenject::PoolExpandMethods Zenject::PoolExpandMethods::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolExpandMethods::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::PoolExpandMethods>("Zenject", "PoolExpandMethods", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public Zenject.PoolExpandMethods Disabled
void Zenject::PoolExpandMethods::_set_Disabled(Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolExpandMethods::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "PoolExpandMethods", "Disabled", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.MemoryPoolBindInfo
#include "Zenject/MemoryPoolBindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.MemoryPoolBindInfo.get_ExpandMethod
Zenject::PoolExpandMethods Zenject::MemoryPoolBindInfo::get_ExpandMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolBindInfo::get_ExpandMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExpandMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::PoolExpandMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.set_ExpandMethod
void Zenject::MemoryPoolBindInfo::set_ExpandMethod(Zenject::PoolExpandMethods value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolBindInfo::set_ExpandMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExpandMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.get_InitialSize
int Zenject::MemoryPoolBindInfo::get_InitialSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolBindInfo::get_InitialSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InitialSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.set_InitialSize
void Zenject::MemoryPoolBindInfo::set_InitialSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolBindInfo::set_InitialSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InitialSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.get_MaxSize
int Zenject::MemoryPoolBindInfo::get_MaxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolBindInfo::get_MaxSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MemoryPoolBindInfo.set_MaxSize
void Zenject::MemoryPoolBindInfo::set_MaxSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolBindInfo::set_MaxSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MaxSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MemoryPoolBindInfo::get_ExpandMethod
// Il2CppName: get_ExpandMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::PoolExpandMethods (MemoryPoolBindInfo::*)()>(&MemoryPoolBindInfo::get_ExpandMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), "get_ExpandMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryPoolBindInfo::set_ExpandMethod
// Il2CppName: set_ExpandMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolBindInfo::*)(Zenject::PoolExpandMethods)>(&MemoryPoolBindInfo::set_ExpandMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), "set_ExpandMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::PoolExpandMethods>()});
  }
};
// Writing MetadataGetter for method: MemoryPoolBindInfo::get_InitialSize
// Il2CppName: get_InitialSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryPoolBindInfo::*)()>(&MemoryPoolBindInfo::get_InitialSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), "get_InitialSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryPoolBindInfo::set_InitialSize
// Il2CppName: set_InitialSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolBindInfo::*)(int)>(&MemoryPoolBindInfo::set_InitialSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), "set_InitialSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryPoolBindInfo::get_MaxSize
// Il2CppName: get_MaxSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MemoryPoolBindInfo::*)()>(&MemoryPoolBindInfo::get_MaxSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), "get_MaxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryPoolBindInfo::set_MaxSize
// Il2CppName: set_MaxSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolBindInfo::*)(int)>(&MemoryPoolBindInfo::set_MaxSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), "set_MaxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MemoryPoolBindInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolBindInfo::*)()>(&MemoryPoolBindInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolBindInfo::*)()>(&MemoryPoolBindInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ArgConditionCopyNonLazyBinder.WithArguments
Zenject::InstantiateCallbackConditionCopyNonLazyBinder* Zenject::ArgConditionCopyNonLazyBinder::WithArguments(::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArgConditionCopyNonLazyBinder::WithArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InstantiateCallbackConditionCopyNonLazyBinder*, false>(this, ___internal__method, args);
}
// Autogenerated method: Zenject.ArgConditionCopyNonLazyBinder.WithArgumentsExplicit
Zenject::InstantiateCallbackConditionCopyNonLazyBinder* Zenject::ArgConditionCopyNonLazyBinder::WithArgumentsExplicit(System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>* extraArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArgConditionCopyNonLazyBinder::WithArgumentsExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithArgumentsExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(extraArgs)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InstantiateCallbackConditionCopyNonLazyBinder*, false>(this, ___internal__method, extraArgs);
}
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArguments
// Il2CppName: WithArguments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArguments
// Il2CppName: WithArguments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArguments
// Il2CppName: WithArguments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArguments
// Il2CppName: WithArguments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArguments
// Il2CppName: WithArguments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArguments
// Il2CppName: WithArguments
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArguments
// Il2CppName: WithArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InstantiateCallbackConditionCopyNonLazyBinder* (ArgConditionCopyNonLazyBinder::*)(::Array<::Il2CppObject*>*)>(&ArgConditionCopyNonLazyBinder::WithArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArgConditionCopyNonLazyBinder*), "WithArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::WithArgumentsExplicit
// Il2CppName: WithArgumentsExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InstantiateCallbackConditionCopyNonLazyBinder* (ArgConditionCopyNonLazyBinder::*)(System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*)>(&ArgConditionCopyNonLazyBinder::WithArgumentsExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArgConditionCopyNonLazyBinder*), "WithArgumentsExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::TypeValuePair>*>()});
  }
};
// Writing MetadataGetter for method: ArgConditionCopyNonLazyBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArgConditionCopyNonLazyBinder::*)(Zenject::BindInfo*)>(&ArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArgConditionCopyNonLazyBinder::*)(Zenject::BindInfo*)>(&ArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConcreteBinderNonGeneric
#include "Zenject/ConcreteBinderNonGeneric.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConventionSelectTypesBinder
#include "Zenject/ConventionSelectTypesBinder.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindStatement
#include "Zenject/BindStatement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.ToSelf
Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::ToSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderNonGeneric::ToSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.To
Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::To(::Array<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderNonGeneric::To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteTypes)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, concreteTypes);
}
// Creating initializer_list -> params proxy for: Zenject.FromBinderNonGeneric To(params System.Type[] concreteTypes)
Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::To(std::initializer_list<System::Type*> concreteTypes) {
  return Zenject::ConcreteBinderNonGeneric::To(::Array<System::Type*>::New(concreteTypes));
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.To
Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::To(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderNonGeneric::To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteTypes)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, concreteTypes);
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.To
Zenject::FromBinderNonGeneric* Zenject::ConcreteBinderNonGeneric::To(System::Action_1<Zenject::ConventionSelectTypesBinder*>* generator) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderNonGeneric::To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(generator)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, generator);
}
// Autogenerated method: Zenject.ConcreteBinderNonGeneric.<ToSelf>b__1_0
Zenject::IProvider* Zenject::ConcreteBinderNonGeneric::$ToSelf$b__1_0(Zenject::DiContainer* container, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderNonGeneric::<ToSelf>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToSelf>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, container, type);
}
// Writing MetadataGetter for method: ConcreteBinderNonGeneric::ToSelf
// Il2CppName: ToSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FromBinderNonGeneric* (ConcreteBinderNonGeneric::*)()>(&ConcreteBinderNonGeneric::ToSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteBinderNonGeneric*), "ToSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConcreteBinderNonGeneric::To
// Il2CppName: To
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConcreteBinderNonGeneric::To
// Il2CppName: To
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FromBinderNonGeneric* (ConcreteBinderNonGeneric::*)(::Array<System::Type*>*)>(&ConcreteBinderNonGeneric::To)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteBinderNonGeneric*), "To", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ConcreteBinderNonGeneric::To
// Il2CppName: To
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FromBinderNonGeneric* (ConcreteBinderNonGeneric::*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&ConcreteBinderNonGeneric::To)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteBinderNonGeneric*), "To", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ConcreteBinderNonGeneric::To
// Il2CppName: To
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FromBinderNonGeneric* (ConcreteBinderNonGeneric::*)(System::Action_1<Zenject::ConventionSelectTypesBinder*>*)>(&ConcreteBinderNonGeneric::To)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteBinderNonGeneric*), "To", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::ConventionSelectTypesBinder*>*>()});
  }
};
// Writing MetadataGetter for method: ConcreteBinderNonGeneric::$ToSelf$b__1_0
// Il2CppName: <ToSelf>b__1_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (ConcreteBinderNonGeneric::*)(Zenject::DiContainer*, System::Type*)>(&ConcreteBinderNonGeneric::$ToSelf$b__1_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteBinderNonGeneric*), "<ToSelf>b__1_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConcreteBinderNonGeneric::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConcreteBinderNonGeneric::*)(Zenject::DiContainer*, Zenject::BindInfo*, Zenject::BindStatement*)>(&ConcreteBinderNonGeneric::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteBinderNonGeneric*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindStatement*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConcreteBinderNonGeneric::*)(Zenject::DiContainer*, Zenject::BindInfo*, Zenject::BindStatement*)>(&ConcreteBinderNonGeneric::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteBinderNonGeneric*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindStatement*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConcreteIdBinderNonGeneric
#include "Zenject/ConcreteIdBinderNonGeneric.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindStatement
#include "Zenject/BindStatement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConcreteIdBinderNonGeneric.WithId
Zenject::ConcreteBinderNonGeneric* Zenject::ConcreteIdBinderNonGeneric::WithId(::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteIdBinderNonGeneric::WithId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteBinderNonGeneric*, false>(this, ___internal__method, identifier);
}
// Writing MetadataGetter for method: ConcreteIdBinderNonGeneric::WithId
// Il2CppName: WithId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConcreteBinderNonGeneric* (ConcreteIdBinderNonGeneric::*)(::Il2CppObject*)>(&ConcreteIdBinderNonGeneric::WithId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteIdBinderNonGeneric*), "WithId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ConcreteIdBinderNonGeneric::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConcreteIdBinderNonGeneric::*)(Zenject::DiContainer*, Zenject::BindInfo*, Zenject::BindStatement*)>(&ConcreteIdBinderNonGeneric::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteIdBinderNonGeneric*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindStatement*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConcreteIdBinderNonGeneric::*)(Zenject::DiContainer*, Zenject::BindInfo*, Zenject::BindStatement*)>(&ConcreteIdBinderNonGeneric::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteIdBinderNonGeneric*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindStatement*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/ConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConcreteIdArgConditionCopyNonLazyBinder.WithConcreteId
Zenject::ArgConditionCopyNonLazyBinder* Zenject::ConcreteIdArgConditionCopyNonLazyBinder::WithConcreteId(::Il2CppObject* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteIdArgConditionCopyNonLazyBinder::WithConcreteId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithConcreteId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, id);
}
// Writing MetadataGetter for method: ConcreteIdArgConditionCopyNonLazyBinder::WithConcreteId
// Il2CppName: WithConcreteId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ArgConditionCopyNonLazyBinder* (ConcreteIdArgConditionCopyNonLazyBinder::*)(::Il2CppObject*)>(&ConcreteIdArgConditionCopyNonLazyBinder::WithConcreteId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteIdArgConditionCopyNonLazyBinder*), "WithConcreteId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ConcreteIdArgConditionCopyNonLazyBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::BindInfo*)>(&ConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::BindInfo*)>(&ConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder
#include "Zenject/ConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass2_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass2_0.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_0.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_1
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_1.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__4`1
#include "Zenject/ConditionCopyNonLazyBinder_--c__4_1.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__5`1
#include "Zenject/ConditionCopyNonLazyBinder_--c__5_1.hpp"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.When
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::When(Zenject::BindingCondition* condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConditionCopyNonLazyBinder::When");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "When", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, condition);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.WhenInjectedIntoInstance
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedIntoInstance(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConditionCopyNonLazyBinder::WhenInjectedIntoInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WhenInjectedIntoInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.WhenInjectedInto
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto(::Array<System::Type*>* targets) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WhenInjectedInto", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targets)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, targets);
}
// Creating initializer_list -> params proxy for: Zenject.CopyNonLazyBinder WhenInjectedInto(params System.Type[] targets)
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto(std::initializer_list<System::Type*> targets) {
  return Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto(::Array<System::Type*>::New(targets));
}
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::When
// Il2CppName: When
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (ConditionCopyNonLazyBinder::*)(Zenject::BindingCondition*)>(&ConditionCopyNonLazyBinder::When)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder*), "When", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingCondition*>()});
  }
};
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::WhenInjectedIntoInstance
// Il2CppName: WhenInjectedIntoInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (ConditionCopyNonLazyBinder::*)(::Il2CppObject*)>(&ConditionCopyNonLazyBinder::WhenInjectedIntoInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder*), "WhenInjectedIntoInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::WhenInjectedInto
// Il2CppName: WhenInjectedInto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::CopyNonLazyBinder* (ConditionCopyNonLazyBinder::*)(::Array<System::Type*>*)>(&ConditionCopyNonLazyBinder::WhenInjectedInto)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder*), "WhenInjectedInto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::WhenInjectedInto
// Il2CppName: WhenInjectedInto
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::WhenNotInjectedInto
// Il2CppName: WhenNotInjectedInto
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::*)(Zenject::BindInfo*)>(&ConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::*)(Zenject::BindInfo*)>(&ConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass2_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass2_0.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass2_0.<WhenInjectedIntoInstance>b__0
bool Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::$WhenInjectedIntoInstance$b__0(Zenject::InjectContext* r) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::<WhenInjectedIntoInstance>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WhenInjectedIntoInstance>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, r);
}
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::$WhenInjectedIntoInstance$b__0
// Il2CppName: <WhenInjectedIntoInstance>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::*)(Zenject::InjectContext*)>(&ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::$WhenInjectedIntoInstance$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass2_0*), "<WhenInjectedIntoInstance>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::*)()>(&ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::*)()>(&ConditionCopyNonLazyBinder::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_0.<WhenInjectedInto>b__0
bool Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::$WhenInjectedInto$b__0(Zenject::InjectContext* r) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::<WhenInjectedInto>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WhenInjectedInto>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, r);
}
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::$WhenInjectedInto$b__0
// Il2CppName: <WhenInjectedInto>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::*)(Zenject::InjectContext*)>(&ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::$WhenInjectedInto$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass3_0*), "<WhenInjectedInto>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::*)()>(&ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::*)()>(&ConditionCopyNonLazyBinder::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_1
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_1.<WhenInjectedInto>b__1
bool Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::$WhenInjectedInto$b__1(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::<WhenInjectedInto>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WhenInjectedInto>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::$WhenInjectedInto$b__1
// Il2CppName: <WhenInjectedInto>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::*)(System::Type*)>(&ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::$WhenInjectedInto$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass3_1*), "<WhenInjectedInto>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::*)()>(&ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass3_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::*)()>(&ConditionCopyNonLazyBinder::$$c__DisplayClass3_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConditionCopyNonLazyBinder::$$c__DisplayClass3_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionAssemblySelectionBinder
#include "Zenject/ConventionAssemblySelectionBinder.hpp"
// Including type: Zenject.ConventionAssemblySelectionBinder/<>c
#include "Zenject/ConventionAssemblySelectionBinder_--c.hpp"
// Including type: Zenject.ConventionAssemblySelectionBinder/<>c__DisplayClass12_0
#include "Zenject/ConventionAssemblySelectionBinder_--c__DisplayClass12_0.hpp"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.get_BindInfo
Zenject::ConventionBindInfo* Zenject::ConventionAssemblySelectionBinder::get_BindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::get_BindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.set_BindInfo
void Zenject::ConventionAssemblySelectionBinder::set_BindInfo(Zenject::ConventionBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::set_BindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAllAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAllAssemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromAllAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAllAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesContaining
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(::Array<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembliesContaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, types);
}
// Creating initializer_list -> params proxy for: System.Void FromAssembliesContaining(params System.Type[] types)
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(std::initializer_list<System::Type*> types) {
  Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(::Array<System::Type*>::New(types));
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesContaining
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembliesContaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, types);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromThisAssembly
void Zenject::ConventionAssemblySelectionBinder::FromThisAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromThisAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromThisAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembly
void Zenject::ConventionAssemblySelectionBinder::FromAssembly(System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(::Array<System::Reflection::Assembly*>* assemblies) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assemblies)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, assemblies);
}
// Creating initializer_list -> params proxy for: System.Void FromAssemblies(params System.Reflection.Assembly[] assemblies)
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(std::initializer_list<System::Reflection::Assembly*> assemblies) {
  Zenject::ConventionAssemblySelectionBinder::FromAssemblies(::Array<System::Reflection::Assembly*>::New(assemblies));
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>* assemblies) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assemblies)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, assemblies);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesWhere
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesWhere(System::Func_2<System::Reflection::Assembly*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::FromAssembliesWhere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromAssembliesWhere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, predicate);
}
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionAssemblySelectionBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionAssemblySelectionBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::get_BindInfo
// Il2CppName: get_BindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionBindInfo* (ConventionAssemblySelectionBinder::*)()>(&ConventionAssemblySelectionBinder::get_BindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "get_BindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::set_BindInfo
// Il2CppName: set_BindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionAssemblySelectionBinder::set_BindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "set_BindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAllAssemblies
// Il2CppName: FromAllAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)()>(&ConventionAssemblySelectionBinder::FromAllAssemblies)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromAllAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAssemblyContaining
// Il2CppName: FromAssemblyContaining
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAssembliesContaining
// Il2CppName: FromAssembliesContaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(::Array<System::Type*>*)>(&ConventionAssemblySelectionBinder::FromAssembliesContaining)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromAssembliesContaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAssembliesContaining
// Il2CppName: FromAssembliesContaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&ConventionAssemblySelectionBinder::FromAssembliesContaining)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromAssembliesContaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromThisAssembly
// Il2CppName: FromThisAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)()>(&ConventionAssemblySelectionBinder::FromThisAssembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromThisAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAssembly
// Il2CppName: FromAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(System::Reflection::Assembly*)>(&ConventionAssemblySelectionBinder::FromAssembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::Assembly*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAssemblies
// Il2CppName: FromAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(::Array<System::Reflection::Assembly*>*)>(&ConventionAssemblySelectionBinder::FromAssemblies)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Reflection::Assembly*>*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAssemblies
// Il2CppName: FromAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>*)>(&ConventionAssemblySelectionBinder::FromAssemblies)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::FromAssembliesWhere
// Il2CppName: FromAssembliesWhere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::*)(System::Func_2<System::Reflection::Assembly*, bool>*)>(&ConventionAssemblySelectionBinder::FromAssembliesWhere)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder*), "FromAssembliesWhere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<System::Reflection::Assembly*, bool>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionAssemblySelectionBinder/<>c
#include "Zenject/ConventionAssemblySelectionBinder_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.ConventionAssemblySelectionBinder/<>c <>9
Zenject::ConventionAssemblySelectionBinder::$$c* Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::ConventionAssemblySelectionBinder::$$c*>("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.ConventionAssemblySelectionBinder/<>c <>9
void Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9(Zenject::ConventionAssemblySelectionBinder::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Reflection.Assembly> <>9__8_0
System::Func_2<System::Type*, System::Reflection::Assembly*>* Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, System::Reflection::Assembly*>*>("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Reflection.Assembly> <>9__8_0
void Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9__8_0(System::Func_2<System::Type*, System::Reflection::Assembly*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionAssemblySelectionBinder/<>c", "<>9__8_0", value)));
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/<>c..cctor
void Zenject::ConventionAssemblySelectionBinder::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionAssemblySelectionBinder/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/<>c.<FromAssembliesContaining>b__8_0
System::Reflection::Assembly* Zenject::ConventionAssemblySelectionBinder::$$c::$FromAssembliesContaining$b__8_0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::$$c::<FromAssembliesContaining>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromAssembliesContaining>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Assembly*, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ConventionAssemblySelectionBinder::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::$$c::$FromAssembliesContaining$b__8_0
// Il2CppName: <FromAssembliesContaining>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (ConventionAssemblySelectionBinder::$$c::*)(System::Type*)>(&ConventionAssemblySelectionBinder::$$c::$FromAssembliesContaining$b__8_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder::$$c*), "<FromAssembliesContaining>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::$$c::*)()>(&ConventionAssemblySelectionBinder::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::$$c::*)()>(&ConventionAssemblySelectionBinder::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionAssemblySelectionBinder/<>c__DisplayClass12_0
#include "Zenject/ConventionAssemblySelectionBinder_--c__DisplayClass12_0.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder/<>c__DisplayClass12_0.<FromAssemblies>b__0
bool Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::$FromAssemblies$b__0(System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::<FromAssemblies>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromAssemblies>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, assembly);
}
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::$FromAssemblies$b__0
// Il2CppName: <FromAssemblies>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::*)(System::Reflection::Assembly*)>(&ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::$FromAssemblies$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder::$$c__DisplayClass12_0*), "<FromAssemblies>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::Assembly*>()});
  }
};
// Writing MetadataGetter for method: ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::*)()>(&ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder::$$c__DisplayClass12_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::*)()>(&ConventionAssemblySelectionBinder::$$c__DisplayClass12_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionAssemblySelectionBinder::$$c__DisplayClass12_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
// Including type: Zenject.ConventionBindInfo/<>c__DisplayClass6_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass6_0.hpp"
// Including type: Zenject.ConventionBindInfo/<>c__DisplayClass7_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass7_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Reflection.Assembly,System.Type[]> _assemblyTypeCache
System::Collections::Generic::Dictionary_2<System::Reflection::Assembly*, ::Array<System::Type*>*>* Zenject::ConventionBindInfo::_get__assemblyTypeCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::_get__assemblyTypeCache");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<System::Reflection::Assembly*, ::Array<System::Type*>*>*>("Zenject", "ConventionBindInfo", "_assemblyTypeCache")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Reflection.Assembly,System.Type[]> _assemblyTypeCache
void Zenject::ConventionBindInfo::_set__assemblyTypeCache(System::Collections::Generic::Dictionary_2<System::Reflection::Assembly*, ::Array<System::Type*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::_set__assemblyTypeCache");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ConventionBindInfo", "_assemblyTypeCache", value));
}
// Autogenerated method: Zenject.ConventionBindInfo.AddAssemblyFilter
void Zenject::ConventionBindInfo::AddAssemblyFilter(System::Func_2<System::Reflection::Assembly*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::AddAssemblyFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAssemblyFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionBindInfo.AddTypeFilter
void Zenject::ConventionBindInfo::AddTypeFilter(System::Func_2<System::Type*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::AddTypeFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTypeFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionBindInfo.GetAllAssemblies
System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>* Zenject::ConventionBindInfo::GetAllAssemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::GetAllAssemblies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllAssemblies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionBindInfo.ShouldIncludeAssembly
bool Zenject::ConventionBindInfo::ShouldIncludeAssembly(System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::ShouldIncludeAssembly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldIncludeAssembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionBindInfo.ShouldIncludeType
bool Zenject::ConventionBindInfo::ShouldIncludeType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::ShouldIncludeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldIncludeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: Zenject.ConventionBindInfo.GetTypes
::Array<System::Type*>* Zenject::ConventionBindInfo::GetTypes(System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::GetTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionBindInfo.ResolveTypes
System::Collections::Generic::List_1<System::Type*>* Zenject::ConventionBindInfo::ResolveTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::ResolveTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionBindInfo..cctor
void Zenject::ConventionBindInfo::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionBindInfo", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ConventionBindInfo.<ResolveTypes>b__9_0
System::Collections::Generic::IEnumerable_1<System::Type*>* Zenject::ConventionBindInfo::$ResolveTypes$b__9_0(System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::<ResolveTypes>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResolveTypes>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assembly)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(this, ___internal__method, assembly);
}
// Writing MetadataGetter for method: ConventionBindInfo::AddAssemblyFilter
// Il2CppName: AddAssemblyFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::*)(System::Func_2<System::Reflection::Assembly*, bool>*)>(&ConventionBindInfo::AddAssemblyFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "AddAssemblyFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<System::Reflection::Assembly*, bool>*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::AddTypeFilter
// Il2CppName: AddTypeFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::*)(System::Func_2<System::Type*, bool>*)>(&ConventionBindInfo::AddTypeFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "AddTypeFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<System::Type*, bool>*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::GetAllAssemblies
// Il2CppName: GetAllAssemblies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>* (ConventionBindInfo::*)()>(&ConventionBindInfo::GetAllAssemblies)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "GetAllAssemblies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::ShouldIncludeAssembly
// Il2CppName: ShouldIncludeAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionBindInfo::*)(System::Reflection::Assembly*)>(&ConventionBindInfo::ShouldIncludeAssembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "ShouldIncludeAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::Assembly*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::ShouldIncludeType
// Il2CppName: ShouldIncludeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionBindInfo::*)(System::Type*)>(&ConventionBindInfo::ShouldIncludeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "ShouldIncludeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::GetTypes
// Il2CppName: GetTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (ConventionBindInfo::*)(System::Reflection::Assembly*)>(&ConventionBindInfo::GetTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "GetTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::Assembly*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::ResolveTypes
// Il2CppName: ResolveTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<System::Type*>* (ConventionBindInfo::*)()>(&ConventionBindInfo::ResolveTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "ResolveTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ConventionBindInfo::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::$ResolveTypes$b__9_0
// Il2CppName: <ResolveTypes>b__9_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Type*>* (ConventionBindInfo::*)(System::Reflection::Assembly*)>(&ConventionBindInfo::$ResolveTypes$b__9_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), "<ResolveTypes>b__9_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::Assembly*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::*)()>(&ConventionBindInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::*)()>(&ConventionBindInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionBindInfo/<>c__DisplayClass6_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass6_0.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionBindInfo/<>c__DisplayClass6_0.<ShouldIncludeAssembly>b__0
bool Zenject::ConventionBindInfo::$$c__DisplayClass6_0::$ShouldIncludeAssembly$b__0(System::Func_2<System::Reflection::Assembly*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::$$c__DisplayClass6_0::<ShouldIncludeAssembly>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ShouldIncludeAssembly>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, predicate);
}
// Writing MetadataGetter for method: ConventionBindInfo::$$c__DisplayClass6_0::$ShouldIncludeAssembly$b__0
// Il2CppName: <ShouldIncludeAssembly>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionBindInfo::$$c__DisplayClass6_0::*)(System::Func_2<System::Reflection::Assembly*, bool>*)>(&ConventionBindInfo::$$c__DisplayClass6_0::$ShouldIncludeAssembly$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo::$$c__DisplayClass6_0*), "<ShouldIncludeAssembly>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<System::Reflection::Assembly*, bool>*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::$$c__DisplayClass6_0::*)()>(&ConventionBindInfo::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::$$c__DisplayClass6_0::*)()>(&ConventionBindInfo::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionBindInfo/<>c__DisplayClass7_0
#include "Zenject/ConventionBindInfo_--c__DisplayClass7_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionBindInfo/<>c__DisplayClass7_0.<ShouldIncludeType>b__0
bool Zenject::ConventionBindInfo::$$c__DisplayClass7_0::$ShouldIncludeType$b__0(System::Func_2<System::Type*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionBindInfo::$$c__DisplayClass7_0::<ShouldIncludeType>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ShouldIncludeType>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, predicate);
}
// Writing MetadataGetter for method: ConventionBindInfo::$$c__DisplayClass7_0::$ShouldIncludeType$b__0
// Il2CppName: <ShouldIncludeType>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionBindInfo::$$c__DisplayClass7_0::*)(System::Func_2<System::Type*, bool>*)>(&ConventionBindInfo::$$c__DisplayClass7_0::$ShouldIncludeType$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo::$$c__DisplayClass7_0*), "<ShouldIncludeType>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<System::Type*, bool>*>()});
  }
};
// Writing MetadataGetter for method: ConventionBindInfo::$$c__DisplayClass7_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::$$c__DisplayClass7_0::*)()>(&ConventionBindInfo::$$c__DisplayClass7_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo::$$c__DisplayClass7_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionBindInfo::$$c__DisplayClass7_0::*)()>(&ConventionBindInfo::$$c__DisplayClass7_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionBindInfo::$$c__DisplayClass7_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder
#include "Zenject/ConventionFilterTypesBinder.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass2_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass2_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass4_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass4_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass6_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass6_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass8_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass8_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass9_0`1
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass9_0_1.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass13_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass13_1
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_1.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass14_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass14_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass15_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass15_0.hpp"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass18_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass18_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Text.RegularExpressions.RegexOptions
#include "System/Text/RegularExpressions/RegexOptions.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder.DerivingFromOrEqual
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::DerivingFromOrEqual(System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::DerivingFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DerivingFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, parentType);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.DerivingFrom
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::DerivingFrom(System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::DerivingFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DerivingFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, parentType);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithAttribute
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithAttribute(System::Type* attribute) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::WithAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attribute)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, attribute);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithoutAttribute
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithoutAttribute(System::Type* attribute) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::WithoutAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithoutAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attribute)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, attribute);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.Where
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::Where(System::Func_2<System::Type*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::Where");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Where", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(predicate)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, predicate);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.InNamespace
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::InNamespace(::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::InNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, ns);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.InNamespaces
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::InNamespaces(::Array<::Il2CppString*>* namespaces) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::InNamespaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InNamespaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(namespaces)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, namespaces);
}
// Creating initializer_list -> params proxy for: Zenject.ConventionFilterTypesBinder InNamespaces(params System.String[] namespaces)
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::InNamespaces(std::initializer_list<::Il2CppString*> namespaces) {
  return Zenject::ConventionFilterTypesBinder::InNamespaces(::Array<::Il2CppString*>::New(namespaces));
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.InNamespaces
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::InNamespaces(System::Collections::Generic::IEnumerable_1<::Il2CppString*>* namespaces) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::InNamespaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InNamespaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(namespaces)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, namespaces);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithSuffix
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithSuffix(::Il2CppString* suffix) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::WithSuffix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithSuffix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(suffix)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, suffix);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.WithPrefix
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::WithPrefix(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::WithPrefix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, prefix);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.MatchingRegex
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::MatchingRegex(::Il2CppString* pattern) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::MatchingRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatchingRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pattern)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, pattern);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.MatchingRegex
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::MatchingRegex(::Il2CppString* pattern, System::Text::RegularExpressions::RegexOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::MatchingRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatchingRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pattern), ::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, pattern, options);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.MatchingRegex
Zenject::ConventionFilterTypesBinder* Zenject::ConventionFilterTypesBinder::MatchingRegex(System::Text::RegularExpressions::Regex* regex) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::MatchingRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MatchingRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(regex)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method, regex);
}
// Autogenerated method: Zenject.ConventionFilterTypesBinder.IsInNamespace
bool Zenject::ConventionFilterTypesBinder::IsInNamespace(System::Type* type, ::Il2CppString* requiredNs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::IsInNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionFilterTypesBinder", "IsInNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(requiredNs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, requiredNs);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::DerivingFromOrEqual
// Il2CppName: DerivingFromOrEqual
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConventionFilterTypesBinder::DerivingFromOrEqual
// Il2CppName: DerivingFromOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(System::Type*)>(&ConventionFilterTypesBinder::DerivingFromOrEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "DerivingFromOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::DerivingFrom
// Il2CppName: DerivingFrom
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConventionFilterTypesBinder::DerivingFrom
// Il2CppName: DerivingFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(System::Type*)>(&ConventionFilterTypesBinder::DerivingFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "DerivingFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::WithAttribute
// Il2CppName: WithAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConventionFilterTypesBinder::WithAttribute
// Il2CppName: WithAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(System::Type*)>(&ConventionFilterTypesBinder::WithAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "WithAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::WithoutAttribute
// Il2CppName: WithoutAttribute
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConventionFilterTypesBinder::WithoutAttribute
// Il2CppName: WithoutAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(System::Type*)>(&ConventionFilterTypesBinder::WithoutAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "WithoutAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::WithAttributeWhere
// Il2CppName: WithAttributeWhere
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ConventionFilterTypesBinder::Where
// Il2CppName: Where
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(System::Func_2<System::Type*, bool>*)>(&ConventionFilterTypesBinder::Where)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "Where", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<System::Type*, bool>*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::InNamespace
// Il2CppName: InNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(::Il2CppString*)>(&ConventionFilterTypesBinder::InNamespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "InNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::InNamespaces
// Il2CppName: InNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(::Array<::Il2CppString*>*)>(&ConventionFilterTypesBinder::InNamespaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "InNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::InNamespaces
// Il2CppName: InNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&ConventionFilterTypesBinder::InNamespaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "InNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::WithSuffix
// Il2CppName: WithSuffix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(::Il2CppString*)>(&ConventionFilterTypesBinder::WithSuffix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "WithSuffix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::WithPrefix
// Il2CppName: WithPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(::Il2CppString*)>(&ConventionFilterTypesBinder::WithPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "WithPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::MatchingRegex
// Il2CppName: MatchingRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(::Il2CppString*)>(&ConventionFilterTypesBinder::MatchingRegex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "MatchingRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::MatchingRegex
// Il2CppName: MatchingRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(::Il2CppString*, System::Text::RegularExpressions::RegexOptions)>(&ConventionFilterTypesBinder::MatchingRegex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "MatchingRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::RegularExpressions::RegexOptions>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::MatchingRegex
// Il2CppName: MatchingRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionFilterTypesBinder::*)(System::Text::RegularExpressions::Regex*)>(&ConventionFilterTypesBinder::MatchingRegex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "MatchingRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::RegularExpressions::Regex*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::IsInNamespace
// Il2CppName: IsInNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, ::Il2CppString*)>(&ConventionFilterTypesBinder::IsInNamespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), "IsInNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionFilterTypesBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionFilterTypesBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass2_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass2_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass2_0.<DerivingFromOrEqual>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::$DerivingFromOrEqual$b__0(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass2_0::<DerivingFromOrEqual>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DerivingFromOrEqual>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, type);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass2_0::$DerivingFromOrEqual$b__0
// Il2CppName: <DerivingFromOrEqual>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass2_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass2_0::$DerivingFromOrEqual$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass2_0*), "<DerivingFromOrEqual>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass2_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass2_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass2_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass4_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass4_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass4_0.<DerivingFrom>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::$DerivingFrom$b__0(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass4_0::<DerivingFrom>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DerivingFrom>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, type);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass4_0::$DerivingFrom$b__0
// Il2CppName: <DerivingFrom>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass4_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass4_0::$DerivingFrom$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass4_0*), "<DerivingFrom>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass4_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass4_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass4_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass6_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass6_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass6_0.<WithAttribute>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::$WithAttribute$b__0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass6_0::<WithAttribute>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithAttribute>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass6_0::$WithAttribute$b__0
// Il2CppName: <WithAttribute>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass6_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass6_0::$WithAttribute$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass6_0*), "<WithAttribute>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass6_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass6_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass8_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass8_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass8_0.<WithoutAttribute>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::$WithoutAttribute$b__0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass8_0::<WithoutAttribute>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithoutAttribute>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass8_0::$WithoutAttribute$b__0
// Il2CppName: <WithoutAttribute>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass8_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass8_0::$WithoutAttribute$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass8_0*), "<WithoutAttribute>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass8_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass8_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass8_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass8_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass8_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass8_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass8_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass13_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_0.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass13_0.<InNamespaces>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::$InNamespaces$b__0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_0::<InNamespaces>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InNamespaces>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass13_0::$InNamespaces$b__0
// Il2CppName: <InNamespaces>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass13_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass13_0::$InNamespaces$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass13_0*), "<InNamespaces>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass13_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass13_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass13_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass13_1
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass13_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass13_1.<InNamespaces>b__1
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::$InNamespaces$b__1(::Il2CppString* n) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass13_1::<InNamespaces>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InNamespaces>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(n)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, n);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass13_1::$InNamespaces$b__1
// Il2CppName: <InNamespaces>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass13_1::*)(::Il2CppString*)>(&ConventionFilterTypesBinder::$$c__DisplayClass13_1::$InNamespaces$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass13_1*), "<InNamespaces>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass13_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass13_1::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass13_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass13_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass13_1::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass13_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass13_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass14_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass14_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass14_0.<WithSuffix>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::$WithSuffix$b__0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass14_0::<WithSuffix>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithSuffix>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass14_0::$WithSuffix$b__0
// Il2CppName: <WithSuffix>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass14_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass14_0::$WithSuffix$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass14_0*), "<WithSuffix>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass14_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass14_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass14_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass14_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass14_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass14_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass14_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass15_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass15_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass15_0.<WithPrefix>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::$WithPrefix$b__0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass15_0::<WithPrefix>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<WithPrefix>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass15_0::$WithPrefix$b__0
// Il2CppName: <WithPrefix>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass15_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass15_0::$WithPrefix$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass15_0*), "<WithPrefix>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass15_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass15_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass15_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass18_0
#include "Zenject/ConventionFilterTypesBinder_--c__DisplayClass18_0.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionFilterTypesBinder/<>c__DisplayClass18_0.<MatchingRegex>b__0
bool Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::$MatchingRegex$b__0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionFilterTypesBinder::$$c__DisplayClass18_0::<MatchingRegex>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<MatchingRegex>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass18_0::$MatchingRegex$b__0
// Il2CppName: <MatchingRegex>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionFilterTypesBinder::$$c__DisplayClass18_0::*)(System::Type*)>(&ConventionFilterTypesBinder::$$c__DisplayClass18_0::$MatchingRegex$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass18_0*), "<MatchingRegex>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionFilterTypesBinder::$$c__DisplayClass18_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass18_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionFilterTypesBinder::$$c__DisplayClass18_0::*)()>(&ConventionFilterTypesBinder::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionFilterTypesBinder::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionSelectTypesBinder
#include "Zenject/ConventionSelectTypesBinder.hpp"
// Including type: Zenject.ConventionSelectTypesBinder/<>c
#include "Zenject/ConventionSelectTypesBinder_--c.hpp"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
// Including type: Zenject.ConventionFilterTypesBinder
#include "Zenject/ConventionFilterTypesBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionSelectTypesBinder.CreateNextBinder
Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::CreateNextBinder() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::CreateNextBinder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNextBinder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllTypes
Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::AllTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllClasses
Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllClasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::AllClasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllClasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllNonAbstractClasses
Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllNonAbstractClasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::AllNonAbstractClasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllNonAbstractClasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllAbstractClasses
Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllAbstractClasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::AllAbstractClasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllAbstractClasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder.AllInterfaces
Zenject::ConventionFilterTypesBinder* Zenject::ConventionSelectTypesBinder::AllInterfaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::AllInterfaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllInterfaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionFilterTypesBinder*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConventionSelectTypesBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionSelectTypesBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionSelectTypesBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionSelectTypesBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionSelectTypesBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::CreateNextBinder
// Il2CppName: CreateNextBinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::CreateNextBinder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "CreateNextBinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::AllTypes
// Il2CppName: AllTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::AllClasses
// Il2CppName: AllClasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllClasses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllClasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::AllNonAbstractClasses
// Il2CppName: AllNonAbstractClasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllNonAbstractClasses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllNonAbstractClasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::AllAbstractClasses
// Il2CppName: AllAbstractClasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllAbstractClasses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllAbstractClasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::AllInterfaces
// Il2CppName: AllInterfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllInterfaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllInterfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ConventionSelectTypesBinder/<>c
#include "Zenject/ConventionSelectTypesBinder_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.ConventionSelectTypesBinder/<>c <>9
Zenject::ConventionSelectTypesBinder::$$c* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::ConventionSelectTypesBinder::$$c*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.ConventionSelectTypesBinder/<>c <>9
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9(Zenject::ConventionSelectTypesBinder::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__4_0
System::Func_2<System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__4_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__4_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__4_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__4_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__4_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__4_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__4_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__5_0
System::Func_2<System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__5_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__5_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__5_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__5_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__5_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__5_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__5_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__6_0
System::Func_2<System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__6_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__6_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__6_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__7_0
System::Func_2<System::Type*, bool>* Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__7_0
void Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__7_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ConventionSelectTypesBinder/<>c", "<>9__7_0", value)));
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/<>c..cctor
void Zenject::ConventionSelectTypesBinder::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ConventionSelectTypesBinder/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/<>c.<AllClasses>b__4_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllClasses$b__4_0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::<AllClasses>b__4_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllClasses>b__4_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/<>c.<AllNonAbstractClasses>b__5_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllNonAbstractClasses$b__5_0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::<AllNonAbstractClasses>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllNonAbstractClasses>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/<>c.<AllAbstractClasses>b__6_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllAbstractClasses$b__6_0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::<AllAbstractClasses>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllAbstractClasses>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Autogenerated method: Zenject.ConventionSelectTypesBinder/<>c.<AllInterfaces>b__7_0
bool Zenject::ConventionSelectTypesBinder::$$c::$AllInterfaces$b__7_0(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::$$c::<AllInterfaces>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AllInterfaces>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: ConventionSelectTypesBinder::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ConventionSelectTypesBinder::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::$$c::$AllClasses$b__4_0
// Il2CppName: <AllClasses>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionSelectTypesBinder::$$c::*)(System::Type*)>(&ConventionSelectTypesBinder::$$c::$AllClasses$b__4_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder::$$c*), "<AllClasses>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::$$c::$AllNonAbstractClasses$b__5_0
// Il2CppName: <AllNonAbstractClasses>b__5_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionSelectTypesBinder::$$c::*)(System::Type*)>(&ConventionSelectTypesBinder::$$c::$AllNonAbstractClasses$b__5_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder::$$c*), "<AllNonAbstractClasses>b__5_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::$$c::$AllAbstractClasses$b__6_0
// Il2CppName: <AllAbstractClasses>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionSelectTypesBinder::$$c::*)(System::Type*)>(&ConventionSelectTypesBinder::$$c::$AllAbstractClasses$b__6_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder::$$c*), "<AllAbstractClasses>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::$$c::$AllInterfaces$b__7_0
// Il2CppName: <AllInterfaces>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConventionSelectTypesBinder::$$c::*)(System::Type*)>(&ConventionSelectTypesBinder::$$c::$AllInterfaces$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder::$$c*), "<AllInterfaces>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ConventionSelectTypesBinder::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionSelectTypesBinder::$$c::*)()>(&ConventionSelectTypesBinder::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionSelectTypesBinder::$$c::*)()>(&ConventionSelectTypesBinder::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.CopyNonLazyBinder
#include "Zenject/CopyNonLazyBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.CopyNonLazyBinder.AddSecondaryCopyBindInfo
void Zenject::CopyNonLazyBinder::AddSecondaryCopyBindInfo(Zenject::BindInfo* bindInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CopyNonLazyBinder::AddSecondaryCopyBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddSecondaryCopyBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bindInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bindInfo);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.CopyIntoAllSubContainers
Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::CopyIntoAllSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CopyNonLazyBinder::CopyIntoAllSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyIntoAllSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.CopyIntoDirectSubContainers
Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::CopyIntoDirectSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CopyNonLazyBinder::CopyIntoDirectSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyIntoDirectSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.MoveIntoAllSubContainers
Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::MoveIntoAllSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CopyNonLazyBinder::MoveIntoAllSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveIntoAllSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.MoveIntoDirectSubContainers
Zenject::NonLazyBinder* Zenject::CopyNonLazyBinder::MoveIntoDirectSubContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CopyNonLazyBinder::MoveIntoDirectSubContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveIntoDirectSubContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.CopyNonLazyBinder.SetInheritanceMethod
void Zenject::CopyNonLazyBinder::SetInheritanceMethod(Zenject::BindingInheritanceMethods method) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CopyNonLazyBinder::SetInheritanceMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, method);
}
// Writing MetadataGetter for method: CopyNonLazyBinder::AddSecondaryCopyBindInfo
// Il2CppName: AddSecondaryCopyBindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CopyNonLazyBinder::*)(Zenject::BindInfo*)>(&CopyNonLazyBinder::AddSecondaryCopyBindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), "AddSecondaryCopyBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Writing MetadataGetter for method: CopyNonLazyBinder::CopyIntoAllSubContainers
// Il2CppName: CopyIntoAllSubContainers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NonLazyBinder* (CopyNonLazyBinder::*)()>(&CopyNonLazyBinder::CopyIntoAllSubContainers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), "CopyIntoAllSubContainers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CopyNonLazyBinder::CopyIntoDirectSubContainers
// Il2CppName: CopyIntoDirectSubContainers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NonLazyBinder* (CopyNonLazyBinder::*)()>(&CopyNonLazyBinder::CopyIntoDirectSubContainers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), "CopyIntoDirectSubContainers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CopyNonLazyBinder::MoveIntoAllSubContainers
// Il2CppName: MoveIntoAllSubContainers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NonLazyBinder* (CopyNonLazyBinder::*)()>(&CopyNonLazyBinder::MoveIntoAllSubContainers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), "MoveIntoAllSubContainers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CopyNonLazyBinder::MoveIntoDirectSubContainers
// Il2CppName: MoveIntoDirectSubContainers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NonLazyBinder* (CopyNonLazyBinder::*)()>(&CopyNonLazyBinder::MoveIntoDirectSubContainers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), "MoveIntoDirectSubContainers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CopyNonLazyBinder::SetInheritanceMethod
// Il2CppName: SetInheritanceMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CopyNonLazyBinder::*)(Zenject::BindingInheritanceMethods)>(&CopyNonLazyBinder::SetInheritanceMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), "SetInheritanceMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindingInheritanceMethods>()});
  }
};
// Writing MetadataGetter for method: CopyNonLazyBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CopyNonLazyBinder::*)(Zenject::BindInfo*)>(&CopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CopyNonLazyBinder::*)(Zenject::BindInfo*)>(&CopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.get_SubContainerCreatorBindInfo
Zenject::SubContainerCreatorBindInfo* Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::get_SubContainerCreatorBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::get_SubContainerCreatorBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SubContainerCreatorBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::SubContainerCreatorBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.set_SubContainerCreatorBindInfo
void Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::set_SubContainerCreatorBindInfo(Zenject::SubContainerCreatorBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::set_SubContainerCreatorBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SubContainerCreatorBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.WithDefaultGameObjectParent
Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithDefaultGameObjectParent(::Il2CppString* defaultParentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithDefaultGameObjectParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithDefaultGameObjectParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultParentName)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, defaultParentName);
}
// Writing MetadataGetter for method: DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::SubContainerCreatorBindInfo*, Zenject::BindInfo*)>(&DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::SubContainerCreatorBindInfo*, Zenject::BindInfo*)>(&DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Writing MetadataGetter for method: DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::get_SubContainerCreatorBindInfo
// Il2CppName: get_SubContainerCreatorBindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::SubContainerCreatorBindInfo* (DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)()>(&DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::get_SubContainerCreatorBindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), "get_SubContainerCreatorBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::set_SubContainerCreatorBindInfo
// Il2CppName: set_SubContainerCreatorBindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::SubContainerCreatorBindInfo*)>(&DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::set_SubContainerCreatorBindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), "set_SubContainerCreatorBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>()});
  }
};
// Writing MetadataGetter for method: DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithDefaultGameObjectParent
// Il2CppName: WithDefaultGameObjectParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* (DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)(::Il2CppString*)>(&DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithDefaultGameObjectParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), "WithDefaultGameObjectParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder0Extensions
#include "Zenject/FactoryFromBinder0Extensions.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/<>c__DisplayClass0_0`2
#include "Zenject/FactoryFromBinder0Extensions_--c__DisplayClass0_0_2.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/<>c__1`1
#include "Zenject/FactoryFromBinder0Extensions_--c__1_1.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/<>c__3`1
#include "Zenject/FactoryFromBinder0Extensions_--c__3_1.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/<>c__5`2
#include "Zenject/FactoryFromBinder0Extensions_--c__5_2.hpp"
// Including type: Zenject.FactoryFromBinder0Extensions/<>c__DisplayClass6_0`1
#include "Zenject/FactoryFromBinder0Extensions_--c__DisplayClass6_0_1.hpp"
// Including type: Zenject.IPoolable`1
#include "Zenject/IPoolable_1.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPool`2
#include "Zenject/MemoryPool_2.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`1
#include "Zenject/FactoryFromBinder_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`1
#include "Zenject/IFactory_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinder0Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder0Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder0Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder0Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder0Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder0Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder0Extensions::FromIFactory
// Il2CppName: FromIFactory
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder1Extensions
#include "Zenject/FactoryFromBinder1Extensions.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/<>c__DisplayClass0_0`2
#include "Zenject/FactoryFromBinder1Extensions_--c__DisplayClass0_0_2.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/<>c__1`2
#include "Zenject/FactoryFromBinder1Extensions_--c__1_2.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/<>c__3`2
#include "Zenject/FactoryFromBinder1Extensions_--c__3_2.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/<>c__5`3
#include "Zenject/FactoryFromBinder1Extensions_--c__5_3.hpp"
// Including type: Zenject.FactoryFromBinder1Extensions/<>c__DisplayClass6_0`3
#include "Zenject/FactoryFromBinder1Extensions_--c__DisplayClass6_0_3.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`2
#include "Zenject/FactoryFromBinder_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`2
#include "Zenject/IFactory_2.hpp"
// Including type: Zenject.IPoolable`2
#include "Zenject/IPoolable_2.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`3
#include "Zenject/MemoryPool_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinder1Extensions::FromIFactory
// Il2CppName: FromIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder1Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder1Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder1Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder1Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder1Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder1Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder2Extensions
#include "Zenject/FactoryFromBinder2Extensions.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/<>c__DisplayClass0_0`3
#include "Zenject/FactoryFromBinder2Extensions_--c__DisplayClass0_0_3.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/<>c__1`3
#include "Zenject/FactoryFromBinder2Extensions_--c__1_3.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/<>c__3`3
#include "Zenject/FactoryFromBinder2Extensions_--c__3_3.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/<>c__5`4
#include "Zenject/FactoryFromBinder2Extensions_--c__5_4.hpp"
// Including type: Zenject.FactoryFromBinder2Extensions/<>c__DisplayClass6_0`4
#include "Zenject/FactoryFromBinder2Extensions_--c__DisplayClass6_0_4.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`3
#include "Zenject/FactoryFromBinder_3.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`3
#include "Zenject/IFactory_3.hpp"
// Including type: Zenject.IPoolable`3
#include "Zenject/IPoolable_3.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`4
#include "Zenject/MemoryPool_4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinder2Extensions::FromIFactory
// Il2CppName: FromIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder2Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder2Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder2Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder2Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder2Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder2Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder3Extensions
#include "Zenject/FactoryFromBinder3Extensions.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/<>c__DisplayClass0_0`4
#include "Zenject/FactoryFromBinder3Extensions_--c__DisplayClass0_0_4.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/<>c__1`4
#include "Zenject/FactoryFromBinder3Extensions_--c__1_4.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/<>c__3`4
#include "Zenject/FactoryFromBinder3Extensions_--c__3_4.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/<>c__5`5
#include "Zenject/FactoryFromBinder3Extensions_--c__5_5.hpp"
// Including type: Zenject.FactoryFromBinder3Extensions/<>c__DisplayClass6_0`5
#include "Zenject/FactoryFromBinder3Extensions_--c__DisplayClass6_0_5.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`4
#include "Zenject/FactoryFromBinder_4.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`4
#include "Zenject/IFactory_4.hpp"
// Including type: Zenject.IPoolable`4
#include "Zenject/IPoolable_4.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`5
#include "Zenject/MemoryPool_5.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinder3Extensions::FromIFactory
// Il2CppName: FromIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder3Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder3Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder3Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder3Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder3Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder3Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder4Extensions
#include "Zenject/FactoryFromBinder4Extensions.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/<>c__DisplayClass0_0`5
#include "Zenject/FactoryFromBinder4Extensions_--c__DisplayClass0_0_5.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/<>c__1`5
#include "Zenject/FactoryFromBinder4Extensions_--c__1_5.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/<>c__3`5
#include "Zenject/FactoryFromBinder4Extensions_--c__3_5.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/<>c__5`6
#include "Zenject/FactoryFromBinder4Extensions_--c__5_6.hpp"
// Including type: Zenject.FactoryFromBinder4Extensions/<>c__DisplayClass6_0`6
#include "Zenject/FactoryFromBinder4Extensions_--c__DisplayClass6_0_6.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`5
#include "Zenject/FactoryFromBinder_5.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`5
#include "Zenject/IFactory_5.hpp"
// Including type: Zenject.IPoolable`5
#include "Zenject/IPoolable_5.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`6
#include "Zenject/MemoryPool_6.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinder4Extensions::FromIFactory
// Il2CppName: FromIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder4Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder4Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder4Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder4Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder4Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder4Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder5Extensions
#include "Zenject/FactoryFromBinder5Extensions.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/<>c__DisplayClass0_0`6
#include "Zenject/FactoryFromBinder5Extensions_--c__DisplayClass0_0_6.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/<>c__1`6
#include "Zenject/FactoryFromBinder5Extensions_--c__1_6.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/<>c__3`6
#include "Zenject/FactoryFromBinder5Extensions_--c__3_6.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/<>c__5`7
#include "Zenject/FactoryFromBinder5Extensions_--c__5_7.hpp"
// Including type: Zenject.FactoryFromBinder5Extensions/<>c__DisplayClass6_0`7
#include "Zenject/FactoryFromBinder5Extensions_--c__DisplayClass6_0_7.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`6
#include "Zenject/FactoryFromBinder_6.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`6
#include "Zenject/IFactory_6.hpp"
// Including type: Zenject.IPoolable`6
#include "Zenject/IPoolable_6.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`7
#include "Zenject/MemoryPool_7.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinder5Extensions::FromIFactory
// Il2CppName: FromIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder5Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder5Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder5Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder5Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder5Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder5Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinder6Extensions
#include "Zenject/FactoryFromBinder6Extensions.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/<>c__DisplayClass0_0`7
#include "Zenject/FactoryFromBinder6Extensions_--c__DisplayClass0_0_7.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/<>c__1`7
#include "Zenject/FactoryFromBinder6Extensions_--c__1_7.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/<>c__3`7
#include "Zenject/FactoryFromBinder6Extensions_--c__3_7.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/<>c__5`8
#include "Zenject/FactoryFromBinder6Extensions_--c__5_8.hpp"
// Including type: Zenject.FactoryFromBinder6Extensions/<>c__DisplayClass6_0`8
#include "Zenject/FactoryFromBinder6Extensions_--c__DisplayClass6_0_8.hpp"
// Including type: Zenject.ArgConditionCopyNonLazyBinder
#include "Zenject/ArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.FactoryFromBinder`7
#include "Zenject/FactoryFromBinder_7.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: Zenject.IFactory`7
#include "Zenject/IFactory_7.hpp"
// Including type: Zenject.IPoolable`7
#include "Zenject/IPoolable_7.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: Zenject.MemoryPoolInitialSizeMaxSizeBinder`1
#include "Zenject/MemoryPoolInitialSizeMaxSizeBinder_1.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: Zenject.MemoryPool`8
#include "Zenject/MemoryPool_8.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinder6Extensions::FromIFactory
// Il2CppName: FromIFactory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder6Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder6Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder6Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder6Extensions::FromMonoPoolableMemoryPool
// Il2CppName: FromMonoPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder6Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinder6Extensions::FromPoolableMemoryPool
// Il2CppName: FromPoolableMemoryPool
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.FactoryFromBinderUntyped
#include "Zenject/FactoryFromBinderUntyped.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.FactoryBindInfo
#include "Zenject/FactoryBindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FactoryFromBinderUntyped::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderUntyped::*)(Zenject::DiContainer*, System::Type*, Zenject::BindInfo*, Zenject::FactoryBindInfo*)>(&FactoryFromBinderUntyped::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderUntyped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderUntyped::*)(Zenject::DiContainer*, System::Type*, Zenject::BindInfo*, Zenject::FactoryBindInfo*)>(&FactoryFromBinderUntyped::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderUntyped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase
#include "Zenject/FactoryFromBinderBase.hpp"
// Including type: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17
#include "Zenject/FactoryFromBinderBase_-get_AllParentTypes-d__17.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass20_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass20_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass21_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass21_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass23_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass23_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass24_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass24_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass26_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass26_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass27_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass27_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass28_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass28_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass29_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass29_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass30_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass30_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass31_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass31_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass32_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass32_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass33_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass33_0.hpp"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass34_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass34_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.FactoryBindInfo
#include "Zenject/FactoryBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.ConcreteBinderGeneric`1
#include "Zenject/ConcreteBinderGeneric_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.FactoryFromBinderBase.get_BindContainer
Zenject::DiContainer* Zenject::FactoryFromBinderBase::get_BindContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::get_BindContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_BindContainer
void Zenject::FactoryFromBinderBase::set_BindContainer(Zenject::DiContainer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::set_BindContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BindContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_FactoryBindInfo
Zenject::FactoryBindInfo* Zenject::FactoryFromBinderBase::get_FactoryBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::get_FactoryBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FactoryBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::FactoryBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_FactoryBindInfo
void Zenject::FactoryFromBinderBase::set_FactoryBindInfo(Zenject::FactoryBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::set_FactoryBindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FactoryBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_ProviderFunc
System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* Zenject::FactoryFromBinderBase::get_ProviderFunc() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::get_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_ProviderFunc
void Zenject::FactoryFromBinderBase::set_ProviderFunc(System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::set_ProviderFunc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProviderFunc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_ContractType
System::Type* Zenject::FactoryFromBinderBase::get_ContractType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::get_ContractType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContractType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.set_ContractType
void Zenject::FactoryFromBinderBase::set_ContractType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::set_ContractType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ContractType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.get_AllParentTypes
System::Collections::Generic::IEnumerable_1<System::Type*>* Zenject::FactoryFromBinderBase::get_AllParentTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::get_AllParentTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllParentTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNew
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNew() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromNew");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNew", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromResolve
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromResolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromInstance
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromInstance(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromResolve
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromResolve(::Il2CppObject* subIdentifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subIdentifier)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, subIdentifier);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentOn
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentOn(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentOn
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentOn(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>* gameObjectGetter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObjectGetter)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObjectGetter);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentOnRoot
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentOnRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromComponentOnRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentOnRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOn
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOn(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromNewComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOn
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOn(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>* gameObjectGetter) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromNewComponentOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObjectGetter)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, gameObjectGetter);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOnNewPrefab
Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefab(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOnNewPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, prefab);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentInNewPrefab
Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentInNewPrefab(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromComponentInNewPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentInNewPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, prefab);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromComponentInNewPrefabResource
Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromComponentInNewPrefabResource(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromComponentInNewPrefabResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromComponentInNewPrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewComponentOnNewPrefabResource
Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefabResource(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromNewComponentOnNewPrefabResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewComponentOnNewPrefabResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromNewScriptableObjectResource
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromNewScriptableObjectResource(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromNewScriptableObjectResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromNewScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromScriptableObjectResource
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromScriptableObjectResource(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromScriptableObjectResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromScriptableObjectResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.FromResource
Zenject::ConditionCopyNonLazyBinder* Zenject::FactoryFromBinderBase::FromResource(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::FromResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConditionCopyNonLazyBinder*, false>(this, ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.<.ctor>b__0_0
Zenject::IProvider* Zenject::FactoryFromBinderBase::$_ctor$b__0_0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::<.ctor>b__0_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.FactoryFromBinderBase.<FromComponentOnRoot>b__25_0
UnityEngine::GameObject* Zenject::FactoryFromBinderBase::$FromComponentOnRoot$b__25_0(Zenject::InjectContext* ctx) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::<FromComponentOnRoot>b__25_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromComponentOnRoot>b__25_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ctx)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, ctx);
}
// Writing MetadataGetter for method: FactoryFromBinderBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::DiContainer*, System::Type*, Zenject::BindInfo*, Zenject::FactoryBindInfo*)>(&FactoryFromBinderBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::DiContainer*, System::Type*, Zenject::BindInfo*, Zenject::FactoryBindInfo*)>(&FactoryFromBinderBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::get_BindContainer
// Il2CppName: get_BindContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_BindContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_BindContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::set_BindContainer
// Il2CppName: set_BindContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::DiContainer*)>(&FactoryFromBinderBase::set_BindContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_BindContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::get_FactoryBindInfo
// Il2CppName: get_FactoryBindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FactoryBindInfo* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_FactoryBindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_FactoryBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::set_FactoryBindInfo
// Il2CppName: set_FactoryBindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::FactoryBindInfo*)>(&FactoryFromBinderBase::set_FactoryBindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_FactoryBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::get_ProviderFunc
// Il2CppName: get_ProviderFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_ProviderFunc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_ProviderFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::set_ProviderFunc
// Il2CppName: set_ProviderFunc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*)>(&FactoryFromBinderBase::set_ProviderFunc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_ProviderFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::get_ContractType
// Il2CppName: get_ContractType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_ContractType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_ContractType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::set_ContractType
// Il2CppName: set_ContractType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(System::Type*)>(&FactoryFromBinderBase::set_ContractType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_ContractType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::get_AllParentTypes
// Il2CppName: get_AllParentTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Type*>* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_AllParentTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_AllParentTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromNew
// Il2CppName: FromNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::FromNew)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromResolve
// Il2CppName: FromResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::FromResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromInstance
// Il2CppName: FromInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppObject*)>(&FactoryFromBinderBase::FromInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromResolve
// Il2CppName: FromResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppObject*)>(&FactoryFromBinderBase::FromResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::CreateIFactoryBinder
// Il2CppName: CreateIFactoryBinder
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentOn
// Il2CppName: FromComponentOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::GameObject*)>(&FactoryFromBinderBase::FromComponentOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentOn
// Il2CppName: FromComponentOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*)>(&FactoryFromBinderBase::FromComponentOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentOnRoot
// Il2CppName: FromComponentOnRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::FromComponentOnRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentOnRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOn
// Il2CppName: FromNewComponentOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::GameObject*)>(&FactoryFromBinderBase::FromNewComponentOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOn
// Il2CppName: FromNewComponentOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*)>(&FactoryFromBinderBase::FromNewComponentOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOnNewPrefab
// Il2CppName: FromNewComponentOnNewPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::Object*)>(&FactoryFromBinderBase::FromNewComponentOnNewPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOnNewPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentInNewPrefab
// Il2CppName: FromComponentInNewPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::Object*)>(&FactoryFromBinderBase::FromComponentInNewPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentInNewPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentInNewPrefabResource
// Il2CppName: FromComponentInNewPrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromComponentInNewPrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentInNewPrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOnNewPrefabResource
// Il2CppName: FromNewComponentOnNewPrefabResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromNewComponentOnNewPrefabResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOnNewPrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromNewScriptableObjectResource
// Il2CppName: FromNewScriptableObjectResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromNewScriptableObjectResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromScriptableObjectResource
// Il2CppName: FromScriptableObjectResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromScriptableObjectResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::FromResource
// Il2CppName: FromResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$_ctor$b__0_0
// Il2CppName: <.ctor>b__0_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (FactoryFromBinderBase::*)(Zenject::DiContainer*)>(&FactoryFromBinderBase::$_ctor$b__0_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "<.ctor>b__0_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$FromComponentOnRoot$b__25_0
// Il2CppName: <FromComponentOnRoot>b__25_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (FactoryFromBinderBase::*)(Zenject::InjectContext*)>(&FactoryFromBinderBase::$FromComponentOnRoot$b__25_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "<FromComponentOnRoot>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17
#include "Zenject/FactoryFromBinderBase_-get_AllParentTypes-d__17.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.System.IDisposable.Dispose
void Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.MoveNext
bool Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.<>m__Finally1
void Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.System.Collections.Generic.IEnumerator<System.Type>.get_Current
System::Type* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerator$System_Type$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.Generic.IEnumerator<System.Type>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.System.Collections.IEnumerator.Reset
void Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.System.Collections.IEnumerator.get_Current
::Il2CppObject* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
System::Collections::Generic::IEnumerator_1<System::Type*>* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.FactoryFromBinderBase/<get_AllParentTypes>d__17.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)(int)>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)(int)>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerator$System_Type$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Type>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerator$System_Type$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<System::Type*>* (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (FactoryFromBinderBase::$get_AllParentTypes$d__17::*)()>(&FactoryFromBinderBase::$get_AllParentTypes$d__17::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$get_AllParentTypes$d__17*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase/<>c__DisplayClass20_0
#include "Zenject/FactoryFromBinderBase_--c__DisplayClass20_0.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.FactoryFromBinderBase/<>c__DisplayClass20_0.<FromInstance>b__0
Zenject::IProvider* Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::$FromInstance$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0::<FromInstance>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromInstance>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: FactoryFromBinderBase::$$c__DisplayClass20_0::$FromInstance$b__0
// Il2CppName: <FromInstance>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (FactoryFromBinderBase::$$c__DisplayClass20_0::*)(Zenject::DiContainer*)>(&FactoryFromBinderBase::$$c__DisplayClass20_0::$FromInstance$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$$c__DisplayClass20_0*), "<FromInstance>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: FactoryFromBinderBase::$$c__DisplayClass20_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::$$c__DisplayClass20_0::*)()>(&FactoryFromBinderBase::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::$$c__DisplayClass20_0::*)()>(&FactoryFromBinderBase::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
