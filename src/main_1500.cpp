// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Vector3Serializable
#include "GlobalNamespace/Vector3Serializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Vector3Serializable.Serialize
void GlobalNamespace::Vector3Serializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: Vector3Serializable.Deserialize
void GlobalNamespace::Vector3Serializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: Vector3Serializable.Equals
bool GlobalNamespace::Vector3Serializable::Equals(GlobalNamespace::Vector3Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: Vector3Serializable.Approximately
bool GlobalNamespace::Vector3Serializable::Approximately(GlobalNamespace::Vector3Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: Vector3Serializable.GetSize
int GlobalNamespace::Vector3Serializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: Vector3Serializable.Equals
bool GlobalNamespace::Vector3Serializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: Vector3Serializable.GetHashCode
int GlobalNamespace::Vector3Serializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: Vector3Serializable.ToString
::Il2CppString* GlobalNamespace::Vector3Serializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: Vector3Serializable.op_Addition
GlobalNamespace::Vector3Serializable GlobalNamespace::operator+(const GlobalNamespace::Vector3Serializable& a, const GlobalNamespace::Vector3Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector3Serializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Vector3Serializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: Vector3Serializable.op_Subtraction
GlobalNamespace::Vector3Serializable GlobalNamespace::operator-(const GlobalNamespace::Vector3Serializable& a, const GlobalNamespace::Vector3Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3Serializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector3Serializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Vector3Serializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: Vector3Serializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Serializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&Vector3Serializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Serializable::*)(LiteNetLib::Utils::NetDataReader*)>(&Vector3Serializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector3Serializable::*)(GlobalNamespace::Vector3Serializable)>(&Vector3Serializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Vector3Serializable>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector3Serializable::*)(GlobalNamespace::Vector3Serializable)>(&Vector3Serializable::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Vector3Serializable>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector3Serializable::*)()>(&Vector3Serializable::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::Vector3Serializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Serializable::*)(UnityEngine::Vector3)>(&Vector3Serializable::Vector3Serializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Serializable::*)(UnityEngine::Vector3)>(&Vector3Serializable::Vector3Serializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::Vector3Serializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Serializable::*)(LiteNetLib::Utils::NetDataReader*)>(&Vector3Serializable::Vector3Serializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Serializable::*)(LiteNetLib::Utils::NetDataReader*)>(&Vector3Serializable::Vector3Serializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector3Serializable::*)(::Il2CppObject*)>(&Vector3Serializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector3Serializable::*)()>(&Vector3Serializable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector3Serializable::*)()>(&Vector3Serializable::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Vector3Serializable (*)(const GlobalNamespace::Vector3Serializable&, const GlobalNamespace::Vector3Serializable&)>(&Vector3Serializable::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector3Serializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector3Serializable&>()});
  }
};
// Writing MetadataGetter for method: Vector3Serializable::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Vector3Serializable (*)(const GlobalNamespace::Vector3Serializable&, const GlobalNamespace::Vector3Serializable&)>(&Vector3Serializable::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Serializable), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector3Serializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector3Serializable&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Vector4Serializable
#include "GlobalNamespace/Vector4Serializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Vector4Serializable.Serialize
void GlobalNamespace::Vector4Serializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: Vector4Serializable.Deserialize
void GlobalNamespace::Vector4Serializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: Vector4Serializable.Equals
bool GlobalNamespace::Vector4Serializable::Equals(GlobalNamespace::Vector4Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: Vector4Serializable.Approximately
bool GlobalNamespace::Vector4Serializable::Approximately(GlobalNamespace::Vector4Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: Vector4Serializable.GetSize
int GlobalNamespace::Vector4Serializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: Vector4Serializable.Equals
bool GlobalNamespace::Vector4Serializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: Vector4Serializable.GetHashCode
int GlobalNamespace::Vector4Serializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: Vector4Serializable.ToString
::Il2CppString* GlobalNamespace::Vector4Serializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: Vector4Serializable.op_Addition
GlobalNamespace::Vector4Serializable GlobalNamespace::operator+(const GlobalNamespace::Vector4Serializable& a, const GlobalNamespace::Vector4Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector4Serializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Vector4Serializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: Vector4Serializable.op_Subtraction
GlobalNamespace::Vector4Serializable GlobalNamespace::operator-(const GlobalNamespace::Vector4Serializable& a, const GlobalNamespace::Vector4Serializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector4Serializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector4Serializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Vector4Serializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: Vector4Serializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4Serializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&Vector4Serializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4Serializable::*)(LiteNetLib::Utils::NetDataReader*)>(&Vector4Serializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector4Serializable::*)(GlobalNamespace::Vector4Serializable)>(&Vector4Serializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Vector4Serializable>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector4Serializable::*)(GlobalNamespace::Vector4Serializable)>(&Vector4Serializable::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Vector4Serializable>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector4Serializable::*)()>(&Vector4Serializable::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::Vector4Serializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4Serializable::*)(UnityEngine::Vector4)>(&Vector4Serializable::Vector4Serializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4Serializable::*)(UnityEngine::Vector4)>(&Vector4Serializable::Vector4Serializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::Vector4Serializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4Serializable::*)(LiteNetLib::Utils::NetDataReader*)>(&Vector4Serializable::Vector4Serializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4Serializable::*)(LiteNetLib::Utils::NetDataReader*)>(&Vector4Serializable::Vector4Serializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector4Serializable::*)(::Il2CppObject*)>(&Vector4Serializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector4Serializable::*)()>(&Vector4Serializable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector4Serializable::*)()>(&Vector4Serializable::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Vector4Serializable (*)(const GlobalNamespace::Vector4Serializable&, const GlobalNamespace::Vector4Serializable&)>(&Vector4Serializable::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector4Serializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector4Serializable&>()});
  }
};
// Writing MetadataGetter for method: Vector4Serializable::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Vector4Serializable (*)(const GlobalNamespace::Vector4Serializable&, const GlobalNamespace::Vector4Serializable&)>(&Vector4Serializable::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4Serializable), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector4Serializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::Vector4Serializable&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuaternionSerializable
#include "GlobalNamespace/QuaternionSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSqrtTwo
float GlobalNamespace::QuaternionSerializable::_get_kSqrtTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_get_kSqrtTwo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kSqrtTwo"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSqrtTwo
void GlobalNamespace::QuaternionSerializable::_set_kSqrtTwo(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_set_kSqrtTwo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kSqrtTwo", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kOneOverSqrtTwo
float GlobalNamespace::QuaternionSerializable::_get_kOneOverSqrtTwo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_get_kOneOverSqrtTwo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kOneOverSqrtTwo"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kOneOverSqrtTwo
void GlobalNamespace::QuaternionSerializable::_set_kOneOverSqrtTwo(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_set_kOneOverSqrtTwo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kOneOverSqrtTwo", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kScale
float GlobalNamespace::QuaternionSerializable::_get_kScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_get_kScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kScale
void GlobalNamespace::QuaternionSerializable::_set_kScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_set_kScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kScale", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kInvScale
float GlobalNamespace::QuaternionSerializable::_get_kInvScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_get_kInvScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "QuaternionSerializable", "kInvScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kInvScale
void GlobalNamespace::QuaternionSerializable::_set_kInvScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::_set_kInvScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "QuaternionSerializable", "kInvScale", value));
}
// Autogenerated method: QuaternionSerializable.get_identity
GlobalNamespace::QuaternionSerializable GlobalNamespace::QuaternionSerializable::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::QuaternionSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: QuaternionSerializable.ToSmallest
void GlobalNamespace::QuaternionSerializable::ToSmallest(UnityEngine::Quaternion q, int& sa, int& sb, int& sc) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::ToSmallest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "ToSmallest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q, sa, sb, sc);
}
// Autogenerated method: QuaternionSerializable.FromSmallest
UnityEngine::Quaternion GlobalNamespace::QuaternionSerializable::FromSmallest(int sa, int sb, int sc) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::FromSmallest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "FromSmallest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sa), ::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(sc)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sa, sb, sc);
}
// Autogenerated method: QuaternionSerializable.Serialize
void GlobalNamespace::QuaternionSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: QuaternionSerializable.Deserialize
void GlobalNamespace::QuaternionSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: QuaternionSerializable.Equals
bool GlobalNamespace::QuaternionSerializable::Equals(GlobalNamespace::QuaternionSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: QuaternionSerializable.Approximately
bool GlobalNamespace::QuaternionSerializable::Approximately(GlobalNamespace::QuaternionSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: QuaternionSerializable.GetSize
int GlobalNamespace::QuaternionSerializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: QuaternionSerializable.Equals
bool GlobalNamespace::QuaternionSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: QuaternionSerializable.GetHashCode
int GlobalNamespace::QuaternionSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: QuaternionSerializable.ToString
::Il2CppString* GlobalNamespace::QuaternionSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: QuaternionSerializable.op_Addition
GlobalNamespace::QuaternionSerializable GlobalNamespace::operator+(const GlobalNamespace::QuaternionSerializable& a, const GlobalNamespace::QuaternionSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::QuaternionSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: QuaternionSerializable.op_Subtraction
GlobalNamespace::QuaternionSerializable GlobalNamespace::operator-(const GlobalNamespace::QuaternionSerializable& a, const GlobalNamespace::QuaternionSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuaternionSerializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuaternionSerializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::QuaternionSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: QuaternionSerializable::get_identity
// Il2CppName: get_identity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::QuaternionSerializable (*)()>(&QuaternionSerializable::get_identity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "get_identity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::ToSmallest
// Il2CppName: ToSmallest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion, int&, int&, int&)>(&QuaternionSerializable::ToSmallest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "ToSmallest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::FromSmallest
// Il2CppName: FromSmallest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(int, int, int)>(&QuaternionSerializable::FromSmallest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "FromSmallest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuaternionSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&QuaternionSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuaternionSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&QuaternionSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (QuaternionSerializable::*)(GlobalNamespace::QuaternionSerializable)>(&QuaternionSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::QuaternionSerializable>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (QuaternionSerializable::*)(GlobalNamespace::QuaternionSerializable)>(&QuaternionSerializable::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::QuaternionSerializable>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (QuaternionSerializable::*)()>(&QuaternionSerializable::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::QuaternionSerializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuaternionSerializable::*)(UnityEngine::Quaternion)>(&QuaternionSerializable::QuaternionSerializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuaternionSerializable::*)(UnityEngine::Quaternion)>(&QuaternionSerializable::QuaternionSerializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::QuaternionSerializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuaternionSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&QuaternionSerializable::QuaternionSerializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuaternionSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&QuaternionSerializable::QuaternionSerializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (QuaternionSerializable::*)(::Il2CppObject*)>(&QuaternionSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (QuaternionSerializable::*)()>(&QuaternionSerializable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (QuaternionSerializable::*)()>(&QuaternionSerializable::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::QuaternionSerializable (*)(const GlobalNamespace::QuaternionSerializable&, const GlobalNamespace::QuaternionSerializable&)>(&QuaternionSerializable::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::QuaternionSerializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::QuaternionSerializable&>()});
  }
};
// Writing MetadataGetter for method: QuaternionSerializable::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::QuaternionSerializable (*)(const GlobalNamespace::QuaternionSerializable&, const GlobalNamespace::QuaternionSerializable&)>(&QuaternionSerializable::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuaternionSerializable), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::QuaternionSerializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::QuaternionSerializable&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PoseSerializable
#include "GlobalNamespace/PoseSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PoseSerializable.get_identity
GlobalNamespace::PoseSerializable GlobalNamespace::PoseSerializable::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PoseSerializable", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PoseSerializable.Serialize
void GlobalNamespace::PoseSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: PoseSerializable.Deserialize
void GlobalNamespace::PoseSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: PoseSerializable.Equals
bool GlobalNamespace::PoseSerializable::Equals(GlobalNamespace::PoseSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: PoseSerializable.GetSize
int GlobalNamespace::PoseSerializable::GetSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: PoseSerializable.Equals
bool GlobalNamespace::PoseSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: PoseSerializable.GetHashCode
int GlobalNamespace::PoseSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: PoseSerializable.ToString
::Il2CppString* GlobalNamespace::PoseSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: PoseSerializable.op_Addition
GlobalNamespace::PoseSerializable GlobalNamespace::operator+(const GlobalNamespace::PoseSerializable& a, const GlobalNamespace::PoseSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PoseSerializable", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: PoseSerializable.op_Subtraction
GlobalNamespace::PoseSerializable GlobalNamespace::operator-(const GlobalNamespace::PoseSerializable& a, const GlobalNamespace::PoseSerializable& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PoseSerializable::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PoseSerializable", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: PoseSerializable::PoseSerializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoseSerializable::*)(GlobalNamespace::Vector3Serializable, GlobalNamespace::QuaternionSerializable)>(&PoseSerializable::PoseSerializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Vector3Serializable>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::QuaternionSerializable>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoseSerializable::*)(GlobalNamespace::Vector3Serializable, GlobalNamespace::QuaternionSerializable)>(&PoseSerializable::PoseSerializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Vector3Serializable>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::QuaternionSerializable>()});
  }
};
// Writing MetadataGetter for method: PoseSerializable::get_identity
// Il2CppName: get_identity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (*)()>(&PoseSerializable::get_identity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "get_identity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PoseSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoseSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&PoseSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: PoseSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoseSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&PoseSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: PoseSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PoseSerializable::*)(GlobalNamespace::PoseSerializable)>(&PoseSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>()});
  }
};
// Writing MetadataGetter for method: PoseSerializable::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PoseSerializable::*)()>(&PoseSerializable::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PoseSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PoseSerializable::*)(::Il2CppObject*)>(&PoseSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PoseSerializable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PoseSerializable::*)()>(&PoseSerializable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PoseSerializable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PoseSerializable::*)()>(&PoseSerializable::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PoseSerializable::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (*)(const GlobalNamespace::PoseSerializable&, const GlobalNamespace::PoseSerializable&)>(&PoseSerializable::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::PoseSerializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::PoseSerializable&>()});
  }
};
// Writing MetadataGetter for method: PoseSerializable::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (*)(const GlobalNamespace::PoseSerializable&, const GlobalNamespace::PoseSerializable&)>(&PoseSerializable::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoseSerializable), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::PoseSerializable&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::PoseSerializable&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorSerializable
#include "GlobalNamespace/ColorSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSerializable.Serialize
void GlobalNamespace::ColorSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: ColorSerializable.Deserialize
void GlobalNamespace::ColorSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: ColorSerializable.Equals
bool GlobalNamespace::ColorSerializable::Equals(GlobalNamespace::ColorSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: ColorSerializable.Equals
bool GlobalNamespace::ColorSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: ColorSerializable.GetHashCode
int GlobalNamespace::ColorSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: ColorSerializable.ToString
::Il2CppString* GlobalNamespace::ColorSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: ColorSerializable::ColorSerializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSerializable::*)(UnityEngine::Color)>(&ColorSerializable::ColorSerializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSerializable::*)(UnityEngine::Color)>(&ColorSerializable::ColorSerializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&ColorSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ColorSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&ColorSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ColorSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ColorSerializable::*)(GlobalNamespace::ColorSerializable)>(&ColorSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorSerializable>()});
  }
};
// Writing MetadataGetter for method: ColorSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ColorSerializable::*)(::Il2CppObject*)>(&ColorSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ColorSerializable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ColorSerializable::*)()>(&ColorSerializable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorSerializable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ColorSerializable::*)()>(&ColorSerializable::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSerializable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Color32Serializable
#include "GlobalNamespace/Color32Serializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Color32Serializable.Serialize
void GlobalNamespace::Color32Serializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Color32Serializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: Color32Serializable.Deserialize
void GlobalNamespace::Color32Serializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Color32Serializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: Color32Serializable.Equals
bool GlobalNamespace::Color32Serializable::Equals(GlobalNamespace::Color32Serializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Color32Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: Color32Serializable.Equals
bool GlobalNamespace::Color32Serializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Color32Serializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: Color32Serializable.GetHashCode
int GlobalNamespace::Color32Serializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Color32Serializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: Color32Serializable.ToString
::Il2CppString* GlobalNamespace::Color32Serializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Color32Serializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: Color32Serializable::Color32Serializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color32Serializable::*)(UnityEngine::Color32)>(&Color32Serializable::Color32Serializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color32Serializable::*)(UnityEngine::Color32)>(&Color32Serializable::Color32Serializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: Color32Serializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color32Serializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&Color32Serializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: Color32Serializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color32Serializable::*)(LiteNetLib::Utils::NetDataReader*)>(&Color32Serializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: Color32Serializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Color32Serializable::*)(GlobalNamespace::Color32Serializable)>(&Color32Serializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Color32Serializable>()});
  }
};
// Writing MetadataGetter for method: Color32Serializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Color32Serializable::*)(::Il2CppObject*)>(&Color32Serializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Color32Serializable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Color32Serializable::*)()>(&Color32Serializable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color32Serializable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Color32Serializable::*)()>(&Color32Serializable::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32Serializable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorNoAlphaSerializable
#include "GlobalNamespace/ColorNoAlphaSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorNoAlphaSerializable.Serialize
void GlobalNamespace::ColorNoAlphaSerializable::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoAlphaSerializable::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: ColorNoAlphaSerializable.Deserialize
void GlobalNamespace::ColorNoAlphaSerializable::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoAlphaSerializable::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, reader);
}
// Autogenerated method: ColorNoAlphaSerializable.Equals
bool GlobalNamespace::ColorNoAlphaSerializable::Equals(GlobalNamespace::ColorNoAlphaSerializable other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoAlphaSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: ColorNoAlphaSerializable.Equals
bool GlobalNamespace::ColorNoAlphaSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoAlphaSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: ColorNoAlphaSerializable.GetHashCode
int GlobalNamespace::ColorNoAlphaSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoAlphaSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: ColorNoAlphaSerializable.ToString
::Il2CppString* GlobalNamespace::ColorNoAlphaSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoAlphaSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: ColorNoAlphaSerializable::ColorNoAlphaSerializable
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoAlphaSerializable::*)(UnityEngine::Color)>(&ColorNoAlphaSerializable::ColorNoAlphaSerializable<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoAlphaSerializable::*)(UnityEngine::Color)>(&ColorNoAlphaSerializable::ColorNoAlphaSerializable<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ColorNoAlphaSerializable::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoAlphaSerializable::*)(LiteNetLib::Utils::NetDataWriter*)>(&ColorNoAlphaSerializable::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: ColorNoAlphaSerializable::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoAlphaSerializable::*)(LiteNetLib::Utils::NetDataReader*)>(&ColorNoAlphaSerializable::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: ColorNoAlphaSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ColorNoAlphaSerializable::*)(GlobalNamespace::ColorNoAlphaSerializable)>(&ColorNoAlphaSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorNoAlphaSerializable>()});
  }
};
// Writing MetadataGetter for method: ColorNoAlphaSerializable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ColorNoAlphaSerializable::*)(::Il2CppObject*)>(&ColorNoAlphaSerializable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ColorNoAlphaSerializable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ColorNoAlphaSerializable::*)()>(&ColorNoAlphaSerializable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorNoAlphaSerializable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ColorNoAlphaSerializable::*)()>(&ColorNoAlphaSerializable::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoAlphaSerializable), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kToStringPrefix
::Il2CppString* GlobalNamespace::SongPackMask::_get_kToStringPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::_get_kToStringPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SongPackMask", "kToStringPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringPrefix
void GlobalNamespace::SongPackMask::_set_kToStringPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::_set_kToStringPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kToStringPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringSuffix
::Il2CppString* GlobalNamespace::SongPackMask::_get_kToStringSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::_get_kToStringSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SongPackMask", "kToStringSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringSuffix
void GlobalNamespace::SongPackMask::_set_kToStringSuffix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::_set_kToStringSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMask", "kToStringSuffix", value));
}
// Autogenerated method: SongPackMask.get_all
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::get_all() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::get_all");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "get_all", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SongPackMask.Contains
bool GlobalNamespace::SongPackMask::Contains(GlobalNamespace::SongPackMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: SongPackMask.DifferenceFrom
int GlobalNamespace::SongPackMask::DifferenceFrom(GlobalNamespace::SongPackMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::DifferenceFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DifferenceFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method, other);
}
// Autogenerated method: SongPackMask.Serialize
void GlobalNamespace::SongPackMask::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: SongPackMask.CreateFromSerializedData
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(*this, ___internal__method, reader);
}
// Autogenerated method: SongPackMask.Deserialize
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: SongPackMask.ToShortString
::Il2CppString* GlobalNamespace::SongPackMask::ToShortString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::ToShortString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToShortString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: SongPackMask.ToBytes
::Array<uint8_t>* GlobalNamespace::SongPackMask::ToBytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::ToBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(*this, ___internal__method);
}
// Autogenerated method: SongPackMask.Equals
bool GlobalNamespace::SongPackMask::Equals(GlobalNamespace::SongPackMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: SongPackMask.TryParse
bool GlobalNamespace::SongPackMask::TryParse(::Il2CppString* stringSerializedMask, GlobalNamespace::SongPackMask& songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringSerializedMask), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stringSerializedMask, songPackMask);
}
// Autogenerated method: SongPackMask.Parse
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::Parse(::Il2CppString* stringSerializedMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::Parse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "Parse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringSerializedMask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stringSerializedMask);
}
// Autogenerated method: SongPackMask.FromBytes
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMask::FromBytes(::Array<uint8_t>* bytes, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytes), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bytes, offset);
}
// Autogenerated method: SongPackMask.ToString
::Il2CppString* GlobalNamespace::SongPackMask::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: SongPackMask.GetHashCode
int GlobalNamespace::SongPackMask::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: SongPackMask.Equals
bool GlobalNamespace::SongPackMask::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: SongPackMask.op_BitwiseOr
GlobalNamespace::SongPackMask GlobalNamespace::operator|(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::op_BitwiseOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_BitwiseOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SongPackMask.op_BitwiseAnd
GlobalNamespace::SongPackMask GlobalNamespace::operator&(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::op_BitwiseAnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_BitwiseAnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SongPackMask.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: SongPackMask.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMask::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMask", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: SongPackMask::SongPackMask
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMask::*)(::Il2CppString*)>(&SongPackMask::SongPackMask<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMask::*)(::Il2CppString*)>(&SongPackMask::SongPackMask<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::SongPackMask
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMask::*)(GlobalNamespace::BitMask128)>(&SongPackMask::SongPackMask<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BitMask128>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMask::*)(GlobalNamespace::BitMask128)>(&SongPackMask::SongPackMask<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BitMask128>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::SongPackMask
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMask::*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&SongPackMask::SongPackMask<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMask::*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&SongPackMask::SongPackMask<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::get_all
// Il2CppName: get_all
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (*)()>(&SongPackMask::get_all)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "get_all", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMask::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongPackMask::*)(GlobalNamespace::SongPackMask)>(&SongPackMask::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::DifferenceFrom
// Il2CppName: DifferenceFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SongPackMask::*)(GlobalNamespace::SongPackMask)>(&SongPackMask::DifferenceFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "DifferenceFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMask::*)(LiteNetLib::Utils::NetDataWriter*)>(&SongPackMask::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (SongPackMask::*)(LiteNetLib::Utils::NetDataReader*)>(&SongPackMask::CreateFromSerializedData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (*)(LiteNetLib::Utils::NetDataReader*)>(&SongPackMask::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::ToShortString
// Il2CppName: ToShortString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMask::*)()>(&SongPackMask::ToShortString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "ToShortString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMask::ToBytes
// Il2CppName: ToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (SongPackMask::*)()>(&SongPackMask::ToBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "ToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMask::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongPackMask::*)(GlobalNamespace::SongPackMask)>(&SongPackMask::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, GlobalNamespace::SongPackMask&)>(&SongPackMask::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask&>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (*)(::Il2CppString*)>(&SongPackMask::Parse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::FromBytes
// Il2CppName: FromBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (*)(::Array<uint8_t>*, int)>(&SongPackMask::FromBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "FromBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMask::*)()>(&SongPackMask::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMask::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SongPackMask::*)()>(&SongPackMask::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMask::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongPackMask::*)(::Il2CppObject*)>(&SongPackMask::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::operator|
// Il2CppName: op_BitwiseOr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (*)(const GlobalNamespace::SongPackMask&, const GlobalNamespace::SongPackMask&)>(&SongPackMask::operator|)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "op_BitwiseOr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::operator&
// Il2CppName: op_BitwiseAnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (*)(const GlobalNamespace::SongPackMask&, const GlobalNamespace::SongPackMask&)>(&SongPackMask::operator&)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "op_BitwiseAnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::SongPackMask&, const GlobalNamespace::SongPackMask&)>(&SongPackMask::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>()});
  }
};
// Writing MetadataGetter for method: SongPackMask::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::SongPackMask&, const GlobalNamespace::SongPackMask&)>(&SongPackMask::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMask), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SongPackMask&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VarIntExtensions
#include "GlobalNamespace/VarIntExtensions.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VarIntExtensions.PutVarInt
void GlobalNamespace::VarIntExtensions::PutVarInt(LiteNetLib::Utils::NetDataWriter* writer, int val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::PutVarInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarInt
int GlobalNamespace::VarIntExtensions::GetVarInt(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetVarInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.PutVarUInt
void GlobalNamespace::VarIntExtensions::PutVarUInt(LiteNetLib::Utils::NetDataWriter* writer, uint val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::PutVarUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarUInt
uint GlobalNamespace::VarIntExtensions::GetVarUInt(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetVarUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.PutVarLong
void GlobalNamespace::VarIntExtensions::PutVarLong(LiteNetLib::Utils::NetDataWriter* writer, int64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::PutVarLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarLong
int64_t GlobalNamespace::VarIntExtensions::GetVarLong(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetVarLong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarLong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.PutVarULong
void GlobalNamespace::VarIntExtensions::PutVarULong(LiteNetLib::Utils::NetDataWriter* writer, uint64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::PutVarULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "PutVarULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, writer, val);
}
// Autogenerated method: VarIntExtensions.GetVarULong
uint64_t GlobalNamespace::VarIntExtensions::GetVarULong(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetVarULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetVarULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: VarIntExtensions.TryGetVarUInt
bool GlobalNamespace::VarIntExtensions::TryGetVarUInt(LiteNetLib::Utils::NetDataReader* reader, uint& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::TryGetVarUInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "TryGetVarUInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractIndependentType<uint&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader, value);
}
// Autogenerated method: VarIntExtensions.TryGetVarULong
bool GlobalNamespace::VarIntExtensions::TryGetVarULong(LiteNetLib::Utils::NetDataReader* reader, uint64_t& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::TryGetVarULong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "TryGetVarULong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader, value);
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(int val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(uint val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(int64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: VarIntExtensions.GetSize
int GlobalNamespace::VarIntExtensions::GetSize(uint64_t val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VarIntExtensions::GetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VarIntExtensions", "GetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Writing MetadataGetter for method: VarIntExtensions::PutVarInt
// Il2CppName: PutVarInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(LiteNetLib::Utils::NetDataWriter*, int)>(&VarIntExtensions::PutVarInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "PutVarInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetVarInt
// Il2CppName: GetVarInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(LiteNetLib::Utils::NetDataReader*)>(&VarIntExtensions::GetVarInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetVarInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::PutVarUInt
// Il2CppName: PutVarUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(LiteNetLib::Utils::NetDataWriter*, uint)>(&VarIntExtensions::PutVarUInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "PutVarUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetVarUInt
// Il2CppName: GetVarUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(LiteNetLib::Utils::NetDataReader*)>(&VarIntExtensions::GetVarUInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetVarUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::PutVarLong
// Il2CppName: PutVarLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(LiteNetLib::Utils::NetDataWriter*, int64_t)>(&VarIntExtensions::PutVarLong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "PutVarLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetVarLong
// Il2CppName: GetVarLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(LiteNetLib::Utils::NetDataReader*)>(&VarIntExtensions::GetVarLong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetVarLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::PutVarULong
// Il2CppName: PutVarULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(LiteNetLib::Utils::NetDataWriter*, uint64_t)>(&VarIntExtensions::PutVarULong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "PutVarULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetVarULong
// Il2CppName: GetVarULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(LiteNetLib::Utils::NetDataReader*)>(&VarIntExtensions::GetVarULong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetVarULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::TryGetVarUInt
// Il2CppName: TryGetVarUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(LiteNetLib::Utils::NetDataReader*, uint&)>(&VarIntExtensions::TryGetVarUInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "TryGetVarUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::TryGetVarULong
// Il2CppName: TryGetVarULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(LiteNetLib::Utils::NetDataReader*, uint64_t&)>(&VarIntExtensions::TryGetVarULong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "TryGetVarULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&VarIntExtensions::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint)>(&VarIntExtensions::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int64_t)>(&VarIntExtensions::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: VarIntExtensions::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&VarIntExtensions::GetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VarIntExtensions*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioHelpers
#include "GlobalNamespace/AudioHelpers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioHelpers.NormalizedVolumeToDB
float GlobalNamespace::AudioHelpers::NormalizedVolumeToDB(float normalizedVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioHelpers::NormalizedVolumeToDB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AudioHelpers", "NormalizedVolumeToDB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalizedVolume)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, normalizedVolume);
}
// Writing MetadataGetter for method: AudioHelpers::NormalizedVolumeToDB
// Il2CppName: NormalizedVolumeToDB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&AudioHelpers::NormalizedVolumeToDB)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioHelpers*), "NormalizedVolumeToDB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CaptureAudioToWav
#include "GlobalNamespace/CaptureAudioToWav.hpp"
// Including type: System.IO.FileStream
#include "System/IO/FileStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CaptureAudioToWav.Awake
void GlobalNamespace::CaptureAudioToWav::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CaptureAudioToWav::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CaptureAudioToWav.Update
void GlobalNamespace::CaptureAudioToWav::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CaptureAudioToWav::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CaptureAudioToWav.StartWriting
void GlobalNamespace::CaptureAudioToWav::StartWriting(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CaptureAudioToWav::StartWriting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartWriting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: CaptureAudioToWav.OnAudioFilterRead
void GlobalNamespace::CaptureAudioToWav::OnAudioFilterRead(::Array<float>* data, int channels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CaptureAudioToWav::OnAudioFilterRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAudioFilterRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channels)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, channels);
}
// Autogenerated method: CaptureAudioToWav.ConvertAndWrite
void GlobalNamespace::CaptureAudioToWav::ConvertAndWrite(::Array<float>* dataSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CaptureAudioToWav::ConvertAndWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertAndWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataSource);
}
// Autogenerated method: CaptureAudioToWav.WriteHeader
void GlobalNamespace::CaptureAudioToWav::WriteHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CaptureAudioToWav::WriteHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CaptureAudioToWav::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)()>(&CaptureAudioToWav::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CaptureAudioToWav::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)()>(&CaptureAudioToWav::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CaptureAudioToWav::StartWriting
// Il2CppName: StartWriting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)(::Il2CppString*)>(&CaptureAudioToWav::StartWriting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), "StartWriting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CaptureAudioToWav::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)(::Array<float>*, int)>(&CaptureAudioToWav::OnAudioFilterRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CaptureAudioToWav::ConvertAndWrite
// Il2CppName: ConvertAndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)(::Array<float>*)>(&CaptureAudioToWav::ConvertAndWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), "ConvertAndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>()});
  }
};
// Writing MetadataGetter for method: CaptureAudioToWav::WriteHeader
// Il2CppName: WriteHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)()>(&CaptureAudioToWav::WriteHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), "WriteHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CaptureAudioToWav::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)()>(&CaptureAudioToWav::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaptureAudioToWav::*)()>(&CaptureAudioToWav::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaptureAudioToWav*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RandomizedPitch
#include "GlobalNamespace/RandomizedPitch.hpp"
// Including type: RandomizedPitch/<PlayDelayedCoroutine>d__9
#include "GlobalNamespace/RandomizedPitch_-PlayDelayedCoroutine-d__9.hpp"
// Including type: RandomizedPitch/<RestorePitchWithDelay>d__10
#include "GlobalNamespace/RandomizedPitch_-RestorePitchWithDelay-d__10.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RandomizedPitch.OnEnable
void GlobalNamespace::RandomizedPitch::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch.Play
void GlobalNamespace::RandomizedPitch::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch.PlayDelayed
void GlobalNamespace::RandomizedPitch::PlayDelayed(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::PlayDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, delay);
}
// Autogenerated method: RandomizedPitch.PlayDelayedCoroutine
System::Collections::IEnumerator* GlobalNamespace::RandomizedPitch::PlayDelayedCoroutine(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::PlayDelayedCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayDelayedCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: RandomizedPitch.RestorePitchWithDelay
System::Collections::IEnumerator* GlobalNamespace::RandomizedPitch::RestorePitchWithDelay(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::RestorePitchWithDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestorePitchWithDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Writing MetadataGetter for method: RandomizedPitch::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::*)()>(&RandomizedPitch::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::*)()>(&RandomizedPitch::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::PlayDelayed
// Il2CppName: PlayDelayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::*)(float)>(&RandomizedPitch::PlayDelayed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch*), "PlayDelayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::PlayDelayedCoroutine
// Il2CppName: PlayDelayedCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (RandomizedPitch::*)(float)>(&RandomizedPitch::PlayDelayedCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch*), "PlayDelayedCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::RestorePitchWithDelay
// Il2CppName: RestorePitchWithDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (RandomizedPitch::*)(float)>(&RandomizedPitch::RestorePitchWithDelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch*), "RestorePitchWithDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::*)()>(&RandomizedPitch::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::*)()>(&RandomizedPitch::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RandomizedPitch/<PlayDelayedCoroutine>d__9
#include "GlobalNamespace/RandomizedPitch_-PlayDelayedCoroutine-d__9.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.IDisposable.Dispose
void GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.MoveNext
bool GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<PlayDelayedCoroutine>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$PlayDelayedCoroutine$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RandomizedPitch::$PlayDelayedCoroutine$d__9::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$PlayDelayedCoroutine$d__9::*)(int)>(&RandomizedPitch::$PlayDelayedCoroutine$d__9::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$PlayDelayedCoroutine$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$PlayDelayedCoroutine$d__9::*)(int)>(&RandomizedPitch::$PlayDelayedCoroutine$d__9::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$PlayDelayedCoroutine$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$PlayDelayedCoroutine$d__9::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$PlayDelayedCoroutine$d__9::*)()>(&RandomizedPitch::$PlayDelayedCoroutine$d__9::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$PlayDelayedCoroutine$d__9*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$PlayDelayedCoroutine$d__9::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RandomizedPitch::$PlayDelayedCoroutine$d__9::*)()>(&RandomizedPitch::$PlayDelayedCoroutine$d__9::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$PlayDelayedCoroutine$d__9*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RandomizedPitch::$PlayDelayedCoroutine$d__9::*)()>(&RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$PlayDelayedCoroutine$d__9*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$PlayDelayedCoroutine$d__9::*)()>(&RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$PlayDelayedCoroutine$d__9*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RandomizedPitch::$PlayDelayedCoroutine$d__9::*)()>(&RandomizedPitch::$PlayDelayedCoroutine$d__9::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$PlayDelayedCoroutine$d__9*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RandomizedPitch/<RestorePitchWithDelay>d__10
#include "GlobalNamespace/RandomizedPitch_-RestorePitchWithDelay-d__10.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.IDisposable.Dispose
void GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.MoveNext
bool GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.Collections.IEnumerator.Reset
void GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RandomizedPitch/<RestorePitchWithDelay>d__10.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomizedPitch::$RestorePitchWithDelay$d__10::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RandomizedPitch::$RestorePitchWithDelay$d__10::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$RestorePitchWithDelay$d__10::*)(int)>(&RandomizedPitch::$RestorePitchWithDelay$d__10::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$RestorePitchWithDelay$d__10*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$RestorePitchWithDelay$d__10::*)(int)>(&RandomizedPitch::$RestorePitchWithDelay$d__10::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$RestorePitchWithDelay$d__10*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$RestorePitchWithDelay$d__10::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$RestorePitchWithDelay$d__10::*)()>(&RandomizedPitch::$RestorePitchWithDelay$d__10::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$RestorePitchWithDelay$d__10*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$RestorePitchWithDelay$d__10::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RandomizedPitch::$RestorePitchWithDelay$d__10::*)()>(&RandomizedPitch::$RestorePitchWithDelay$d__10::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$RestorePitchWithDelay$d__10*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RandomizedPitch::$RestorePitchWithDelay$d__10::*)()>(&RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$RestorePitchWithDelay$d__10*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomizedPitch::$RestorePitchWithDelay$d__10::*)()>(&RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$RestorePitchWithDelay$d__10*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RandomizedPitch::$RestorePitchWithDelay$d__10::*)()>(&RandomizedPitch::$RestorePitchWithDelay$d__10::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomizedPitch::$RestorePitchWithDelay$d__10*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ActivateOnPlatform
#include "GlobalNamespace/ActivateOnPlatform.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ActivateOnPlatform.Awake
void GlobalNamespace::ActivateOnPlatform::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ActivateOnPlatform::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ActivateOnPlatform::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnPlatform::*)()>(&ActivateOnPlatform::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnPlatform*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivateOnPlatform::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnPlatform::*)()>(&ActivateOnPlatform::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnPlatform*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnPlatform::*)()>(&ActivateOnPlatform::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnPlatform*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CommandLineArguments
#include "GlobalNamespace/CommandLineArguments.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CommandLineArguments.Contains
bool GlobalNamespace::CommandLineArguments::Contains(::Il2CppString* argument) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CommandLineArguments::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CommandLineArguments", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argument)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, argument);
}
// Writing MetadataGetter for method: CommandLineArguments::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&CommandLineArguments::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandLineArguments*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DeactivateAnimatorOnInputFocusCapture
#include "GlobalNamespace/DeactivateAnimatorOnInputFocusCapture.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.Start
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.OnDestroy
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.HandleInputFocusCaptured
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateAnimatorOnInputFocusCapture.HandleInputFocusReleased
void GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateAnimatorOnInputFocusCapture::HandleInputFocusReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DeactivateAnimatorOnInputFocusCapture::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAnimatorOnInputFocusCapture::*)()>(&DeactivateAnimatorOnInputFocusCapture::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAnimatorOnInputFocusCapture*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAnimatorOnInputFocusCapture::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAnimatorOnInputFocusCapture::*)()>(&DeactivateAnimatorOnInputFocusCapture::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAnimatorOnInputFocusCapture*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAnimatorOnInputFocusCapture::HandleInputFocusCaptured
// Il2CppName: HandleInputFocusCaptured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAnimatorOnInputFocusCapture::*)()>(&DeactivateAnimatorOnInputFocusCapture::HandleInputFocusCaptured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAnimatorOnInputFocusCapture*), "HandleInputFocusCaptured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAnimatorOnInputFocusCapture::HandleInputFocusReleased
// Il2CppName: HandleInputFocusReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAnimatorOnInputFocusCapture::*)()>(&DeactivateAnimatorOnInputFocusCapture::HandleInputFocusReleased)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAnimatorOnInputFocusCapture*), "HandleInputFocusReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateAnimatorOnInputFocusCapture::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAnimatorOnInputFocusCapture::*)()>(&DeactivateAnimatorOnInputFocusCapture::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAnimatorOnInputFocusCapture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateAnimatorOnInputFocusCapture::*)()>(&DeactivateAnimatorOnInputFocusCapture::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateAnimatorOnInputFocusCapture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DeactivateOnInputFocusCapture
#include "GlobalNamespace/DeactivateOnInputFocusCapture.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DeactivateOnInputFocusCapture.OnEnable
void GlobalNamespace::DeactivateOnInputFocusCapture::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateOnInputFocusCapture::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateOnInputFocusCapture.OnDestroy
void GlobalNamespace::DeactivateOnInputFocusCapture::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateOnInputFocusCapture::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateOnInputFocusCapture.HandleInputFocusCaptured
void GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DeactivateOnInputFocusCapture.HandleInputFocusReleased
void GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DeactivateOnInputFocusCapture::HandleInputFocusReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DeactivateOnInputFocusCapture::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateOnInputFocusCapture::*)()>(&DeactivateOnInputFocusCapture::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateOnInputFocusCapture*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateOnInputFocusCapture::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateOnInputFocusCapture::*)()>(&DeactivateOnInputFocusCapture::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateOnInputFocusCapture*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateOnInputFocusCapture::HandleInputFocusCaptured
// Il2CppName: HandleInputFocusCaptured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateOnInputFocusCapture::*)()>(&DeactivateOnInputFocusCapture::HandleInputFocusCaptured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateOnInputFocusCapture*), "HandleInputFocusCaptured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateOnInputFocusCapture::HandleInputFocusReleased
// Il2CppName: HandleInputFocusReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateOnInputFocusCapture::*)()>(&DeactivateOnInputFocusCapture::HandleInputFocusReleased)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateOnInputFocusCapture*), "HandleInputFocusReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DeactivateOnInputFocusCapture::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateOnInputFocusCapture::*)()>(&DeactivateOnInputFocusCapture::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateOnInputFocusCapture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DeactivateOnInputFocusCapture::*)()>(&DeactivateOnInputFocusCapture::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DeactivateOnInputFocusCapture*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FileHelpers
#include "GlobalNamespace/FileHelpers.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileHelpers.GetEscapedURLForFilePath
::Il2CppString* GlobalNamespace::FileHelpers::GetEscapedURLForFilePath(::Il2CppString* filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileHelpers::GetEscapedURLForFilePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetEscapedURLForFilePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePath);
}
// Autogenerated method: FileHelpers.GetUniqueDirectoryNameByAppendingNumber
::Il2CppString* GlobalNamespace::FileHelpers::GetUniqueDirectoryNameByAppendingNumber(::Il2CppString* dirName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileHelpers::GetUniqueDirectoryNameByAppendingNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetUniqueDirectoryNameByAppendingNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dirName)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dirName);
}
// Autogenerated method: FileHelpers.GetFilePaths
::Array<::Il2CppString*>* GlobalNamespace::FileHelpers::GetFilePaths(::Il2CppString* directoryPath, System::Collections::Generic::HashSet_1<::Il2CppString*>* extensions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileHelpers::GetFilePaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetFilePaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(directoryPath), ::il2cpp_utils::ExtractType(extensions)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, directoryPath, extensions);
}
// Autogenerated method: FileHelpers.GetFileNamesFromFilePaths
::Array<::Il2CppString*>* GlobalNamespace::FileHelpers::GetFileNamesFromFilePaths(::Array<::Il2CppString*>* filePaths) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileHelpers::GetFileNamesFromFilePaths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "GetFileNamesFromFilePaths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePaths)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePaths);
}
// Autogenerated method: FileHelpers.SaveToJSONFile
void GlobalNamespace::FileHelpers::SaveToJSONFile(::Il2CppObject* obj, ::Il2CppString* filePath, ::Il2CppString* tempFilePath, ::Il2CppString* backupFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileHelpers::SaveToJSONFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "SaveToJSONFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(tempFilePath), ::il2cpp_utils::ExtractType(backupFilePath)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, filePath, tempFilePath, backupFilePath);
}
// Autogenerated method: FileHelpers.LoadJSONFile
::Il2CppString* GlobalNamespace::FileHelpers::LoadJSONFile(::Il2CppString* filePath, ::Il2CppString* backupFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileHelpers::LoadJSONFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileHelpers", "LoadJSONFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(backupFilePath)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePath, backupFilePath);
}
// Writing MetadataGetter for method: FileHelpers::GetEscapedURLForFilePath
// Il2CppName: GetEscapedURLForFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&FileHelpers::GetEscapedURLForFilePath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), "GetEscapedURLForFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileHelpers::GetUniqueDirectoryNameByAppendingNumber
// Il2CppName: GetUniqueDirectoryNameByAppendingNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&FileHelpers::GetUniqueDirectoryNameByAppendingNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), "GetUniqueDirectoryNameByAppendingNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileHelpers::GetFilePaths
// Il2CppName: GetFilePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&FileHelpers::GetFilePaths)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), "GetFilePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: FileHelpers::GetFileNamesFromFilePaths
// Il2CppName: GetFileNamesFromFilePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Array<::Il2CppString*>*)>(&FileHelpers::GetFileNamesFromFilePaths)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), "GetFileNamesFromFilePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: FileHelpers::SaveToJSONFile
// Il2CppName: SaveToJSONFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&FileHelpers::SaveToJSONFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), "SaveToJSONFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileHelpers::LoadFromJSONFile
// Il2CppName: LoadFromJSONFile
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: FileHelpers::LoadJSONFile
// Il2CppName: LoadJSONFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&FileHelpers::LoadJSONFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), "LoadJSONFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileHelpers::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileHelpers::*)()>(&FileHelpers::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileHelpers::*)()>(&FileHelpers::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FindUnityObjectsHelper
#include "GlobalNamespace/FindUnityObjectsHelper.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FindUnityObjectsHelper.GetMonoBehavioursInLoadedScenes
System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* GlobalNamespace::FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetMonoBehavioursInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllRootGameObjectsInLoadedScenes
System::Collections::Generic::List_1<UnityEngine::GameObject*>* GlobalNamespace::FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllRootGameObjectsInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllGameObjectsInGameObject
System::Collections::Generic::List_1<UnityEngine::GameObject*>* GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInGameObject(UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllGameObjectsInGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, go);
}
// Autogenerated method: FindUnityObjectsHelper.GetAllGameObjectsInLoadedScenes
System::Collections::Generic::List_1<UnityEngine::GameObject*>* GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FindUnityObjectsHelper", "GetAllGameObjectsInLoadedScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes
// Il2CppName: GetMonoBehavioursInLoadedScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* (*)()>(&FindUnityObjectsHelper::GetMonoBehavioursInLoadedScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FindUnityObjectsHelper*), "GetMonoBehavioursInLoadedScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes
// Il2CppName: GetAllRootGameObjectsInLoadedScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::GameObject*>* (*)()>(&FindUnityObjectsHelper::GetAllRootGameObjectsInLoadedScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FindUnityObjectsHelper*), "GetAllRootGameObjectsInLoadedScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FindUnityObjectsHelper::GetAllGameObjectsInGameObject
// Il2CppName: GetAllGameObjectsInGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::GameObject*>* (*)(UnityEngine::GameObject*)>(&FindUnityObjectsHelper::GetAllGameObjectsInGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FindUnityObjectsHelper*), "GetAllGameObjectsInGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes
// Il2CppName: GetAllGameObjectsInLoadedScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::GameObject*>* (*)()>(&FindUnityObjectsHelper::GetAllGameObjectsInLoadedScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FindUnityObjectsHelper*), "GetAllGameObjectsInLoadedScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FindUnityObjectsHelper::GetComponentsInGameObjects
// Il2CppName: GetComponentsInGameObjects
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRefreshable.Refresh
void GlobalNamespace::IRefreshable::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRefreshable::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IRefreshable::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IRefreshable::*)()>(&IRefreshable::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IRefreshable*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: KeyboardShortcutsManager
#include "GlobalNamespace/KeyboardShortcutsManager.hpp"
// Including type: KeyboardShortcutsManager/KeyboardShortcut
#include "GlobalNamespace/KeyboardShortcutsManager_KeyboardShortcut.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: KeyboardShortcutsManager.Update
void GlobalNamespace::KeyboardShortcutsManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts(System::Collections::Generic::Dictionary_2<UnityEngine::KeyCode, System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts(System::Collections::Generic::Dictionary_2<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut* keyboardShortcut, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboardShortcut), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboardShortcut, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(UnityEngine::KeyCode mainKey, UnityEngine::KeyCode combinationKey1, UnityEngine::KeyCode combinationKey2, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(combinationKey2), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainKey, combinationKey1, combinationKey2, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(UnityEngine::KeyCode mainKey, UnityEngine::KeyCode combinationKey1, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainKey, combinationKey1, callback);
}
// Autogenerated method: KeyboardShortcutsManager.RemoveKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut(UnityEngine::KeyCode mainKey, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::RemoveKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainKey, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts(System::Collections::Generic::Dictionary_2<UnityEngine::KeyCode, System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcuts
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts(System::Collections::Generic::Dictionary_2<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*>* shortcutActions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcuts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcuts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shortcutActions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shortcutActions);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut* keyboardShortcut, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyboardShortcut), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyboardShortcut, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(UnityEngine::KeyCode mainKey, UnityEngine::KeyCode combinationKey1, UnityEngine::KeyCode combinationKey2, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(combinationKey2), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainKey, combinationKey1, combinationKey2, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(UnityEngine::KeyCode mainKey, UnityEngine::KeyCode combinationKey1, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(combinationKey1), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainKey, combinationKey1, callback);
}
// Autogenerated method: KeyboardShortcutsManager.AddKeyboardShortcut
void GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut(UnityEngine::KeyCode mainKey, System::Action* callback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::AddKeyboardShortcut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyboardShortcut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainKey), ::il2cpp_utils::ExtractType(callback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainKey, callback);
}
// Writing MetadataGetter for method: KeyboardShortcutsManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)()>(&KeyboardShortcutsManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::RemoveKeyboardShortcuts
// Il2CppName: RemoveKeyboardShortcuts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(System::Collections::Generic::Dictionary_2<UnityEngine::KeyCode, System::Action*>*)>(&KeyboardShortcutsManager::RemoveKeyboardShortcuts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<UnityEngine::KeyCode, System::Action*>*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::RemoveKeyboardShortcuts
// Il2CppName: RemoveKeyboardShortcuts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(System::Collections::Generic::Dictionary_2<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*>*)>(&KeyboardShortcutsManager::RemoveKeyboardShortcuts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "RemoveKeyboardShortcuts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*>*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::RemoveKeyboardShortcut
// Il2CppName: RemoveKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*)>(&KeyboardShortcutsManager::RemoveKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "RemoveKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::RemoveKeyboardShortcut
// Il2CppName: RemoveKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(UnityEngine::KeyCode, UnityEngine::KeyCode, UnityEngine::KeyCode, System::Action*)>(&KeyboardShortcutsManager::RemoveKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "RemoveKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::RemoveKeyboardShortcut
// Il2CppName: RemoveKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(UnityEngine::KeyCode, UnityEngine::KeyCode, System::Action*)>(&KeyboardShortcutsManager::RemoveKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "RemoveKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::RemoveKeyboardShortcut
// Il2CppName: RemoveKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(UnityEngine::KeyCode, System::Action*)>(&KeyboardShortcutsManager::RemoveKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "RemoveKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::AddKeyboardShortcuts
// Il2CppName: AddKeyboardShortcuts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(System::Collections::Generic::Dictionary_2<UnityEngine::KeyCode, System::Action*>*)>(&KeyboardShortcutsManager::AddKeyboardShortcuts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "AddKeyboardShortcuts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<UnityEngine::KeyCode, System::Action*>*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::AddKeyboardShortcuts
// Il2CppName: AddKeyboardShortcuts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(System::Collections::Generic::Dictionary_2<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*>*)>(&KeyboardShortcutsManager::AddKeyboardShortcuts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "AddKeyboardShortcuts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*>*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::AddKeyboardShortcut
// Il2CppName: AddKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*, System::Action*)>(&KeyboardShortcutsManager::AddKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "AddKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::AddKeyboardShortcut
// Il2CppName: AddKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(UnityEngine::KeyCode, UnityEngine::KeyCode, UnityEngine::KeyCode, System::Action*)>(&KeyboardShortcutsManager::AddKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "AddKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::AddKeyboardShortcut
// Il2CppName: AddKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(UnityEngine::KeyCode, UnityEngine::KeyCode, System::Action*)>(&KeyboardShortcutsManager::AddKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "AddKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::AddKeyboardShortcut
// Il2CppName: AddKeyboardShortcut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)(UnityEngine::KeyCode, System::Action*)>(&KeyboardShortcutsManager::AddKeyboardShortcut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), "AddKeyboardShortcut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)()>(&KeyboardShortcutsManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::*)()>(&KeyboardShortcutsManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: KeyboardShortcutsManager/KeyboardShortcut
#include "GlobalNamespace/KeyboardShortcutsManager_KeyboardShortcut.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: KeyboardShortcutsManager/KeyboardShortcut.GetHashCode
int GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: KeyboardShortcutsManager/KeyboardShortcut.Equals
bool GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::KeyboardShortcutsManager::KeyboardShortcut::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Writing MetadataGetter for method: KeyboardShortcutsManager::KeyboardShortcut::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::KeyboardShortcut::*)(UnityEngine::KeyCode, UnityEngine::KeyCode, UnityEngine::KeyCode)>(&KeyboardShortcutsManager::KeyboardShortcut::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager::KeyboardShortcut*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeyboardShortcutsManager::KeyboardShortcut::*)(UnityEngine::KeyCode, UnityEngine::KeyCode, UnityEngine::KeyCode)>(&KeyboardShortcutsManager::KeyboardShortcut::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager::KeyboardShortcut*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::KeyCode>()});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::KeyboardShortcut::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KeyboardShortcutsManager::KeyboardShortcut::*)()>(&KeyboardShortcutsManager::KeyboardShortcut::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager::KeyboardShortcut*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KeyboardShortcutsManager::KeyboardShortcut::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KeyboardShortcutsManager::KeyboardShortcut::*)(::Il2CppObject*)>(&KeyboardShortcutsManager::KeyboardShortcut::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeyboardShortcutsManager::KeyboardShortcut*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MipMapBiasSpriteSetter
#include "GlobalNamespace/MipMapBiasSpriteSetter.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MipMapBiasSpriteSetter.Start
void GlobalNamespace::MipMapBiasSpriteSetter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MipMapBiasSpriteSetter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MipMapBiasSpriteSetter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MipMapBiasSpriteSetter::*)()>(&MipMapBiasSpriteSetter::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MipMapBiasSpriteSetter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MipMapBiasSpriteSetter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MipMapBiasSpriteSetter::*)()>(&MipMapBiasSpriteSetter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MipMapBiasSpriteSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MipMapBiasSpriteSetter::*)()>(&MipMapBiasSpriteSetter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MipMapBiasSpriteSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityScenesHelper
#include "GlobalNamespace/UnityScenesHelper.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityScenesHelper.SetActiveRootObjectsInScene
void GlobalNamespace::UnityScenesHelper::SetActiveRootObjectsInScene(UnityEngine::SceneManagement::Scene scene, bool active) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnityScenesHelper::SetActiveRootObjectsInScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnityScenesHelper", "SetActiveRootObjectsInScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(active)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, scene, active);
}
// Writing MetadataGetter for method: UnityScenesHelper::SetActiveRootObjectsInScene
// Il2CppName: SetActiveRootObjectsInScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::SceneManagement::Scene, bool)>(&UnityScenesHelper::SetActiveRootObjectsInScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityScenesHelper*), "SetActiveRootObjectsInScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::Scene>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DrawIfAttribute
#include "GlobalNamespace/DrawIfAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DrawIfAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DrawIfAttribute::*)(::Il2CppString*, ::Il2CppObject*, GlobalNamespace::DrawIfAttribute::DisablingType)>(&DrawIfAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DrawIfAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DrawIfAttribute::DisablingType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DrawIfAttribute::*)(::Il2CppString*, ::Il2CppObject*, GlobalNamespace::DrawIfAttribute::DisablingType)>(&DrawIfAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DrawIfAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DrawIfAttribute::DisablingType>()});
  }
};
// Writing MetadataGetter for method: DrawIfAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DrawIfAttribute::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, GlobalNamespace::DrawIfAttribute::DisablingType)>(&DrawIfAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DrawIfAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DrawIfAttribute::DisablingType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DrawIfAttribute::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, GlobalNamespace::DrawIfAttribute::DisablingType)>(&DrawIfAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DrawIfAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DrawIfAttribute::DisablingType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DrawIfAttribute/DisablingType
#include "GlobalNamespace/DrawIfAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public DrawIfAttribute/DisablingType ReadOnly
GlobalNamespace::DrawIfAttribute::DisablingType GlobalNamespace::DrawIfAttribute::DisablingType::_get_ReadOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DrawIfAttribute::DisablingType::_get_ReadOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DrawIfAttribute::DisablingType>("", "DrawIfAttribute/DisablingType", "ReadOnly"));
}
// Autogenerated static field setter
// Set static field: static public DrawIfAttribute/DisablingType ReadOnly
void GlobalNamespace::DrawIfAttribute::DisablingType::_set_ReadOnly(GlobalNamespace::DrawIfAttribute::DisablingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DrawIfAttribute::DisablingType::_set_ReadOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DrawIfAttribute/DisablingType", "ReadOnly", value));
}
// Autogenerated static field getter
// Get static field: static public DrawIfAttribute/DisablingType DontDraw
GlobalNamespace::DrawIfAttribute::DisablingType GlobalNamespace::DrawIfAttribute::DisablingType::_get_DontDraw() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DrawIfAttribute::DisablingType::_get_DontDraw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::DrawIfAttribute::DisablingType>("", "DrawIfAttribute/DisablingType", "DontDraw"));
}
// Autogenerated static field setter
// Set static field: static public DrawIfAttribute/DisablingType DontDraw
void GlobalNamespace::DrawIfAttribute::DisablingType::_set_DontDraw(GlobalNamespace::DrawIfAttribute::DisablingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DrawIfAttribute::DisablingType::_set_DontDraw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "DrawIfAttribute/DisablingType", "DontDraw", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DrawHelpers
#include "GlobalNamespace/DrawHelpers.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DrawHelpers.DrawTexture
void GlobalNamespace::DrawHelpers::DrawTexture(UnityEngine::Texture* texture, float x, float y, float w, float h, UnityEngine::Material* mat, float sx, float sy, float sw, float sh) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DrawHelpers::DrawTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "DrawHelpers", "DrawTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(texture), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(w), ::il2cpp_utils::ExtractType(h), ::il2cpp_utils::ExtractType(mat), ::il2cpp_utils::ExtractType(sx), ::il2cpp_utils::ExtractType(sy), ::il2cpp_utils::ExtractType(sw), ::il2cpp_utils::ExtractType(sh)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, texture, x, y, w, h, mat, sx, sy, sw, sh);
}
// Writing MetadataGetter for method: DrawHelpers::DrawTexture
// Il2CppName: DrawTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Texture*, float, float, float, float, UnityEngine::Material*, float, float, float, float)>(&DrawHelpers::DrawTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DrawHelpers*), "DrawTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: DrawHelpers::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DrawHelpers::*)()>(&DrawHelpers::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DrawHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DrawHelpers::*)()>(&DrawHelpers::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DrawHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DroppedFramesLabel
#include "GlobalNamespace/DroppedFramesLabel.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DroppedFramesLabel.Start
void GlobalNamespace::DroppedFramesLabel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroppedFramesLabel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroppedFramesLabel.Update
void GlobalNamespace::DroppedFramesLabel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroppedFramesLabel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DroppedFramesLabel.RefreshText
void GlobalNamespace::DroppedFramesLabel::RefreshText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DroppedFramesLabel::RefreshText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DroppedFramesLabel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DroppedFramesLabel::*)()>(&DroppedFramesLabel::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DroppedFramesLabel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DroppedFramesLabel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DroppedFramesLabel::*)()>(&DroppedFramesLabel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DroppedFramesLabel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DroppedFramesLabel::RefreshText
// Il2CppName: RefreshText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DroppedFramesLabel::*)()>(&DroppedFramesLabel::RefreshText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DroppedFramesLabel*), "RefreshText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DroppedFramesLabel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DroppedFramesLabel::*)()>(&DroppedFramesLabel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DroppedFramesLabel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DroppedFramesLabel::*)()>(&DroppedFramesLabel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DroppedFramesLabel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Easing
#include "GlobalNamespace/Easing.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Easing.Linear
float GlobalNamespace::Easing::Linear(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::Linear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "Linear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InSine
float GlobalNamespace::Easing::InSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutSine
float GlobalNamespace::Easing::OutSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutSine
float GlobalNamespace::Easing::InOutSine(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutSine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutSine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuad
float GlobalNamespace::Easing::InQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuad
float GlobalNamespace::Easing::OutQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuad
float GlobalNamespace::Easing::InOutQuad(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutQuad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InCubic
float GlobalNamespace::Easing::InCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutCubic
float GlobalNamespace::Easing::OutCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutCubic
float GlobalNamespace::Easing::InOutCubic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutCubic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutCubic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuart
float GlobalNamespace::Easing::InQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuart
float GlobalNamespace::Easing::OutQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuart
float GlobalNamespace::Easing::InOutQuart(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutQuart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InQuint
float GlobalNamespace::Easing::InQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutQuint
float GlobalNamespace::Easing::OutQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutQuint
float GlobalNamespace::Easing::InOutQuint(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutQuint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutQuint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InExpo
float GlobalNamespace::Easing::InExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutExpo
float GlobalNamespace::Easing::OutExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutExpo
float GlobalNamespace::Easing::InOutExpo(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutExpo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutExpo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InCirc
float GlobalNamespace::Easing::InCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutCirc
float GlobalNamespace::Easing::OutCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutCirc
float GlobalNamespace::Easing::InOutCirc(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutCirc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutCirc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InBack
float GlobalNamespace::Easing::InBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutBack
float GlobalNamespace::Easing::OutBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutBack
float GlobalNamespace::Easing::InOutBack(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InElastic
float GlobalNamespace::Easing::InElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutElastic
float GlobalNamespace::Easing::OutElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutElastic
float GlobalNamespace::Easing::InOutElastic(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutElastic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutElastic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InBounce
float GlobalNamespace::Easing::InBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.OutBounce
float GlobalNamespace::Easing::OutBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::OutBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "OutBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: Easing.InOutBounce
float GlobalNamespace::Easing::InOutBounce(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Easing::InOutBounce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Easing", "InOutBounce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Writing MetadataGetter for method: Easing::Linear
// Il2CppName: Linear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::Linear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "Linear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InSine
// Il2CppName: InSine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InSine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InSine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutSine
// Il2CppName: OutSine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutSine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutSine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutSine
// Il2CppName: InOutSine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutSine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutSine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InQuad
// Il2CppName: InQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InQuad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutQuad
// Il2CppName: OutQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutQuad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutQuad
// Il2CppName: InOutQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutQuad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InCubic
// Il2CppName: InCubic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InCubic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutCubic
// Il2CppName: OutCubic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutCubic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutCubic
// Il2CppName: InOutCubic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutCubic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InQuart
// Il2CppName: InQuart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InQuart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InQuart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutQuart
// Il2CppName: OutQuart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutQuart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutQuart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutQuart
// Il2CppName: InOutQuart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutQuart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutQuart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InQuint
// Il2CppName: InQuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InQuint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InQuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutQuint
// Il2CppName: OutQuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutQuint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutQuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutQuint
// Il2CppName: InOutQuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutQuint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutQuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InExpo
// Il2CppName: InExpo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InExpo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InExpo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutExpo
// Il2CppName: OutExpo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutExpo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutExpo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutExpo
// Il2CppName: InOutExpo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutExpo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutExpo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InCirc
// Il2CppName: InCirc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InCirc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InCirc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutCirc
// Il2CppName: OutCirc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutCirc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutCirc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutCirc
// Il2CppName: InOutCirc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutCirc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutCirc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InBack
// Il2CppName: InBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InBack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutBack
// Il2CppName: OutBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutBack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutBack
// Il2CppName: InOutBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutBack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InElastic
// Il2CppName: InElastic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InElastic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InElastic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutElastic
// Il2CppName: OutElastic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutElastic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutElastic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutElastic
// Il2CppName: InOutElastic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutElastic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutElastic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InBounce
// Il2CppName: InBounce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InBounce)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InBounce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::OutBounce
// Il2CppName: OutBounce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::OutBounce)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "OutBounce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Easing::InOutBounce
// Il2CppName: InOutBounce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Easing::InOutBounce)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Easing*), "InOutBounce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RenderTextureExtensions
#include "GlobalNamespace/RenderTextureExtensions.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RenderTextureExtensions.GetTexture2D
UnityEngine::Texture2D* GlobalNamespace::RenderTextureExtensions::GetTexture2D(UnityEngine::RenderTexture* rt) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RenderTextureExtensions::GetTexture2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RenderTextureExtensions", "GetTexture2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rt)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rt);
}
// Writing MetadataGetter for method: RenderTextureExtensions::GetTexture2D
// Il2CppName: GetTexture2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (*)(UnityEngine::RenderTexture*)>(&RenderTextureExtensions::GetTexture2D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTextureExtensions*), "GetTexture2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TimeHelper
#include "GlobalNamespace/TimeHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [CompilerGeneratedAttribute] Offset: 0xDE33A0
// Autogenerated static field getter
// Get static field: static private System.Single <time>k__BackingField
float GlobalNamespace::TimeHelper::_get_$time$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_get_$time$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<time>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <time>k__BackingField
void GlobalNamespace::TimeHelper::_set_$time$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_set_$time$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<time>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDE33B0
// Autogenerated static field getter
// Get static field: static private System.Single <deltaTime>k__BackingField
float GlobalNamespace::TimeHelper::_get_$deltaTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_get_$deltaTime$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<deltaTime>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <deltaTime>k__BackingField
void GlobalNamespace::TimeHelper::_set_$deltaTime$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_set_$deltaTime$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<deltaTime>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDE33C0
// Autogenerated static field getter
// Get static field: static private System.Single <fixedDeltaTime>k__BackingField
float GlobalNamespace::TimeHelper::_get_$fixedDeltaTime$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_get_$fixedDeltaTime$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<fixedDeltaTime>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <fixedDeltaTime>k__BackingField
void GlobalNamespace::TimeHelper::_set_$fixedDeltaTime$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_set_$fixedDeltaTime$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<fixedDeltaTime>k__BackingField", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDE33D0
// Autogenerated static field getter
// Get static field: static private System.Single <interpolationFactor>k__BackingField
float GlobalNamespace::TimeHelper::_get_$interpolationFactor$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_get_$interpolationFactor$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<float>("", "TimeHelper", "<interpolationFactor>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Single <interpolationFactor>k__BackingField
void GlobalNamespace::TimeHelper::_set_$interpolationFactor$k__BackingField(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::_set_$interpolationFactor$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TimeHelper", "<interpolationFactor>k__BackingField", value));
}
// Autogenerated method: TimeHelper.get_time
float GlobalNamespace::TimeHelper::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_time
void GlobalNamespace::TimeHelper::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_deltaTime
float GlobalNamespace::TimeHelper::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_deltaTime
void GlobalNamespace::TimeHelper::set_deltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::set_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_fixedDeltaTime
float GlobalNamespace::TimeHelper::get_fixedDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::get_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_fixedDeltaTime
void GlobalNamespace::TimeHelper::set_fixedDeltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::set_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.get_interpolationFactor
float GlobalNamespace::TimeHelper::get_interpolationFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::get_interpolationFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "get_interpolationFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TimeHelper.set_interpolationFactor
void GlobalNamespace::TimeHelper::set_interpolationFactor(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::set_interpolationFactor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeHelper", "set_interpolationFactor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TimeHelper.Awake
void GlobalNamespace::TimeHelper::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.FixedUpdate
void GlobalNamespace::TimeHelper::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TimeHelper.Update
void GlobalNamespace::TimeHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TimeHelper::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TimeHelper::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimeHelper::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&TimeHelper::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeHelper::get_deltaTime
// Il2CppName: get_deltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TimeHelper::get_deltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "get_deltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimeHelper::set_deltaTime
// Il2CppName: set_deltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&TimeHelper::set_deltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "set_deltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeHelper::get_fixedDeltaTime
// Il2CppName: get_fixedDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TimeHelper::get_fixedDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "get_fixedDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimeHelper::set_fixedDeltaTime
// Il2CppName: set_fixedDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&TimeHelper::set_fixedDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "set_fixedDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeHelper::get_interpolationFactor
// Il2CppName: get_interpolationFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TimeHelper::get_interpolationFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "get_interpolationFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimeHelper::set_interpolationFactor
// Il2CppName: set_interpolationFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&TimeHelper::set_interpolationFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "set_interpolationFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeHelper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimeHelper::*)()>(&TimeHelper::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimeHelper::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimeHelper::*)()>(&TimeHelper::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimeHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimeHelper::*)()>(&TimeHelper::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimeHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimeHelper::*)()>(&TimeHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimeHelper::*)()>(&TimeHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VersionStringHelper
#include "GlobalNamespace/VersionStringHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VersionStringHelper.GetMajorVersionNumber
int GlobalNamespace::VersionStringHelper::GetMajorVersionNumber(::Il2CppString* versionString) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VersionStringHelper::GetMajorVersionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VersionStringHelper", "GetMajorVersionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(versionString)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, versionString);
}
// Writing MetadataGetter for method: VersionStringHelper::GetMajorVersionNumber
// Il2CppName: GetMajorVersionNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*)>(&VersionStringHelper::GetMajorVersionNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VersionStringHelper*), "GetMajorVersionNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ManualUpdate
#include "GlobalNamespace/ManualUpdate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ManualUpdate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ManualUpdate::*)()>(&ManualUpdate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManualUpdate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ManualUpdate::*)()>(&ManualUpdate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManualUpdate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ManualUpdateManager
#include "GlobalNamespace/ManualUpdateManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ManualUpdateManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ManualUpdateManager::*)()>(&ManualUpdateManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManualUpdateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ManualUpdateManager::*)()>(&ManualUpdateManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManualUpdateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ActivateOnVisible
#include "GlobalNamespace/ActivateOnVisible.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ActivateOnVisible.Awake
void GlobalNamespace::ActivateOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ActivateOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ActivateOnVisible.OnBecameVisible
void GlobalNamespace::ActivateOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ActivateOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ActivateOnVisible.OnBecameInvisible
void GlobalNamespace::ActivateOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ActivateOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ActivateOnVisible::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnVisible::*)()>(&ActivateOnVisible::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnVisible*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivateOnVisible::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnVisible::*)()>(&ActivateOnVisible::OnBecameVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnVisible*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivateOnVisible::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnVisible::*)()>(&ActivateOnVisible::OnBecameInvisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnVisible*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ActivateOnVisible::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnVisible::*)()>(&ActivateOnVisible::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnVisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ActivateOnVisible::*)()>(&ActivateOnVisible::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ActivateOnVisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AlphabetScrollInfo
#include "GlobalNamespace/AlphabetScrollInfo.hpp"
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AlphabetScrollInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlphabetScrollInfo::*)()>(&AlphabetScrollInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlphabetScrollInfo::*)()>(&AlphabetScrollInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AlphabetScrollInfo/Data
#include "GlobalNamespace/AlphabetScrollInfo_Data.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AlphabetScrollInfo::Data::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlphabetScrollInfo::Data::*)(::Il2CppChar, int)>(&AlphabetScrollInfo::Data::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollInfo::Data*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlphabetScrollInfo::Data::*)(::Il2CppChar, int)>(&AlphabetScrollInfo::Data::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlphabetScrollInfo::Data*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AnimationStartParams
#include "GlobalNamespace/AnimationStartParams.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AnimationStartParams.Start
void GlobalNamespace::AnimationStartParams::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnimationStartParams::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnimationStartParams::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationStartParams::*)()>(&AnimationStartParams::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationStartParams*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimationStartParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationStartParams::*)()>(&AnimationStartParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationStartParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimationStartParams::*)()>(&AnimationStartParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimationStartParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ArrayHelpers
#include "GlobalNamespace/ArrayHelpers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ArrayHelpers::CreateOrEnlargeArray
// Il2CppName: CreateOrEnlargeArray
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper
#include "GlobalNamespace/AsyncHelper.hpp"
// Including type: AsyncHelper/<>c__DisplayClass0_0`1
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass0_0_1.hpp"
// Including type: AsyncHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AsyncHelper.RunSync
void GlobalNamespace::AsyncHelper::RunSync(System::Func_1<System::Threading::Tasks::Task*>* asyncTask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncHelper::RunSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AsyncHelper", "RunSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncTask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, asyncTask);
}
// Writing MetadataGetter for method: AsyncHelper::RunSync
// Il2CppName: RunSync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: AsyncHelper::RunSync
// Il2CppName: RunSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Func_1<System::Threading::Tasks::Task*>*)>(&AsyncHelper::RunSync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncHelper*), "RunSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_1<System::Threading::Tasks::Task*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0.hpp"
// Including type: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0_--RunSync-b__0-d.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0.<RunSync>b__0
System::Threading::Tasks::Task* GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$RunSync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::<RunSync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunSync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AsyncHelper::$$c__DisplayClass1_0::$RunSync$b__0
// Il2CppName: <RunSync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (AsyncHelper::$$c__DisplayClass1_0::*)()>(&AsyncHelper::$$c__DisplayClass1_0::$RunSync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncHelper::$$c__DisplayClass1_0*), "<RunSync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncHelper::$$c__DisplayClass1_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncHelper::$$c__DisplayClass1_0::*)()>(&AsyncHelper::$$c__DisplayClass1_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncHelper::$$c__DisplayClass1_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncHelper::$$c__DisplayClass1_0::*)()>(&AsyncHelper::$$c__DisplayClass1_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncHelper::$$c__DisplayClass1_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d
#include "GlobalNamespace/AsyncHelper_--c__DisplayClass1_0_--RunSync-b__0-d.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d.MoveNext
void GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: AsyncHelper/<>c__DisplayClass1_0/<<RunSync>b__0>d.SetStateMachine
void GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::*)()>(&AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncHelper::$$c__DisplayClass1_0::$$RunSync$b__0$d), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Billboard
#include "GlobalNamespace/Billboard.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Billboard.Awake
void GlobalNamespace::Billboard::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Billboard.OnWillRenderObject
void GlobalNamespace::Billboard::OnWillRenderObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::OnWillRenderObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnWillRenderObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Billboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Billboard::*)()>(&Billboard::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Billboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Billboard::OnWillRenderObject
// Il2CppName: OnWillRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Billboard::*)()>(&Billboard::OnWillRenderObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Billboard*), "OnWillRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Billboard::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Billboard::*)()>(&Billboard::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Billboard*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Billboard::*)()>(&Billboard::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Billboard*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Billboard/RotationMode
#include "GlobalNamespace/Billboard.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode AllAxis
GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_AllAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_get_AllAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "AllAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode AllAxis
void GlobalNamespace::Billboard::RotationMode::_set_AllAxis(GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_set_AllAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "AllAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode XAxis
GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_XAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_get_XAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "XAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode XAxis
void GlobalNamespace::Billboard::RotationMode::_set_XAxis(GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_set_XAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "XAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode YAxis
GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_YAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_get_YAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "YAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode YAxis
void GlobalNamespace::Billboard::RotationMode::_set_YAxis(GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_set_YAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "YAxis", value));
}
// Autogenerated static field getter
// Get static field: static public Billboard/RotationMode ZAxis
GlobalNamespace::Billboard::RotationMode GlobalNamespace::Billboard::RotationMode::_get_ZAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_get_ZAxis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::Billboard::RotationMode>("", "Billboard/RotationMode", "ZAxis"));
}
// Autogenerated static field setter
// Set static field: static public Billboard/RotationMode ZAxis
void GlobalNamespace::Billboard::RotationMode::_set_ZAxis(GlobalNamespace::Billboard::RotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Billboard::RotationMode::_set_ZAxis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Billboard/RotationMode", "ZAxis", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CameraDepthTextureMode
#include "GlobalNamespace/CameraDepthTextureMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CameraDepthTextureMode.Awake
void GlobalNamespace::CameraDepthTextureMode::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CameraDepthTextureMode::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CameraDepthTextureMode::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraDepthTextureMode::*)()>(&CameraDepthTextureMode::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraDepthTextureMode*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CameraDepthTextureMode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraDepthTextureMode::*)()>(&CameraDepthTextureMode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraDepthTextureMode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CameraDepthTextureMode::*)()>(&CameraDepthTextureMode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CameraDepthTextureMode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ClickButtonWithCommandArgument
#include "GlobalNamespace/ClickButtonWithCommandArgument.hpp"
// Including type: ClickButtonWithCommandArgument/<Start>d__2
#include "GlobalNamespace/ClickButtonWithCommandArgument_-Start-d__2.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ClickButtonWithCommandArgument.Start
System::Collections::IEnumerator* GlobalNamespace::ClickButtonWithCommandArgument::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClickButtonWithCommandArgument::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ClickButtonWithCommandArgument::*)()>(&ClickButtonWithCommandArgument::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClickButtonWithCommandArgument::*)()>(&ClickButtonWithCommandArgument::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClickButtonWithCommandArgument::*)()>(&ClickButtonWithCommandArgument::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ClickButtonWithCommandArgument/<Start>d__2
#include "GlobalNamespace/ClickButtonWithCommandArgument_-Start-d__2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.IDisposable.Dispose
void GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.MoveNext
bool GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.IEnumerator.Reset
void GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClickButtonWithCommandArgument/<Start>d__2.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClickButtonWithCommandArgument::$Start$d__2::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::$Start$d__2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClickButtonWithCommandArgument::$Start$d__2::*)(int)>(&ClickButtonWithCommandArgument::$Start$d__2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument::$Start$d__2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClickButtonWithCommandArgument::$Start$d__2::*)(int)>(&ClickButtonWithCommandArgument::$Start$d__2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument::$Start$d__2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::$Start$d__2::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClickButtonWithCommandArgument::$Start$d__2::*)()>(&ClickButtonWithCommandArgument::$Start$d__2::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument::$Start$d__2*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::$Start$d__2::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ClickButtonWithCommandArgument::$Start$d__2::*)()>(&ClickButtonWithCommandArgument::$Start$d__2::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument::$Start$d__2*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::$Start$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ClickButtonWithCommandArgument::$Start$d__2::*)()>(&ClickButtonWithCommandArgument::$Start$d__2::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument::$Start$d__2*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClickButtonWithCommandArgument::$Start$d__2::*)()>(&ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument::$Start$d__2*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ClickButtonWithCommandArgument::$Start$d__2::*)()>(&ClickButtonWithCommandArgument::$Start$d__2::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClickButtonWithCommandArgument::$Start$d__2*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorExtensions
#include "GlobalNamespace/ColorExtensions.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorExtensions.SaturatedColor
UnityEngine::Color GlobalNamespace::ColorExtensions::SaturatedColor(UnityEngine::Color color, float saturation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorExtensions::SaturatedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "SaturatedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(saturation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, saturation);
}
// Autogenerated method: ColorExtensions.ColorWithAlpha
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithAlpha(UnityEngine::Color color, float alpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorExtensions::ColorWithAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(alpha)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, alpha);
}
// Autogenerated method: ColorExtensions.ColorWithR
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithR(UnityEngine::Color color, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorExtensions::ColorWithR");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithR", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, r);
}
// Autogenerated method: ColorExtensions.ColorWithG
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithG(UnityEngine::Color color, float g) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorExtensions::ColorWithG");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithG", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(g)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, g);
}
// Autogenerated method: ColorExtensions.ColorWithB
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithB(UnityEngine::Color color, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorExtensions::ColorWithB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, b);
}
// Autogenerated method: ColorExtensions.ColorWithValue
UnityEngine::Color GlobalNamespace::ColorExtensions::ColorWithValue(UnityEngine::Color color, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorExtensions::ColorWithValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "ColorWithValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, color, value);
}
// Autogenerated method: ColorExtensions.LerpRGBUnclamped
UnityEngine::Color GlobalNamespace::ColorExtensions::LerpRGBUnclamped(UnityEngine::Color a, UnityEngine::Color b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorExtensions::LerpRGBUnclamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorExtensions", "LerpRGBUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Writing MetadataGetter for method: ColorExtensions::SaturatedColor
// Il2CppName: SaturatedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, float)>(&ColorExtensions::SaturatedColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorExtensions*), "SaturatedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorExtensions::ColorWithAlpha
// Il2CppName: ColorWithAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, float)>(&ColorExtensions::ColorWithAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorExtensions*), "ColorWithAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorExtensions::ColorWithR
// Il2CppName: ColorWithR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, float)>(&ColorExtensions::ColorWithR)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorExtensions*), "ColorWithR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorExtensions::ColorWithG
// Il2CppName: ColorWithG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, float)>(&ColorExtensions::ColorWithG)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorExtensions*), "ColorWithG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorExtensions::ColorWithB
// Il2CppName: ColorWithB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, float)>(&ColorExtensions::ColorWithB)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorExtensions*), "ColorWithB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorExtensions::ColorWithValue
// Il2CppName: ColorWithValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, float)>(&ColorExtensions::ColorWithValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorExtensions*), "ColorWithValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorExtensions::LerpRGBUnclamped
// Il2CppName: LerpRGBUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, UnityEngine::Color, float)>(&ColorExtensions::LerpRGBUnclamped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorExtensions*), "LerpRGBUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConfigSerializer
#include "GlobalNamespace/ConfigSerializer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConfigSerializer.SaveConfig
void GlobalNamespace::ConfigSerializer::SaveConfig(::Il2CppObject* config, ::Il2CppString* filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConfigSerializer::SaveConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConfigSerializer", "SaveConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config), ::il2cpp_utils::ExtractType(filePath)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, config, filePath);
}
// Autogenerated method: ConfigSerializer.LoadConfig
bool GlobalNamespace::ConfigSerializer::LoadConfig(::Il2CppObject* config, ::Il2CppString* filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConfigSerializer::LoadConfig");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConfigSerializer", "LoadConfig", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(config), ::il2cpp_utils::ExtractType(filePath)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, config, filePath);
}
// Writing MetadataGetter for method: ConfigSerializer::SaveConfig
// Il2CppName: SaveConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*)>(&ConfigSerializer::SaveConfig)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConfigSerializer*), "SaveConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConfigSerializer::LoadConfig
// Il2CppName: LoadConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, ::Il2CppString*)>(&ConfigSerializer::LoadConfig)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConfigSerializer*), "LoadConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ConfigSerializer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConfigSerializer::*)()>(&ConfigSerializer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConfigSerializer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConfigSerializer::*)()>(&ConfigSerializer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConfigSerializer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CoroutineHelpers
#include "GlobalNamespace/CoroutineHelpers.hpp"
// Including type: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0
#include "GlobalNamespace/CoroutineHelpers_-ExecuteAfterDelayCoroutine-d__0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CoroutineHelpers.ExecuteAfterDelayCoroutine
System::Collections::IEnumerator* GlobalNamespace::CoroutineHelpers::ExecuteAfterDelayCoroutine(System::Action* action, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoroutineHelpers::ExecuteAfterDelayCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CoroutineHelpers", "ExecuteAfterDelayCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, action, time);
}
// Writing MetadataGetter for method: CoroutineHelpers::ExecuteAfterDelayCoroutine
// Il2CppName: ExecuteAfterDelayCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (*)(System::Action*, float)>(&CoroutineHelpers::ExecuteAfterDelayCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers*), "ExecuteAfterDelayCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CoroutineHelpers::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoroutineHelpers::*)()>(&CoroutineHelpers::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoroutineHelpers::*)()>(&CoroutineHelpers::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0
#include "GlobalNamespace/CoroutineHelpers_-ExecuteAfterDelayCoroutine-d__0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.IDisposable.Dispose
void GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.MoveNext
bool GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.IEnumerator.Reset
void GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CoroutineHelpers/<ExecuteAfterDelayCoroutine>d__0.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::*)(int)>(&CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::*)(int)>(&CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::*)()>(&CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::*)()>(&CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::*)()>(&CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::*)()>(&CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::*)()>(&CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoroutineHelpers::$ExecuteAfterDelayCoroutine$d__0*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CustomBoundingBox
#include "GlobalNamespace/CustomBoundingBox.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CustomBoundingBox.Awake
void GlobalNamespace::CustomBoundingBox::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomBoundingBox::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CustomBoundingBox::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomBoundingBox::*)()>(&CustomBoundingBox::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomBoundingBox*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomBoundingBox::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomBoundingBox::*)()>(&CustomBoundingBox::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomBoundingBox*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomBoundingBox::*)()>(&CustomBoundingBox::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomBoundingBox*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableGCWhileEnabled
#include "GlobalNamespace/DisableGCWhileEnabled.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisableGCWhileEnabled.OnEnable
void GlobalNamespace::DisableGCWhileEnabled::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableGCWhileEnabled::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DisableGCWhileEnabled.OnDisable
void GlobalNamespace::DisableGCWhileEnabled::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableGCWhileEnabled::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DisableGCWhileEnabled::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableGCWhileEnabled::*)()>(&DisableGCWhileEnabled::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableGCWhileEnabled*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisableGCWhileEnabled::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableGCWhileEnabled::*)()>(&DisableGCWhileEnabled::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableGCWhileEnabled*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisableGCWhileEnabled::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableGCWhileEnabled::*)()>(&DisableGCWhileEnabled::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableGCWhileEnabled*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableGCWhileEnabled::*)()>(&DisableGCWhileEnabled::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableGCWhileEnabled*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DoesNotRequireDomainReloadInitAttribute
#include "GlobalNamespace/DoesNotRequireDomainReloadInitAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DoesNotRequireDomainReloadInitAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DoesNotRequireDomainReloadInitAttribute::*)()>(&DoesNotRequireDomainReloadInitAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DoesNotRequireDomainReloadInitAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DoesNotRequireDomainReloadInitAttribute::*)()>(&DoesNotRequireDomainReloadInitAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DoesNotRequireDomainReloadInitAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnableAfterDelay
#include "GlobalNamespace/EnableAfterDelay.hpp"
// Including type: EnableAfterDelay/<Start>d__1
#include "GlobalNamespace/EnableAfterDelay_-Start-d__1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnableAfterDelay.Start
System::Collections::IEnumerator* GlobalNamespace::EnableAfterDelay::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableAfterDelay::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnableAfterDelay::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (EnableAfterDelay::*)()>(&EnableAfterDelay::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableAfterDelay::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableAfterDelay::*)()>(&EnableAfterDelay::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableAfterDelay::*)()>(&EnableAfterDelay::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnableAfterDelay/<Start>d__1
#include "GlobalNamespace/EnableAfterDelay_-Start-d__1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.IDisposable.Dispose
void GlobalNamespace::EnableAfterDelay::$Start$d__1::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableAfterDelay::$Start$d__1::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.MoveNext
bool GlobalNamespace::EnableAfterDelay::$Start$d__1::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableAfterDelay::$Start$d__1::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.IEnumerator.Reset
void GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableAfterDelay/<Start>d__1.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableAfterDelay::$Start$d__1::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnableAfterDelay::$Start$d__1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableAfterDelay::$Start$d__1::*)(int)>(&EnableAfterDelay::$Start$d__1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay::$Start$d__1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableAfterDelay::$Start$d__1::*)(int)>(&EnableAfterDelay::$Start$d__1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay::$Start$d__1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EnableAfterDelay::$Start$d__1::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableAfterDelay::$Start$d__1::*)()>(&EnableAfterDelay::$Start$d__1::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay::$Start$d__1*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableAfterDelay::$Start$d__1::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EnableAfterDelay::$Start$d__1::*)()>(&EnableAfterDelay::$Start$d__1::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay::$Start$d__1*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableAfterDelay::$Start$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (EnableAfterDelay::$Start$d__1::*)()>(&EnableAfterDelay::$Start$d__1::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay::$Start$d__1*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableAfterDelay::$Start$d__1::*)()>(&EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay::$Start$d__1*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (EnableAfterDelay::$Start$d__1::*)()>(&EnableAfterDelay::$Start$d__1::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableAfterDelay::$Start$d__1*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnableComponentWithCommandArgument
#include "GlobalNamespace/EnableComponentWithCommandArgument.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnableComponentWithCommandArgument.Awake
void GlobalNamespace::EnableComponentWithCommandArgument::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableComponentWithCommandArgument::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnableComponentWithCommandArgument::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableComponentWithCommandArgument::*)()>(&EnableComponentWithCommandArgument::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableComponentWithCommandArgument*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableComponentWithCommandArgument::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableComponentWithCommandArgument::*)()>(&EnableComponentWithCommandArgument::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableComponentWithCommandArgument*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableComponentWithCommandArgument::*)()>(&EnableComponentWithCommandArgument::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableComponentWithCommandArgument*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnableEmmisionOnVisible
#include "GlobalNamespace/EnableEmmisionOnVisible.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnableEmmisionOnVisible.Awake
void GlobalNamespace::EnableEmmisionOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableEmmisionOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableEmmisionOnVisible.OnBecameVisible
void GlobalNamespace::EnableEmmisionOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableEmmisionOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableEmmisionOnVisible.OnBecameInvisible
void GlobalNamespace::EnableEmmisionOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableEmmisionOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnableEmmisionOnVisible::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableEmmisionOnVisible::*)()>(&EnableEmmisionOnVisible::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableEmmisionOnVisible*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableEmmisionOnVisible::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableEmmisionOnVisible::*)()>(&EnableEmmisionOnVisible::OnBecameVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableEmmisionOnVisible*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableEmmisionOnVisible::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableEmmisionOnVisible::*)()>(&EnableEmmisionOnVisible::OnBecameInvisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableEmmisionOnVisible*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableEmmisionOnVisible::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableEmmisionOnVisible::*)()>(&EnableEmmisionOnVisible::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableEmmisionOnVisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableEmmisionOnVisible::*)()>(&EnableEmmisionOnVisible::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableEmmisionOnVisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnableOnVisible
#include "GlobalNamespace/EnableOnVisible.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnableOnVisible.add_VisibilityChangedEvent
void GlobalNamespace::EnableOnVisible::add_VisibilityChangedEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableOnVisible::add_VisibilityChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_VisibilityChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EnableOnVisible.remove_VisibilityChangedEvent
void GlobalNamespace::EnableOnVisible::remove_VisibilityChangedEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableOnVisible::remove_VisibilityChangedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_VisibilityChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EnableOnVisible.Awake
void GlobalNamespace::EnableOnVisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableOnVisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableOnVisible.OnBecameVisible
void GlobalNamespace::EnableOnVisible::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableOnVisible::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnableOnVisible.OnBecameInvisible
void GlobalNamespace::EnableOnVisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnableOnVisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnableOnVisible::add_VisibilityChangedEvent
// Il2CppName: add_VisibilityChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableOnVisible::*)(System::Action_1<bool>*)>(&EnableOnVisible::add_VisibilityChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableOnVisible*), "add_VisibilityChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: EnableOnVisible::remove_VisibilityChangedEvent
// Il2CppName: remove_VisibilityChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableOnVisible::*)(System::Action_1<bool>*)>(&EnableOnVisible::remove_VisibilityChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableOnVisible*), "remove_VisibilityChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: EnableOnVisible::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableOnVisible::*)()>(&EnableOnVisible::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableOnVisible*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableOnVisible::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableOnVisible::*)()>(&EnableOnVisible::OnBecameVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableOnVisible*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableOnVisible::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableOnVisible::*)()>(&EnableOnVisible::OnBecameInvisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableOnVisible*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnableOnVisible::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableOnVisible::*)()>(&EnableOnVisible::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableOnVisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnableOnVisible::*)()>(&EnableOnVisible::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnableOnVisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnumFlagAttribute
#include "GlobalNamespace/EnumFlagAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: EnumFlagAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnumFlagAttribute::*)(::Il2CppString*)>(&EnumFlagAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumFlagAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnumFlagAttribute::*)(::Il2CppString*)>(&EnumFlagAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumFlagAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EnumFlagAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnumFlagAttribute::*)()>(&EnumFlagAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumFlagAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnumFlagAttribute::*)()>(&EnumFlagAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnumFlagAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ExtensionMethods
#include "GlobalNamespace/ExtensionMethods.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExtensionMethods.ContainsLayer
bool GlobalNamespace::ExtensionMethods::ContainsLayer(UnityEngine::LayerMask layerMask, int layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::ContainsLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "ContainsLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerMask), ::il2cpp_utils::ExtractType(layer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerMask, layer);
}
// Autogenerated method: ExtensionMethods.StartUniqueCoroutine
UnityEngine::Coroutine* GlobalNamespace::ExtensionMethods::StartUniqueCoroutine(UnityEngine::MonoBehaviour* m, System::Func_1<System::Collections::IEnumerator*>* func) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::StartUniqueCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "StartUniqueCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(func)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Coroutine*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m, func);
}
// Autogenerated method: ExtensionMethods.StopUniqueCoroutine
void GlobalNamespace::ExtensionMethods::StopUniqueCoroutine(UnityEngine::MonoBehaviour* m, System::Func_1<System::Collections::IEnumerator*>* func) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::StopUniqueCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "StopUniqueCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractType(func)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m, func);
}
// Autogenerated method: ExtensionMethods.IsDescendantOf
bool GlobalNamespace::ExtensionMethods::IsDescendantOf(UnityEngine::Transform* transform, UnityEngine::Transform* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::IsDescendantOf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "IsDescendantOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(parent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, transform, parent);
}
// Autogenerated method: ExtensionMethods.SetLocalPositionAndRotation
void GlobalNamespace::ExtensionMethods::SetLocalPositionAndRotation(UnityEngine::Transform* tr, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::SetLocalPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "SetLocalPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tr), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tr, pos, rot);
}
// Autogenerated method: ExtensionMethods.GetPath
::Il2CppString* GlobalNamespace::ExtensionMethods::GetPath(UnityEngine::Transform* current) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::GetPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "GetPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current);
}
// Autogenerated method: ExtensionMethods.Reflect
UnityEngine::Quaternion GlobalNamespace::ExtensionMethods::Reflect(UnityEngine::Quaternion source, UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::Reflect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "Reflect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source, normal);
}
// Autogenerated method: ExtensionMethods.CreateTexture2D
UnityEngine::Texture2D* GlobalNamespace::ExtensionMethods::CreateTexture2D(UnityEngine::RenderTexture* renderTexture, UnityEngine::TextureFormat textureFormat) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExtensionMethods::CreateTexture2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ExtensionMethods", "CreateTexture2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture), ::il2cpp_utils::ExtractType(textureFormat)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, renderTexture, textureFormat);
}
// Writing MetadataGetter for method: ExtensionMethods::ContainsLayer
// Il2CppName: ContainsLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::LayerMask, int)>(&ExtensionMethods::ContainsLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "ContainsLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ExtensionMethods::StartUniqueCoroutine
// Il2CppName: StartUniqueCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Coroutine* (*)(UnityEngine::MonoBehaviour*, System::Func_1<System::Collections::IEnumerator*>*)>(&ExtensionMethods::StartUniqueCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "StartUniqueCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MonoBehaviour*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_1<System::Collections::IEnumerator*>*>()});
  }
};
// Writing MetadataGetter for method: ExtensionMethods::StartUniqueCoroutine
// Il2CppName: StartUniqueCoroutine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ExtensionMethods::StopUniqueCoroutine
// Il2CppName: StopUniqueCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::MonoBehaviour*, System::Func_1<System::Collections::IEnumerator*>*)>(&ExtensionMethods::StopUniqueCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "StopUniqueCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MonoBehaviour*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_1<System::Collections::IEnumerator*>*>()});
  }
};
// Writing MetadataGetter for method: ExtensionMethods::StopUniqueCoroutine
// Il2CppName: StopUniqueCoroutine
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ExtensionMethods::IsDescendantOf
// Il2CppName: IsDescendantOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Transform*, UnityEngine::Transform*)>(&ExtensionMethods::IsDescendantOf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "IsDescendantOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: ExtensionMethods::SetLocalPositionAndRotation
// Il2CppName: SetLocalPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Quaternion)>(&ExtensionMethods::SetLocalPositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "SetLocalPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: ExtensionMethods::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Transform*)>(&ExtensionMethods::GetPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: ExtensionMethods::Reflect
// Il2CppName: Reflect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion, UnityEngine::Vector3)>(&ExtensionMethods::Reflect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "Reflect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: ExtensionMethods::CreateTexture2D
// Il2CppName: CreateTexture2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (*)(UnityEngine::RenderTexture*, UnityEngine::TextureFormat)>(&ExtensionMethods::CreateTexture2D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionMethods*), "CreateTexture2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextureFormat>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EssentialHelpers
#include "GlobalNamespace/EssentialHelpers.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EssentialHelpers.get_CurrentTimeStamp
double GlobalNamespace::EssentialHelpers::get_CurrentTimeStamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EssentialHelpers::get_CurrentTimeStamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EssentialHelpers", "get_CurrentTimeStamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: EssentialHelpers.SafeDestroy
void GlobalNamespace::EssentialHelpers::SafeDestroy(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EssentialHelpers::SafeDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EssentialHelpers", "SafeDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Writing MetadataGetter for method: EssentialHelpers::get_CurrentTimeStamp
// Il2CppName: get_CurrentTimeStamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&EssentialHelpers::get_CurrentTimeStamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EssentialHelpers*), "get_CurrentTimeStamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EssentialHelpers::SafeDestroy
// Il2CppName: SafeDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&EssentialHelpers::SafeDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EssentialHelpers*), "SafeDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: EssentialHelpers::GetOrAddComponent
// Il2CppName: GetOrAddComponent
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventBinder
#include "GlobalNamespace/EventBinder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EventBinder.Bind
void GlobalNamespace::EventBinder::Bind(System::Action* subscribe, System::Action* unsubscribe) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EventBinder::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subscribe), ::il2cpp_utils::ExtractType(unsubscribe)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, subscribe, unsubscribe);
}
// Autogenerated method: EventBinder.ClearAllBindings
void GlobalNamespace::EventBinder::ClearAllBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EventBinder::ClearAllBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAllBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EventBinder::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventBinder::*)(System::Action*, System::Action*)>(&EventBinder::Bind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventBinder*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: EventBinder::ClearAllBindings
// Il2CppName: ClearAllBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventBinder::*)()>(&EventBinder::ClearAllBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventBinder*), "ClearAllBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EventBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventBinder::*)()>(&EventBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventBinder::*)()>(&EventBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: FadeInOutController/<Fade>d__15
#include "GlobalNamespace/FadeInOutController_-Fade-d__15.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FadeInOutController.FadeOutInstant
void GlobalNamespace::FadeInOutController::FadeOutInstant() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeOutInstant");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOutInstant", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(System::Action* fadeInCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeInCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fadeInCallback);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(System::Action* fadeOutCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fadeOutCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fadeOutCallback);
}
// Autogenerated method: FadeInOutController.FadeIn
void GlobalNamespace::FadeInOutController::FadeIn(float duration, System::Action* fadeInFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeInFinishedCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration, fadeInFinishedCallback);
}
// Autogenerated method: FadeInOutController.FadeOut
void GlobalNamespace::FadeInOutController::FadeOut(float duration, System::Action* fadeOutFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(fadeOutFinishedCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration, fadeOutFinishedCallback);
}
// Autogenerated method: FadeInOutController.Fade
System::Collections::IEnumerator* GlobalNamespace::FadeInOutController::Fade(float fromValue, float toValue, float duration, float startDelay, UnityEngine::AnimationCurve* curve, System::Action* fadeFinishedCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromValue), ::il2cpp_utils::ExtractType(toValue), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(startDelay), ::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(fadeFinishedCallback)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, fromValue, toValue, duration, startDelay, curve, fadeFinishedCallback);
}
// Writing MetadataGetter for method: FadeInOutController::FadeOutInstant
// Il2CppName: FadeOutInstant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)()>(&FadeInOutController::FadeOutInstant)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeOutInstant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeIn
// Il2CppName: FadeIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)()>(&FadeInOutController::FadeIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)()>(&FadeInOutController::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeIn
// Il2CppName: FadeIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)(float)>(&FadeInOutController::FadeIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)(float)>(&FadeInOutController::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeIn
// Il2CppName: FadeIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)(System::Action*)>(&FadeInOutController::FadeIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)(System::Action*)>(&FadeInOutController::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeIn
// Il2CppName: FadeIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)(float, System::Action*)>(&FadeInOutController::FadeIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)(float, System::Action*)>(&FadeInOutController::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::Fade
// Il2CppName: Fade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (FadeInOutController::*)(float, float, float, float, UnityEngine::AnimationCurve*, System::Action*)>(&FadeInOutController::Fade)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), "Fade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationCurve*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)()>(&FadeInOutController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::*)()>(&FadeInOutController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FadeInOutController/<Fade>d__15
#include "GlobalNamespace/FadeInOutController_-Fade-d__15.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FadeInOutController/<Fade>d__15.System.IDisposable.Dispose
void GlobalNamespace::FadeInOutController::$Fade$d__15::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::$Fade$d__15::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.MoveNext
bool GlobalNamespace::FadeInOutController::$Fade$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::$Fade$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.IEnumerator.Reset
void GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeInOutController/<Fade>d__15.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeInOutController::$Fade$d__15::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FadeInOutController::$Fade$d__15::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::$Fade$d__15::*)(int)>(&FadeInOutController::$Fade$d__15::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController::$Fade$d__15*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::$Fade$d__15::*)(int)>(&FadeInOutController::$Fade$d__15::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController::$Fade$d__15*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FadeInOutController::$Fade$d__15::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::$Fade$d__15::*)()>(&FadeInOutController::$Fade$d__15::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController::$Fade$d__15*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOutController::$Fade$d__15::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FadeInOutController::$Fade$d__15::*)()>(&FadeInOutController::$Fade$d__15::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController::$Fade$d__15*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOutController::$Fade$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FadeInOutController::$Fade$d__15::*)()>(&FadeInOutController::$Fade$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController::$Fade$d__15*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeInOutController::$Fade$d__15::*)()>(&FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController::$Fade$d__15*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FadeInOutController::$Fade$d__15::*)()>(&FadeInOutController::$Fade$d__15::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeInOutController::$Fade$d__15*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FileCompressionHelper
#include "GlobalNamespace/FileCompressionHelper.hpp"
// Including type: FileCompressionHelper/<>c__DisplayClass0_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass0_0.hpp"
// Including type: FileCompressionHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileCompressionHelper.CreateZipFromDirectoryAsync
void GlobalNamespace::FileCompressionHelper::CreateZipFromDirectoryAsync(::Il2CppString* sourceDirectoryName, ::Il2CppString* destinationArchiveFileName, System::Action_1<bool>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::CreateZipFromDirectoryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "CreateZipFromDirectoryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceDirectoryName), ::il2cpp_utils::ExtractType(destinationArchiveFileName), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sourceDirectoryName, destinationArchiveFileName, finishCallback);
}
// Autogenerated method: FileCompressionHelper.ExtractZipToDirectoryAsync
void GlobalNamespace::FileCompressionHelper::ExtractZipToDirectoryAsync(::Il2CppString* sourceArchiveFileName, ::Il2CppString* destinationDirectoryName, System::Action_1<bool>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::ExtractZipToDirectoryAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "ExtractZipToDirectoryAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceArchiveFileName), ::il2cpp_utils::ExtractType(destinationDirectoryName), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sourceArchiveFileName, destinationDirectoryName, finishCallback);
}
// Autogenerated method: FileCompressionHelper.CreateZipFromDirectory
bool GlobalNamespace::FileCompressionHelper::CreateZipFromDirectory(::Il2CppString* sourceDirectoryName, ::Il2CppString* destinationArchiveFileName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::CreateZipFromDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "CreateZipFromDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceDirectoryName), ::il2cpp_utils::ExtractType(destinationArchiveFileName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sourceDirectoryName, destinationArchiveFileName);
}
// Autogenerated method: FileCompressionHelper.ExtractZipToDirectory
bool GlobalNamespace::FileCompressionHelper::ExtractZipToDirectory(::Il2CppString* sourceArchiveFileName, ::Il2CppString* destinationDirectoryName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::ExtractZipToDirectory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "FileCompressionHelper", "ExtractZipToDirectory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceArchiveFileName), ::il2cpp_utils::ExtractType(destinationDirectoryName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sourceArchiveFileName, destinationDirectoryName);
}
// Writing MetadataGetter for method: FileCompressionHelper::CreateZipFromDirectoryAsync
// Il2CppName: CreateZipFromDirectoryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, System::Action_1<bool>*)>(&FileCompressionHelper::CreateZipFromDirectoryAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper*), "CreateZipFromDirectoryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::ExtractZipToDirectoryAsync
// Il2CppName: ExtractZipToDirectoryAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, System::Action_1<bool>*)>(&FileCompressionHelper::ExtractZipToDirectoryAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper*), "ExtractZipToDirectoryAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::CreateZipFromDirectory
// Il2CppName: CreateZipFromDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&FileCompressionHelper::CreateZipFromDirectory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper*), "CreateZipFromDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::ExtractZipToDirectory
// Il2CppName: ExtractZipToDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&FileCompressionHelper::ExtractZipToDirectory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper*), "ExtractZipToDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::*)()>(&FileCompressionHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::*)()>(&FileCompressionHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FileCompressionHelper/<>c__DisplayClass0_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass0_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass0_0.<CreateZipFromDirectoryAsync>b__0
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::<CreateZipFromDirectoryAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateZipFromDirectoryAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass0_0.<CreateZipFromDirectoryAsync>b__1
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::$$c__DisplayClass0_0::<CreateZipFromDirectoryAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateZipFromDirectoryAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__0
// Il2CppName: <CreateZipFromDirectoryAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass0_0::*)()>(&FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass0_0*), "<CreateZipFromDirectoryAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__1
// Il2CppName: <CreateZipFromDirectoryAsync>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass0_0::*)()>(&FileCompressionHelper::$$c__DisplayClass0_0::$CreateZipFromDirectoryAsync$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass0_0*), "<CreateZipFromDirectoryAsync>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::$$c__DisplayClass0_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass0_0::*)()>(&FileCompressionHelper::$$c__DisplayClass0_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass0_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass0_0::*)()>(&FileCompressionHelper::$$c__DisplayClass0_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass0_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FileCompressionHelper/<>c__DisplayClass1_0
#include "GlobalNamespace/FileCompressionHelper_--c__DisplayClass1_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass1_0.<ExtractZipToDirectoryAsync>b__0
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::<ExtractZipToDirectoryAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExtractZipToDirectoryAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FileCompressionHelper/<>c__DisplayClass1_0.<ExtractZipToDirectoryAsync>b__1
void GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileCompressionHelper::$$c__DisplayClass1_0::<ExtractZipToDirectoryAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ExtractZipToDirectoryAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__0
// Il2CppName: <ExtractZipToDirectoryAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass1_0::*)()>(&FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass1_0*), "<ExtractZipToDirectoryAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__1
// Il2CppName: <ExtractZipToDirectoryAsync>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass1_0::*)()>(&FileCompressionHelper::$$c__DisplayClass1_0::$ExtractZipToDirectoryAsync$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass1_0*), "<ExtractZipToDirectoryAsync>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileCompressionHelper::$$c__DisplayClass1_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass1_0::*)()>(&FileCompressionHelper::$$c__DisplayClass1_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass1_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileCompressionHelper::$$c__DisplayClass1_0::*)()>(&FileCompressionHelper::$$c__DisplayClass1_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileCompressionHelper::$$c__DisplayClass1_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlexyFollow
#include "GlobalNamespace/FlexyFollow.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlexyFollow.Start
void GlobalNamespace::FlexyFollow::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlexyFollow::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlexyFollow.LateUpdate
void GlobalNamespace::FlexyFollow::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlexyFollow::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FlexyFollow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlexyFollow::*)()>(&FlexyFollow::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlexyFollow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlexyFollow::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlexyFollow::*)()>(&FlexyFollow::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlexyFollow*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlexyFollow::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlexyFollow::*)()>(&FlexyFollow::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlexyFollow*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlexyFollow::*)()>(&FlexyFollow::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlexyFollow*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlexyFollowAndRotate
#include "GlobalNamespace/FlexyFollowAndRotate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlexyFollowAndRotate.Update
void GlobalNamespace::FlexyFollowAndRotate::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlexyFollowAndRotate::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FlexyFollowAndRotate::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlexyFollowAndRotate::*)()>(&FlexyFollowAndRotate::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlexyFollowAndRotate*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlexyFollowAndRotate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlexyFollowAndRotate::*)()>(&FlexyFollowAndRotate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlexyFollowAndRotate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlexyFollowAndRotate::*)()>(&FlexyFollowAndRotate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlexyFollowAndRotate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FollowLocalRotation
#include "GlobalNamespace/FollowLocalRotation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FollowLocalRotation.Awake
void GlobalNamespace::FollowLocalRotation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FollowLocalRotation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FollowLocalRotation.Update
void GlobalNamespace::FollowLocalRotation::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FollowLocalRotation::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FollowLocalRotation::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FollowLocalRotation::*)()>(&FollowLocalRotation::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FollowLocalRotation*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FollowLocalRotation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FollowLocalRotation::*)()>(&FollowLocalRotation::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FollowLocalRotation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FollowLocalRotation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FollowLocalRotation::*)()>(&FollowLocalRotation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FollowLocalRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FollowLocalRotation::*)()>(&FollowLocalRotation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FollowLocalRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FrameCounter
#include "GlobalNamespace/FrameCounter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FrameCounter.Update
void GlobalNamespace::FrameCounter::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FrameCounter::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FrameCounter.OnDestroy
void GlobalNamespace::FrameCounter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FrameCounter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FrameCounter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FrameCounter::*)()>(&FrameCounter::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameCounter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameCounter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FrameCounter::*)()>(&FrameCounter::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameCounter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FrameCounter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FrameCounter::*)()>(&FrameCounter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FrameCounter::*)()>(&FrameCounter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FrameCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GeometryTools
#include "GlobalNamespace/GeometryTools.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GeometryTools.ThreePointsToBox
bool GlobalNamespace::GeometryTools::ThreePointsToBox(UnityEngine::Vector3 p0, UnityEngine::Vector3 p1, UnityEngine::Vector3 p2, UnityEngine::Vector3& center, UnityEngine::Vector3& halfSize, UnityEngine::Quaternion& orientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GeometryTools::ThreePointsToBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GeometryTools", "ThreePointsToBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, p0, p1, p2, center, halfSize, orientation);
}
// Writing MetadataGetter for method: GeometryTools::ThreePointsToBox
// Il2CppName: ThreePointsToBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&GeometryTools::ThreePointsToBox)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GeometryTools*), "ThreePointsToBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: GeometryTools::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GeometryTools::*)()>(&GeometryTools::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GeometryTools*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GeometryTools::*)()>(&GeometryTools::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GeometryTools*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMAsyncRequest
#include "GlobalNamespace/HMAsyncRequest.hpp"
// Including type: HMAsyncRequest/CancelHander
#include "GlobalNamespace/HMAsyncRequest_CancelHander.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMAsyncRequest.get_CancelHandler
GlobalNamespace::HMAsyncRequest::CancelHander* GlobalNamespace::HMAsyncRequest::get_CancelHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAsyncRequest::get_CancelHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CancelHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HMAsyncRequest::CancelHander*, false>(this, ___internal__method);
}
// Autogenerated method: HMAsyncRequest.set_CancelHandler
void GlobalNamespace::HMAsyncRequest::set_CancelHandler(GlobalNamespace::HMAsyncRequest::CancelHander* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAsyncRequest::set_CancelHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CancelHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HMAsyncRequest.get_cancelled
bool GlobalNamespace::HMAsyncRequest::get_cancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAsyncRequest::get_cancelled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cancelled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMAsyncRequest.Cancel
void GlobalNamespace::HMAsyncRequest::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAsyncRequest::Cancel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HMAsyncRequest::get_CancelHandler
// Il2CppName: get_CancelHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::HMAsyncRequest::CancelHander* (HMAsyncRequest::*)()>(&HMAsyncRequest::get_CancelHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest*), "get_CancelHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMAsyncRequest::set_CancelHandler
// Il2CppName: set_CancelHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::*)(GlobalNamespace::HMAsyncRequest::CancelHander*)>(&HMAsyncRequest::set_CancelHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest*), "set_CancelHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HMAsyncRequest::CancelHander*>()});
  }
};
// Writing MetadataGetter for method: HMAsyncRequest::get_cancelled
// Il2CppName: get_cancelled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMAsyncRequest::*)()>(&HMAsyncRequest::get_cancelled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest*), "get_cancelled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMAsyncRequest::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::*)()>(&HMAsyncRequest::Cancel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMAsyncRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::*)()>(&HMAsyncRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::*)()>(&HMAsyncRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAsyncRequest/CancelHander
#include "GlobalNamespace/HMAsyncRequest_CancelHander.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMAsyncRequest/CancelHander.Invoke
void GlobalNamespace::HMAsyncRequest::CancelHander::Invoke(GlobalNamespace::HMAsyncRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAsyncRequest::CancelHander::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: HMAsyncRequest/CancelHander.BeginInvoke
System::IAsyncResult* GlobalNamespace::HMAsyncRequest::CancelHander::BeginInvoke(GlobalNamespace::HMAsyncRequest* request, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAsyncRequest::CancelHander::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, request, callback, object);
}
// Autogenerated method: HMAsyncRequest/CancelHander.EndInvoke
void GlobalNamespace::HMAsyncRequest::CancelHander::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAsyncRequest::CancelHander::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: HMAsyncRequest::CancelHander::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::CancelHander::*)(::Il2CppObject*, System::IntPtr)>(&HMAsyncRequest::CancelHander::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest::CancelHander*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::CancelHander::*)(::Il2CppObject*, System::IntPtr)>(&HMAsyncRequest::CancelHander::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest::CancelHander*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: HMAsyncRequest::CancelHander::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::CancelHander::*)(GlobalNamespace::HMAsyncRequest*)>(&HMAsyncRequest::CancelHander::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest::CancelHander*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HMAsyncRequest*>()});
  }
};
// Writing MetadataGetter for method: HMAsyncRequest::CancelHander::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (HMAsyncRequest::CancelHander::*)(GlobalNamespace::HMAsyncRequest*, System::AsyncCallback*, ::Il2CppObject*)>(&HMAsyncRequest::CancelHander::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest::CancelHander*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HMAsyncRequest*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: HMAsyncRequest::CancelHander::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAsyncRequest::CancelHander::*)(System::IAsyncResult*)>(&HMAsyncRequest::CancelHander::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAsyncRequest::CancelHander*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAutoincrementedRequestId
#include "GlobalNamespace/HMAutoincrementedRequestId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.UInt64 _nextRequestId
uint64_t GlobalNamespace::HMAutoincrementedRequestId::_get__nextRequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAutoincrementedRequestId::_get__nextRequestId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("", "HMAutoincrementedRequestId", "_nextRequestId"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt64 _nextRequestId
void GlobalNamespace::HMAutoincrementedRequestId::_set__nextRequestId(uint64_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAutoincrementedRequestId::_set__nextRequestId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HMAutoincrementedRequestId", "_nextRequestId", value));
}
// Autogenerated method: HMAutoincrementedRequestId.get_RequestId
uint64_t GlobalNamespace::HMAutoincrementedRequestId::get_RequestId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAutoincrementedRequestId::get_RequestId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RequestId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: HMAutoincrementedRequestId.Equals
bool GlobalNamespace::HMAutoincrementedRequestId::Equals(GlobalNamespace::HMAutoincrementedRequestId* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAutoincrementedRequestId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: HMAutoincrementedRequestId..cctor
void GlobalNamespace::HMAutoincrementedRequestId::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAutoincrementedRequestId::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HMAutoincrementedRequestId", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HMAutoincrementedRequestId.Equals
bool GlobalNamespace::HMAutoincrementedRequestId::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAutoincrementedRequestId::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: HMAutoincrementedRequestId.GetHashCode
int GlobalNamespace::HMAutoincrementedRequestId::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMAutoincrementedRequestId::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HMAutoincrementedRequestId::get_RequestId
// Il2CppName: get_RequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (HMAutoincrementedRequestId::*)()>(&HMAutoincrementedRequestId::get_RequestId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAutoincrementedRequestId*), "get_RequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMAutoincrementedRequestId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMAutoincrementedRequestId::*)(GlobalNamespace::HMAutoincrementedRequestId*)>(&HMAutoincrementedRequestId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAutoincrementedRequestId*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HMAutoincrementedRequestId*>()});
  }
};
// Writing MetadataGetter for method: HMAutoincrementedRequestId::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HMAutoincrementedRequestId::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAutoincrementedRequestId*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMAutoincrementedRequestId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAutoincrementedRequestId::*)()>(&HMAutoincrementedRequestId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAutoincrementedRequestId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMAutoincrementedRequestId::*)()>(&HMAutoincrementedRequestId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAutoincrementedRequestId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMAutoincrementedRequestId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMAutoincrementedRequestId::*)(::Il2CppObject*)>(&HMAutoincrementedRequestId::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAutoincrementedRequestId*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: HMAutoincrementedRequestId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HMAutoincrementedRequestId::*)()>(&HMAutoincrementedRequestId::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMAutoincrementedRequestId*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HorizontalCameraFov
#include "GlobalNamespace/HorizontalCameraFov.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HorizontalCameraFov.Awake
void GlobalNamespace::HorizontalCameraFov::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HorizontalCameraFov::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HorizontalCameraFov::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HorizontalCameraFov::*)()>(&HorizontalCameraFov::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HorizontalCameraFov*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HorizontalCameraFov::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HorizontalCameraFov::*)()>(&HorizontalCameraFov::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HorizontalCameraFov*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HorizontalCameraFov::*)()>(&HorizontalCameraFov::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HorizontalCameraFov*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InstantiatePrefab
#include "GlobalNamespace/InstantiatePrefab.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InstantiatePrefab.Awake
void GlobalNamespace::InstantiatePrefab::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InstantiatePrefab::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InstantiatePrefab::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantiatePrefab::*)()>(&InstantiatePrefab::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiatePrefab*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstantiatePrefab::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantiatePrefab::*)()>(&InstantiatePrefab::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiatePrefab*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantiatePrefab::*)()>(&InstantiatePrefab::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantiatePrefab*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IntToRoman
#include "GlobalNamespace/IntToRoman.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IntToRoman.Roman
::Il2CppString* GlobalNamespace::IntToRoman::Roman(int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IntToRoman::Roman");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "IntToRoman", "Roman", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, number);
}
// Writing MetadataGetter for method: IntToRoman::Roman
// Il2CppName: Roman
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int)>(&IntToRoman::Roman)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntToRoman*), "Roman", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LineTriangleIntersection
#include "GlobalNamespace/LineTriangleIntersection.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LineTriangleIntersection.Intersects
bool GlobalNamespace::LineTriangleIntersection::Intersects(UnityEngine::Ray ray, UnityEngine::Vector3 p0, UnityEngine::Vector3 p1, UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LineTriangleIntersection::Intersects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LineTriangleIntersection", "Intersects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ray, p0, p1, p2);
}
// Writing MetadataGetter for method: LineTriangleIntersection::Intersects
// Il2CppName: Intersects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Ray, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&LineTriangleIntersection::Intersects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineTriangleIntersection*), "Intersects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Ray>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: LineTriangleIntersection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineTriangleIntersection::*)()>(&LineTriangleIntersection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineTriangleIntersection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LineTriangleIntersection::*)()>(&LineTriangleIntersection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LineTriangleIntersection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MarkableUIButton
#include "GlobalNamespace/MarkableUIButton.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MarkableUIButton.get_marked
bool GlobalNamespace::MarkableUIButton::get_marked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MarkableUIButton::get_marked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_marked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MarkableUIButton.set_marked
void GlobalNamespace::MarkableUIButton::set_marked(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MarkableUIButton::set_marked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_marked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MarkableUIButton.Awake
void GlobalNamespace::MarkableUIButton::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MarkableUIButton::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MarkableUIButton.ToggleMarked
void GlobalNamespace::MarkableUIButton::ToggleMarked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MarkableUIButton::ToggleMarked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToggleMarked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MarkableUIButton::get_marked
// Il2CppName: get_marked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MarkableUIButton::*)()>(&MarkableUIButton::get_marked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkableUIButton*), "get_marked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkableUIButton::set_marked
// Il2CppName: set_marked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkableUIButton::*)(bool)>(&MarkableUIButton::set_marked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkableUIButton*), "set_marked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MarkableUIButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkableUIButton::*)()>(&MarkableUIButton::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkableUIButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkableUIButton::ToggleMarked
// Il2CppName: ToggleMarked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkableUIButton::*)()>(&MarkableUIButton::ToggleMarked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkableUIButton*), "ToggleMarked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkableUIButton::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkableUIButton::*)()>(&MarkableUIButton::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkableUIButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkableUIButton::*)()>(&MarkableUIButton::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkableUIButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MonobehaviourCallbacksOrderDebuger
#include "GlobalNamespace/MonobehaviourCallbacksOrderDebuger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.Awake
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.OnEnable
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MonobehaviourCallbacksOrderDebuger::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MonobehaviourCallbacksOrderDebuger.Start
void GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MonobehaviourCallbacksOrderDebuger::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonobehaviourCallbacksOrderDebuger::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonobehaviourCallbacksOrderDebuger::*)()>(&MonobehaviourCallbacksOrderDebuger::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonobehaviourCallbacksOrderDebuger*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonobehaviourCallbacksOrderDebuger::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonobehaviourCallbacksOrderDebuger::*)()>(&MonobehaviourCallbacksOrderDebuger::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonobehaviourCallbacksOrderDebuger*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonobehaviourCallbacksOrderDebuger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonobehaviourCallbacksOrderDebuger::*)()>(&MonobehaviourCallbacksOrderDebuger::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonobehaviourCallbacksOrderDebuger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonobehaviourCallbacksOrderDebuger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonobehaviourCallbacksOrderDebuger::*)()>(&MonobehaviourCallbacksOrderDebuger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonobehaviourCallbacksOrderDebuger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonobehaviourCallbacksOrderDebuger::*)()>(&MonobehaviourCallbacksOrderDebuger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonobehaviourCallbacksOrderDebuger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NumberTag
#include "GlobalNamespace/NumberTag.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NumberTag::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NumberTag::*)()>(&NumberTag::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NumberTag*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NumberTag::*)()>(&NumberTag::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NumberTag*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PerlinNoise
#include "GlobalNamespace/PerlinNoise.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE3590
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] permutation
::Array<int>* GlobalNamespace::PerlinNoise::_get_permutation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::_get_permutation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<int>*>("", "PerlinNoise", "permutation"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] permutation
void GlobalNamespace::PerlinNoise::_set_permutation(::Array<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::_set_permutation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PerlinNoise", "permutation", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE35A0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] p
::Array<int>* GlobalNamespace::PerlinNoise::_get_p() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::_get_p");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<int>*>("", "PerlinNoise", "p"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] p
void GlobalNamespace::PerlinNoise::_set_p(::Array<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::_set_p");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PerlinNoise", "p", value));
}
// Autogenerated method: PerlinNoise..cctor
void GlobalNamespace::PerlinNoise::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PerlinNoise.OctavePerlin3D
float GlobalNamespace::PerlinNoise::OctavePerlin3D(float x, float y, float z, int octaves, float persistence, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::OctavePerlin3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "OctavePerlin3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(octaves), ::il2cpp_utils::ExtractType(persistence), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, y, z, octaves, persistence, repeat);
}
// Autogenerated method: PerlinNoise.Perlin3D
float GlobalNamespace::PerlinNoise::Perlin3D(float x, float y, float z, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::Perlin3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Perlin3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, y, z, repeat);
}
// Autogenerated method: PerlinNoise.Inc
int GlobalNamespace::PerlinNoise::Inc(int num, int repeat) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::Inc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Inc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(num), ::il2cpp_utils::ExtractType(repeat)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, num, repeat);
}
// Autogenerated method: PerlinNoise.Grad3D
float GlobalNamespace::PerlinNoise::Grad3D(int hash, float x, float y, float z) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::Grad3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Grad3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hash), ::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hash, x, y, z);
}
// Autogenerated method: PerlinNoise.Fade
float GlobalNamespace::PerlinNoise::Fade(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::Fade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Fade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t);
}
// Autogenerated method: PerlinNoise.Lerp
float GlobalNamespace::PerlinNoise::Lerp(float a, float b, float x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PerlinNoise::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PerlinNoise", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, x);
}
// Writing MetadataGetter for method: PerlinNoise::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PerlinNoise::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PerlinNoise::OctavePerlin3D
// Il2CppName: OctavePerlin3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, int, float, int)>(&PerlinNoise::OctavePerlin3D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), "OctavePerlin3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PerlinNoise::Perlin3D
// Il2CppName: Perlin3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, int)>(&PerlinNoise::Perlin3D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), "Perlin3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PerlinNoise::Inc
// Il2CppName: Inc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&PerlinNoise::Inc)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), "Inc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PerlinNoise::Grad3D
// Il2CppName: Grad3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int, float, float, float)>(&PerlinNoise::Grad3D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), "Grad3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PerlinNoise::Fade
// Il2CppName: Fade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&PerlinNoise::Fade)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), "Fade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PerlinNoise::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&PerlinNoise::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PerlinNoise::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PerlinNoise::*)()>(&PerlinNoise::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PerlinNoise::*)()>(&PerlinNoise::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PerlinNoise*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PersistentScriptableObject.OnEnable
void GlobalNamespace::PersistentScriptableObject::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PersistentScriptableObject::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PersistentScriptableObject::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PersistentScriptableObject::*)()>(&PersistentScriptableObject::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PersistentScriptableObject*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PersistentScriptableObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PersistentScriptableObject::*)()>(&PersistentScriptableObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PersistentScriptableObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PersistentScriptableObject::*)()>(&PersistentScriptableObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PersistentScriptableObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PhysicsFollow
#include "GlobalNamespace/PhysicsFollow.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody2D
#include "UnityEngine/Rigidbody2D.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PhysicsFollow.Start
void GlobalNamespace::PhysicsFollow::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PhysicsFollow::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PhysicsFollow.FixedUpdate
void GlobalNamespace::PhysicsFollow::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PhysicsFollow::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PhysicsFollow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsFollow::*)()>(&PhysicsFollow::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsFollow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PhysicsFollow::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsFollow::*)()>(&PhysicsFollow::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsFollow*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PhysicsFollow::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsFollow::*)()>(&PhysicsFollow::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsFollow*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PhysicsFollow::*)()>(&PhysicsFollow::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PhysicsFollow*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RandomAnimatorStartTime
#include "GlobalNamespace/RandomAnimatorStartTime.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RandomAnimatorStartTime.Start
void GlobalNamespace::RandomAnimatorStartTime::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RandomAnimatorStartTime::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RandomAnimatorStartTime::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomAnimatorStartTime::*)()>(&RandomAnimatorStartTime::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomAnimatorStartTime*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RandomAnimatorStartTime::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomAnimatorStartTime::*)()>(&RandomAnimatorStartTime::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomAnimatorStartTime*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RandomAnimatorStartTime::*)()>(&RandomAnimatorStartTime::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RandomAnimatorStartTime*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Ray2DExtensions
#include "GlobalNamespace/Ray2DExtensions.hpp"
// Including type: UnityEngine.Ray2D
#include "UnityEngine/Ray2D.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Ray2DExtensions.CircleIntersections
int GlobalNamespace::Ray2DExtensions::CircleIntersections(UnityEngine::Ray2D ray, UnityEngine::Vector2 circleCenter, float radius, ::Array<float>* distances) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Ray2DExtensions::CircleIntersections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Ray2DExtensions", "CircleIntersections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ray), ::il2cpp_utils::ExtractType(circleCenter), ::il2cpp_utils::ExtractType(radius), ::il2cpp_utils::ExtractType(distances)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ray, circleCenter, radius, distances);
}
// Writing MetadataGetter for method: Ray2DExtensions::CircleIntersections
// Il2CppName: CircleIntersections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Ray2D, UnityEngine::Vector2, float, ::Array<float>*)>(&Ray2DExtensions::CircleIntersections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray2DExtensions*), "CircleIntersections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Ray2D>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResetPlayerPrefsOnButton
#include "GlobalNamespace/ResetPlayerPrefsOnButton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResetPlayerPrefsOnButton.Update
void GlobalNamespace::ResetPlayerPrefsOnButton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResetPlayerPrefsOnButton::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ResetPlayerPrefsOnButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetPlayerPrefsOnButton::*)()>(&ResetPlayerPrefsOnButton::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetPlayerPrefsOnButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResetPlayerPrefsOnButton::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetPlayerPrefsOnButton::*)()>(&ResetPlayerPrefsOnButton::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetPlayerPrefsOnButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetPlayerPrefsOnButton::*)()>(&ResetPlayerPrefsOnButton::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetPlayerPrefsOnButton*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Rotate
#include "GlobalNamespace/Rotate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Rotate.Awake
void GlobalNamespace::Rotate::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Rotate::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.OnBecameVisible
void GlobalNamespace::Rotate::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Rotate::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.OnBecameInvisible
void GlobalNamespace::Rotate::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Rotate::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.Update
void GlobalNamespace::Rotate::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Rotate::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Rotate.Randomize
void GlobalNamespace::Rotate::Randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Rotate::Randomize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Randomize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Rotate::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rotate::*)()>(&Rotate::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Rotate*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Rotate::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rotate::*)()>(&Rotate::OnBecameVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Rotate*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Rotate::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rotate::*)()>(&Rotate::OnBecameInvisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Rotate*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Rotate::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rotate::*)()>(&Rotate::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Rotate*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Rotate::Randomize
// Il2CppName: Randomize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rotate::*)()>(&Rotate::Randomize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Rotate*), "Randomize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Rotate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rotate::*)()>(&Rotate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Rotate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rotate::*)()>(&Rotate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Rotate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneLoadedCallbacksOrderDebug
#include "GlobalNamespace/SceneLoadedCallbacksOrderDebug.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
// Including type: UnityEngine.SceneManagement.LoadSceneMode
#include "UnityEngine/SceneManagement/LoadSceneMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SceneLoadedCallbacksOrderDebug.Awake
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneLoadedCallbacksOrderDebug::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnEnable
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnSceneLoaded
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnSceneLoaded(UnityEngine::SceneManagement::Scene scene, UnityEngine::SceneManagement::LoadSceneMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnSceneLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSceneLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene), ::il2cpp_utils::ExtractType(mode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scene, mode);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.Start
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneLoadedCallbacksOrderDebug::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneLoadedCallbacksOrderDebug.OnDisable
void GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneLoadedCallbacksOrderDebug::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SceneLoadedCallbacksOrderDebug::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneLoadedCallbacksOrderDebug::*)()>(&SceneLoadedCallbacksOrderDebug::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneLoadedCallbacksOrderDebug*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneLoadedCallbacksOrderDebug::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneLoadedCallbacksOrderDebug::*)()>(&SceneLoadedCallbacksOrderDebug::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneLoadedCallbacksOrderDebug*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneLoadedCallbacksOrderDebug::OnSceneLoaded
// Il2CppName: OnSceneLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneLoadedCallbacksOrderDebug::*)(UnityEngine::SceneManagement::Scene, UnityEngine::SceneManagement::LoadSceneMode)>(&SceneLoadedCallbacksOrderDebug::OnSceneLoaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneLoadedCallbacksOrderDebug*), "OnSceneLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::Scene>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::LoadSceneMode>()});
  }
};
// Writing MetadataGetter for method: SceneLoadedCallbacksOrderDebug::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneLoadedCallbacksOrderDebug::*)()>(&SceneLoadedCallbacksOrderDebug::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneLoadedCallbacksOrderDebug*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneLoadedCallbacksOrderDebug::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneLoadedCallbacksOrderDebug::*)()>(&SceneLoadedCallbacksOrderDebug::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneLoadedCallbacksOrderDebug*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneLoadedCallbacksOrderDebug::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneLoadedCallbacksOrderDebug::*)()>(&SceneLoadedCallbacksOrderDebug::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneLoadedCallbacksOrderDebug*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneLoadedCallbacksOrderDebug::*)()>(&SceneLoadedCallbacksOrderDebug::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneLoadedCallbacksOrderDebug*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ScreenshotRecorder
#include "GlobalNamespace/ScreenshotRecorder.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScreenshotRecorder.OnEnable
void GlobalNamespace::ScreenshotRecorder::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.OnDisable
void GlobalNamespace::ScreenshotRecorder::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.LateUpdate
void GlobalNamespace::ScreenshotRecorder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.OnApplicationFocus
void GlobalNamespace::ScreenshotRecorder::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: ScreenshotRecorder.SaveCameraScreenshot
void GlobalNamespace::ScreenshotRecorder::SaveCameraScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::SaveCameraScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveCameraScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScreenshotRecorder.SaveTextureScreenshot
void GlobalNamespace::ScreenshotRecorder::SaveTextureScreenshot(UnityEngine::Texture2D* tex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::SaveTextureScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveTextureScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tex);
}
// Autogenerated method: ScreenshotRecorder.ConvertRenderTexture
UnityEngine::Texture2D* GlobalNamespace::ScreenshotRecorder::ConvertRenderTexture(UnityEngine::RenderTexture* renderTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::ConvertRenderTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertRenderTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderTexture)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method, renderTexture);
}
// Writing MetadataGetter for method: ScreenshotRecorder::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)()>(&ScreenshotRecorder::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenshotRecorder::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)()>(&ScreenshotRecorder::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenshotRecorder::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)()>(&ScreenshotRecorder::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenshotRecorder::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)(bool)>(&ScreenshotRecorder::OnApplicationFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ScreenshotRecorder::SaveCameraScreenshot
// Il2CppName: SaveCameraScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)()>(&ScreenshotRecorder::SaveCameraScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), "SaveCameraScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScreenshotRecorder::SaveTextureScreenshot
// Il2CppName: SaveTextureScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)(UnityEngine::Texture2D*)>(&ScreenshotRecorder::SaveTextureScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), "SaveTextureScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture2D*>()});
  }
};
// Writing MetadataGetter for method: ScreenshotRecorder::ConvertRenderTexture
// Il2CppName: ConvertRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (ScreenshotRecorder::*)(UnityEngine::RenderTexture*)>(&ScreenshotRecorder::ConvertRenderTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), "ConvertRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: ScreenshotRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)()>(&ScreenshotRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScreenshotRecorder::*)()>(&ScreenshotRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScreenshotRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScreenshotRecorder/RecordingType
#include "GlobalNamespace/ScreenshotRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Sequence
GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Sequence(GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Stereo360Sequence
GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Stereo360Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Stereo360Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Stereo360Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Stereo360Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Stereo360Sequence(GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Stereo360Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Stereo360Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Mono360Sequence
GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Mono360Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Mono360Sequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Mono360Sequence"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Mono360Sequence
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Mono360Sequence(GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Mono360Sequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Mono360Sequence", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType F10ForScreenshot
GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_F10ForScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_get_F10ForScreenshot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "F10ForScreenshot"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType F10ForScreenshot
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_F10ForScreenshot(GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_set_F10ForScreenshot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "F10ForScreenshot", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType Interval
GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Interval() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_get_Interval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "Interval"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType Interval
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Interval(GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_set_Interval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "Interval", value));
}
// Autogenerated static field getter
// Get static field: static public ScreenshotRecorder/RecordingType ScreenshotOnPause
GlobalNamespace::ScreenshotRecorder::RecordingType GlobalNamespace::ScreenshotRecorder::RecordingType::_get_ScreenshotOnPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_get_ScreenshotOnPause");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScreenshotRecorder::RecordingType>("", "ScreenshotRecorder/RecordingType", "ScreenshotOnPause"));
}
// Autogenerated static field setter
// Set static field: static public ScreenshotRecorder/RecordingType ScreenshotOnPause
void GlobalNamespace::ScreenshotRecorder::RecordingType::_set_ScreenshotOnPause(GlobalNamespace::ScreenshotRecorder::RecordingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScreenshotRecorder::RecordingType::_set_ScreenshotOnPause");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScreenshotRecorder/RecordingType", "ScreenshotOnPause", value));
}
