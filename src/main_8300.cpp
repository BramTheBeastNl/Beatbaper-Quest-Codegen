// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Net.Http.Headers.Token/Type
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type Error
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type Error
void System::Net::Http::Headers::Token::Type::_set_Error(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type End
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "End"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type End
void System::Net::Http::Headers::Token::Type::_set_End(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "End", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type Token
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_Token");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "Token"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type Token
void System::Net::Http::Headers::Token::Type::_set_Token(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_Token");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "Token", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type QuotedString
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_QuotedString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_QuotedString");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "QuotedString"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type QuotedString
void System::Net::Http::Headers::Token::Type::_set_QuotedString(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_QuotedString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "QuotedString", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type SeparatorEqual
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_SeparatorEqual() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_SeparatorEqual");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "SeparatorEqual"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type SeparatorEqual
void System::Net::Http::Headers::Token::Type::_set_SeparatorEqual(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_SeparatorEqual");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "SeparatorEqual", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type SeparatorSemicolon
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_SeparatorSemicolon() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_SeparatorSemicolon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "SeparatorSemicolon"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type SeparatorSemicolon
void System::Net::Http::Headers::Token::Type::_set_SeparatorSemicolon(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_SeparatorSemicolon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "SeparatorSemicolon", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type SeparatorSlash
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_SeparatorSlash() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_SeparatorSlash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "SeparatorSlash"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type SeparatorSlash
void System::Net::Http::Headers::Token::Type::_set_SeparatorSlash(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_SeparatorSlash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "SeparatorSlash", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type SeparatorDash
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_SeparatorDash() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_SeparatorDash");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "SeparatorDash"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type SeparatorDash
void System::Net::Http::Headers::Token::Type::_set_SeparatorDash(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_SeparatorDash");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "SeparatorDash", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type SeparatorComma
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_SeparatorComma() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_SeparatorComma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "SeparatorComma"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type SeparatorComma
void System::Net::Http::Headers::Token::Type::_set_SeparatorComma(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_SeparatorComma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "SeparatorComma", value));
}
// Autogenerated static field getter
// Get static field: static public System.Net.Http.Headers.Token/Type OpenParens
System::Net::Http::Headers::Token::Type System::Net::Http::Headers::Token::Type::_get_OpenParens() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_get_OpenParens");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Token::Type>("System.Net.Http.Headers", "Token/Type", "OpenParens"));
}
// Autogenerated static field setter
// Set static field: static public System.Net.Http.Headers.Token/Type OpenParens
void System::Net::Http::Headers::Token::Type::_set_OpenParens(System::Net::Http::Headers::Token::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Token::Type::_set_OpenParens");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Token/Type", "OpenParens", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.DateTimeOffset
#include "System/DateTimeOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Boolean[] token_chars
::Array<bool>* System::Net::Http::Headers::Lexer::_get_token_chars() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::_get_token_chars");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<bool>*>("System.Net.Http.Headers", "Lexer", "token_chars"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Boolean[] token_chars
void System::Net::Http::Headers::Lexer::_set_token_chars(::Array<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::_set_token_chars");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Lexer", "token_chars", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 last_token_char
int System::Net::Http::Headers::Lexer::_get_last_token_char() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::_get_last_token_char");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Net.Http.Headers", "Lexer", "last_token_char"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 last_token_char
void System::Net::Http::Headers::Lexer::_set_last_token_char(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::_set_last_token_char");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Lexer", "last_token_char", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String[] dt_formats
::Array<::Il2CppString*>* System::Net::Http::Headers::Lexer::_get_dt_formats() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::_get_dt_formats");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("System.Net.Http.Headers", "Lexer", "dt_formats"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String[] dt_formats
void System::Net::Http::Headers::Lexer::_set_dt_formats(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::_set_dt_formats");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Lexer", "dt_formats", value));
}
// Autogenerated method: System.Net.Http.Headers.Lexer.get_Position
int System::Net::Http::Headers::Lexer::get_Position() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::get_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.set_Position
void System::Net::Http::Headers::Lexer::set_Position(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::set_Position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.GetStringValue
::Il2CppString* System::Net::Http::Headers::Lexer::GetStringValue(System::Net::Http::Headers::Token token) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::GetStringValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, token);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.GetStringValue
::Il2CppString* System::Net::Http::Headers::Lexer::GetStringValue(System::Net::Http::Headers::Token start, System::Net::Http::Headers::Token end) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::GetStringValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, start, end);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.GetQuotedStringValue
::Il2CppString* System::Net::Http::Headers::Lexer::GetQuotedStringValue(System::Net::Http::Headers::Token start) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::GetQuotedStringValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetQuotedStringValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, start);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.GetRemainingStringValue
::Il2CppString* System::Net::Http::Headers::Lexer::GetRemainingStringValue(int position) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::GetRemainingStringValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRemainingStringValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, position);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.IsStarStringValue
bool System::Net::Http::Headers::Lexer::IsStarStringValue(System::Net::Http::Headers::Token token) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::IsStarStringValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsStarStringValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, token);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.TryGetNumericValue
bool System::Net::Http::Headers::Lexer::TryGetNumericValue(System::Net::Http::Headers::Token token, int& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::TryGetNumericValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetNumericValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, token, value);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.TryGetNumericValue
bool System::Net::Http::Headers::Lexer::TryGetNumericValue(System::Net::Http::Headers::Token token, int64_t& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::TryGetNumericValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetNumericValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, token, value);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.TryGetTimeSpanValue
System::Nullable_1<System::TimeSpan> System::Net::Http::Headers::Lexer::TryGetTimeSpanValue(System::Net::Http::Headers::Token token) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::TryGetTimeSpanValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetTimeSpanValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::TimeSpan>, false>(this, ___internal__method, token);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.TryGetDateValue
bool System::Net::Http::Headers::Lexer::TryGetDateValue(System::Net::Http::Headers::Token token, System::DateTimeOffset& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::TryGetDateValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetDateValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, token, value);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.TryGetDateValue
bool System::Net::Http::Headers::Lexer::TryGetDateValue(::Il2CppString* text, System::DateTimeOffset& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::TryGetDateValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Lexer", "TryGetDateValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text, value);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.TryGetDoubleValue
bool System::Net::Http::Headers::Lexer::TryGetDoubleValue(System::Net::Http::Headers::Token token, double& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::TryGetDoubleValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetDoubleValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractIndependentType<double&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, token, value);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.IsValidToken
bool System::Net::Http::Headers::Lexer::IsValidToken(::Il2CppString* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::IsValidToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Lexer", "IsValidToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.IsValidCharacter
bool System::Net::Http::Headers::Lexer::IsValidCharacter(::Il2CppChar input) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::IsValidCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Lexer", "IsValidCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.EatChar
void System::Net::Http::Headers::Lexer::EatChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::EatChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EatChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.PeekChar
int System::Net::Http::Headers::Lexer::PeekChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::PeekChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.ScanCommentOptional
bool System::Net::Http::Headers::Lexer::ScanCommentOptional(::Il2CppString*& value, System::Net::Http::Headers::Token& readToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::ScanCommentOptional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScanCommentOptional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, value, readToken);
}
// Autogenerated method: System.Net.Http.Headers.Lexer.Scan
System::Net::Http::Headers::Token System::Net::Http::Headers::Lexer::Scan(bool recognizeDash) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::Scan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Scan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recognizeDash)})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::Http::Headers::Token, false>(this, ___internal__method, recognizeDash);
}
// Autogenerated method: System.Net.Http.Headers.Lexer..cctor
void System::Net::Http::Headers::Lexer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Lexer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Lexer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lexer::*)(::Il2CppString*)>(&Lexer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lexer::*)(::Il2CppString*)>(&Lexer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Lexer::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Lexer::*)()>(&Lexer::get_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Lexer::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lexer::*)(int)>(&Lexer::set_Position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Lexer::GetStringValue
// Il2CppName: GetStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Lexer::*)(System::Net::Http::Headers::Token)>(&Lexer::GetStringValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "GetStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>()});
  }
};
// Writing MetadataGetter for method: Lexer::GetStringValue
// Il2CppName: GetStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Lexer::*)(System::Net::Http::Headers::Token, System::Net::Http::Headers::Token)>(&Lexer::GetStringValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "GetStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>()});
  }
};
// Writing MetadataGetter for method: Lexer::GetQuotedStringValue
// Il2CppName: GetQuotedStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Lexer::*)(System::Net::Http::Headers::Token)>(&Lexer::GetQuotedStringValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "GetQuotedStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>()});
  }
};
// Writing MetadataGetter for method: Lexer::GetRemainingStringValue
// Il2CppName: GetRemainingStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Lexer::*)(int)>(&Lexer::GetRemainingStringValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "GetRemainingStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Lexer::IsStarStringValue
// Il2CppName: IsStarStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Lexer::*)(System::Net::Http::Headers::Token)>(&Lexer::IsStarStringValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "IsStarStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>()});
  }
};
// Writing MetadataGetter for method: Lexer::TryGetNumericValue
// Il2CppName: TryGetNumericValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Lexer::*)(System::Net::Http::Headers::Token, int&)>(&Lexer::TryGetNumericValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "TryGetNumericValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Lexer::TryGetNumericValue
// Il2CppName: TryGetNumericValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Lexer::*)(System::Net::Http::Headers::Token, int64_t&)>(&Lexer::TryGetNumericValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "TryGetNumericValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>()});
  }
};
// Writing MetadataGetter for method: Lexer::TryGetTimeSpanValue
// Il2CppName: TryGetTimeSpanValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<System::TimeSpan> (Lexer::*)(System::Net::Http::Headers::Token)>(&Lexer::TryGetTimeSpanValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "TryGetTimeSpanValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>()});
  }
};
// Writing MetadataGetter for method: Lexer::TryGetDateValue
// Il2CppName: TryGetDateValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Lexer::*)(System::Net::Http::Headers::Token, System::DateTimeOffset&)>(&Lexer::TryGetDateValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "TryGetDateValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>(), ::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset&>()});
  }
};
// Writing MetadataGetter for method: Lexer::TryGetDateValue
// Il2CppName: TryGetDateValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::DateTimeOffset&)>(&Lexer::TryGetDateValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "TryGetDateValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset&>()});
  }
};
// Writing MetadataGetter for method: Lexer::TryGetDoubleValue
// Il2CppName: TryGetDoubleValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Lexer::*)(System::Net::Http::Headers::Token, double&)>(&Lexer::TryGetDoubleValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "TryGetDoubleValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: Lexer::IsValidToken
// Il2CppName: IsValidToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&Lexer::IsValidToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "IsValidToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Lexer::IsValidCharacter
// Il2CppName: IsValidCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Lexer::IsValidCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "IsValidCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: Lexer::EatChar
// Il2CppName: EatChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Lexer::*)()>(&Lexer::EatChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "EatChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Lexer::PeekChar
// Il2CppName: PeekChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Lexer::*)()>(&Lexer::PeekChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "PeekChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Lexer::ScanCommentOptional
// Il2CppName: ScanCommentOptional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Lexer::*)(::Il2CppString*&, System::Net::Http::Headers::Token&)>(&Lexer::ScanCommentOptional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "ScanCommentOptional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: Lexer::Scan
// Il2CppName: Scan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Http::Headers::Token (Lexer::*)(bool)>(&Lexer::Scan)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), "Scan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Lexer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Lexer::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Lexer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.MediaTypeHeaderValue
#include "System/Net/Http/Headers/MediaTypeHeaderValue.hpp"
// Including type: System.Net.Http.Headers.MediaTypeHeaderValue/<>c
#include "System/Net/Http/Headers/MediaTypeHeaderValue_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.NameValueHeaderValue
#include "System/Net/Http/Headers/NameValueHeaderValue.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.get_CharSet
::Il2CppString* System::Net::Http::Headers::MediaTypeHeaderValue::get_CharSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::get_CharSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CharSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.get_Parameters
System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>* System::Net::Http::Headers::MediaTypeHeaderValue::get_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::get_Parameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Parameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::MediaTypeHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse
bool System::Net::Http::Headers::MediaTypeHeaderValue::TryParse(::Il2CppString* input, System::Net::Http::Headers::MediaTypeHeaderValue*& parsedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "MediaTypeHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::MediaTypeHeaderValue*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, parsedValue);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.TryParseMediaType
System::Nullable_1<System::Net::Http::Headers::Token> System::Net::Http::Headers::MediaTypeHeaderValue::TryParseMediaType(System::Net::Http::Headers::Lexer* lexer, ::Il2CppString*& media) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::TryParseMediaType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "MediaTypeHeaderValue", "TryParseMediaType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::Net::Http::Headers::Token>, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, media);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.Equals
bool System::Net::Http::Headers::MediaTypeHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode
int System::Net::Http::Headers::MediaTypeHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::MediaTypeHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MediaTypeHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeHeaderValue::*)(System::Net::Http::Headers::MediaTypeHeaderValue*)>(&MediaTypeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::MediaTypeHeaderValue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeHeaderValue::*)(System::Net::Http::Headers::MediaTypeHeaderValue*)>(&MediaTypeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::MediaTypeHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::get_CharSet
// Il2CppName: get_CharSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MediaTypeHeaderValue::*)()>(&MediaTypeHeaderValue::get_CharSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "get_CharSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::get_Parameters
// Il2CppName: get_Parameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>* (MediaTypeHeaderValue::*)()>(&MediaTypeHeaderValue::get_Parameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "get_Parameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MediaTypeHeaderValue::*)()>(&MediaTypeHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::Net::Http::Headers::MediaTypeHeaderValue*&)>(&MediaTypeHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::MediaTypeHeaderValue*&>()});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::TryParseMediaType
// Il2CppName: TryParseMediaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<System::Net::Http::Headers::Token> (*)(System::Net::Http::Headers::Lexer*, ::Il2CppString*&)>(&MediaTypeHeaderValue::TryParseMediaType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "TryParseMediaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeHeaderValue::*)()>(&MediaTypeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeHeaderValue::*)()>(&MediaTypeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MediaTypeHeaderValue::*)(::Il2CppObject*)>(&MediaTypeHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MediaTypeHeaderValue::*)()>(&MediaTypeHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MediaTypeHeaderValue::*)()>(&MediaTypeHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Net.Http.Headers.MediaTypeHeaderValue/<>c
#include "System/Net/Http/Headers/MediaTypeHeaderValue_--c.hpp"
// Including type: System.Predicate`1
#include "System/Predicate_1.hpp"
// Including type: System.Net.Http.Headers.NameValueHeaderValue
#include "System/Net/Http/Headers/NameValueHeaderValue.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Net.Http.Headers.MediaTypeHeaderValue/<>c <>9
System::Net::Http::Headers::MediaTypeHeaderValue::$$c* System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Net::Http::Headers::MediaTypeHeaderValue::$$c*>("System.Net.Http.Headers", "MediaTypeHeaderValue/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Net.Http.Headers.MediaTypeHeaderValue/<>c <>9
void System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_set_$$9(System::Net::Http::Headers::MediaTypeHeaderValue::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "MediaTypeHeaderValue/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Predicate`1<System.Net.Http.Headers.NameValueHeaderValue> <>9__6_0
System::Predicate_1<System::Net::Http::Headers::NameValueHeaderValue*>* System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Predicate_1<System::Net::Http::Headers::NameValueHeaderValue*>*>("System.Net.Http.Headers", "MediaTypeHeaderValue/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Predicate`1<System.Net.Http.Headers.NameValueHeaderValue> <>9__6_0
void System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_set_$$9__6_0(System::Predicate_1<System::Net::Http::Headers::NameValueHeaderValue*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "MediaTypeHeaderValue/<>c", "<>9__6_0", value)));
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue/<>c..cctor
void System::Net::Http::Headers::MediaTypeHeaderValue::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "MediaTypeHeaderValue/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeHeaderValue/<>c.<get_CharSet>b__6_0
bool System::Net::Http::Headers::MediaTypeHeaderValue::$$c::$get_CharSet$b__6_0(System::Net::Http::Headers::NameValueHeaderValue* l) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeHeaderValue::$$c::<get_CharSet>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_CharSet>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, l);
}
// Writing MetadataGetter for method: MediaTypeHeaderValue::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MediaTypeHeaderValue::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::$$c::$get_CharSet$b__6_0
// Il2CppName: <get_CharSet>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MediaTypeHeaderValue::$$c::*)(System::Net::Http::Headers::NameValueHeaderValue*)>(&MediaTypeHeaderValue::$$c::$get_CharSet$b__6_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue::$$c*), "<get_CharSet>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: MediaTypeHeaderValue::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeHeaderValue::$$c::*)()>(&MediaTypeHeaderValue::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeHeaderValue::$$c::*)()>(&MediaTypeHeaderValue::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeHeaderValue::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue
#include "System/Net/Http/Headers/MediaTypeWithQualityHeaderValue.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParseElement
bool System::Net::Http::Headers::MediaTypeWithQualityHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeWithQualityHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "MediaTypeWithQualityHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse
bool System::Net::Http::Headers::MediaTypeWithQualityHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::MediaTypeWithQualityHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "MediaTypeWithQualityHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Writing MetadataGetter for method: MediaTypeWithQualityHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*&, System::Net::Http::Headers::Token&)>(&MediaTypeWithQualityHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeWithQualityHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: MediaTypeWithQualityHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*>*&)>(&MediaTypeWithQualityHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeWithQualityHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::MediaTypeWithQualityHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: MediaTypeWithQualityHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeWithQualityHeaderValue::*)()>(&MediaTypeWithQualityHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeWithQualityHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MediaTypeWithQualityHeaderValue::*)()>(&MediaTypeWithQualityHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MediaTypeWithQualityHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.NameValueHeaderValue
#include "System/Net/Http/Headers/NameValueHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.get_Name
::Il2CppString* System::Net::Http::Headers::NameValueHeaderValue::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.set_Name
void System::Net::Http::Headers::NameValueHeaderValue::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.get_Value
::Il2CppString* System::Net::Http::Headers::NameValueHeaderValue::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.Create
System::Net::Http::Headers::NameValueHeaderValue* System::Net::Http::Headers::NameValueHeaderValue::Create(::Il2CppString* name, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "NameValueHeaderValue", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::Http::Headers::NameValueHeaderValue*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, value);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::NameValueHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.TryParsePragma
bool System::Net::Http::Headers::NameValueHeaderValue::TryParsePragma(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::TryParsePragma");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "NameValueHeaderValue", "TryParsePragma", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.TryParseParameters
bool System::Net::Http::Headers::NameValueHeaderValue::TryParseParameters(System::Net::Http::Headers::Lexer* lexer, System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*& result, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::TryParseParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "NameValueHeaderValue", "TryParseParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, result, t);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.TryParseElement
bool System::Net::Http::Headers::NameValueHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::NameValueHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "NameValueHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.GetHashCode
int System::Net::Http::Headers::NameValueHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.Equals
bool System::Net::Http::Headers::NameValueHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.NameValueHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::NameValueHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NameValueHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueHeaderValue::*)(System::Net::Http::Headers::NameValueHeaderValue*)>(&NameValueHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueHeaderValue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueHeaderValue::*)(System::Net::Http::Headers::NameValueHeaderValue*)>(&NameValueHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NameValueHeaderValue::*)()>(&NameValueHeaderValue::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueHeaderValue::*)(::Il2CppString*)>(&NameValueHeaderValue::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NameValueHeaderValue::*)()>(&NameValueHeaderValue::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Http::Headers::NameValueHeaderValue* (*)(::Il2CppString*, ::Il2CppString*)>(&NameValueHeaderValue::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (NameValueHeaderValue::*)()>(&NameValueHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::TryParsePragma
// Il2CppName: TryParsePragma
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*&)>(&NameValueHeaderValue::TryParsePragma)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "TryParsePragma", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::TryParseParameters
// Il2CppName: TryParseParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*&, System::Net::Http::Headers::Token&)>(&NameValueHeaderValue::TryParseParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "TryParseParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueHeaderValue*>*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::NameValueHeaderValue*&, System::Net::Http::Headers::Token&)>(&NameValueHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueHeaderValue::*)()>(&NameValueHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueHeaderValue::*)()>(&NameValueHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NameValueHeaderValue::*)()>(&NameValueHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NameValueHeaderValue::*)(::Il2CppObject*)>(&NameValueHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: NameValueHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NameValueHeaderValue::*)()>(&NameValueHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.NameValueWithParametersHeaderValue
#include "System/Net/Http/Headers/NameValueWithParametersHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.NameValueWithParametersHeaderValue.get_Parameters
System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>* System::Net::Http::Headers::NameValueWithParametersHeaderValue::get_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueWithParametersHeaderValue::get_Parameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Parameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.NameValueWithParametersHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::NameValueWithParametersHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueWithParametersHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.NameValueWithParametersHeaderValue.TryParse
bool System::Net::Http::Headers::NameValueWithParametersHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueWithParametersHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueWithParametersHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "NameValueWithParametersHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueWithParametersHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.NameValueWithParametersHeaderValue.TryParseElement
bool System::Net::Http::Headers::NameValueWithParametersHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::NameValueWithParametersHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueWithParametersHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "NameValueWithParametersHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueWithParametersHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.NameValueWithParametersHeaderValue.Equals
bool System::Net::Http::Headers::NameValueWithParametersHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueWithParametersHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.NameValueWithParametersHeaderValue.GetHashCode
int System::Net::Http::Headers::NameValueWithParametersHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueWithParametersHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.NameValueWithParametersHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::NameValueWithParametersHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::NameValueWithParametersHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueWithParametersHeaderValue::*)(System::Net::Http::Headers::NameValueWithParametersHeaderValue*)>(&NameValueWithParametersHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueWithParametersHeaderValue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueWithParametersHeaderValue::*)(System::Net::Http::Headers::NameValueWithParametersHeaderValue*)>(&NameValueWithParametersHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueWithParametersHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::get_Parameters
// Il2CppName: get_Parameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>* (NameValueWithParametersHeaderValue::*)()>(&NameValueWithParametersHeaderValue::get_Parameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), "get_Parameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (NameValueWithParametersHeaderValue::*)()>(&NameValueWithParametersHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueWithParametersHeaderValue*>*&)>(&NameValueWithParametersHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::NameValueWithParametersHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::NameValueWithParametersHeaderValue*&, System::Net::Http::Headers::Token&)>(&NameValueWithParametersHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::NameValueWithParametersHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueWithParametersHeaderValue::*)()>(&NameValueWithParametersHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NameValueWithParametersHeaderValue::*)()>(&NameValueWithParametersHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NameValueWithParametersHeaderValue::*)(::Il2CppObject*)>(&NameValueWithParametersHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NameValueWithParametersHeaderValue::*)()>(&NameValueWithParametersHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NameValueWithParametersHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NameValueWithParametersHeaderValue::*)()>(&NameValueWithParametersHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NameValueWithParametersHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/Token
#include "System/Net/Http/Headers/Parser_Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.Parser/Token.Check
void System::Net::Http::Headers::Parser::Token::Check(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::Token::Check");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/Token", "Check", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: System.Net.Http.Headers.Parser/Token.TryCheck
bool System::Net::Http::Headers::Parser::Token::TryCheck(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::Token::TryCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/Token", "TryCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Writing MetadataGetter for method: Parser::Token::Check
// Il2CppName: Check
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&Parser::Token::Check)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::Token*), "Check", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Parser::Token::TryCheck
// Il2CppName: TryCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&Parser::Token::TryCheck)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::Token*), "TryCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/DateTime
#include "System/Net/Http/Headers/Parser_DateTime.hpp"
// Including type: System.Net.Http.Headers.Parser/DateTime/<>c
#include "System/Net/Http/Headers/Parser_DateTime_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.DateTimeOffset
#include "System/DateTimeOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Func`2<System.Object,System.String> ToString
System::Func_2<::Il2CppObject*, ::Il2CppString*>* System::Net::Http::Headers::Parser::DateTime::_get_ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::_get_ToString");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppObject*, ::Il2CppString*>*>("System.Net.Http.Headers", "Parser/DateTime", "ToString")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Func`2<System.Object,System.String> ToString
void System::Net::Http::Headers::Parser::DateTime::_set_ToString(System::Func_2<::Il2CppObject*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::_set_ToString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Parser/DateTime", "ToString", value));
}
// Autogenerated method: System.Net.Http.Headers.Parser/DateTime.TryParse
bool System::Net::Http::Headers::Parser::DateTime::TryParse(::Il2CppString* input, System::DateTimeOffset& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/DateTime", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Autogenerated method: System.Net.Http.Headers.Parser/DateTime..cctor
void System::Net::Http::Headers::Parser::DateTime::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/DateTime", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Parser::DateTime::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::DateTimeOffset&)>(&Parser::DateTime::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::DateTime*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset&>()});
  }
};
// Writing MetadataGetter for method: Parser::DateTime::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Parser::DateTime::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::DateTime*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/DateTime/<>c
#include "System/Net/Http/Headers/Parser_DateTime_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Net.Http.Headers.Parser/DateTime/<>c <>9
System::Net::Http::Headers::Parser::DateTime::$$c* System::Net::Http::Headers::Parser::DateTime::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Parser::DateTime::$$c*>("System.Net.Http.Headers", "Parser/DateTime/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Net.Http.Headers.Parser/DateTime/<>c <>9
void System::Net::Http::Headers::Parser::DateTime::$$c::_set_$$9(System::Net::Http::Headers::Parser::DateTime::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Parser/DateTime/<>c", "<>9", value)));
}
// Autogenerated method: System.Net.Http.Headers.Parser/DateTime/<>c..cctor
void System::Net::Http::Headers::Parser::DateTime::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/DateTime/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.Parser/DateTime/<>c.<.cctor>b__2_0
::Il2CppString* System::Net::Http::Headers::Parser::DateTime::$$c::$_cctor$b__2_0(::Il2CppObject* l) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::DateTime::$$c::<.cctor>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, l);
}
// Writing MetadataGetter for method: Parser::DateTime::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Parser::DateTime::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::DateTime::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parser::DateTime::$$c::$_cctor$b__2_0
// Il2CppName: <.cctor>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Parser::DateTime::$$c::*)(::Il2CppObject*)>(&Parser::DateTime::$$c::$_cctor$b__2_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::DateTime::$$c*), "<.cctor>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Parser::DateTime::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parser::DateTime::$$c::*)()>(&Parser::DateTime::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::DateTime::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parser::DateTime::$$c::*)()>(&Parser::DateTime::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::DateTime::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/EmailAddress
#include "System/Net/Http/Headers/Parser_EmailAddress.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.Parser/EmailAddress.TryParse
bool System::Net::Http::Headers::Parser::EmailAddress::TryParse(::Il2CppString* input, ::Il2CppString*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::EmailAddress::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/EmailAddress", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Writing MetadataGetter for method: Parser::EmailAddress::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*&)>(&Parser::EmailAddress::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::EmailAddress*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/Host
#include "System/Net/Http/Headers/Parser_Host.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.Parser/Host.TryParse
bool System::Net::Http::Headers::Parser::Host::TryParse(::Il2CppString* input, ::Il2CppString*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::Host::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/Host", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Writing MetadataGetter for method: Parser::Host::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*&)>(&Parser::Host::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::Host*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/Int
#include "System/Net/Http/Headers/Parser_Int.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.Parser/Int.TryParse
bool System::Net::Http::Headers::Parser::Int::TryParse(::Il2CppString* input, int& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::Int::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/Int", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Writing MetadataGetter for method: Parser::Int::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int&)>(&Parser::Int::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::Int*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/Long
#include "System/Net/Http/Headers/Parser_Long.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.Parser/Long.TryParse
bool System::Net::Http::Headers::Parser::Long::TryParse(::Il2CppString* input, int64_t& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::Long::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/Long", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<int64_t&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Writing MetadataGetter for method: Parser::Long::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int64_t&)>(&Parser::Long::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::Long*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int64_t&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/MD5
#include "System/Net/Http/Headers/Parser_MD5.hpp"
// Including type: System.Net.Http.Headers.Parser/MD5/<>c
#include "System/Net/Http/Headers/Parser_MD5_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Func`2<System.Object,System.String> ToString
System::Func_2<::Il2CppObject*, ::Il2CppString*>* System::Net::Http::Headers::Parser::MD5::_get_ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::_get_ToString");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppObject*, ::Il2CppString*>*>("System.Net.Http.Headers", "Parser/MD5", "ToString")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Func`2<System.Object,System.String> ToString
void System::Net::Http::Headers::Parser::MD5::_set_ToString(System::Func_2<::Il2CppObject*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::_set_ToString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Parser/MD5", "ToString", value));
}
// Autogenerated method: System.Net.Http.Headers.Parser/MD5.TryParse
bool System::Net::Http::Headers::Parser::MD5::TryParse(::Il2CppString* input, ::Array<uint8_t>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/MD5", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Autogenerated method: System.Net.Http.Headers.Parser/MD5..cctor
void System::Net::Http::Headers::Parser::MD5::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/MD5", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Parser::MD5::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Array<uint8_t>*&)>(&Parser::MD5::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::MD5*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>()});
  }
};
// Writing MetadataGetter for method: Parser::MD5::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Parser::MD5::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::MD5*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/MD5/<>c
#include "System/Net/Http/Headers/Parser_MD5_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Net.Http.Headers.Parser/MD5/<>c <>9
System::Net::Http::Headers::Parser::MD5::$$c* System::Net::Http::Headers::Parser::MD5::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Net::Http::Headers::Parser::MD5::$$c*>("System.Net.Http.Headers", "Parser/MD5/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Net.Http.Headers.Parser/MD5/<>c <>9
void System::Net::Http::Headers::Parser::MD5::$$c::_set_$$9(System::Net::Http::Headers::Parser::MD5::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("System.Net.Http.Headers", "Parser/MD5/<>c", "<>9", value)));
}
// Autogenerated method: System.Net.Http.Headers.Parser/MD5/<>c..cctor
void System::Net::Http::Headers::Parser::MD5::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/MD5/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.Parser/MD5/<>c.<.cctor>b__2_0
::Il2CppString* System::Net::Http::Headers::Parser::MD5::$$c::$_cctor$b__2_0(::Il2CppObject* l) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::MD5::$$c::<.cctor>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(l)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, l);
}
// Writing MetadataGetter for method: Parser::MD5::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Parser::MD5::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::MD5::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Parser::MD5::$$c::$_cctor$b__2_0
// Il2CppName: <.cctor>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Parser::MD5::$$c::*)(::Il2CppObject*)>(&Parser::MD5::$$c::$_cctor$b__2_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::MD5::$$c*), "<.cctor>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Parser::MD5::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parser::MD5::$$c::*)()>(&Parser::MD5::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::MD5::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Parser::MD5::$$c::*)()>(&Parser::MD5::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::MD5::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/TimeSpanSeconds
#include "System/Net/Http/Headers/Parser_TimeSpanSeconds.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.Parser/TimeSpanSeconds.TryParse
bool System::Net::Http::Headers::Parser::TimeSpanSeconds::TryParse(::Il2CppString* input, System::TimeSpan& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::TimeSpanSeconds::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/TimeSpanSeconds", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Writing MetadataGetter for method: Parser::TimeSpanSeconds::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::TimeSpan&)>(&Parser::TimeSpanSeconds::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::TimeSpanSeconds*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::TimeSpan&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.Parser/Uri
#include "System/Net/Http/Headers/Parser_Uri.hpp"
// Including type: System.Uri
#include "System/Uri.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.Parser/Uri.TryParse
bool System::Net::Http::Headers::Parser::Uri::TryParse(::Il2CppString* input, System::Uri*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Parser::Uri::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "Parser/Uri", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<System::Uri*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, result);
}
// Writing MetadataGetter for method: Parser::Uri::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::Uri*&)>(&Parser::Uri::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Parser::Uri*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Uri*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.ProductHeaderValue
#include "System/Net/Http/Headers/ProductHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.get_Name
::Il2CppString* System::Net::Http::Headers::ProductHeaderValue::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.set_Name
void System::Net::Http::Headers::ProductHeaderValue::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.get_Version
::Il2CppString* System::Net::Http::Headers::ProductHeaderValue::get_Version() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::get_Version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.set_Version
void System::Net::Http::Headers::ProductHeaderValue::set_Version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::set_Version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::ProductHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.TryParse
bool System::Net::Http::Headers::ProductHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::ProductHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "ProductHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::ProductHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.TryParseElement
bool System::Net::Http::Headers::ProductHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::ProductHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "ProductHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ProductHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.Equals
bool System::Net::Http::Headers::ProductHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.GetHashCode
int System::Net::Http::Headers::ProductHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::ProductHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ProductHeaderValue::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ProductHeaderValue::*)()>(&ProductHeaderValue::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductHeaderValue::*)(::Il2CppString*)>(&ProductHeaderValue::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ProductHeaderValue::*)()>(&ProductHeaderValue::get_Version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::set_Version
// Il2CppName: set_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductHeaderValue::*)(::Il2CppString*)>(&ProductHeaderValue::set_Version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "set_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ProductHeaderValue::*)()>(&ProductHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::ProductHeaderValue*>*&)>(&ProductHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::ProductHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::ProductHeaderValue*&, System::Net::Http::Headers::Token&)>(&ProductHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ProductHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductHeaderValue::*)()>(&ProductHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductHeaderValue::*)()>(&ProductHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProductHeaderValue::*)(::Il2CppObject*)>(&ProductHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ProductHeaderValue::*)()>(&ProductHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ProductHeaderValue::*)()>(&ProductHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.ProductInfoHeaderValue
#include "System/Net/Http/Headers/ProductInfoHeaderValue.hpp"
// Including type: System.Net.Http.Headers.ProductHeaderValue
#include "System/Net/Http/Headers/ProductHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.get_Comment
::Il2CppString* System::Net::Http::Headers::ProductInfoHeaderValue::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.set_Comment
void System::Net::Http::Headers::ProductInfoHeaderValue::set_Comment(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.get_Product
System::Net::Http::Headers::ProductHeaderValue* System::Net::Http::Headers::ProductInfoHeaderValue::get_Product() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::get_Product");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Product", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::Http::Headers::ProductHeaderValue*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.set_Product
void System::Net::Http::Headers::ProductInfoHeaderValue::set_Product(System::Net::Http::Headers::ProductHeaderValue* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::set_Product");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Product", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::ProductInfoHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.TryParse
bool System::Net::Http::Headers::ProductInfoHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::ProductInfoHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "ProductInfoHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::ProductInfoHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.TryParseElement
bool System::Net::Http::Headers::ProductInfoHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::ProductInfoHeaderValue*& parsedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "ProductInfoHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ProductInfoHeaderValue*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.Equals
bool System::Net::Http::Headers::ProductInfoHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.GetHashCode
int System::Net::Http::Headers::ProductInfoHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ProductInfoHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::ProductInfoHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ProductInfoHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ProductInfoHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductInfoHeaderValue::*)(System::Net::Http::Headers::ProductHeaderValue*)>(&ProductInfoHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ProductHeaderValue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductInfoHeaderValue::*)(System::Net::Http::Headers::ProductHeaderValue*)>(&ProductInfoHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ProductHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::get_Comment
// Il2CppName: get_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ProductInfoHeaderValue::*)()>(&ProductInfoHeaderValue::get_Comment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "get_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::set_Comment
// Il2CppName: set_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductInfoHeaderValue::*)(::Il2CppString*)>(&ProductInfoHeaderValue::set_Comment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "set_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::get_Product
// Il2CppName: get_Product
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Http::Headers::ProductHeaderValue* (ProductInfoHeaderValue::*)()>(&ProductInfoHeaderValue::get_Product)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "get_Product", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::set_Product
// Il2CppName: set_Product
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductInfoHeaderValue::*)(System::Net::Http::Headers::ProductHeaderValue*)>(&ProductInfoHeaderValue::set_Product)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "set_Product", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ProductHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ProductInfoHeaderValue::*)()>(&ProductInfoHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::ProductInfoHeaderValue*>*&)>(&ProductInfoHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::ProductInfoHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::ProductInfoHeaderValue*&)>(&ProductInfoHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ProductInfoHeaderValue*&>()});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductInfoHeaderValue::*)()>(&ProductInfoHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProductInfoHeaderValue::*)()>(&ProductInfoHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProductInfoHeaderValue::*)(::Il2CppObject*)>(&ProductInfoHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ProductInfoHeaderValue::*)()>(&ProductInfoHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProductInfoHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ProductInfoHeaderValue::*)()>(&ProductInfoHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProductInfoHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.RangeConditionHeaderValue
#include "System/Net/Http/Headers/RangeConditionHeaderValue.hpp"
// Including type: System.Net.Http.Headers.EntityTagHeaderValue
#include "System/Net/Http/Headers/EntityTagHeaderValue.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.get_Date
System::Nullable_1<System::DateTimeOffset> System::Net::Http::Headers::RangeConditionHeaderValue::get_Date() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::get_Date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTimeOffset>, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.set_Date
void System::Net::Http::Headers::RangeConditionHeaderValue::set_Date(System::Nullable_1<System::DateTimeOffset> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::set_Date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.get_EntityTag
System::Net::Http::Headers::EntityTagHeaderValue* System::Net::Http::Headers::RangeConditionHeaderValue::get_EntityTag() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::get_EntityTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EntityTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::Http::Headers::EntityTagHeaderValue*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.set_EntityTag
void System::Net::Http::Headers::RangeConditionHeaderValue::set_EntityTag(System::Net::Http::Headers::EntityTagHeaderValue* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::set_EntityTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EntityTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::RangeConditionHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.TryParse
bool System::Net::Http::Headers::RangeConditionHeaderValue::TryParse(::Il2CppString* input, System::Net::Http::Headers::RangeConditionHeaderValue*& parsedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "RangeConditionHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RangeConditionHeaderValue*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, parsedValue);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.Equals
bool System::Net::Http::Headers::RangeConditionHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.GetHashCode
int System::Net::Http::Headers::RangeConditionHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeConditionHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::RangeConditionHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeConditionHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RangeConditionHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeConditionHeaderValue::*)(System::DateTimeOffset)>(&RangeConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeConditionHeaderValue::*)(System::DateTimeOffset)>(&RangeConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset>()});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeConditionHeaderValue::*)(System::Net::Http::Headers::EntityTagHeaderValue*)>(&RangeConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::EntityTagHeaderValue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeConditionHeaderValue::*)(System::Net::Http::Headers::EntityTagHeaderValue*)>(&RangeConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::EntityTagHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::get_Date
// Il2CppName: get_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<System::DateTimeOffset> (RangeConditionHeaderValue::*)()>(&RangeConditionHeaderValue::get_Date)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "get_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::set_Date
// Il2CppName: set_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeConditionHeaderValue::*)(System::Nullable_1<System::DateTimeOffset>)>(&RangeConditionHeaderValue::set_Date)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "set_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<System::DateTimeOffset>>()});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::get_EntityTag
// Il2CppName: get_EntityTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Http::Headers::EntityTagHeaderValue* (RangeConditionHeaderValue::*)()>(&RangeConditionHeaderValue::get_EntityTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "get_EntityTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::set_EntityTag
// Il2CppName: set_EntityTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeConditionHeaderValue::*)(System::Net::Http::Headers::EntityTagHeaderValue*)>(&RangeConditionHeaderValue::set_EntityTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "set_EntityTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::EntityTagHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RangeConditionHeaderValue::*)()>(&RangeConditionHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::Net::Http::Headers::RangeConditionHeaderValue*&)>(&RangeConditionHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RangeConditionHeaderValue*&>()});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RangeConditionHeaderValue::*)(::Il2CppObject*)>(&RangeConditionHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RangeConditionHeaderValue::*)()>(&RangeConditionHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeConditionHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RangeConditionHeaderValue::*)()>(&RangeConditionHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeConditionHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.RangeHeaderValue
#include "System/Net/Http/Headers/RangeHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.RangeItemHeaderValue
#include "System/Net/Http/Headers/RangeItemHeaderValue.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.RangeHeaderValue.get_Ranges
System::Collections::Generic::ICollection_1<System::Net::Http::Headers::RangeItemHeaderValue*>* System::Net::Http::Headers::RangeHeaderValue::get_Ranges() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeHeaderValue::get_Ranges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ranges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::RangeItemHeaderValue*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeHeaderValue.get_Unit
::Il2CppString* System::Net::Http::Headers::RangeHeaderValue::get_Unit() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeHeaderValue::get_Unit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Unit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::RangeHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeHeaderValue.TryParse
bool System::Net::Http::Headers::RangeHeaderValue::TryParse(::Il2CppString* input, System::Net::Http::Headers::RangeHeaderValue*& parsedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "RangeHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RangeHeaderValue*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, parsedValue);
}
// Autogenerated method: System.Net.Http.Headers.RangeHeaderValue.Equals
bool System::Net::Http::Headers::RangeHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.RangeHeaderValue.GetHashCode
int System::Net::Http::Headers::RangeHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::RangeHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RangeHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeHeaderValue::*)(System::Net::Http::Headers::RangeHeaderValue*)>(&RangeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RangeHeaderValue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeHeaderValue::*)(System::Net::Http::Headers::RangeHeaderValue*)>(&RangeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RangeHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::get_Ranges
// Il2CppName: get_Ranges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::RangeItemHeaderValue*>* (RangeHeaderValue::*)()>(&RangeHeaderValue::get_Ranges)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), "get_Ranges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::get_Unit
// Il2CppName: get_Unit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RangeHeaderValue::*)()>(&RangeHeaderValue::get_Unit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), "get_Unit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RangeHeaderValue::*)()>(&RangeHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::Net::Http::Headers::RangeHeaderValue*&)>(&RangeHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RangeHeaderValue*&>()});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeHeaderValue::*)()>(&RangeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeHeaderValue::*)()>(&RangeHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RangeHeaderValue::*)(::Il2CppObject*)>(&RangeHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RangeHeaderValue::*)()>(&RangeHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RangeHeaderValue::*)()>(&RangeHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.RangeItemHeaderValue
#include "System/Net/Http/Headers/RangeItemHeaderValue.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.get_From
System::Nullable_1<int64_t> System::Net::Http::Headers::RangeItemHeaderValue::get_From() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::get_From");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_From", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<int64_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.set_From
void System::Net::Http::Headers::RangeItemHeaderValue::set_From(System::Nullable_1<int64_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::set_From");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_From", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.get_To
System::Nullable_1<int64_t> System::Net::Http::Headers::RangeItemHeaderValue::get_To() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::get_To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<int64_t>, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.set_To
void System::Net::Http::Headers::RangeItemHeaderValue::set_To(System::Nullable_1<int64_t> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::set_To");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_To", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::RangeItemHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.Equals
bool System::Net::Http::Headers::RangeItemHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.GetHashCode
int System::Net::Http::Headers::RangeItemHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RangeItemHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::RangeItemHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RangeItemHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RangeItemHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeItemHeaderValue::*)(System::Nullable_1<int64_t>, System::Nullable_1<int64_t>)>(&RangeItemHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<int64_t>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<int64_t>>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeItemHeaderValue::*)(System::Nullable_1<int64_t>, System::Nullable_1<int64_t>)>(&RangeItemHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<int64_t>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<int64_t>>()});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::get_From
// Il2CppName: get_From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<int64_t> (RangeItemHeaderValue::*)()>(&RangeItemHeaderValue::get_From)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "get_From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::set_From
// Il2CppName: set_From
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeItemHeaderValue::*)(System::Nullable_1<int64_t>)>(&RangeItemHeaderValue::set_From)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "set_From", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<int64_t>>()});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::get_To
// Il2CppName: get_To
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<int64_t> (RangeItemHeaderValue::*)()>(&RangeItemHeaderValue::get_To)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "get_To", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::set_To
// Il2CppName: set_To
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeItemHeaderValue::*)(System::Nullable_1<int64_t>)>(&RangeItemHeaderValue::set_To)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "set_To", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<int64_t>>()});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RangeItemHeaderValue::*)()>(&RangeItemHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RangeItemHeaderValue::*)(::Il2CppObject*)>(&RangeItemHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RangeItemHeaderValue::*)()>(&RangeItemHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeItemHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RangeItemHeaderValue::*)()>(&RangeItemHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeItemHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.RetryConditionHeaderValue
#include "System/Net/Http/Headers/RetryConditionHeaderValue.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.get_Date
System::Nullable_1<System::DateTimeOffset> System::Net::Http::Headers::RetryConditionHeaderValue::get_Date() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::get_Date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTimeOffset>, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.set_Date
void System::Net::Http::Headers::RetryConditionHeaderValue::set_Date(System::Nullable_1<System::DateTimeOffset> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::set_Date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.get_Delta
System::Nullable_1<System::TimeSpan> System::Net::Http::Headers::RetryConditionHeaderValue::get_Delta() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::get_Delta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::TimeSpan>, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.set_Delta
void System::Net::Http::Headers::RetryConditionHeaderValue::set_Delta(System::Nullable_1<System::TimeSpan> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::set_Delta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Delta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::RetryConditionHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.TryParse
bool System::Net::Http::Headers::RetryConditionHeaderValue::TryParse(::Il2CppString* input, System::Net::Http::Headers::RetryConditionHeaderValue*& parsedValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "RetryConditionHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RetryConditionHeaderValue*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, parsedValue);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.Equals
bool System::Net::Http::Headers::RetryConditionHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.GetHashCode
int System::Net::Http::Headers::RetryConditionHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.RetryConditionHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::RetryConditionHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::RetryConditionHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RetryConditionHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RetryConditionHeaderValue::*)(System::DateTimeOffset)>(&RetryConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RetryConditionHeaderValue::*)(System::DateTimeOffset)>(&RetryConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset>()});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RetryConditionHeaderValue::*)(System::TimeSpan)>(&RetryConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RetryConditionHeaderValue::*)(System::TimeSpan)>(&RetryConditionHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::TimeSpan>()});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::get_Date
// Il2CppName: get_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<System::DateTimeOffset> (RetryConditionHeaderValue::*)()>(&RetryConditionHeaderValue::get_Date)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "get_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::set_Date
// Il2CppName: set_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RetryConditionHeaderValue::*)(System::Nullable_1<System::DateTimeOffset>)>(&RetryConditionHeaderValue::set_Date)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "set_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<System::DateTimeOffset>>()});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::get_Delta
// Il2CppName: get_Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<System::TimeSpan> (RetryConditionHeaderValue::*)()>(&RetryConditionHeaderValue::get_Delta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "get_Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::set_Delta
// Il2CppName: set_Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RetryConditionHeaderValue::*)(System::Nullable_1<System::TimeSpan>)>(&RetryConditionHeaderValue::set_Delta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "set_Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<System::TimeSpan>>()});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RetryConditionHeaderValue::*)()>(&RetryConditionHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, System::Net::Http::Headers::RetryConditionHeaderValue*&)>(&RetryConditionHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::RetryConditionHeaderValue*&>()});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RetryConditionHeaderValue::*)(::Il2CppObject*)>(&RetryConditionHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RetryConditionHeaderValue::*)()>(&RetryConditionHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RetryConditionHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RetryConditionHeaderValue::*)()>(&RetryConditionHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RetryConditionHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.StringWithQualityHeaderValue
#include "System/Net/Http/Headers/StringWithQualityHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.get_Quality
System::Nullable_1<double> System::Net::Http::Headers::StringWithQualityHeaderValue::get_Quality() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::get_Quality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Quality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<double>, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.set_Quality
void System::Net::Http::Headers::StringWithQualityHeaderValue::set_Quality(System::Nullable_1<double> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::set_Quality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Quality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.get_Value
::Il2CppString* System::Net::Http::Headers::StringWithQualityHeaderValue::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.set_Value
void System::Net::Http::Headers::StringWithQualityHeaderValue::set_Value(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::set_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::StringWithQualityHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse
bool System::Net::Http::Headers::StringWithQualityHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::StringWithQualityHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "StringWithQualityHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::StringWithQualityHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.TryParseElement
bool System::Net::Http::Headers::StringWithQualityHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::StringWithQualityHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "StringWithQualityHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::StringWithQualityHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.Equals
bool System::Net::Http::Headers::StringWithQualityHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode
int System::Net::Http::Headers::StringWithQualityHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.StringWithQualityHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::StringWithQualityHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::StringWithQualityHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StringWithQualityHeaderValue::get_Quality
// Il2CppName: get_Quality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<double> (StringWithQualityHeaderValue::*)()>(&StringWithQualityHeaderValue::get_Quality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "get_Quality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::set_Quality
// Il2CppName: set_Quality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWithQualityHeaderValue::*)(System::Nullable_1<double>)>(&StringWithQualityHeaderValue::set_Quality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "set_Quality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<double>>()});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringWithQualityHeaderValue::*)()>(&StringWithQualityHeaderValue::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWithQualityHeaderValue::*)(::Il2CppString*)>(&StringWithQualityHeaderValue::set_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (StringWithQualityHeaderValue::*)()>(&StringWithQualityHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::StringWithQualityHeaderValue*>*&)>(&StringWithQualityHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::StringWithQualityHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::StringWithQualityHeaderValue*&, System::Net::Http::Headers::Token&)>(&StringWithQualityHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::StringWithQualityHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWithQualityHeaderValue::*)()>(&StringWithQualityHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringWithQualityHeaderValue::*)()>(&StringWithQualityHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StringWithQualityHeaderValue::*)(::Il2CppObject*)>(&StringWithQualityHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringWithQualityHeaderValue::*)()>(&StringWithQualityHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringWithQualityHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringWithQualityHeaderValue::*)()>(&StringWithQualityHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringWithQualityHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.TransferCodingHeaderValue
#include "System/Net/Http/Headers/TransferCodingHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.NameValueHeaderValue
#include "System/Net/Http/Headers/NameValueHeaderValue.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.get_Parameters
System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>* System::Net::Http::Headers::TransferCodingHeaderValue::get_Parameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::get_Parameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Parameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.get_Value
::Il2CppString* System::Net::Http::Headers::TransferCodingHeaderValue::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::TransferCodingHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.TryParse
bool System::Net::Http::Headers::TransferCodingHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "TransferCodingHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.TryParseElement
bool System::Net::Http::Headers::TransferCodingHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::TransferCodingHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "TransferCodingHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::TransferCodingHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.Equals
bool System::Net::Http::Headers::TransferCodingHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode
int System::Net::Http::Headers::TransferCodingHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::TransferCodingHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TransferCodingHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransferCodingHeaderValue::*)(System::Net::Http::Headers::TransferCodingHeaderValue*)>(&TransferCodingHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::TransferCodingHeaderValue*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransferCodingHeaderValue::*)(System::Net::Http::Headers::TransferCodingHeaderValue*)>(&TransferCodingHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::TransferCodingHeaderValue*>()});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::get_Parameters
// Il2CppName: get_Parameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::ICollection_1<System::Net::Http::Headers::NameValueHeaderValue*>* (TransferCodingHeaderValue::*)()>(&TransferCodingHeaderValue::get_Parameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "get_Parameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TransferCodingHeaderValue::*)()>(&TransferCodingHeaderValue::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TransferCodingHeaderValue::*)()>(&TransferCodingHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingHeaderValue*>*&)>(&TransferCodingHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::TransferCodingHeaderValue*&, System::Net::Http::Headers::Token&)>(&TransferCodingHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::TransferCodingHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransferCodingHeaderValue::*)()>(&TransferCodingHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransferCodingHeaderValue::*)()>(&TransferCodingHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TransferCodingHeaderValue::*)(::Il2CppObject*)>(&TransferCodingHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TransferCodingHeaderValue::*)()>(&TransferCodingHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TransferCodingHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TransferCodingHeaderValue::*)()>(&TransferCodingHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.TransferCodingWithQualityHeaderValue
#include "System/Net/Http/Headers/TransferCodingWithQualityHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.TryParse
bool System::Net::Http::Headers::TransferCodingWithQualityHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingWithQualityHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "TransferCodingWithQualityHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.TryParseElement
bool System::Net::Http::Headers::TransferCodingWithQualityHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::TransferCodingWithQualityHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "TransferCodingWithQualityHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Writing MetadataGetter for method: TransferCodingWithQualityHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*>*&)>(&TransferCodingWithQualityHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingWithQualityHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: TransferCodingWithQualityHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*&, System::Net::Http::Headers::Token&)>(&TransferCodingWithQualityHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingWithQualityHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::TransferCodingWithQualityHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: TransferCodingWithQualityHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransferCodingWithQualityHeaderValue::*)()>(&TransferCodingWithQualityHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingWithQualityHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TransferCodingWithQualityHeaderValue::*)()>(&TransferCodingWithQualityHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransferCodingWithQualityHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.ViaHeaderValue
#include "System/Net/Http/Headers/ViaHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.get_Comment
::Il2CppString* System::Net::Http::Headers::ViaHeaderValue::get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::get_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.set_Comment
void System::Net::Http::Headers::ViaHeaderValue::set_Comment(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::set_Comment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Comment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.get_ProtocolName
::Il2CppString* System::Net::Http::Headers::ViaHeaderValue::get_ProtocolName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::get_ProtocolName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProtocolName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.set_ProtocolName
void System::Net::Http::Headers::ViaHeaderValue::set_ProtocolName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::set_ProtocolName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProtocolName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.get_ProtocolVersion
::Il2CppString* System::Net::Http::Headers::ViaHeaderValue::get_ProtocolVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::get_ProtocolVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProtocolVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.set_ProtocolVersion
void System::Net::Http::Headers::ViaHeaderValue::set_ProtocolVersion(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::set_ProtocolVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProtocolVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.get_ReceivedBy
::Il2CppString* System::Net::Http::Headers::ViaHeaderValue::get_ReceivedBy() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::get_ReceivedBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReceivedBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.set_ReceivedBy
void System::Net::Http::Headers::ViaHeaderValue::set_ReceivedBy(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::set_ReceivedBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ReceivedBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::ViaHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.TryParse
bool System::Net::Http::Headers::ViaHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::ViaHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "ViaHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::ViaHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.TryParseElement
bool System::Net::Http::Headers::ViaHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::ViaHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "ViaHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ViaHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.Equals
bool System::Net::Http::Headers::ViaHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.GetHashCode
int System::Net::Http::Headers::ViaHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.ViaHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::ViaHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::ViaHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ViaHeaderValue::get_Comment
// Il2CppName: get_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ViaHeaderValue::*)()>(&ViaHeaderValue::get_Comment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "get_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::set_Comment
// Il2CppName: set_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ViaHeaderValue::*)(::Il2CppString*)>(&ViaHeaderValue::set_Comment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "set_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::get_ProtocolName
// Il2CppName: get_ProtocolName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ViaHeaderValue::*)()>(&ViaHeaderValue::get_ProtocolName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "get_ProtocolName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::set_ProtocolName
// Il2CppName: set_ProtocolName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ViaHeaderValue::*)(::Il2CppString*)>(&ViaHeaderValue::set_ProtocolName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "set_ProtocolName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::get_ProtocolVersion
// Il2CppName: get_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ViaHeaderValue::*)()>(&ViaHeaderValue::get_ProtocolVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "get_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::set_ProtocolVersion
// Il2CppName: set_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ViaHeaderValue::*)(::Il2CppString*)>(&ViaHeaderValue::set_ProtocolVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "set_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::get_ReceivedBy
// Il2CppName: get_ReceivedBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ViaHeaderValue::*)()>(&ViaHeaderValue::get_ReceivedBy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "get_ReceivedBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::set_ReceivedBy
// Il2CppName: set_ReceivedBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ViaHeaderValue::*)(::Il2CppString*)>(&ViaHeaderValue::set_ReceivedBy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "set_ReceivedBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ViaHeaderValue::*)()>(&ViaHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::ViaHeaderValue*>*&)>(&ViaHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::ViaHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::ViaHeaderValue*&, System::Net::Http::Headers::Token&)>(&ViaHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::ViaHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ViaHeaderValue::*)()>(&ViaHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ViaHeaderValue::*)()>(&ViaHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ViaHeaderValue::*)(::Il2CppObject*)>(&ViaHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ViaHeaderValue::*)()>(&ViaHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ViaHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ViaHeaderValue::*)()>(&ViaHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ViaHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.Headers.WarningHeaderValue
#include "System/Net/Http/Headers/WarningHeaderValue.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.Http.Headers.Lexer
#include "System/Net/Http/Headers/Lexer.hpp"
// Including type: System.Net.Http.Headers.Token
#include "System/Net/Http/Headers/Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.get_Agent
::Il2CppString* System::Net::Http::Headers::WarningHeaderValue::get_Agent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::get_Agent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Agent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.set_Agent
void System::Net::Http::Headers::WarningHeaderValue::set_Agent(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::set_Agent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Agent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.get_Code
int System::Net::Http::Headers::WarningHeaderValue::get_Code() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::get_Code");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.set_Code
void System::Net::Http::Headers::WarningHeaderValue::set_Code(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::set_Code");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.get_Date
System::Nullable_1<System::DateTimeOffset> System::Net::Http::Headers::WarningHeaderValue::get_Date() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::get_Date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Nullable_1<System::DateTimeOffset>, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.set_Date
void System::Net::Http::Headers::WarningHeaderValue::set_Date(System::Nullable_1<System::DateTimeOffset> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::set_Date");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Date", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.get_Text
::Il2CppString* System::Net::Http::Headers::WarningHeaderValue::get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::get_Text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.set_Text
void System::Net::Http::Headers::WarningHeaderValue::set_Text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::set_Text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.IsCodeValid
bool System::Net::Http::Headers::WarningHeaderValue::IsCodeValid(int code) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::IsCodeValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "WarningHeaderValue", "IsCodeValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, code);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.System.ICloneable.Clone
::Il2CppObject* System::Net::Http::Headers::WarningHeaderValue::System_ICloneable_Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::System.ICloneable.Clone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.ICloneable.Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.TryParse
bool System::Net::Http::Headers::WarningHeaderValue::TryParse(::Il2CppString* input, int minimalCount, System::Collections::Generic::List_1<System::Net::Http::Headers::WarningHeaderValue*>*& result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::TryParse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "WarningHeaderValue", "TryParse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input), ::il2cpp_utils::ExtractType(minimalCount), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::WarningHeaderValue*>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, input, minimalCount, result);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.TryParseElement
bool System::Net::Http::Headers::WarningHeaderValue::TryParseElement(System::Net::Http::Headers::Lexer* lexer, System::Net::Http::Headers::WarningHeaderValue*& parsedValue, System::Net::Http::Headers::Token& t) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::TryParseElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Net.Http.Headers", "WarningHeaderValue", "TryParseElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lexer), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::WarningHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lexer, parsedValue, t);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.Equals
bool System::Net::Http::Headers::WarningHeaderValue::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.GetHashCode
int System::Net::Http::Headers::WarningHeaderValue::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Net.Http.Headers.WarningHeaderValue.ToString
::Il2CppString* System::Net::Http::Headers::WarningHeaderValue::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::WarningHeaderValue::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: WarningHeaderValue::get_Agent
// Il2CppName: get_Agent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (WarningHeaderValue::*)()>(&WarningHeaderValue::get_Agent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "get_Agent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::set_Agent
// Il2CppName: set_Agent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WarningHeaderValue::*)(::Il2CppString*)>(&WarningHeaderValue::set_Agent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "set_Agent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::get_Code
// Il2CppName: get_Code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (WarningHeaderValue::*)()>(&WarningHeaderValue::get_Code)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "get_Code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::set_Code
// Il2CppName: set_Code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WarningHeaderValue::*)(int)>(&WarningHeaderValue::set_Code)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "set_Code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::get_Date
// Il2CppName: get_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<System::DateTimeOffset> (WarningHeaderValue::*)()>(&WarningHeaderValue::get_Date)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "get_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::set_Date
// Il2CppName: set_Date
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WarningHeaderValue::*)(System::Nullable_1<System::DateTimeOffset>)>(&WarningHeaderValue::set_Date)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "set_Date", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<System::DateTimeOffset>>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::get_Text
// Il2CppName: get_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (WarningHeaderValue::*)()>(&WarningHeaderValue::get_Text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "get_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::set_Text
// Il2CppName: set_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WarningHeaderValue::*)(::Il2CppString*)>(&WarningHeaderValue::set_Text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "set_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::IsCodeValid
// Il2CppName: IsCodeValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&WarningHeaderValue::IsCodeValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "IsCodeValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::System_ICloneable_Clone
// Il2CppName: System.ICloneable.Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (WarningHeaderValue::*)()>(&WarningHeaderValue::System_ICloneable_Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "System.ICloneable.Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int, System::Collections::Generic::List_1<System::Net::Http::Headers::WarningHeaderValue*>*&)>(&WarningHeaderValue::TryParse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Net::Http::Headers::WarningHeaderValue*>*&>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::TryParseElement
// Il2CppName: TryParseElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Http::Headers::Lexer*, System::Net::Http::Headers::WarningHeaderValue*&, System::Net::Http::Headers::Token&)>(&WarningHeaderValue::TryParseElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "TryParseElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Lexer*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::WarningHeaderValue*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Http::Headers::Token&>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WarningHeaderValue::*)()>(&WarningHeaderValue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WarningHeaderValue::*)()>(&WarningHeaderValue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WarningHeaderValue::*)(::Il2CppObject*)>(&WarningHeaderValue::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (WarningHeaderValue::*)()>(&WarningHeaderValue::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WarningHeaderValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (WarningHeaderValue::*)()>(&WarningHeaderValue::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WarningHeaderValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.LocalAppContextSwitches
#include "System/LocalAppContextSwitches.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Boolean DontThrowOnInvalidSurrogatePairs
bool System::LocalAppContextSwitches::_get_DontThrowOnInvalidSurrogatePairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::LocalAppContextSwitches::_get_DontThrowOnInvalidSurrogatePairs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("System", "LocalAppContextSwitches", "DontThrowOnInvalidSurrogatePairs"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Boolean DontThrowOnInvalidSurrogatePairs
void System::LocalAppContextSwitches::_set_DontThrowOnInvalidSurrogatePairs(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::LocalAppContextSwitches::_set_DontThrowOnInvalidSurrogatePairs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System", "LocalAppContextSwitches", "DontThrowOnInvalidSurrogatePairs", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.AsyncHelper
#include "System/Xml/AsyncHelper.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.Task DoneTask
System::Threading::Tasks::Task* System::Xml::AsyncHelper::_get_DoneTask() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_get_DoneTask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task*>("System.Xml", "AsyncHelper", "DoneTask"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.Task DoneTask
void System::Xml::AsyncHelper::_set_DoneTask(System::Threading::Tasks::Task* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_set_DoneTask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AsyncHelper", "DoneTask", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.Task`1<System.Boolean> DoneTaskTrue
System::Threading::Tasks::Task_1<bool>* System::Xml::AsyncHelper::_get_DoneTaskTrue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_get_DoneTaskTrue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task_1<bool>*>("System.Xml", "AsyncHelper", "DoneTaskTrue"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.Task`1<System.Boolean> DoneTaskTrue
void System::Xml::AsyncHelper::_set_DoneTaskTrue(System::Threading::Tasks::Task_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_set_DoneTaskTrue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AsyncHelper", "DoneTaskTrue", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.Task`1<System.Boolean> DoneTaskFalse
System::Threading::Tasks::Task_1<bool>* System::Xml::AsyncHelper::_get_DoneTaskFalse() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_get_DoneTaskFalse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task_1<bool>*>("System.Xml", "AsyncHelper", "DoneTaskFalse"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.Task`1<System.Boolean> DoneTaskFalse
void System::Xml::AsyncHelper::_set_DoneTaskFalse(System::Threading::Tasks::Task_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_set_DoneTaskFalse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AsyncHelper", "DoneTaskFalse", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Threading.Tasks.Task`1<System.Int32> DoneTaskZero
System::Threading::Tasks::Task_1<int>* System::Xml::AsyncHelper::_get_DoneTaskZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_get_DoneTaskZero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::Task_1<int>*>("System.Xml", "AsyncHelper", "DoneTaskZero"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Threading.Tasks.Task`1<System.Int32> DoneTaskZero
void System::Xml::AsyncHelper::_set_DoneTaskZero(System::Threading::Tasks::Task_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::_set_DoneTaskZero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AsyncHelper", "DoneTaskZero", value));
}
// Autogenerated method: System.Xml.AsyncHelper..cctor
void System::Xml::AsyncHelper::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AsyncHelper::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "AsyncHelper", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AsyncHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AsyncHelper::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.Base64Encoder
#include "System/Xml/Base64Encoder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.Base64Encoder.WriteChars
void System::Xml::Base64Encoder::WriteChars(::Array<::Il2CppChar>* chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Base64Encoder::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chars, index, count);
}
// Autogenerated method: System.Xml.Base64Encoder.Encode
void System::Xml::Base64Encoder::Encode(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Base64Encoder::Encode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Encode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.Base64Encoder.Flush
void System::Xml::Base64Encoder::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Base64Encoder::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Base64Encoder::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Base64Encoder::*)(::Array<::Il2CppChar>*, int, int)>(&Base64Encoder::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Base64Encoder*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Base64Encoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Base64Encoder::*)(::Array<uint8_t>*, int, int)>(&Base64Encoder::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Base64Encoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Base64Encoder::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Base64Encoder::*)()>(&Base64Encoder::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Base64Encoder*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Base64Encoder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Base64Encoder::*)()>(&Base64Encoder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Base64Encoder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Base64Encoder::*)()>(&Base64Encoder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Base64Encoder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlRawWriterBase64Encoder
#include "System/Xml/XmlRawWriterBase64Encoder.hpp"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlRawWriterBase64Encoder.WriteChars
void System::Xml::XmlRawWriterBase64Encoder::WriteChars(::Array<::Il2CppChar>* chars, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriterBase64Encoder::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chars, index, count);
}
// Writing MetadataGetter for method: XmlRawWriterBase64Encoder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriterBase64Encoder::*)(System::Xml::XmlRawWriter*)>(&XmlRawWriterBase64Encoder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriterBase64Encoder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriterBase64Encoder::*)(System::Xml::XmlRawWriter*)>(&XmlRawWriterBase64Encoder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriterBase64Encoder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriterBase64Encoder::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriterBase64Encoder::*)(::Array<::Il2CppChar>*, int, int)>(&XmlRawWriterBase64Encoder::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriterBase64Encoder*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.BinHexEncoder
#include "System/Xml/BinHexEncoder.hpp"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.BinHexEncoder.Encode
void System::Xml::BinHexEncoder::Encode(::Array<uint8_t>* buffer, int index, int count, System::Xml::XmlWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::BinHexEncoder::Encode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "BinHexEncoder", "Encode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, index, count, writer);
}
// Autogenerated method: System.Xml.BinHexEncoder.Encode
int System::Xml::BinHexEncoder::Encode(::Array<uint8_t>* inArray, int offsetIn, int count, ::Array<::Il2CppChar>* outArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::BinHexEncoder::Encode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "BinHexEncoder", "Encode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inArray), ::il2cpp_utils::ExtractType(offsetIn), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(outArray)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inArray, offsetIn, count, outArray);
}
// Writing MetadataGetter for method: BinHexEncoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, int, System::Xml::XmlWriter*)>(&BinHexEncoder::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinHexEncoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>()});
  }
};
// Writing MetadataGetter for method: BinHexEncoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<uint8_t>*, int, int, ::Array<::Il2CppChar>*)>(&BinHexEncoder::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BinHexEncoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.BitStack
#include "System/Xml/BitStack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.BitStack.PushBit
void System::Xml::BitStack::PushBit(bool bit) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::BitStack::PushBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bit)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bit);
}
// Autogenerated method: System.Xml.BitStack.PopBit
bool System::Xml::BitStack::PopBit() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::BitStack::PopBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.BitStack.PeekBit
bool System::Xml::BitStack::PeekBit() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::BitStack::PeekBit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PeekBit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.BitStack.PushCurr
void System::Xml::BitStack::PushCurr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::BitStack::PushCurr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushCurr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.BitStack.PopCurr
void System::Xml::BitStack::PopCurr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::BitStack::PopCurr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopCurr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BitStack::PushBit
// Il2CppName: PushBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BitStack::*)(bool)>(&BitStack::PushBit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitStack*), "PushBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BitStack::PopBit
// Il2CppName: PopBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BitStack::*)()>(&BitStack::PopBit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitStack*), "PopBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BitStack::PeekBit
// Il2CppName: PeekBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BitStack::*)()>(&BitStack::PeekBit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitStack*), "PeekBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BitStack::PushCurr
// Il2CppName: PushCurr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BitStack::*)()>(&BitStack::PushCurr)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitStack*), "PushCurr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BitStack::PopCurr
// Il2CppName: PopCurr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BitStack::*)()>(&BitStack::PopCurr)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitStack*), "PopCurr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BitStack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BitStack::*)()>(&BitStack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitStack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BitStack::*)()>(&BitStack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BitStack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.ByteStack
#include "System/Xml/ByteStack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.ByteStack.Push
void System::Xml::ByteStack::Push(uint8_t data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ByteStack::Push");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.ByteStack.Pop
uint8_t System::Xml::ByteStack::Pop() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ByteStack::Pop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ByteStack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteStack::*)(int)>(&ByteStack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteStack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteStack::*)(int)>(&ByteStack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteStack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ByteStack::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ByteStack::*)(uint8_t)>(&ByteStack::Push)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteStack*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: ByteStack::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (ByteStack::*)()>(&ByteStack::Pop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ByteStack*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.CharEntityEncoderFallback
#include "System/Xml/CharEntityEncoderFallback.hpp"
// Including type: System.Xml.CharEntityEncoderFallbackBuffer
#include "System/Xml/CharEntityEncoderFallbackBuffer.hpp"
// Including type: System.Text.EncoderFallbackBuffer
#include "System/Text/EncoderFallbackBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.CharEntityEncoderFallback.set_StartOffset
void System::Xml::CharEntityEncoderFallback::set_StartOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallback::set_StartOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_StartOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallback.Reset
void System::Xml::CharEntityEncoderFallback::Reset(::Array<int>* textContentMarks, int endMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallback::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textContentMarks), ::il2cpp_utils::ExtractType(endMarkPos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, textContentMarks, endMarkPos);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallback.CanReplaceAt
bool System::Xml::CharEntityEncoderFallback::CanReplaceAt(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallback::CanReplaceAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanReplaceAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallback.CreateFallbackBuffer
System::Text::EncoderFallbackBuffer* System::Xml::CharEntityEncoderFallback::CreateFallbackBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallback::CreateFallbackBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateFallbackBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::EncoderFallbackBuffer*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallback.get_MaxCharCount
int System::Xml::CharEntityEncoderFallback::get_MaxCharCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallback::get_MaxCharCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxCharCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CharEntityEncoderFallback::set_StartOffset
// Il2CppName: set_StartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CharEntityEncoderFallback::*)(int)>(&CharEntityEncoderFallback::set_StartOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallback*), "set_StartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallback::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CharEntityEncoderFallback::*)(::Array<int>*, int)>(&CharEntityEncoderFallback::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallback*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallback::CanReplaceAt
// Il2CppName: CanReplaceAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CharEntityEncoderFallback::*)(int)>(&CharEntityEncoderFallback::CanReplaceAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallback*), "CanReplaceAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CharEntityEncoderFallback::*)()>(&CharEntityEncoderFallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CharEntityEncoderFallback::*)()>(&CharEntityEncoderFallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallback::CreateFallbackBuffer
// Il2CppName: CreateFallbackBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::EncoderFallbackBuffer* (CharEntityEncoderFallback::*)()>(&CharEntityEncoderFallback::CreateFallbackBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallback*), "CreateFallbackBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallback::get_MaxCharCount
// Il2CppName: get_MaxCharCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CharEntityEncoderFallback::*)()>(&CharEntityEncoderFallback::get_MaxCharCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallback*), "get_MaxCharCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.CharEntityEncoderFallbackBuffer
#include "System/Xml/CharEntityEncoderFallbackBuffer.hpp"
// Including type: System.Xml.CharEntityEncoderFallback
#include "System/Xml/CharEntityEncoderFallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.CharEntityEncoderFallbackBuffer.SurrogateCharToUtf32
int System::Xml::CharEntityEncoderFallbackBuffer::SurrogateCharToUtf32(::Il2CppChar highSurrogate, ::Il2CppChar lowSurrogate) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallbackBuffer::SurrogateCharToUtf32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SurrogateCharToUtf32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highSurrogate), ::il2cpp_utils::ExtractType(lowSurrogate)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, highSurrogate, lowSurrogate);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallbackBuffer.Fallback
bool System::Xml::CharEntityEncoderFallbackBuffer::Fallback(::Il2CppChar charUnknown, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charUnknown), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, charUnknown, index);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallbackBuffer.Fallback
bool System::Xml::CharEntityEncoderFallbackBuffer::Fallback(::Il2CppChar charUnknownHigh, ::Il2CppChar charUnknownLow, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallbackBuffer::Fallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(charUnknownHigh), ::il2cpp_utils::ExtractType(charUnknownLow), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, charUnknownHigh, charUnknownLow, index);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallbackBuffer.GetNextChar
::Il2CppChar System::Xml::CharEntityEncoderFallbackBuffer::GetNextChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallbackBuffer::GetNextChar");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallbackBuffer.MovePrevious
bool System::Xml::CharEntityEncoderFallbackBuffer::MovePrevious() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallbackBuffer::MovePrevious");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MovePrevious", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallbackBuffer.get_Remaining
int System::Xml::CharEntityEncoderFallbackBuffer::get_Remaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallbackBuffer::get_Remaining");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Remaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.CharEntityEncoderFallbackBuffer.Reset
void System::Xml::CharEntityEncoderFallbackBuffer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::CharEntityEncoderFallbackBuffer::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CharEntityEncoderFallbackBuffer::*)(System::Xml::CharEntityEncoderFallback*)>(&CharEntityEncoderFallbackBuffer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::CharEntityEncoderFallback*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CharEntityEncoderFallbackBuffer::*)(System::Xml::CharEntityEncoderFallback*)>(&CharEntityEncoderFallbackBuffer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::CharEntityEncoderFallback*>()});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::SurrogateCharToUtf32
// Il2CppName: SurrogateCharToUtf32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CharEntityEncoderFallbackBuffer::*)(::Il2CppChar, ::Il2CppChar)>(&CharEntityEncoderFallbackBuffer::SurrogateCharToUtf32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), "SurrogateCharToUtf32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::Fallback
// Il2CppName: Fallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CharEntityEncoderFallbackBuffer::*)(::Il2CppChar, int)>(&CharEntityEncoderFallbackBuffer::Fallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), "Fallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::Fallback
// Il2CppName: Fallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CharEntityEncoderFallbackBuffer::*)(::Il2CppChar, ::Il2CppChar, int)>(&CharEntityEncoderFallbackBuffer::Fallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), "Fallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::GetNextChar
// Il2CppName: GetNextChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (CharEntityEncoderFallbackBuffer::*)()>(&CharEntityEncoderFallbackBuffer::GetNextChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), "GetNextChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::MovePrevious
// Il2CppName: MovePrevious
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CharEntityEncoderFallbackBuffer::*)()>(&CharEntityEncoderFallbackBuffer::MovePrevious)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), "MovePrevious", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::get_Remaining
// Il2CppName: get_Remaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CharEntityEncoderFallbackBuffer::*)()>(&CharEntityEncoderFallbackBuffer::get_Remaining)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), "get_Remaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CharEntityEncoderFallbackBuffer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CharEntityEncoderFallbackBuffer::*)()>(&CharEntityEncoderFallbackBuffer::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CharEntityEncoderFallbackBuffer*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.ConformanceLevel
#include "System/Xml/ConformanceLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.ConformanceLevel Auto
System::Xml::ConformanceLevel System::Xml::ConformanceLevel::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ConformanceLevel::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ConformanceLevel>("System.Xml", "ConformanceLevel", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ConformanceLevel Auto
void System::Xml::ConformanceLevel::_set_Auto(System::Xml::ConformanceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ConformanceLevel::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ConformanceLevel", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ConformanceLevel Fragment
System::Xml::ConformanceLevel System::Xml::ConformanceLevel::_get_Fragment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ConformanceLevel::_get_Fragment");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ConformanceLevel>("System.Xml", "ConformanceLevel", "Fragment"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ConformanceLevel Fragment
void System::Xml::ConformanceLevel::_set_Fragment(System::Xml::ConformanceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ConformanceLevel::_set_Fragment");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ConformanceLevel", "Fragment", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ConformanceLevel Document
System::Xml::ConformanceLevel System::Xml::ConformanceLevel::_get_Document() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ConformanceLevel::_get_Document");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ConformanceLevel>("System.Xml", "ConformanceLevel", "Document"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ConformanceLevel Document
void System::Xml::ConformanceLevel::_set_Document(System::Xml::ConformanceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ConformanceLevel::_set_Document");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ConformanceLevel", "Document", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.HtmlEncodedRawTextWriter
#include "System/Xml/HtmlEncodedRawTextWriter.hpp"
// Including type: System.Xml.ByteStack
#include "System/Xml/ByteStack.hpp"
// Including type: System.Xml.TernaryTreeReadOnly
#include "System/Xml/TernaryTreeReadOnly.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected System.Xml.TernaryTreeReadOnly elementPropertySearch
System::Xml::TernaryTreeReadOnly* System::Xml::HtmlEncodedRawTextWriter::_get_elementPropertySearch() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::_get_elementPropertySearch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::TernaryTreeReadOnly*>("System.Xml", "HtmlEncodedRawTextWriter", "elementPropertySearch"));
}
// Autogenerated static field setter
// Set static field: static protected System.Xml.TernaryTreeReadOnly elementPropertySearch
void System::Xml::HtmlEncodedRawTextWriter::_set_elementPropertySearch(System::Xml::TernaryTreeReadOnly* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::_set_elementPropertySearch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "HtmlEncodedRawTextWriter", "elementPropertySearch", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Xml.TernaryTreeReadOnly attributePropertySearch
System::Xml::TernaryTreeReadOnly* System::Xml::HtmlEncodedRawTextWriter::_get_attributePropertySearch() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::_get_attributePropertySearch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::TernaryTreeReadOnly*>("System.Xml", "HtmlEncodedRawTextWriter", "attributePropertySearch"));
}
// Autogenerated static field setter
// Set static field: static protected System.Xml.TernaryTreeReadOnly attributePropertySearch
void System::Xml::HtmlEncodedRawTextWriter::_set_attributePropertySearch(System::Xml::TernaryTreeReadOnly* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::_set_attributePropertySearch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "HtmlEncodedRawTextWriter", "attributePropertySearch", value));
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.Init
void System::Xml::HtmlEncodedRawTextWriter::Init(System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settings);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteMetaElement
void System::Xml::HtmlEncodedRawTextWriter::WriteMetaElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteMetaElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteMetaElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteHtmlElementTextBlock
void System::Xml::HtmlEncodedRawTextWriter::WriteHtmlElementTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteHtmlElementTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHtmlElementTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteHtmlAttributeTextBlock
void System::Xml::HtmlEncodedRawTextWriter::WriteHtmlAttributeTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteHtmlAttributeTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHtmlAttributeTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteHtmlAttributeText
void System::Xml::HtmlEncodedRawTextWriter::WriteHtmlAttributeText(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteHtmlAttributeText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHtmlAttributeText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteUriAttributeText
void System::Xml::HtmlEncodedRawTextWriter::WriteUriAttributeText(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteUriAttributeText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteUriAttributeText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.OutputRestAmps
void System::Xml::HtmlEncodedRawTextWriter::OutputRestAmps() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::OutputRestAmps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OutputRestAmps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteXmlDeclaration
void System::Xml::HtmlEncodedRawTextWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteXmlDeclaration
void System::Xml::HtmlEncodedRawTextWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteDocType
void System::Xml::HtmlEncodedRawTextWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteStartElement
void System::Xml::HtmlEncodedRawTextWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.StartElementContent
void System::Xml::HtmlEncodedRawTextWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteEndElement
void System::Xml::HtmlEncodedRawTextWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteFullEndElement
void System::Xml::HtmlEncodedRawTextWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteStartAttribute
void System::Xml::HtmlEncodedRawTextWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteEndAttribute
void System::Xml::HtmlEncodedRawTextWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteProcessingInstruction
void System::Xml::HtmlEncodedRawTextWriter::WriteProcessingInstruction(::Il2CppString* target, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target, text);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteString
void System::Xml::HtmlEncodedRawTextWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteEntityRef
void System::Xml::HtmlEncodedRawTextWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteCharEntity
void System::Xml::HtmlEncodedRawTextWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteSurrogateCharEntity
void System::Xml::HtmlEncodedRawTextWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriter.WriteChars
void System::Xml::HtmlEncodedRawTextWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriter::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteMetaElement
// Il2CppName: WriteMetaElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)()>(&HtmlEncodedRawTextWriter::WriteMetaElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteMetaElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteHtmlElementTextBlock
// Il2CppName: WriteHtmlElementTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlEncodedRawTextWriter::WriteHtmlElementTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteHtmlElementTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteHtmlAttributeTextBlock
// Il2CppName: WriteHtmlAttributeTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlEncodedRawTextWriter::WriteHtmlAttributeTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteHtmlAttributeTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteHtmlAttributeText
// Il2CppName: WriteHtmlAttributeText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlEncodedRawTextWriter::WriteHtmlAttributeText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteHtmlAttributeText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteUriAttributeText
// Il2CppName: WriteUriAttributeText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlEncodedRawTextWriter::WriteUriAttributeText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteUriAttributeText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::OutputRestAmps
// Il2CppName: OutputRestAmps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)()>(&HtmlEncodedRawTextWriter::OutputRestAmps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "OutputRestAmps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(System::Xml::XmlStandalone)>(&HtmlEncodedRawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)()>(&HtmlEncodedRawTextWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)()>(&HtmlEncodedRawTextWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppString*)>(&HtmlEncodedRawTextWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppChar)>(&HtmlEncodedRawTextWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Il2CppChar, ::Il2CppChar)>(&HtmlEncodedRawTextWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&HtmlEncodedRawTextWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.HtmlEncodedRawTextWriterIndent
#include "System/Xml/HtmlEncodedRawTextWriterIndent.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.WriteIndent
void System::Xml::HtmlEncodedRawTextWriterIndent::WriteIndent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::WriteIndent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteIndent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.WriteDocType
void System::Xml::HtmlEncodedRawTextWriterIndent::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.WriteStartElement
void System::Xml::HtmlEncodedRawTextWriterIndent::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.StartElementContent
void System::Xml::HtmlEncodedRawTextWriterIndent::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.WriteEndElement
void System::Xml::HtmlEncodedRawTextWriterIndent::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.WriteStartAttribute
void System::Xml::HtmlEncodedRawTextWriterIndent::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.FlushBuffer
void System::Xml::HtmlEncodedRawTextWriterIndent::FlushBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::FlushBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlEncodedRawTextWriterIndent.Init
void System::Xml::HtmlEncodedRawTextWriterIndent::Init(System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlEncodedRawTextWriterIndent::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settings);
}
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::WriteIndent
// Il2CppName: WriteIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)()>(&HtmlEncodedRawTextWriterIndent::WriteIndent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "WriteIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriterIndent::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriterIndent::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)()>(&HtmlEncodedRawTextWriterIndent::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriterIndent::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlEncodedRawTextWriterIndent::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::FlushBuffer
// Il2CppName: FlushBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)()>(&HtmlEncodedRawTextWriterIndent::FlushBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "FlushBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlEncodedRawTextWriterIndent::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlEncodedRawTextWriterIndent::*)(System::Xml::XmlWriterSettings*)>(&HtmlEncodedRawTextWriterIndent::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlEncodedRawTextWriterIndent*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.HtmlTernaryTree
#include "System/Xml/HtmlTernaryTree.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Byte[] htmlElements
::Array<uint8_t>* System::Xml::HtmlTernaryTree::_get_htmlElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlTernaryTree::_get_htmlElements");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Xml", "HtmlTernaryTree", "htmlElements"));
}
// Autogenerated static field setter
// Set static field: static System.Byte[] htmlElements
void System::Xml::HtmlTernaryTree::_set_htmlElements(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlTernaryTree::_set_htmlElements");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "HtmlTernaryTree", "htmlElements", value));
}
// Autogenerated static field getter
// Get static field: static System.Byte[] htmlAttributes
::Array<uint8_t>* System::Xml::HtmlTernaryTree::_get_htmlAttributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlTernaryTree::_get_htmlAttributes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Xml", "HtmlTernaryTree", "htmlAttributes"));
}
// Autogenerated static field setter
// Set static field: static System.Byte[] htmlAttributes
void System::Xml::HtmlTernaryTree::_set_htmlAttributes(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlTernaryTree::_set_htmlAttributes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "HtmlTernaryTree", "htmlAttributes", value));
}
// Autogenerated method: System.Xml.HtmlTernaryTree..cctor
void System::Xml::HtmlTernaryTree::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlTernaryTree::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "HtmlTernaryTree", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: HtmlTernaryTree::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HtmlTernaryTree::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlTernaryTree*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.HtmlUtf8RawTextWriter
#include "System/Xml/HtmlUtf8RawTextWriter.hpp"
// Including type: System.Xml.ByteStack
#include "System/Xml/ByteStack.hpp"
// Including type: System.Xml.TernaryTreeReadOnly
#include "System/Xml/TernaryTreeReadOnly.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected System.Xml.TernaryTreeReadOnly elementPropertySearch
System::Xml::TernaryTreeReadOnly* System::Xml::HtmlUtf8RawTextWriter::_get_elementPropertySearch() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::_get_elementPropertySearch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::TernaryTreeReadOnly*>("System.Xml", "HtmlUtf8RawTextWriter", "elementPropertySearch"));
}
// Autogenerated static field setter
// Set static field: static protected System.Xml.TernaryTreeReadOnly elementPropertySearch
void System::Xml::HtmlUtf8RawTextWriter::_set_elementPropertySearch(System::Xml::TernaryTreeReadOnly* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::_set_elementPropertySearch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "HtmlUtf8RawTextWriter", "elementPropertySearch", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Xml.TernaryTreeReadOnly attributePropertySearch
System::Xml::TernaryTreeReadOnly* System::Xml::HtmlUtf8RawTextWriter::_get_attributePropertySearch() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::_get_attributePropertySearch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::TernaryTreeReadOnly*>("System.Xml", "HtmlUtf8RawTextWriter", "attributePropertySearch"));
}
// Autogenerated static field setter
// Set static field: static protected System.Xml.TernaryTreeReadOnly attributePropertySearch
void System::Xml::HtmlUtf8RawTextWriter::_set_attributePropertySearch(System::Xml::TernaryTreeReadOnly* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::_set_attributePropertySearch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "HtmlUtf8RawTextWriter", "attributePropertySearch", value));
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.Init
void System::Xml::HtmlUtf8RawTextWriter::Init(System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settings);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteMetaElement
void System::Xml::HtmlUtf8RawTextWriter::WriteMetaElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteMetaElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteMetaElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteHtmlElementTextBlock
void System::Xml::HtmlUtf8RawTextWriter::WriteHtmlElementTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteHtmlElementTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHtmlElementTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteHtmlAttributeTextBlock
void System::Xml::HtmlUtf8RawTextWriter::WriteHtmlAttributeTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteHtmlAttributeTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHtmlAttributeTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteHtmlAttributeText
void System::Xml::HtmlUtf8RawTextWriter::WriteHtmlAttributeText(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteHtmlAttributeText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteHtmlAttributeText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteUriAttributeText
void System::Xml::HtmlUtf8RawTextWriter::WriteUriAttributeText(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteUriAttributeText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteUriAttributeText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.OutputRestAmps
void System::Xml::HtmlUtf8RawTextWriter::OutputRestAmps() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::OutputRestAmps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OutputRestAmps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteXmlDeclaration
void System::Xml::HtmlUtf8RawTextWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteXmlDeclaration
void System::Xml::HtmlUtf8RawTextWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteDocType
void System::Xml::HtmlUtf8RawTextWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteStartElement
void System::Xml::HtmlUtf8RawTextWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.StartElementContent
void System::Xml::HtmlUtf8RawTextWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteEndElement
void System::Xml::HtmlUtf8RawTextWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteFullEndElement
void System::Xml::HtmlUtf8RawTextWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteStartAttribute
void System::Xml::HtmlUtf8RawTextWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteEndAttribute
void System::Xml::HtmlUtf8RawTextWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteProcessingInstruction
void System::Xml::HtmlUtf8RawTextWriter::WriteProcessingInstruction(::Il2CppString* target, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target, text);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteString
void System::Xml::HtmlUtf8RawTextWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteEntityRef
void System::Xml::HtmlUtf8RawTextWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteCharEntity
void System::Xml::HtmlUtf8RawTextWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteSurrogateCharEntity
void System::Xml::HtmlUtf8RawTextWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriter.WriteChars
void System::Xml::HtmlUtf8RawTextWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(System::Xml::XmlWriterSettings*)>(&HtmlUtf8RawTextWriter::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteMetaElement
// Il2CppName: WriteMetaElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)()>(&HtmlUtf8RawTextWriter::WriteMetaElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteMetaElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteHtmlElementTextBlock
// Il2CppName: WriteHtmlElementTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlUtf8RawTextWriter::WriteHtmlElementTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteHtmlElementTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteHtmlAttributeTextBlock
// Il2CppName: WriteHtmlAttributeTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlUtf8RawTextWriter::WriteHtmlAttributeTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteHtmlAttributeTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteHtmlAttributeText
// Il2CppName: WriteHtmlAttributeText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlUtf8RawTextWriter::WriteHtmlAttributeText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteHtmlAttributeText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteUriAttributeText
// Il2CppName: WriteUriAttributeText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&HtmlUtf8RawTextWriter::WriteUriAttributeText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteUriAttributeText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::OutputRestAmps
// Il2CppName: OutputRestAmps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)()>(&HtmlUtf8RawTextWriter::OutputRestAmps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "OutputRestAmps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(System::Xml::XmlStandalone)>(&HtmlUtf8RawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)()>(&HtmlUtf8RawTextWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)()>(&HtmlUtf8RawTextWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppString*)>(&HtmlUtf8RawTextWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppChar)>(&HtmlUtf8RawTextWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Il2CppChar, ::Il2CppChar)>(&HtmlUtf8RawTextWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&HtmlUtf8RawTextWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.HtmlUtf8RawTextWriterIndent
#include "System/Xml/HtmlUtf8RawTextWriterIndent.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.WriteIndent
void System::Xml::HtmlUtf8RawTextWriterIndent::WriteIndent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::WriteIndent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteIndent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.WriteDocType
void System::Xml::HtmlUtf8RawTextWriterIndent::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.WriteStartElement
void System::Xml::HtmlUtf8RawTextWriterIndent::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.StartElementContent
void System::Xml::HtmlUtf8RawTextWriterIndent::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.WriteEndElement
void System::Xml::HtmlUtf8RawTextWriterIndent::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.WriteStartAttribute
void System::Xml::HtmlUtf8RawTextWriterIndent::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.FlushBuffer
void System::Xml::HtmlUtf8RawTextWriterIndent::FlushBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::FlushBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.HtmlUtf8RawTextWriterIndent.Init
void System::Xml::HtmlUtf8RawTextWriterIndent::Init(System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::HtmlUtf8RawTextWriterIndent::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settings);
}
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::WriteIndent
// Il2CppName: WriteIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)()>(&HtmlUtf8RawTextWriterIndent::WriteIndent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "WriteIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlUtf8RawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&HtmlUtf8RawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriterIndent::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriterIndent::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)()>(&HtmlUtf8RawTextWriterIndent::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriterIndent::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&HtmlUtf8RawTextWriterIndent::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::FlushBuffer
// Il2CppName: FlushBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)()>(&HtmlUtf8RawTextWriterIndent::FlushBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "FlushBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HtmlUtf8RawTextWriterIndent::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HtmlUtf8RawTextWriterIndent::*)(System::Xml::XmlWriterSettings*)>(&HtmlUtf8RawTextWriterIndent::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HtmlUtf8RawTextWriterIndent*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.OnRemoveWriter
#include "System/Xml/OnRemoveWriter.hpp"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.OnRemoveWriter.Invoke
void System::Xml::OnRemoveWriter::Invoke(System::Xml::XmlRawWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::OnRemoveWriter::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: System.Xml.OnRemoveWriter.BeginInvoke
System::IAsyncResult* System::Xml::OnRemoveWriter::BeginInvoke(System::Xml::XmlRawWriter* writer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::OnRemoveWriter::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, writer, callback, object);
}
// Autogenerated method: System.Xml.OnRemoveWriter.EndInvoke
void System::Xml::OnRemoveWriter::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::OnRemoveWriter::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OnRemoveWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OnRemoveWriter::*)(::Il2CppObject*, System::IntPtr)>(&OnRemoveWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnRemoveWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OnRemoveWriter::*)(::Il2CppObject*, System::IntPtr)>(&OnRemoveWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnRemoveWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: OnRemoveWriter::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OnRemoveWriter::*)(System::Xml::XmlRawWriter*)>(&OnRemoveWriter::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnRemoveWriter*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>()});
  }
};
// Writing MetadataGetter for method: OnRemoveWriter::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (OnRemoveWriter::*)(System::Xml::XmlRawWriter*, System::AsyncCallback*, ::Il2CppObject*)>(&OnRemoveWriter::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnRemoveWriter*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OnRemoveWriter::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OnRemoveWriter::*)(System::IAsyncResult*)>(&OnRemoveWriter::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OnRemoveWriter*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.NamespaceHandling
#include "System/Xml/NamespaceHandling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.NamespaceHandling Default
System::Xml::NamespaceHandling System::Xml::NamespaceHandling::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NamespaceHandling::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::NamespaceHandling>("System.Xml", "NamespaceHandling", "Default"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.NamespaceHandling Default
void System::Xml::NamespaceHandling::_set_Default(System::Xml::NamespaceHandling value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NamespaceHandling::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "NamespaceHandling", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.NamespaceHandling OmitDuplicates
System::Xml::NamespaceHandling System::Xml::NamespaceHandling::_get_OmitDuplicates() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NamespaceHandling::_get_OmitDuplicates");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::NamespaceHandling>("System.Xml", "NamespaceHandling", "OmitDuplicates"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.NamespaceHandling OmitDuplicates
void System::Xml::NamespaceHandling::_set_OmitDuplicates(System::Xml::NamespaceHandling value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NamespaceHandling::_set_OmitDuplicates");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "NamespaceHandling", "OmitDuplicates", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.NewLineHandling
#include "System/Xml/NewLineHandling.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.NewLineHandling Replace
System::Xml::NewLineHandling System::Xml::NewLineHandling::_get_Replace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NewLineHandling::_get_Replace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::NewLineHandling>("System.Xml", "NewLineHandling", "Replace"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.NewLineHandling Replace
void System::Xml::NewLineHandling::_set_Replace(System::Xml::NewLineHandling value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NewLineHandling::_set_Replace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "NewLineHandling", "Replace", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.NewLineHandling Entitize
System::Xml::NewLineHandling System::Xml::NewLineHandling::_get_Entitize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NewLineHandling::_get_Entitize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::NewLineHandling>("System.Xml", "NewLineHandling", "Entitize"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.NewLineHandling Entitize
void System::Xml::NewLineHandling::_set_Entitize(System::Xml::NewLineHandling value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NewLineHandling::_set_Entitize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "NewLineHandling", "Entitize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.NewLineHandling None
System::Xml::NewLineHandling System::Xml::NewLineHandling::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NewLineHandling::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::NewLineHandling>("System.Xml", "NewLineHandling", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.NewLineHandling None
void System::Xml::NewLineHandling::_set_None(System::Xml::NewLineHandling value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::NewLineHandling::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "NewLineHandling", "None", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.QueryOutputWriter
#include "System/Xml/QueryOutputWriter.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Xml.XmlQualifiedName
#include "System/Xml/XmlQualifiedName.hpp"
// Including type: System.Xml.BitStack
#include "System/Xml/BitStack.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
// Including type: System.Xml.XmlStandalone
#include "System/Xml/XmlStandalone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.QueryOutputWriter.StartCDataSection
bool System::Xml::QueryOutputWriter::StartCDataSection() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::StartCDataSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCDataSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.QueryOutputWriter.EndCDataSection
void System::Xml::QueryOutputWriter::EndCDataSection() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::EndCDataSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndCDataSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.QueryOutputWriter.set_NamespaceResolver
void System::Xml::QueryOutputWriter::set_NamespaceResolver(System::Xml::IXmlNamespaceResolver* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::set_NamespaceResolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NamespaceResolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteXmlDeclaration
void System::Xml::QueryOutputWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteXmlDeclaration
void System::Xml::QueryOutputWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteDocType
void System::Xml::QueryOutputWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteStartElement
void System::Xml::QueryOutputWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteEndElement
void System::Xml::QueryOutputWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteFullEndElement
void System::Xml::QueryOutputWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.QueryOutputWriter.StartElementContent
void System::Xml::QueryOutputWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteStartAttribute
void System::Xml::QueryOutputWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteEndAttribute
void System::Xml::QueryOutputWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteNamespaceDeclaration
void System::Xml::QueryOutputWriter::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.QueryOutputWriter.get_SupportsNamespaceDeclarationInChunks
bool System::Xml::QueryOutputWriter::get_SupportsNamespaceDeclarationInChunks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::get_SupportsNamespaceDeclarationInChunks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteStartNamespaceDeclaration
void System::Xml::QueryOutputWriter::WriteStartNamespaceDeclaration(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteStartNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteEndNamespaceDeclaration
void System::Xml::QueryOutputWriter::WriteEndNamespaceDeclaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteEndNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteCData
void System::Xml::QueryOutputWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteComment
void System::Xml::QueryOutputWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteProcessingInstruction
void System::Xml::QueryOutputWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteWhitespace
void System::Xml::QueryOutputWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteString
void System::Xml::QueryOutputWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteChars
void System::Xml::QueryOutputWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteEntityRef
void System::Xml::QueryOutputWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteCharEntity
void System::Xml::QueryOutputWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteSurrogateCharEntity
void System::Xml::QueryOutputWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteRaw
void System::Xml::QueryOutputWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.QueryOutputWriter.WriteRaw
void System::Xml::QueryOutputWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.QueryOutputWriter.Close
void System::Xml::QueryOutputWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.QueryOutputWriter.Flush
void System::Xml::QueryOutputWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::QueryOutputWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: QueryOutputWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(System::Xml::XmlRawWriter*, System::Xml::XmlWriterSettings*)>(&QueryOutputWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(System::Xml::XmlRawWriter*, System::Xml::XmlWriterSettings*)>(&QueryOutputWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::StartCDataSection
// Il2CppName: StartCDataSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (QueryOutputWriter::*)()>(&QueryOutputWriter::StartCDataSection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "StartCDataSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::EndCDataSection
// Il2CppName: EndCDataSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)()>(&QueryOutputWriter::EndCDataSection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "EndCDataSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::set_NamespaceResolver
// Il2CppName: set_NamespaceResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(System::Xml::IXmlNamespaceResolver*)>(&QueryOutputWriter::set_NamespaceResolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "set_NamespaceResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::IXmlNamespaceResolver*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(System::Xml::XmlStandalone)>(&QueryOutputWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&QueryOutputWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&QueryOutputWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&QueryOutputWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&QueryOutputWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)()>(&QueryOutputWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&QueryOutputWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)()>(&QueryOutputWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*, ::Il2CppString*)>(&QueryOutputWriter::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::get_SupportsNamespaceDeclarationInChunks
// Il2CppName: get_SupportsNamespaceDeclarationInChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (QueryOutputWriter::*)()>(&QueryOutputWriter::get_SupportsNamespaceDeclarationInChunks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteStartNamespaceDeclaration
// Il2CppName: WriteStartNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteStartNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteEndNamespaceDeclaration
// Il2CppName: WriteEndNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)()>(&QueryOutputWriter::WriteEndNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*, ::Il2CppString*)>(&QueryOutputWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Array<::Il2CppChar>*, int, int)>(&QueryOutputWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppChar)>(&QueryOutputWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppChar, ::Il2CppChar)>(&QueryOutputWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Array<::Il2CppChar>*, int, int)>(&QueryOutputWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)(::Il2CppString*)>(&QueryOutputWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)()>(&QueryOutputWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QueryOutputWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QueryOutputWriter::*)()>(&QueryOutputWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QueryOutputWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.ElementProperties
#include "System/Xml/ElementProperties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties DEFAULT
System::Xml::ElementProperties System::Xml::ElementProperties::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties DEFAULT
void System::Xml::ElementProperties::_set_DEFAULT(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties URI_PARENT
System::Xml::ElementProperties System::Xml::ElementProperties::_get_URI_PARENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_URI_PARENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "URI_PARENT"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties URI_PARENT
void System::Xml::ElementProperties::_set_URI_PARENT(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_URI_PARENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "URI_PARENT", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties BOOL_PARENT
System::Xml::ElementProperties System::Xml::ElementProperties::_get_BOOL_PARENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_BOOL_PARENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "BOOL_PARENT"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties BOOL_PARENT
void System::Xml::ElementProperties::_set_BOOL_PARENT(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_BOOL_PARENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "BOOL_PARENT", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties NAME_PARENT
System::Xml::ElementProperties System::Xml::ElementProperties::_get_NAME_PARENT() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_NAME_PARENT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "NAME_PARENT"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties NAME_PARENT
void System::Xml::ElementProperties::_set_NAME_PARENT(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_NAME_PARENT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "NAME_PARENT", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties EMPTY
System::Xml::ElementProperties System::Xml::ElementProperties::_get_EMPTY() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_EMPTY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "EMPTY"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties EMPTY
void System::Xml::ElementProperties::_set_EMPTY(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_EMPTY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "EMPTY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties NO_ENTITIES
System::Xml::ElementProperties System::Xml::ElementProperties::_get_NO_ENTITIES() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_NO_ENTITIES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "NO_ENTITIES"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties NO_ENTITIES
void System::Xml::ElementProperties::_set_NO_ENTITIES(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_NO_ENTITIES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "NO_ENTITIES", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties HEAD
System::Xml::ElementProperties System::Xml::ElementProperties::_get_HEAD() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_HEAD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "HEAD"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties HEAD
void System::Xml::ElementProperties::_set_HEAD(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_HEAD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "HEAD", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties BLOCK_WS
System::Xml::ElementProperties System::Xml::ElementProperties::_get_BLOCK_WS() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_BLOCK_WS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "BLOCK_WS"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties BLOCK_WS
void System::Xml::ElementProperties::_set_BLOCK_WS(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_BLOCK_WS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "BLOCK_WS", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ElementProperties HAS_NS
System::Xml::ElementProperties System::Xml::ElementProperties::_get_HAS_NS() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_get_HAS_NS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ElementProperties>("System.Xml", "ElementProperties", "HAS_NS"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ElementProperties HAS_NS
void System::Xml::ElementProperties::_set_HAS_NS(System::Xml::ElementProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ElementProperties::_set_HAS_NS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ElementProperties", "HAS_NS", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.AttributeProperties
#include "System/Xml/AttributeProperties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.AttributeProperties DEFAULT
System::Xml::AttributeProperties System::Xml::AttributeProperties::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::AttributeProperties>("System.Xml", "AttributeProperties", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.AttributeProperties DEFAULT
void System::Xml::AttributeProperties::_set_DEFAULT(System::Xml::AttributeProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AttributeProperties", "DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.AttributeProperties URI
System::Xml::AttributeProperties System::Xml::AttributeProperties::_get_URI() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_get_URI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::AttributeProperties>("System.Xml", "AttributeProperties", "URI"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.AttributeProperties URI
void System::Xml::AttributeProperties::_set_URI(System::Xml::AttributeProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_set_URI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AttributeProperties", "URI", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.AttributeProperties BOOLEAN
System::Xml::AttributeProperties System::Xml::AttributeProperties::_get_BOOLEAN() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_get_BOOLEAN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::AttributeProperties>("System.Xml", "AttributeProperties", "BOOLEAN"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.AttributeProperties BOOLEAN
void System::Xml::AttributeProperties::_set_BOOLEAN(System::Xml::AttributeProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_set_BOOLEAN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AttributeProperties", "BOOLEAN", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.AttributeProperties NAME
System::Xml::AttributeProperties System::Xml::AttributeProperties::_get_NAME() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_get_NAME");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::AttributeProperties>("System.Xml", "AttributeProperties", "NAME"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.AttributeProperties NAME
void System::Xml::AttributeProperties::_set_NAME(System::Xml::AttributeProperties value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::AttributeProperties::_set_NAME");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "AttributeProperties", "NAME", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.TernaryTreeReadOnly
#include "System/Xml/TernaryTreeReadOnly.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.TernaryTreeReadOnly.FindCaseInsensitiveString
uint8_t System::Xml::TernaryTreeReadOnly::FindCaseInsensitiveString(::Il2CppString* stringToFind) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TernaryTreeReadOnly::FindCaseInsensitiveString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindCaseInsensitiveString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringToFind)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method, stringToFind);
}
// Writing MetadataGetter for method: TernaryTreeReadOnly::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TernaryTreeReadOnly::*)(::Array<uint8_t>*)>(&TernaryTreeReadOnly::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TernaryTreeReadOnly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TernaryTreeReadOnly::*)(::Array<uint8_t>*)>(&TernaryTreeReadOnly::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TernaryTreeReadOnly*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: TernaryTreeReadOnly::FindCaseInsensitiveString
// Il2CppName: FindCaseInsensitiveString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (TernaryTreeReadOnly::*)(::Il2CppString*)>(&TernaryTreeReadOnly::FindCaseInsensitiveString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TernaryTreeReadOnly*), "FindCaseInsensitiveString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.SecureStringHasher
#include "System/Xml/SecureStringHasher.hpp"
// Including type: System.Xml.SecureStringHasher/HashCodeOfStringDelegate
#include "System/Xml/SecureStringHasher_HashCodeOfStringDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Xml.SecureStringHasher/HashCodeOfStringDelegate hashCodeDelegate
System::Xml::SecureStringHasher::HashCodeOfStringDelegate* System::Xml::SecureStringHasher::_get_hashCodeDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::_get_hashCodeDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::SecureStringHasher::HashCodeOfStringDelegate*>("System.Xml", "SecureStringHasher", "hashCodeDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Xml.SecureStringHasher/HashCodeOfStringDelegate hashCodeDelegate
void System::Xml::SecureStringHasher::_set_hashCodeDelegate(System::Xml::SecureStringHasher::HashCodeOfStringDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::_set_hashCodeDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "SecureStringHasher", "hashCodeDelegate", value));
}
// Autogenerated method: System.Xml.SecureStringHasher.Equals
bool System::Xml::SecureStringHasher::Equals(::Il2CppString* x, ::Il2CppString* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x, y);
}
// Autogenerated method: System.Xml.SecureStringHasher.GetHashCode
int System::Xml::SecureStringHasher::GetHashCode(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, key);
}
// Autogenerated method: System.Xml.SecureStringHasher.GetHashCodeOfString
int System::Xml::SecureStringHasher::GetHashCodeOfString(::Il2CppString* key, int sLen, int64_t additionalEntropy) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::GetHashCodeOfString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "SecureStringHasher", "GetHashCodeOfString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(sLen), ::il2cpp_utils::ExtractType(additionalEntropy)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, sLen, additionalEntropy);
}
// Autogenerated method: System.Xml.SecureStringHasher.GetHashCodeDelegate
System::Xml::SecureStringHasher::HashCodeOfStringDelegate* System::Xml::SecureStringHasher::GetHashCodeDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::GetHashCodeDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "SecureStringHasher", "GetHashCodeDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::SecureStringHasher::HashCodeOfStringDelegate*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SecureStringHasher::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SecureStringHasher::*)(::Il2CppString*, ::Il2CppString*)>(&SecureStringHasher::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SecureStringHasher::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SecureStringHasher::*)(::Il2CppString*)>(&SecureStringHasher::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SecureStringHasher::GetHashCodeOfString
// Il2CppName: GetHashCodeOfString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, int64_t)>(&SecureStringHasher::GetHashCodeOfString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher*), "GetHashCodeOfString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: SecureStringHasher::GetHashCodeDelegate
// Il2CppName: GetHashCodeDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::SecureStringHasher::HashCodeOfStringDelegate* (*)()>(&SecureStringHasher::GetHashCodeDelegate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher*), "GetHashCodeDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureStringHasher::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureStringHasher::*)()>(&SecureStringHasher::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureStringHasher::*)()>(&SecureStringHasher::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.SecureStringHasher/HashCodeOfStringDelegate
#include "System/Xml/SecureStringHasher_HashCodeOfStringDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.SecureStringHasher/HashCodeOfStringDelegate.Invoke
int System::Xml::SecureStringHasher::HashCodeOfStringDelegate::Invoke(::Il2CppString* s, int sLen, int64_t additionalEntropy) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::HashCodeOfStringDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(sLen), ::il2cpp_utils::ExtractType(additionalEntropy)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, s, sLen, additionalEntropy);
}
// Autogenerated method: System.Xml.SecureStringHasher/HashCodeOfStringDelegate.BeginInvoke
System::IAsyncResult* System::Xml::SecureStringHasher::HashCodeOfStringDelegate::BeginInvoke(::Il2CppString* s, int sLen, int64_t additionalEntropy, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::HashCodeOfStringDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(sLen), ::il2cpp_utils::ExtractType(additionalEntropy), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, s, sLen, additionalEntropy, callback, object);
}
// Autogenerated method: System.Xml.SecureStringHasher/HashCodeOfStringDelegate.EndInvoke
int System::Xml::SecureStringHasher::HashCodeOfStringDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::SecureStringHasher::HashCodeOfStringDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: SecureStringHasher::HashCodeOfStringDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureStringHasher::HashCodeOfStringDelegate::*)(::Il2CppObject*, System::IntPtr)>(&SecureStringHasher::HashCodeOfStringDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher::HashCodeOfStringDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureStringHasher::HashCodeOfStringDelegate::*)(::Il2CppObject*, System::IntPtr)>(&SecureStringHasher::HashCodeOfStringDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher::HashCodeOfStringDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SecureStringHasher::HashCodeOfStringDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SecureStringHasher::HashCodeOfStringDelegate::*)(::Il2CppString*, int, int64_t)>(&SecureStringHasher::HashCodeOfStringDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher::HashCodeOfStringDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: SecureStringHasher::HashCodeOfStringDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (SecureStringHasher::HashCodeOfStringDelegate::*)(::Il2CppString*, int, int64_t, System::AsyncCallback*, ::Il2CppObject*)>(&SecureStringHasher::HashCodeOfStringDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher::HashCodeOfStringDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: SecureStringHasher::HashCodeOfStringDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SecureStringHasher::HashCodeOfStringDelegate::*)(System::IAsyncResult*)>(&SecureStringHasher::HashCodeOfStringDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureStringHasher::HashCodeOfStringDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.TextEncodedRawTextWriter
#include "System/Xml/TextEncodedRawTextWriter.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteXmlDeclaration
void System::Xml::TextEncodedRawTextWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteXmlDeclaration
void System::Xml::TextEncodedRawTextWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteDocType
void System::Xml::TextEncodedRawTextWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteStartElement
void System::Xml::TextEncodedRawTextWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteEndElement
void System::Xml::TextEncodedRawTextWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteFullEndElement
void System::Xml::TextEncodedRawTextWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.StartElementContent
void System::Xml::TextEncodedRawTextWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteStartAttribute
void System::Xml::TextEncodedRawTextWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteEndAttribute
void System::Xml::TextEncodedRawTextWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteNamespaceDeclaration
void System::Xml::TextEncodedRawTextWriter::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.get_SupportsNamespaceDeclarationInChunks
bool System::Xml::TextEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteCData
void System::Xml::TextEncodedRawTextWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteComment
void System::Xml::TextEncodedRawTextWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteProcessingInstruction
void System::Xml::TextEncodedRawTextWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteEntityRef
void System::Xml::TextEncodedRawTextWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteCharEntity
void System::Xml::TextEncodedRawTextWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteSurrogateCharEntity
void System::Xml::TextEncodedRawTextWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteWhitespace
void System::Xml::TextEncodedRawTextWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteString
void System::Xml::TextEncodedRawTextWriter::WriteString(::Il2CppString* textBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textBlock)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, textBlock);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteChars
void System::Xml::TextEncodedRawTextWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteRaw
void System::Xml::TextEncodedRawTextWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.TextEncodedRawTextWriter.WriteRaw
void System::Xml::TextEncodedRawTextWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextEncodedRawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Writing MetadataGetter for method: TextEncodedRawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&TextEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&TextEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&TextEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&TextEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(System::Xml::XmlStandalone)>(&TextEncodedRawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*)>(&TextEncodedRawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextEncodedRawTextWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextEncodedRawTextWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextEncodedRawTextWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextEncodedRawTextWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)()>(&TextEncodedRawTextWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextEncodedRawTextWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)()>(&TextEncodedRawTextWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&TextEncodedRawTextWriter::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks
// Il2CppName: get_SupportsNamespaceDeclarationInChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextEncodedRawTextWriter::*)()>(&TextEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*)>(&TextEncodedRawTextWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*)>(&TextEncodedRawTextWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&TextEncodedRawTextWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*)>(&TextEncodedRawTextWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppChar)>(&TextEncodedRawTextWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppChar, ::Il2CppChar)>(&TextEncodedRawTextWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*)>(&TextEncodedRawTextWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*)>(&TextEncodedRawTextWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextEncodedRawTextWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextEncodedRawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextEncodedRawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextEncodedRawTextWriter::*)(::Il2CppString*)>(&TextEncodedRawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextEncodedRawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.TextUtf8RawTextWriter
#include "System/Xml/TextUtf8RawTextWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteXmlDeclaration
void System::Xml::TextUtf8RawTextWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteXmlDeclaration
void System::Xml::TextUtf8RawTextWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteDocType
void System::Xml::TextUtf8RawTextWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteStartElement
void System::Xml::TextUtf8RawTextWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteEndElement
void System::Xml::TextUtf8RawTextWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteFullEndElement
void System::Xml::TextUtf8RawTextWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.StartElementContent
void System::Xml::TextUtf8RawTextWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteStartAttribute
void System::Xml::TextUtf8RawTextWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteEndAttribute
void System::Xml::TextUtf8RawTextWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteNamespaceDeclaration
void System::Xml::TextUtf8RawTextWriter::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.get_SupportsNamespaceDeclarationInChunks
bool System::Xml::TextUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteCData
void System::Xml::TextUtf8RawTextWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteComment
void System::Xml::TextUtf8RawTextWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteProcessingInstruction
void System::Xml::TextUtf8RawTextWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteEntityRef
void System::Xml::TextUtf8RawTextWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteCharEntity
void System::Xml::TextUtf8RawTextWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteSurrogateCharEntity
void System::Xml::TextUtf8RawTextWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteWhitespace
void System::Xml::TextUtf8RawTextWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteString
void System::Xml::TextUtf8RawTextWriter::WriteString(::Il2CppString* textBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textBlock)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, textBlock);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteChars
void System::Xml::TextUtf8RawTextWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteRaw
void System::Xml::TextUtf8RawTextWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.TextUtf8RawTextWriter.WriteRaw
void System::Xml::TextUtf8RawTextWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TextUtf8RawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Writing MetadataGetter for method: TextUtf8RawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&TextUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&TextUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(System::Xml::XmlStandalone)>(&TextUtf8RawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*)>(&TextUtf8RawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextUtf8RawTextWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextUtf8RawTextWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextUtf8RawTextWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextUtf8RawTextWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)()>(&TextUtf8RawTextWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TextUtf8RawTextWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)()>(&TextUtf8RawTextWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&TextUtf8RawTextWriter::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks
// Il2CppName: get_SupportsNamespaceDeclarationInChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TextUtf8RawTextWriter::*)()>(&TextUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*)>(&TextUtf8RawTextWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*)>(&TextUtf8RawTextWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&TextUtf8RawTextWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*)>(&TextUtf8RawTextWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppChar)>(&TextUtf8RawTextWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppChar, ::Il2CppChar)>(&TextUtf8RawTextWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*)>(&TextUtf8RawTextWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*)>(&TextUtf8RawTextWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextUtf8RawTextWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&TextUtf8RawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TextUtf8RawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextUtf8RawTextWriter::*)(::Il2CppString*)>(&TextUtf8RawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextUtf8RawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlAsyncCheckWriter
#include "System/Xml/XmlAsyncCheckWriter.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Xml.WriteState
#include "System/Xml/WriteState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.CheckAsync
void System::Xml::XmlAsyncCheckWriter::CheckAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::CheckAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteStartDocument
void System::Xml::XmlAsyncCheckWriter::WriteStartDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteStartDocument");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartDocument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteDocType
void System::Xml::XmlAsyncCheckWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteStartElement
void System::Xml::XmlAsyncCheckWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteEndElement
void System::Xml::XmlAsyncCheckWriter::WriteEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteFullEndElement
void System::Xml::XmlAsyncCheckWriter::WriteFullEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteStartAttribute
void System::Xml::XmlAsyncCheckWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteEndAttribute
void System::Xml::XmlAsyncCheckWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteCData
void System::Xml::XmlAsyncCheckWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteComment
void System::Xml::XmlAsyncCheckWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteProcessingInstruction
void System::Xml::XmlAsyncCheckWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteEntityRef
void System::Xml::XmlAsyncCheckWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteCharEntity
void System::Xml::XmlAsyncCheckWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteWhitespace
void System::Xml::XmlAsyncCheckWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteString
void System::Xml::XmlAsyncCheckWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteSurrogateCharEntity
void System::Xml::XmlAsyncCheckWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteChars
void System::Xml::XmlAsyncCheckWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteRaw
void System::Xml::XmlAsyncCheckWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteRaw
void System::Xml::XmlAsyncCheckWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteBase64
void System::Xml::XmlAsyncCheckWriter::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteBinHex
void System::Xml::XmlAsyncCheckWriter::WriteBinHex(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteBinHex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBinHex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.get_WriteState
System::Xml::WriteState System::Xml::XmlAsyncCheckWriter::get_WriteState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::get_WriteState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::WriteState, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.Close
void System::Xml::XmlAsyncCheckWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.Flush
void System::Xml::XmlAsyncCheckWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.LookupPrefix
::Il2CppString* System::Xml::XmlAsyncCheckWriter::LookupPrefix(::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::LookupPrefix");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, ns);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.WriteValue
void System::Xml::XmlAsyncCheckWriter::WriteValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::WriteValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlAsyncCheckWriter.Dispose
void System::Xml::XmlAsyncCheckWriter::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAsyncCheckWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Writing MetadataGetter for method: XmlAsyncCheckWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(System::Xml::XmlWriter*)>(&XmlAsyncCheckWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(System::Xml::XmlWriter*)>(&XmlAsyncCheckWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::CheckAsync
// Il2CppName: CheckAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::CheckAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "CheckAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::WriteStartDocument)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAsyncCheckWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAsyncCheckWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAsyncCheckWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlAsyncCheckWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppChar)>(&XmlAsyncCheckWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppChar, ::Il2CppChar)>(&XmlAsyncCheckWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlAsyncCheckWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlAsyncCheckWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Array<uint8_t>*, int, int)>(&XmlAsyncCheckWriter::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Array<uint8_t>*, int, int)>(&XmlAsyncCheckWriter::WriteBinHex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::WriteState (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::get_WriteState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)()>(&XmlAsyncCheckWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::LookupPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(::Il2CppString*)>(&XmlAsyncCheckWriter::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAsyncCheckWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAsyncCheckWriter::*)(bool)>(&XmlAsyncCheckWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAsyncCheckWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlAutoDetectWriter
#include "System/Xml/XmlAutoDetectWriter.hpp"
// Including type: System.Xml.OnRemoveWriter
#include "System/Xml/OnRemoveWriter.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.Xml.XmlEventCache
#include "System/Xml/XmlEventCache.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Xml.XmlOutputMethod
#include "System/Xml/XmlOutputMethod.hpp"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
// Including type: System.Xml.XmlStandalone
#include "System/Xml/XmlStandalone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlAutoDetectWriter.IsHtmlTag
bool System::Xml::XmlAutoDetectWriter::IsHtmlTag(::Il2CppString* tagName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::IsHtmlTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlAutoDetectWriter", "IsHtmlTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tagName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tagName);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.EnsureWrappedWriter
void System::Xml::XmlAutoDetectWriter::EnsureWrappedWriter(System::Xml::XmlOutputMethod outMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::EnsureWrappedWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureWrappedWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outMethod);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.TextBlockCreatesWriter
bool System::Xml::XmlAutoDetectWriter::TextBlockCreatesWriter(::Il2CppString* textBlock) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::TextBlockCreatesWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TextBlockCreatesWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textBlock)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, textBlock);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.CreateWrappedWriter
void System::Xml::XmlAutoDetectWriter::CreateWrappedWriter(System::Xml::XmlOutputMethod outMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::CreateWrappedWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateWrappedWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outMethod);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteDocType
void System::Xml::XmlAutoDetectWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteStartElement
void System::Xml::XmlAutoDetectWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteStartAttribute
void System::Xml::XmlAutoDetectWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteEndAttribute
void System::Xml::XmlAutoDetectWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteCData
void System::Xml::XmlAutoDetectWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteComment
void System::Xml::XmlAutoDetectWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteProcessingInstruction
void System::Xml::XmlAutoDetectWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteWhitespace
void System::Xml::XmlAutoDetectWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteString
void System::Xml::XmlAutoDetectWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteChars
void System::Xml::XmlAutoDetectWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteRaw
void System::Xml::XmlAutoDetectWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteRaw
void System::Xml::XmlAutoDetectWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteEntityRef
void System::Xml::XmlAutoDetectWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteCharEntity
void System::Xml::XmlAutoDetectWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteSurrogateCharEntity
void System::Xml::XmlAutoDetectWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteBase64
void System::Xml::XmlAutoDetectWriter::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteBinHex
void System::Xml::XmlAutoDetectWriter::WriteBinHex(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteBinHex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBinHex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.Close
void System::Xml::XmlAutoDetectWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.Flush
void System::Xml::XmlAutoDetectWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteValue
void System::Xml::XmlAutoDetectWriter::WriteValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.set_NamespaceResolver
void System::Xml::XmlAutoDetectWriter::set_NamespaceResolver(System::Xml::IXmlNamespaceResolver* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::set_NamespaceResolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NamespaceResolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteXmlDeclaration
void System::Xml::XmlAutoDetectWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteXmlDeclaration
void System::Xml::XmlAutoDetectWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.StartElementContent
void System::Xml::XmlAutoDetectWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteEndElement
void System::Xml::XmlAutoDetectWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteFullEndElement
void System::Xml::XmlAutoDetectWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteNamespaceDeclaration
void System::Xml::XmlAutoDetectWriter::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.get_SupportsNamespaceDeclarationInChunks
bool System::Xml::XmlAutoDetectWriter::get_SupportsNamespaceDeclarationInChunks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::get_SupportsNamespaceDeclarationInChunks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteStartNamespaceDeclaration
void System::Xml::XmlAutoDetectWriter::WriteStartNamespaceDeclaration(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteStartNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlAutoDetectWriter.WriteEndNamespaceDeclaration
void System::Xml::XmlAutoDetectWriter::WriteEndNamespaceDeclaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlAutoDetectWriter::WriteEndNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: XmlAutoDetectWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::Xml::XmlWriterSettings*)>(&XmlAutoDetectWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::Xml::XmlWriterSettings*)>(&XmlAutoDetectWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&XmlAutoDetectWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&XmlAutoDetectWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlAutoDetectWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlAutoDetectWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::IsHtmlTag
// Il2CppName: IsHtmlTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&XmlAutoDetectWriter::IsHtmlTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "IsHtmlTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::EnsureWrappedWriter
// Il2CppName: EnsureWrappedWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::Xml::XmlOutputMethod)>(&XmlAutoDetectWriter::EnsureWrappedWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "EnsureWrappedWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlOutputMethod>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::TextBlockCreatesWriter
// Il2CppName: TextBlockCreatesWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::TextBlockCreatesWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "TextBlockCreatesWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::CreateWrappedWriter
// Il2CppName: CreateWrappedWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::Xml::XmlOutputMethod)>(&XmlAutoDetectWriter::CreateWrappedWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "CreateWrappedWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlOutputMethod>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAutoDetectWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAutoDetectWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAutoDetectWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)()>(&XmlAutoDetectWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlAutoDetectWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlAutoDetectWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlAutoDetectWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppChar)>(&XmlAutoDetectWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppChar, ::Il2CppChar)>(&XmlAutoDetectWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Array<uint8_t>*, int, int)>(&XmlAutoDetectWriter::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Array<uint8_t>*, int, int)>(&XmlAutoDetectWriter::WriteBinHex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)()>(&XmlAutoDetectWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)()>(&XmlAutoDetectWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::set_NamespaceResolver
// Il2CppName: set_NamespaceResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::Xml::IXmlNamespaceResolver*)>(&XmlAutoDetectWriter::set_NamespaceResolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "set_NamespaceResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::IXmlNamespaceResolver*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(System::Xml::XmlStandalone)>(&XmlAutoDetectWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)()>(&XmlAutoDetectWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAutoDetectWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlAutoDetectWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlAutoDetectWriter::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::get_SupportsNamespaceDeclarationInChunks
// Il2CppName: get_SupportsNamespaceDeclarationInChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlAutoDetectWriter::*)()>(&XmlAutoDetectWriter::get_SupportsNamespaceDeclarationInChunks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteStartNamespaceDeclaration
// Il2CppName: WriteStartNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)(::Il2CppString*)>(&XmlAutoDetectWriter::WriteStartNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlAutoDetectWriter::WriteEndNamespaceDeclaration
// Il2CppName: WriteEndNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlAutoDetectWriter::*)()>(&XmlAutoDetectWriter::WriteEndNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlAutoDetectWriter*), "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlEncodedRawTextWriter
#include "System/Xml/XmlEncodedRawTextWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Text.Encoder
#include "System/Text/Encoder.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.Xml.CharEntityEncoderFallback
#include "System/Xml/CharEntityEncoderFallback.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.FlushBuffer
void System::Xml::XmlEncodedRawTextWriter::FlushBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::FlushBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.EncodeChars
void System::Xml::XmlEncodedRawTextWriter::EncodeChars(int startOffset, int endOffset, bool writeAllToStream) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::EncodeChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncodeChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startOffset), ::il2cpp_utils::ExtractType(endOffset), ::il2cpp_utils::ExtractType(writeAllToStream)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startOffset, endOffset, writeAllToStream);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.FlushEncoder
void System::Xml::XmlEncodedRawTextWriter::FlushEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::FlushEncoder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushEncoder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteAttributeTextBlock
void System::Xml::XmlEncodedRawTextWriter::WriteAttributeTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteAttributeTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAttributeTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteElementTextBlock
void System::Xml::XmlEncodedRawTextWriter::WriteElementTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteElementTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteElementTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.RawText
void System::Xml::XmlEncodedRawTextWriter::RawText(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::RawText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RawText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.RawText
void System::Xml::XmlEncodedRawTextWriter::RawText(::Il2CppChar* pSrcBegin, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::RawText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RawText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrcBegin), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrcBegin, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteRawWithCharChecking
void System::Xml::XmlEncodedRawTextWriter::WriteRawWithCharChecking(::Il2CppChar* pSrcBegin, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteRawWithCharChecking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRawWithCharChecking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrcBegin), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrcBegin, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteCommentOrPi
void System::Xml::XmlEncodedRawTextWriter::WriteCommentOrPi(::Il2CppString* text, int stopChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteCommentOrPi");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCommentOrPi", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(stopChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, stopChar);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteCDataSection
void System::Xml::XmlEncodedRawTextWriter::WriteCDataSection(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteCDataSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCDataSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.EncodeSurrogate
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::EncodeSurrogate(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd, ::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::EncodeSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "EncodeSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd), ::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pSrc, pSrcEnd, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.InvalidXmlChar
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::InvalidXmlChar(int ch, ::Il2CppChar* pDst, bool entitize) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::InvalidXmlChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidXmlChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(entitize)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(this, ___internal__method, ch, pDst, entitize);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.EncodeChar
void System::Xml::XmlEncodedRawTextWriter::EncodeChar(::Il2CppChar*& pSrc, ::Il2CppChar* pSrcEnd, ::Il2CppChar*& pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::EncodeChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncodeChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd), ::il2cpp_utils::ExtractType(pDst)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.ChangeTextContentMark
void System::Xml::XmlEncodedRawTextWriter::ChangeTextContentMark(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::ChangeTextContentMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeTextContentMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.GrowTextContentMarks
void System::Xml::XmlEncodedRawTextWriter::GrowTextContentMarks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::GrowTextContentMarks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GrowTextContentMarks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteNewLine
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::WriteNewLine(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteNewLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNewLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(this, ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.LtEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::LtEntity(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::LtEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "LtEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.GtEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::GtEntity(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::GtEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "GtEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.AmpEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::AmpEntity(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::AmpEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "AmpEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.QuoteEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::QuoteEntity(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::QuoteEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "QuoteEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.TabEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::TabEntity(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::TabEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "TabEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.LineFeedEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::LineFeedEntity(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::LineFeedEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "LineFeedEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.CarriageReturnEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::CarriageReturnEntity(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::CarriageReturnEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "CarriageReturnEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.CharEntity
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::CharEntity(::Il2CppChar* pDst, ::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::CharEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "CharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst, ch);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.RawStartCData
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::RawStartCData(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::RawStartCData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "RawStartCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.RawEndCData
::Il2CppChar* System::Xml::XmlEncodedRawTextWriter::RawEndCData(::Il2CppChar* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::RawEndCData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEncodedRawTextWriter", "RawEndCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.ValidateContentChars
void System::Xml::XmlEncodedRawTextWriter::ValidateContentChars(::Il2CppString* chars, ::Il2CppString* propertyName, bool allowOnlyWhitespace) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::ValidateContentChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateContentChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(propertyName), ::il2cpp_utils::ExtractType(allowOnlyWhitespace)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chars, propertyName, allowOnlyWhitespace);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteXmlDeclaration
void System::Xml::XmlEncodedRawTextWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteXmlDeclaration
void System::Xml::XmlEncodedRawTextWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteDocType
void System::Xml::XmlEncodedRawTextWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteStartElement
void System::Xml::XmlEncodedRawTextWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.StartElementContent
void System::Xml::XmlEncodedRawTextWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteEndElement
void System::Xml::XmlEncodedRawTextWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteFullEndElement
void System::Xml::XmlEncodedRawTextWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteStartAttribute
void System::Xml::XmlEncodedRawTextWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteEndAttribute
void System::Xml::XmlEncodedRawTextWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteNamespaceDeclaration
void System::Xml::XmlEncodedRawTextWriter::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* namespaceName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(namespaceName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, namespaceName);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.get_SupportsNamespaceDeclarationInChunks
bool System::Xml::XmlEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteStartNamespaceDeclaration
void System::Xml::XmlEncodedRawTextWriter::WriteStartNamespaceDeclaration(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteStartNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteEndNamespaceDeclaration
void System::Xml::XmlEncodedRawTextWriter::WriteEndNamespaceDeclaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteEndNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteCData
void System::Xml::XmlEncodedRawTextWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteComment
void System::Xml::XmlEncodedRawTextWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteProcessingInstruction
void System::Xml::XmlEncodedRawTextWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteEntityRef
void System::Xml::XmlEncodedRawTextWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteCharEntity
void System::Xml::XmlEncodedRawTextWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteWhitespace
void System::Xml::XmlEncodedRawTextWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteString
void System::Xml::XmlEncodedRawTextWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteSurrogateCharEntity
void System::Xml::XmlEncodedRawTextWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteChars
void System::Xml::XmlEncodedRawTextWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteRaw
void System::Xml::XmlEncodedRawTextWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.WriteRaw
void System::Xml::XmlEncodedRawTextWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.Close
void System::Xml::XmlEncodedRawTextWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriter.Flush
void System::Xml::XmlEncodedRawTextWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::FlushBuffer
// Il2CppName: FlushBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::FlushBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "FlushBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::EncodeChars
// Il2CppName: EncodeChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(int, int, bool)>(&XmlEncodedRawTextWriter::EncodeChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "EncodeChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::FlushEncoder
// Il2CppName: FlushEncoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::FlushEncoder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "FlushEncoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteAttributeTextBlock
// Il2CppName: WriteAttributeTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlEncodedRawTextWriter::WriteAttributeTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteAttributeTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteElementTextBlock
// Il2CppName: WriteElementTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlEncodedRawTextWriter::WriteElementTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteElementTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::RawText
// Il2CppName: RawText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::RawText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "RawText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::RawText
// Il2CppName: RawText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlEncodedRawTextWriter::RawText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "RawText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteRawWithCharChecking
// Il2CppName: WriteRawWithCharChecking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlEncodedRawTextWriter::WriteRawWithCharChecking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteRawWithCharChecking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteCommentOrPi
// Il2CppName: WriteCommentOrPi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, int)>(&XmlEncodedRawTextWriter::WriteCommentOrPi)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteCommentOrPi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteCDataSection
// Il2CppName: WriteCDataSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteCDataSection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteCDataSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::EncodeSurrogate
// Il2CppName: EncodeSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, ::Il2CppChar*, ::Il2CppChar*)>(&XmlEncodedRawTextWriter::EncodeSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "EncodeSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::InvalidXmlChar
// Il2CppName: InvalidXmlChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (XmlEncodedRawTextWriter::*)(int, ::Il2CppChar*, bool)>(&XmlEncodedRawTextWriter::InvalidXmlChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "InvalidXmlChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::EncodeChar
// Il2CppName: EncodeChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppChar*&, ::Il2CppChar*, ::Il2CppChar*&)>(&XmlEncodedRawTextWriter::EncodeChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "EncodeChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*&>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::ChangeTextContentMark
// Il2CppName: ChangeTextContentMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(bool)>(&XmlEncodedRawTextWriter::ChangeTextContentMark)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "ChangeTextContentMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::GrowTextContentMarks
// Il2CppName: GrowTextContentMarks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::GrowTextContentMarks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "GrowTextContentMarks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteNewLine
// Il2CppName: WriteNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (XmlEncodedRawTextWriter::*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::WriteNewLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::LtEntity
// Il2CppName: LtEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::LtEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "LtEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::GtEntity
// Il2CppName: GtEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::GtEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "GtEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::AmpEntity
// Il2CppName: AmpEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::AmpEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "AmpEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::QuoteEntity
// Il2CppName: QuoteEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::QuoteEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "QuoteEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::TabEntity
// Il2CppName: TabEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::TabEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "TabEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::LineFeedEntity
// Il2CppName: LineFeedEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::LineFeedEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "LineFeedEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::CarriageReturnEntity
// Il2CppName: CarriageReturnEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::CarriageReturnEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "CarriageReturnEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::CharEntity
// Il2CppName: CharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*, ::Il2CppChar)>(&XmlEncodedRawTextWriter::CharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "CharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::RawStartCData
// Il2CppName: RawStartCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::RawStartCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "RawStartCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::RawEndCData
// Il2CppName: RawEndCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar* (*)(::Il2CppChar*)>(&XmlEncodedRawTextWriter::RawEndCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "RawEndCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::ValidateContentChars
// Il2CppName: ValidateContentChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, bool)>(&XmlEncodedRawTextWriter::ValidateContentChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "ValidateContentChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(System::Xml::XmlStandalone)>(&XmlEncodedRawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks
// Il2CppName: get_SupportsNamespaceDeclarationInChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::get_SupportsNamespaceDeclarationInChunks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteStartNamespaceDeclaration
// Il2CppName: WriteStartNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteStartNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteEndNamespaceDeclaration
// Il2CppName: WriteEndNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::WriteEndNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppChar)>(&XmlEncodedRawTextWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppChar, ::Il2CppChar)>(&XmlEncodedRawTextWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlEncodedRawTextWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlEncodedRawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)(::Il2CppString*)>(&XmlEncodedRawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriter::*)()>(&XmlEncodedRawTextWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlEncodedRawTextWriterIndent
#include "System/Xml/XmlEncodedRawTextWriterIndent.hpp"
// Including type: System.Xml.BitStack
#include "System/Xml/BitStack.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.Init
void System::Xml::XmlEncodedRawTextWriterIndent::Init(System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settings);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteIndent
void System::Xml::XmlEncodedRawTextWriterIndent::WriteIndent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteIndent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteIndent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteDocType
void System::Xml::XmlEncodedRawTextWriterIndent::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteStartElement
void System::Xml::XmlEncodedRawTextWriterIndent::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.StartElementContent
void System::Xml::XmlEncodedRawTextWriterIndent::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.OnRootElement
void System::Xml::XmlEncodedRawTextWriterIndent::OnRootElement(System::Xml::ConformanceLevel currentConformanceLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::OnRootElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRootElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentConformanceLevel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentConformanceLevel);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteEndElement
void System::Xml::XmlEncodedRawTextWriterIndent::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteFullEndElement
void System::Xml::XmlEncodedRawTextWriterIndent::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteStartAttribute
void System::Xml::XmlEncodedRawTextWriterIndent::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteCData
void System::Xml::XmlEncodedRawTextWriterIndent::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteComment
void System::Xml::XmlEncodedRawTextWriterIndent::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteProcessingInstruction
void System::Xml::XmlEncodedRawTextWriterIndent::WriteProcessingInstruction(::Il2CppString* target, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteEntityRef
void System::Xml::XmlEncodedRawTextWriterIndent::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteCharEntity
void System::Xml::XmlEncodedRawTextWriterIndent::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteSurrogateCharEntity
void System::Xml::XmlEncodedRawTextWriterIndent::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteWhitespace
void System::Xml::XmlEncodedRawTextWriterIndent::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteString
void System::Xml::XmlEncodedRawTextWriterIndent::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteChars
void System::Xml::XmlEncodedRawTextWriterIndent::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteRaw
void System::Xml::XmlEncodedRawTextWriterIndent::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteRaw
void System::Xml::XmlEncodedRawTextWriterIndent::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlEncodedRawTextWriterIndent.WriteBase64
void System::Xml::XmlEncodedRawTextWriterIndent::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEncodedRawTextWriterIndent::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriterIndent::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteIndent
// Il2CppName: WriteIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)()>(&XmlEncodedRawTextWriterIndent::WriteIndent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlEncodedRawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)()>(&XmlEncodedRawTextWriterIndent::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::OnRootElement
// Il2CppName: OnRootElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(System::Xml::ConformanceLevel)>(&XmlEncodedRawTextWriterIndent::OnRootElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "OnRootElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::ConformanceLevel>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppChar)>(&XmlEncodedRawTextWriterIndent::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppChar, ::Il2CppChar)>(&XmlEncodedRawTextWriterIndent::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Array<::Il2CppChar>*, int, int)>(&XmlEncodedRawTextWriterIndent::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Array<::Il2CppChar>*, int, int)>(&XmlEncodedRawTextWriterIndent::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Il2CppString*)>(&XmlEncodedRawTextWriterIndent::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEncodedRawTextWriterIndent::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEncodedRawTextWriterIndent::*)(::Array<uint8_t>*, int, int)>(&XmlEncodedRawTextWriterIndent::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEncodedRawTextWriterIndent*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlEventCache
#include "System/Xml/XmlEventCache.hpp"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Xml.XmlStandalone
#include "System/Xml/XmlStandalone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlEventCache.EndEvents
void System::Xml::XmlEventCache::EndEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::EndEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache.EventsToWriter
void System::Xml::XmlEventCache::EventsToWriter(System::Xml::XmlWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::EventsToWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EventsToWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: System.Xml.XmlEventCache.AddEvent
void System::Xml::XmlEventCache::AddEvent(System::Xml::XmlEventCache::XmlEventType eventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::AddEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventType);
}
// Autogenerated method: System.Xml.XmlEventCache.AddEvent
void System::Xml::XmlEventCache::AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::AddEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventType, s1);
}
// Autogenerated method: System.Xml.XmlEventCache.AddEvent
void System::Xml::XmlEventCache::AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::AddEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventType, s1, s2);
}
// Autogenerated method: System.Xml.XmlEventCache.AddEvent
void System::Xml::XmlEventCache::AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::AddEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2), ::il2cpp_utils::ExtractType(s3)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventType, s1, s2, s3);
}
// Autogenerated method: System.Xml.XmlEventCache.AddEvent
void System::Xml::XmlEventCache::AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3, ::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::AddEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2), ::il2cpp_utils::ExtractType(s3), ::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventType, s1, s2, s3, o);
}
// Autogenerated method: System.Xml.XmlEventCache.AddEvent
void System::Xml::XmlEventCache::AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::AddEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventType, o);
}
// Autogenerated method: System.Xml.XmlEventCache.NewEvent
int System::Xml::XmlEventCache::NewEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::NewEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NewEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache.ToBytes
::Array<uint8_t>* System::Xml::XmlEventCache::ToBytes(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::ToBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlEventCache", "ToBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteDocType
void System::Xml::XmlEventCache::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteStartElement
void System::Xml::XmlEventCache::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteStartAttribute
void System::Xml::XmlEventCache::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteEndAttribute
void System::Xml::XmlEventCache::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteCData
void System::Xml::XmlEventCache::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteComment
void System::Xml::XmlEventCache::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteProcessingInstruction
void System::Xml::XmlEventCache::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteWhitespace
void System::Xml::XmlEventCache::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteString
void System::Xml::XmlEventCache::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteChars
void System::Xml::XmlEventCache::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteRaw
void System::Xml::XmlEventCache::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteRaw
void System::Xml::XmlEventCache::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteEntityRef
void System::Xml::XmlEventCache::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteCharEntity
void System::Xml::XmlEventCache::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteSurrogateCharEntity
void System::Xml::XmlEventCache::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteBase64
void System::Xml::XmlEventCache::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteBinHex
void System::Xml::XmlEventCache::WriteBinHex(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteBinHex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBinHex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlEventCache.Close
void System::Xml::XmlEventCache::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache.Flush
void System::Xml::XmlEventCache::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteValue
void System::Xml::XmlEventCache::WriteValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlEventCache.Dispose
void System::Xml::XmlEventCache::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteXmlDeclaration
void System::Xml::XmlEventCache::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteXmlDeclaration
void System::Xml::XmlEventCache::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.XmlEventCache.StartElementContent
void System::Xml::XmlEventCache::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteEndElement
void System::Xml::XmlEventCache::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteFullEndElement
void System::Xml::XmlEventCache::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteNamespaceDeclaration
void System::Xml::XmlEventCache::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.XmlEventCache.WriteEndBase64
void System::Xml::XmlEventCache::WriteEndBase64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::WriteEndBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: XmlEventCache::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, bool)>(&XmlEventCache::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, bool)>(&XmlEventCache::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::EndEvents
// Il2CppName: EndEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)()>(&XmlEventCache::EndEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "EndEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::EventsToWriter
// Il2CppName: EventsToWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlWriter*)>(&XmlEventCache::EventsToWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "EventsToWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlEventCache::XmlEventType)>(&XmlEventCache::AddEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*)>(&XmlEventCache::AddEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::AddEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::AddEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppObject*)>(&XmlEventCache::AddEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::AddEvent
// Il2CppName: AddEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppObject*)>(&XmlEventCache::AddEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "AddEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::NewEvent
// Il2CppName: NewEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlEventCache::*)()>(&XmlEventCache::NewEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "NewEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::ToBytes
// Il2CppName: ToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, int, int)>(&XmlEventCache::ToBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "ToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)()>(&XmlEventCache::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Array<::Il2CppChar>*, int, int)>(&XmlEventCache::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Array<::Il2CppChar>*, int, int)>(&XmlEventCache::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppChar)>(&XmlEventCache::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppChar, ::Il2CppChar)>(&XmlEventCache::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Array<uint8_t>*, int, int)>(&XmlEventCache::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Array<uint8_t>*, int, int)>(&XmlEventCache::WriteBinHex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)()>(&XmlEventCache::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)()>(&XmlEventCache::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(bool)>(&XmlEventCache::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(System::Xml::XmlStandalone)>(&XmlEventCache::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*)>(&XmlEventCache::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)()>(&XmlEventCache::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)(::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::WriteEndBase64
// Il2CppName: WriteEndBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::*)()>(&XmlEventCache::WriteEndBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache*), "WriteEndBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlEventCache/XmlEventType
#include "System/Xml/XmlEventCache.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Unknown
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Unknown
void System::Xml::XmlEventCache::XmlEventType::_set_Unknown(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType DocType
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_DocType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_DocType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "DocType"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType DocType
void System::Xml::XmlEventCache::XmlEventType::_set_DocType(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_DocType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "DocType", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType StartElem
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_StartElem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_StartElem");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "StartElem"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType StartElem
void System::Xml::XmlEventCache::XmlEventType::_set_StartElem(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_StartElem");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "StartElem", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType StartAttr
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_StartAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_StartAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "StartAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType StartAttr
void System::Xml::XmlEventCache::XmlEventType::_set_StartAttr(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_StartAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "StartAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType EndAttr
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_EndAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_EndAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "EndAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType EndAttr
void System::Xml::XmlEventCache::XmlEventType::_set_EndAttr(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_EndAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "EndAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType CData
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_CData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_CData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "CData"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType CData
void System::Xml::XmlEventCache::XmlEventType::_set_CData(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_CData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "CData", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Comment
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Comment");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Comment"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Comment
void System::Xml::XmlEventCache::XmlEventType::_set_Comment(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Comment");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Comment", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType PI
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_PI() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_PI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "PI"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType PI
void System::Xml::XmlEventCache::XmlEventType::_set_PI(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_PI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "PI", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Whitespace
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Whitespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Whitespace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Whitespace"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Whitespace
void System::Xml::XmlEventCache::XmlEventType::_set_Whitespace(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Whitespace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Whitespace", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType String
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "String"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType String
void System::Xml::XmlEventCache::XmlEventType::_set_String(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "String", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Raw
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Raw() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Raw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Raw"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Raw
void System::Xml::XmlEventCache::XmlEventType::_set_Raw(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Raw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Raw", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType EntRef
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_EntRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_EntRef");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "EntRef"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType EntRef
void System::Xml::XmlEventCache::XmlEventType::_set_EntRef(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_EntRef");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "EntRef", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType CharEnt
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_CharEnt() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_CharEnt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "CharEnt"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType CharEnt
void System::Xml::XmlEventCache::XmlEventType::_set_CharEnt(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_CharEnt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "CharEnt", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType SurrCharEnt
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_SurrCharEnt() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_SurrCharEnt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "SurrCharEnt"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType SurrCharEnt
void System::Xml::XmlEventCache::XmlEventType::_set_SurrCharEnt(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_SurrCharEnt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "SurrCharEnt", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Base64
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Base64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Base64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Base64"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Base64
void System::Xml::XmlEventCache::XmlEventType::_set_Base64(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Base64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Base64", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType BinHex
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_BinHex() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_BinHex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "BinHex"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType BinHex
void System::Xml::XmlEventCache::XmlEventType::_set_BinHex(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_BinHex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "BinHex", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl1
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_XmlDecl1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_XmlDecl1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "XmlDecl1"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl1
void System::Xml::XmlEventCache::XmlEventType::_set_XmlDecl1(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_XmlDecl1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "XmlDecl1", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl2
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_XmlDecl2() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_XmlDecl2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "XmlDecl2"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl2
void System::Xml::XmlEventCache::XmlEventType::_set_XmlDecl2(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_XmlDecl2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "XmlDecl2", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType StartContent
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_StartContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_StartContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "StartContent"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType StartContent
void System::Xml::XmlEventCache::XmlEventType::_set_StartContent(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_StartContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "StartContent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType EndElem
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_EndElem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_EndElem");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "EndElem"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType EndElem
void System::Xml::XmlEventCache::XmlEventType::_set_EndElem(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_EndElem");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "EndElem", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType FullEndElem
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_FullEndElem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_FullEndElem");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "FullEndElem"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType FullEndElem
void System::Xml::XmlEventCache::XmlEventType::_set_FullEndElem(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_FullEndElem");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "FullEndElem", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Nmsp
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Nmsp() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Nmsp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Nmsp"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Nmsp
void System::Xml::XmlEventCache::XmlEventType::_set_Nmsp(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Nmsp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Nmsp", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType EndBase64
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_EndBase64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_EndBase64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "EndBase64"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType EndBase64
void System::Xml::XmlEventCache::XmlEventType::_set_EndBase64(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_EndBase64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "EndBase64", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Close
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Close");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Close"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Close
void System::Xml::XmlEventCache::XmlEventType::_set_Close(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Close");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Close", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Flush
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Flush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Flush"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Flush
void System::Xml::XmlEventCache::XmlEventType::_set_Flush(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Flush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Flush", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlEventCache/XmlEventType Dispose
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEventType::_get_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_get_Dispose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlEventCache::XmlEventType>("System.Xml", "XmlEventCache/XmlEventType", "Dispose"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlEventCache/XmlEventType Dispose
void System::Xml::XmlEventCache::XmlEventType::_set_Dispose(System::Xml::XmlEventCache::XmlEventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEventType::_set_Dispose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlEventCache/XmlEventType", "Dispose", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlEventCache/XmlEvent
#include "System/Xml/XmlEventCache.hpp"
// Including type: System.Xml.XmlEventCache/XmlEventType
// Already included the same include: System/Xml/XmlEventCache.hpp
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.InitEvent
void System::Xml::XmlEventCache::XmlEvent::InitEvent(System::Xml::XmlEventCache::XmlEventType eventType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::InitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, eventType);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.InitEvent
void System::Xml::XmlEventCache::XmlEvent::InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::InitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, eventType, s1);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.InitEvent
void System::Xml::XmlEventCache::XmlEvent::InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::InitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, eventType, s1, s2);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.InitEvent
void System::Xml::XmlEventCache::XmlEvent::InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::InitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2), ::il2cpp_utils::ExtractType(s3)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, eventType, s1, s2, s3);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.InitEvent
void System::Xml::XmlEventCache::XmlEvent::InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3, ::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::InitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(s1), ::il2cpp_utils::ExtractType(s2), ::il2cpp_utils::ExtractType(s3), ::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, eventType, s1, s2, s3, o);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.InitEvent
void System::Xml::XmlEventCache::XmlEvent::InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::InitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "InitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventType), ::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, eventType, o);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.get_EventType
System::Xml::XmlEventCache::XmlEventType System::Xml::XmlEventCache::XmlEvent::get_EventType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::get_EventType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_EventType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlEventCache::XmlEventType, false>(*this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.get_String1
::Il2CppString* System::Xml::XmlEventCache::XmlEvent::get_String1() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::get_String1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_String1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.get_String2
::Il2CppString* System::Xml::XmlEventCache::XmlEvent::get_String2() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::get_String2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_String2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.get_String3
::Il2CppString* System::Xml::XmlEventCache::XmlEvent::get_String3() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::get_String3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_String3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlEventCache/XmlEvent.get_Object
::Il2CppObject* System::Xml::XmlEventCache::XmlEvent::get_Object() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::XmlEvent::get_Object");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Object", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::InitEvent
// Il2CppName: InitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::XmlEvent::*)(System::Xml::XmlEventCache::XmlEventType)>(&XmlEventCache::XmlEvent::InitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "InitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::InitEvent
// Il2CppName: InitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::XmlEvent::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*)>(&XmlEventCache::XmlEvent::InitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "InitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::InitEvent
// Il2CppName: InitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::XmlEvent::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::XmlEvent::InitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "InitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::InitEvent
// Il2CppName: InitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::XmlEvent::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlEventCache::XmlEvent::InitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "InitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::InitEvent
// Il2CppName: InitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::XmlEvent::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppObject*)>(&XmlEventCache::XmlEvent::InitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "InitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::InitEvent
// Il2CppName: InitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlEventCache::XmlEvent::*)(System::Xml::XmlEventCache::XmlEventType, ::Il2CppObject*)>(&XmlEventCache::XmlEvent::InitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "InitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlEventCache::XmlEventType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::get_EventType
// Il2CppName: get_EventType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlEventCache::XmlEventType (XmlEventCache::XmlEvent::*)()>(&XmlEventCache::XmlEvent::get_EventType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "get_EventType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::get_String1
// Il2CppName: get_String1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlEventCache::XmlEvent::*)()>(&XmlEventCache::XmlEvent::get_String1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "get_String1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::get_String2
// Il2CppName: get_String2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlEventCache::XmlEvent::*)()>(&XmlEventCache::XmlEvent::get_String2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "get_String2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::get_String3
// Il2CppName: get_String3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlEventCache::XmlEvent::*)()>(&XmlEventCache::XmlEvent::get_String3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "get_String3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlEventCache::XmlEvent::get_Object
// Il2CppName: get_Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (XmlEventCache::XmlEvent::*)()>(&XmlEventCache::XmlEvent::get_Object)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlEventCache::XmlEvent), "get_Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
// Including type: System.Xml.XmlRawWriterBase64Encoder
#include "System/Xml/XmlRawWriterBase64Encoder.hpp"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
// Including type: System.Xml.XmlStandalone
#include "System/Xml/XmlStandalone.hpp"
// Including type: System.Xml.ConformanceLevel
#include "System/Xml/ConformanceLevel.hpp"
// Including type: System.Xml.WriteState
#include "System/Xml/WriteState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlRawWriter.set_NamespaceResolver
void System::Xml::XmlRawWriter::set_NamespaceResolver(System::Xml::IXmlNamespaceResolver* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::set_NamespaceResolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NamespaceResolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteXmlDeclaration
void System::Xml::XmlRawWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteXmlDeclaration
void System::Xml::XmlRawWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.XmlRawWriter.StartElementContent
void System::Xml::XmlRawWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.OnRootElement
void System::Xml::XmlRawWriter::OnRootElement(System::Xml::ConformanceLevel conformanceLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::OnRootElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRootElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(conformanceLevel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, conformanceLevel);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteEndElement
void System::Xml::XmlRawWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteFullEndElement
void System::Xml::XmlRawWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteNamespaceDeclaration
void System::Xml::XmlRawWriter::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.XmlRawWriter.get_SupportsNamespaceDeclarationInChunks
bool System::Xml::XmlRawWriter::get_SupportsNamespaceDeclarationInChunks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::get_SupportsNamespaceDeclarationInChunks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteStartNamespaceDeclaration
void System::Xml::XmlRawWriter::WriteStartNamespaceDeclaration(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteStartNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteEndNamespaceDeclaration
void System::Xml::XmlRawWriter::WriteEndNamespaceDeclaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteEndNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteEndBase64
void System::Xml::XmlRawWriter::WriteEndBase64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteEndBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.Close
void System::Xml::XmlRawWriter::Close(System::Xml::WriteState currentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentState);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteStartDocument
void System::Xml::XmlRawWriter::WriteStartDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteStartDocument");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartDocument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteDocType
void System::Xml::XmlRawWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteEndElement
void System::Xml::XmlRawWriter::WriteEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteFullEndElement
void System::Xml::XmlRawWriter::WriteFullEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteBase64
void System::Xml::XmlRawWriter::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlRawWriter.LookupPrefix
::Il2CppString* System::Xml::XmlRawWriter::LookupPrefix(::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::LookupPrefix");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, ns);
}
// Autogenerated method: System.Xml.XmlRawWriter.get_WriteState
System::Xml::WriteState System::Xml::XmlRawWriter::get_WriteState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::get_WriteState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::WriteState, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteCData
void System::Xml::XmlRawWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteCharEntity
void System::Xml::XmlRawWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteSurrogateCharEntity
void System::Xml::XmlRawWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteWhitespace
void System::Xml::XmlRawWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteChars
void System::Xml::XmlRawWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteRaw
void System::Xml::XmlRawWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteRaw
void System::Xml::XmlRawWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlRawWriter.WriteValue
void System::Xml::XmlRawWriter::WriteValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlRawWriter::WriteValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: XmlRawWriter::set_NamespaceResolver
// Il2CppName: set_NamespaceResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(System::Xml::IXmlNamespaceResolver*)>(&XmlRawWriter::set_NamespaceResolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "set_NamespaceResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::IXmlNamespaceResolver*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(System::Xml::XmlStandalone)>(&XmlRawWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*)>(&XmlRawWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::OnRootElement
// Il2CppName: OnRootElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(System::Xml::ConformanceLevel)>(&XmlRawWriter::OnRootElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "OnRootElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::ConformanceLevel>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlRawWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlRawWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlRawWriter::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::get_SupportsNamespaceDeclarationInChunks
// Il2CppName: get_SupportsNamespaceDeclarationInChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlRawWriter::*)()>(&XmlRawWriter::get_SupportsNamespaceDeclarationInChunks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteStartNamespaceDeclaration
// Il2CppName: WriteStartNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*)>(&XmlRawWriter::WriteStartNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteEndNamespaceDeclaration
// Il2CppName: WriteEndNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::WriteEndNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteEndBase64
// Il2CppName: WriteEndBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::WriteEndBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteEndBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(System::Xml::WriteState)>(&XmlRawWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::WriteState>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::WriteStartDocument)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlRawWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Array<uint8_t>*, int, int)>(&XmlRawWriter::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlRawWriter::*)(::Il2CppString*)>(&XmlRawWriter::LookupPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::WriteState (XmlRawWriter::*)()>(&XmlRawWriter::get_WriteState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*)>(&XmlRawWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppChar)>(&XmlRawWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppChar, ::Il2CppChar)>(&XmlRawWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*)>(&XmlRawWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlRawWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlRawWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*)>(&XmlRawWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)(::Il2CppString*)>(&XmlRawWriter::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlRawWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlRawWriter::*)()>(&XmlRawWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlRawWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlReader
#include "System/Xml/XmlReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.UInt32 IsTextualNodeBitmap
uint System::Xml::XmlReader::_get_IsTextualNodeBitmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlReader::_get_IsTextualNodeBitmap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Xml", "XmlReader", "IsTextualNodeBitmap"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 IsTextualNodeBitmap
void System::Xml::XmlReader::_set_IsTextualNodeBitmap(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlReader::_set_IsTextualNodeBitmap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlReader", "IsTextualNodeBitmap", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 CanReadContentAsBitmap
uint System::Xml::XmlReader::_get_CanReadContentAsBitmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlReader::_get_CanReadContentAsBitmap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Xml", "XmlReader", "CanReadContentAsBitmap"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 CanReadContentAsBitmap
void System::Xml::XmlReader::_set_CanReadContentAsBitmap(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlReader::_set_CanReadContentAsBitmap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlReader", "CanReadContentAsBitmap", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 HasValueBitmap
uint System::Xml::XmlReader::_get_HasValueBitmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlReader::_get_HasValueBitmap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("System.Xml", "XmlReader", "HasValueBitmap"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 HasValueBitmap
void System::Xml::XmlReader::_set_HasValueBitmap(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlReader::_set_HasValueBitmap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlReader", "HasValueBitmap", value));
}
// Autogenerated method: System.Xml.XmlReader..cctor
void System::Xml::XmlReader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlReader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlReader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: XmlReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&XmlReader::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlSpace
#include "System/Xml/XmlSpace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlSpace None
System::Xml::XmlSpace System::Xml::XmlSpace::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlSpace::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlSpace>("System.Xml", "XmlSpace", "None"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlSpace None
void System::Xml::XmlSpace::_set_None(System::Xml::XmlSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlSpace::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlSpace", "None", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlSpace Default
System::Xml::XmlSpace System::Xml::XmlSpace::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlSpace::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlSpace>("System.Xml", "XmlSpace", "Default"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlSpace Default
void System::Xml::XmlSpace::_set_Default(System::Xml::XmlSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlSpace::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlSpace", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlSpace Preserve
System::Xml::XmlSpace System::Xml::XmlSpace::_get_Preserve() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlSpace::_get_Preserve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlSpace>("System.Xml", "XmlSpace", "Preserve"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlSpace Preserve
void System::Xml::XmlSpace::_set_Preserve(System::Xml::XmlSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlSpace::_set_Preserve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlSpace", "Preserve", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlUtf8RawTextWriter
#include "System/Xml/XmlUtf8RawTextWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.FlushBuffer
void System::Xml::XmlUtf8RawTextWriter::FlushBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::FlushBuffer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.FlushEncoder
void System::Xml::XmlUtf8RawTextWriter::FlushEncoder() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::FlushEncoder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlushEncoder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteAttributeTextBlock
void System::Xml::XmlUtf8RawTextWriter::WriteAttributeTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteAttributeTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAttributeTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteElementTextBlock
void System::Xml::XmlUtf8RawTextWriter::WriteElementTextBlock(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteElementTextBlock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteElementTextBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.RawText
void System::Xml::XmlUtf8RawTextWriter::RawText(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::RawText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RawText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, s);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.RawText
void System::Xml::XmlUtf8RawTextWriter::RawText(::Il2CppChar* pSrcBegin, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::RawText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RawText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrcBegin), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrcBegin, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteRawWithCharChecking
void System::Xml::XmlUtf8RawTextWriter::WriteRawWithCharChecking(::Il2CppChar* pSrcBegin, ::Il2CppChar* pSrcEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteRawWithCharChecking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRawWithCharChecking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrcBegin), ::il2cpp_utils::ExtractType(pSrcEnd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrcBegin, pSrcEnd);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteCommentOrPi
void System::Xml::XmlUtf8RawTextWriter::WriteCommentOrPi(::Il2CppString* text, int stopChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteCommentOrPi");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCommentOrPi", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(stopChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, stopChar);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteCDataSection
void System::Xml::XmlUtf8RawTextWriter::WriteCDataSection(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteCDataSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCDataSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.IsSurrogateByte
bool System::Xml::XmlUtf8RawTextWriter::IsSurrogateByte(uint8_t b) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::IsSurrogateByte");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "IsSurrogateByte", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, b);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.EncodeSurrogate
uint8_t* System::Xml::XmlUtf8RawTextWriter::EncodeSurrogate(::Il2CppChar* pSrc, ::Il2CppChar* pSrcEnd, uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::EncodeSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "EncodeSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd), ::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pSrc, pSrcEnd, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.InvalidXmlChar
uint8_t* System::Xml::XmlUtf8RawTextWriter::InvalidXmlChar(int ch, uint8_t* pDst, bool entitize) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::InvalidXmlChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidXmlChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(entitize)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(this, ___internal__method, ch, pDst, entitize);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.EncodeChar
void System::Xml::XmlUtf8RawTextWriter::EncodeChar(::Il2CppChar*& pSrc, ::Il2CppChar* pSrcEnd, uint8_t*& pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::EncodeChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EncodeChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd), ::il2cpp_utils::ExtractType(pDst)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pSrc, pSrcEnd, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.EncodeMultibyteUTF8
uint8_t* System::Xml::XmlUtf8RawTextWriter::EncodeMultibyteUTF8(int ch, uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::EncodeMultibyteUTF8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "EncodeMultibyteUTF8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch), ::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ch, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.CharToUTF8
void System::Xml::XmlUtf8RawTextWriter::CharToUTF8(::Il2CppChar*& pSrc, ::Il2CppChar* pSrcEnd, uint8_t*& pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::CharToUTF8");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "CharToUTF8", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(pSrcEnd), ::il2cpp_utils::ExtractType(pDst)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pSrc, pSrcEnd, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteNewLine
uint8_t* System::Xml::XmlUtf8RawTextWriter::WriteNewLine(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteNewLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNewLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(this, ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.LtEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::LtEntity(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::LtEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "LtEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.GtEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::GtEntity(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::GtEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "GtEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.AmpEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::AmpEntity(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::AmpEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "AmpEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.QuoteEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::QuoteEntity(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::QuoteEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "QuoteEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.TabEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::TabEntity(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::TabEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "TabEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.LineFeedEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::LineFeedEntity(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::LineFeedEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "LineFeedEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.CarriageReturnEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::CarriageReturnEntity(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::CarriageReturnEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "CarriageReturnEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.CharEntity
uint8_t* System::Xml::XmlUtf8RawTextWriter::CharEntity(uint8_t* pDst, ::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::CharEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "CharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst, ch);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.RawStartCData
uint8_t* System::Xml::XmlUtf8RawTextWriter::RawStartCData(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::RawStartCData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "RawStartCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.RawEndCData
uint8_t* System::Xml::XmlUtf8RawTextWriter::RawEndCData(uint8_t* pDst) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::RawEndCData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlUtf8RawTextWriter", "RawEndCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pDst)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pDst);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.ValidateContentChars
void System::Xml::XmlUtf8RawTextWriter::ValidateContentChars(::Il2CppString* chars, ::Il2CppString* propertyName, bool allowOnlyWhitespace) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::ValidateContentChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateContentChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(propertyName), ::il2cpp_utils::ExtractType(allowOnlyWhitespace)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chars, propertyName, allowOnlyWhitespace);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteXmlDeclaration
void System::Xml::XmlUtf8RawTextWriter::WriteXmlDeclaration(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteXmlDeclaration
void System::Xml::XmlUtf8RawTextWriter::WriteXmlDeclaration(::Il2CppString* xmldecl) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteXmlDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(xmldecl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, xmldecl);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteDocType
void System::Xml::XmlUtf8RawTextWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteStartElement
void System::Xml::XmlUtf8RawTextWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.StartElementContent
void System::Xml::XmlUtf8RawTextWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteEndElement
void System::Xml::XmlUtf8RawTextWriter::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteFullEndElement
void System::Xml::XmlUtf8RawTextWriter::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteStartAttribute
void System::Xml::XmlUtf8RawTextWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteEndAttribute
void System::Xml::XmlUtf8RawTextWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteNamespaceDeclaration
void System::Xml::XmlUtf8RawTextWriter::WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* namespaceName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(namespaceName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, namespaceName);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.get_SupportsNamespaceDeclarationInChunks
bool System::Xml::XmlUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteStartNamespaceDeclaration
void System::Xml::XmlUtf8RawTextWriter::WriteStartNamespaceDeclaration(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteStartNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteEndNamespaceDeclaration
void System::Xml::XmlUtf8RawTextWriter::WriteEndNamespaceDeclaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteEndNamespaceDeclaration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteCData
void System::Xml::XmlUtf8RawTextWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteComment
void System::Xml::XmlUtf8RawTextWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteProcessingInstruction
void System::Xml::XmlUtf8RawTextWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteEntityRef
void System::Xml::XmlUtf8RawTextWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteCharEntity
void System::Xml::XmlUtf8RawTextWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteWhitespace
void System::Xml::XmlUtf8RawTextWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteString
void System::Xml::XmlUtf8RawTextWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteSurrogateCharEntity
void System::Xml::XmlUtf8RawTextWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteChars
void System::Xml::XmlUtf8RawTextWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteRaw
void System::Xml::XmlUtf8RawTextWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.WriteRaw
void System::Xml::XmlUtf8RawTextWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.Close
void System::Xml::XmlUtf8RawTextWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriter.Flush
void System::Xml::XmlUtf8RawTextWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(System::Xml::XmlWriterSettings*)>(&XmlUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(System::Xml::XmlWriterSettings*)>(&XmlUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlUtf8RawTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::FlushBuffer
// Il2CppName: FlushBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::FlushBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "FlushBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::FlushEncoder
// Il2CppName: FlushEncoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::FlushEncoder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "FlushEncoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteAttributeTextBlock
// Il2CppName: WriteAttributeTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlUtf8RawTextWriter::WriteAttributeTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteAttributeTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteElementTextBlock
// Il2CppName: WriteElementTextBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlUtf8RawTextWriter::WriteElementTextBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteElementTextBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::RawText
// Il2CppName: RawText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::RawText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "RawText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::RawText
// Il2CppName: RawText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlUtf8RawTextWriter::RawText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "RawText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteRawWithCharChecking
// Il2CppName: WriteRawWithCharChecking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppChar*, ::Il2CppChar*)>(&XmlUtf8RawTextWriter::WriteRawWithCharChecking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteRawWithCharChecking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteCommentOrPi
// Il2CppName: WriteCommentOrPi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, int)>(&XmlUtf8RawTextWriter::WriteCommentOrPi)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteCommentOrPi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteCDataSection
// Il2CppName: WriteCDataSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteCDataSection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteCDataSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::IsSurrogateByte
// Il2CppName: IsSurrogateByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint8_t)>(&XmlUtf8RawTextWriter::IsSurrogateByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "IsSurrogateByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::EncodeSurrogate
// Il2CppName: EncodeSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(::Il2CppChar*, ::Il2CppChar*, uint8_t*)>(&XmlUtf8RawTextWriter::EncodeSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "EncodeSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::InvalidXmlChar
// Il2CppName: InvalidXmlChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (XmlUtf8RawTextWriter::*)(int, uint8_t*, bool)>(&XmlUtf8RawTextWriter::InvalidXmlChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "InvalidXmlChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::EncodeChar
// Il2CppName: EncodeChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppChar*&, ::Il2CppChar*, uint8_t*&)>(&XmlUtf8RawTextWriter::EncodeChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "EncodeChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*&>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::EncodeMultibyteUTF8
// Il2CppName: EncodeMultibyteUTF8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(int, uint8_t*)>(&XmlUtf8RawTextWriter::EncodeMultibyteUTF8)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "EncodeMultibyteUTF8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::CharToUTF8
// Il2CppName: CharToUTF8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*&, ::Il2CppChar*, uint8_t*&)>(&XmlUtf8RawTextWriter::CharToUTF8)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "CharToUTF8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*&>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteNewLine
// Il2CppName: WriteNewLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (XmlUtf8RawTextWriter::*)(uint8_t*)>(&XmlUtf8RawTextWriter::WriteNewLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteNewLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::LtEntity
// Il2CppName: LtEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::LtEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "LtEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::GtEntity
// Il2CppName: GtEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::GtEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "GtEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::AmpEntity
// Il2CppName: AmpEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::AmpEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "AmpEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::QuoteEntity
// Il2CppName: QuoteEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::QuoteEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "QuoteEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::TabEntity
// Il2CppName: TabEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::TabEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "TabEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::LineFeedEntity
// Il2CppName: LineFeedEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::LineFeedEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "LineFeedEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::CarriageReturnEntity
// Il2CppName: CarriageReturnEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::CarriageReturnEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "CarriageReturnEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::CharEntity
// Il2CppName: CharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*, ::Il2CppChar)>(&XmlUtf8RawTextWriter::CharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "CharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::RawStartCData
// Il2CppName: RawStartCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::RawStartCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "RawStartCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::RawEndCData
// Il2CppName: RawEndCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t* (*)(uint8_t*)>(&XmlUtf8RawTextWriter::RawEndCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "RawEndCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::ValidateContentChars
// Il2CppName: ValidateContentChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, bool)>(&XmlUtf8RawTextWriter::ValidateContentChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "ValidateContentChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(System::Xml::XmlStandalone)>(&XmlUtf8RawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteXmlDeclaration
// Il2CppName: WriteXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteNamespaceDeclaration
// Il2CppName: WriteNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks
// Il2CppName: get_SupportsNamespaceDeclarationInChunks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::get_SupportsNamespaceDeclarationInChunks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "get_SupportsNamespaceDeclarationInChunks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteStartNamespaceDeclaration
// Il2CppName: WriteStartNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteStartNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteStartNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteEndNamespaceDeclaration
// Il2CppName: WriteEndNamespaceDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::WriteEndNamespaceDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteEndNamespaceDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppChar)>(&XmlUtf8RawTextWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppChar, ::Il2CppChar)>(&XmlUtf8RawTextWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlUtf8RawTextWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlUtf8RawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)(::Il2CppString*)>(&XmlUtf8RawTextWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriter::*)()>(&XmlUtf8RawTextWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlUtf8RawTextWriterIndent
#include "System/Xml/XmlUtf8RawTextWriterIndent.hpp"
// Including type: System.Xml.BitStack
#include "System/Xml/BitStack.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.Init
void System::Xml::XmlUtf8RawTextWriterIndent::Init(System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settings);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteIndent
void System::Xml::XmlUtf8RawTextWriterIndent::WriteIndent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteIndent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteIndent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteDocType
void System::Xml::XmlUtf8RawTextWriterIndent::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteStartElement
void System::Xml::XmlUtf8RawTextWriterIndent::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.StartElementContent
void System::Xml::XmlUtf8RawTextWriterIndent::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::StartElementContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.OnRootElement
void System::Xml::XmlUtf8RawTextWriterIndent::OnRootElement(System::Xml::ConformanceLevel currentConformanceLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::OnRootElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRootElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentConformanceLevel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentConformanceLevel);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteEndElement
void System::Xml::XmlUtf8RawTextWriterIndent::WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteFullEndElement
void System::Xml::XmlUtf8RawTextWriterIndent::WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteStartAttribute
void System::Xml::XmlUtf8RawTextWriterIndent::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteCData
void System::Xml::XmlUtf8RawTextWriterIndent::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteComment
void System::Xml::XmlUtf8RawTextWriterIndent::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteProcessingInstruction
void System::Xml::XmlUtf8RawTextWriterIndent::WriteProcessingInstruction(::Il2CppString* target, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteEntityRef
void System::Xml::XmlUtf8RawTextWriterIndent::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteCharEntity
void System::Xml::XmlUtf8RawTextWriterIndent::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteSurrogateCharEntity
void System::Xml::XmlUtf8RawTextWriterIndent::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteWhitespace
void System::Xml::XmlUtf8RawTextWriterIndent::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteString
void System::Xml::XmlUtf8RawTextWriterIndent::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteChars
void System::Xml::XmlUtf8RawTextWriterIndent::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteRaw
void System::Xml::XmlUtf8RawTextWriterIndent::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteRaw
void System::Xml::XmlUtf8RawTextWriterIndent::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlUtf8RawTextWriterIndent.WriteBase64
void System::Xml::XmlUtf8RawTextWriterIndent::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlUtf8RawTextWriterIndent::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(System::Xml::XmlWriterSettings*)>(&XmlUtf8RawTextWriterIndent::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteIndent
// Il2CppName: WriteIndent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)()>(&XmlUtf8RawTextWriterIndent::WriteIndent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteIndent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlUtf8RawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlUtf8RawTextWriterIndent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)()>(&XmlUtf8RawTextWriterIndent::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::OnRootElement
// Il2CppName: OnRootElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(System::Xml::ConformanceLevel)>(&XmlUtf8RawTextWriterIndent::OnRootElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "OnRootElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::ConformanceLevel>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*, ::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppChar)>(&XmlUtf8RawTextWriterIndent::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppChar, ::Il2CppChar)>(&XmlUtf8RawTextWriterIndent::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Array<::Il2CppChar>*, int, int)>(&XmlUtf8RawTextWriterIndent::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Array<::Il2CppChar>*, int, int)>(&XmlUtf8RawTextWriterIndent::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Il2CppString*)>(&XmlUtf8RawTextWriterIndent::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlUtf8RawTextWriterIndent::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlUtf8RawTextWriterIndent::*)(::Array<uint8_t>*, int, int)>(&XmlUtf8RawTextWriterIndent::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlUtf8RawTextWriterIndent*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter
#include "System/Xml/XmlWellFormedWriter.hpp"
// Including type: System.Xml.SecureStringHasher
#include "System/Xml/SecureStringHasher.hpp"
// Including type: System.Xml.XmlWellFormedWriter/Token
#include "System/Xml/XmlWellFormedWriter_Token.hpp"
// Including type: System.Xml.XmlWellFormedWriter/NamespaceResolverProxy
#include "System/Xml/XmlWellFormedWriter_NamespaceResolverProxy.hpp"
// Including type: System.Xml.XmlStandalone
#include "System/Xml/XmlStandalone.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache.hpp"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
// Including type: System.Xml.XmlException
#include "System/Xml/XmlException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.String[] stateName
::Array<::Il2CppString*>* System::Xml::XmlWellFormedWriter::_get_stateName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_get_stateName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("System.Xml", "XmlWellFormedWriter", "stateName"));
}
// Autogenerated static field setter
// Set static field: static readonly System.String[] stateName
void System::Xml::XmlWellFormedWriter::_set_stateName(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_set_stateName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter", "stateName", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.String[] tokenName
::Array<::Il2CppString*>* System::Xml::XmlWellFormedWriter::_get_tokenName() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_get_tokenName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppString*>*>("System.Xml", "XmlWellFormedWriter", "tokenName"));
}
// Autogenerated static field setter
// Set static field: static readonly System.String[] tokenName
void System::Xml::XmlWellFormedWriter::_set_tokenName(::Array<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_set_tokenName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter", "tokenName", value));
}
// Autogenerated static field getter
// Get static field: static private System.Xml.WriteState[] state2WriteState
::Array<System::Xml::WriteState>* System::Xml::XmlWellFormedWriter::_get_state2WriteState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_get_state2WriteState");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<System::Xml::WriteState>*>("System.Xml", "XmlWellFormedWriter", "state2WriteState"));
}
// Autogenerated static field setter
// Set static field: static private System.Xml.WriteState[] state2WriteState
void System::Xml::XmlWellFormedWriter::_set_state2WriteState(::Array<System::Xml::WriteState>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_set_state2WriteState");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter", "state2WriteState", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Xml.XmlWellFormedWriter/State[] StateTableDocument
::Array<System::Xml::XmlWellFormedWriter::State>* System::Xml::XmlWellFormedWriter::_get_StateTableDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_get_StateTableDocument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<System::Xml::XmlWellFormedWriter::State>*>("System.Xml", "XmlWellFormedWriter", "StateTableDocument"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Xml.XmlWellFormedWriter/State[] StateTableDocument
void System::Xml::XmlWellFormedWriter::_set_StateTableDocument(::Array<System::Xml::XmlWellFormedWriter::State>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_set_StateTableDocument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter", "StateTableDocument", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Xml.XmlWellFormedWriter/State[] StateTableAuto
::Array<System::Xml::XmlWellFormedWriter::State>* System::Xml::XmlWellFormedWriter::_get_StateTableAuto() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_get_StateTableAuto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<System::Xml::XmlWellFormedWriter::State>*>("System.Xml", "XmlWellFormedWriter", "StateTableAuto"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Xml.XmlWellFormedWriter/State[] StateTableAuto
void System::Xml::XmlWellFormedWriter::_set_StateTableAuto(::Array<System::Xml::XmlWellFormedWriter::State>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::_set_StateTableAuto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter", "StateTableAuto", value));
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.get_RawWriter
System::Xml::XmlRawWriter* System::Xml::XmlWellFormedWriter::get_RawWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::get_RawWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RawWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlRawWriter*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.get_SaveAttrValue
bool System::Xml::XmlWellFormedWriter::get_SaveAttrValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::get_SaveAttrValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SaveAttrValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.get_InBase64
bool System::Xml::XmlWellFormedWriter::get_InBase64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::get_InBase64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.SetSpecialAttribute
void System::Xml::XmlWellFormedWriter::SetSpecialAttribute(System::Xml::XmlWellFormedWriter::SpecialAttribute special) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SetSpecialAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSpecialAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(special)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, special);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteStartDocumentImpl
void System::Xml::XmlWellFormedWriter::WriteStartDocumentImpl(System::Xml::XmlStandalone standalone) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteStartDocumentImpl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartDocumentImpl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standalone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standalone);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.StartFragment
void System::Xml::XmlWellFormedWriter::StartFragment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::StartFragment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartFragment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.PushNamespaceImplicit
void System::Xml::XmlWellFormedWriter::PushNamespaceImplicit(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::PushNamespaceImplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushNamespaceImplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.PushNamespaceExplicit
bool System::Xml::XmlWellFormedWriter::PushNamespaceExplicit(::Il2CppString* prefix, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::PushNamespaceExplicit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushNamespaceExplicit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, prefix, ns);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.AddNamespace
void System::Xml::XmlWellFormedWriter::AddNamespace(::Il2CppString* prefix, ::Il2CppString* ns, System::Xml::XmlWellFormedWriter::NamespaceKind kind) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AddNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(ns), ::il2cpp_utils::ExtractType(kind)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, ns, kind);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.AddToNamespaceHashtable
void System::Xml::XmlWellFormedWriter::AddToNamespaceHashtable(int namespaceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AddToNamespaceHashtable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToNamespaceHashtable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(namespaceIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, namespaceIndex);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.LookupNamespaceIndex
int System::Xml::XmlWellFormedWriter::LookupNamespaceIndex(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::LookupNamespaceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupNamespaceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.PopNamespaces
void System::Xml::XmlWellFormedWriter::PopNamespaces(int indexFrom, int indexTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::PopNamespaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopNamespaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indexFrom), ::il2cpp_utils::ExtractType(indexTo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, indexFrom, indexTo);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.DupAttrException
System::Xml::XmlException* System::Xml::XmlWellFormedWriter::DupAttrException(::Il2CppString* prefix, ::Il2CppString* localName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::DupAttrException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlWellFormedWriter", "DupAttrException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName)})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlException*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prefix, localName);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.AdvanceState
void System::Xml::XmlWellFormedWriter::AdvanceState(System::Xml::XmlWellFormedWriter::Token token) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AdvanceState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdvanceState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, token);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.StartElementContent
void System::Xml::XmlWellFormedWriter::StartElementContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::StartElementContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartElementContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.GetStateName
::Il2CppString* System::Xml::XmlWellFormedWriter::GetStateName(System::Xml::XmlWellFormedWriter::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::GetStateName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlWellFormedWriter", "GetStateName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, state);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.LookupNamespace
::Il2CppString* System::Xml::XmlWellFormedWriter::LookupNamespace(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::LookupNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.LookupLocalNamespace
::Il2CppString* System::Xml::XmlWellFormedWriter::LookupLocalNamespace(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::LookupLocalNamespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupLocalNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.GeneratePrefix
::Il2CppString* System::Xml::XmlWellFormedWriter::GeneratePrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::GeneratePrefix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GeneratePrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.CheckNCName
void System::Xml::XmlWellFormedWriter::CheckNCName(::Il2CppString* ncname) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::CheckNCName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckNCName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ncname)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ncname);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.InvalidCharsException
System::Exception* System::Xml::XmlWellFormedWriter::InvalidCharsException(::Il2CppString* name, int badCharIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::InvalidCharsException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlWellFormedWriter", "InvalidCharsException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(badCharIndex)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, badCharIndex);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.ThrowInvalidStateTransition
void System::Xml::XmlWellFormedWriter::ThrowInvalidStateTransition(System::Xml::XmlWellFormedWriter::Token token, System::Xml::XmlWellFormedWriter::State currentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::ThrowInvalidStateTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ThrowInvalidStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(currentState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, token, currentState);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.get_IsClosedOrErrorState
bool System::Xml::XmlWellFormedWriter::get_IsClosedOrErrorState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::get_IsClosedOrErrorState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsClosedOrErrorState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.AddAttribute
void System::Xml::XmlWellFormedWriter::AddAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AddAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(namespaceName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, namespaceName);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.AddToAttrHashTable
void System::Xml::XmlWellFormedWriter::AddToAttrHashTable(int attributeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AddToAttrHashTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToAttrHashTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributeIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, attributeIndex);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter..cctor
void System::Xml::XmlWellFormedWriter::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlWellFormedWriter", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.get_WriteState
System::Xml::WriteState System::Xml::XmlWellFormedWriter::get_WriteState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::get_WriteState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::WriteState, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteStartDocument
void System::Xml::XmlWellFormedWriter::WriteStartDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteStartDocument");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartDocument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteDocType
void System::Xml::XmlWellFormedWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteStartElement
void System::Xml::XmlWellFormedWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteEndElement
void System::Xml::XmlWellFormedWriter::WriteEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteFullEndElement
void System::Xml::XmlWellFormedWriter::WriteFullEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteStartAttribute
void System::Xml::XmlWellFormedWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(namespaceName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, namespaceName);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteEndAttribute
void System::Xml::XmlWellFormedWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteCData
void System::Xml::XmlWellFormedWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteComment
void System::Xml::XmlWellFormedWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteProcessingInstruction
void System::Xml::XmlWellFormedWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteEntityRef
void System::Xml::XmlWellFormedWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteCharEntity
void System::Xml::XmlWellFormedWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteSurrogateCharEntity
void System::Xml::XmlWellFormedWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteWhitespace
void System::Xml::XmlWellFormedWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteString
void System::Xml::XmlWellFormedWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteChars
void System::Xml::XmlWellFormedWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteRaw
void System::Xml::XmlWellFormedWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteRaw
void System::Xml::XmlWellFormedWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteBase64
void System::Xml::XmlWellFormedWriter::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.Close
void System::Xml::XmlWellFormedWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.Flush
void System::Xml::XmlWellFormedWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.LookupPrefix
::Il2CppString* System::Xml::XmlWellFormedWriter::LookupPrefix(::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::LookupPrefix");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, ns);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteValue
void System::Xml::XmlWellFormedWriter::WriteValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter.WriteBinHex
void System::Xml::XmlWellFormedWriter::WriteBinHex(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::WriteBinHex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBinHex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Writing MetadataGetter for method: XmlWellFormedWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(System::Xml::XmlWriter*, System::Xml::XmlWriterSettings*)>(&XmlWellFormedWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(System::Xml::XmlWriter*, System::Xml::XmlWriterSettings*)>(&XmlWellFormedWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::get_RawWriter
// Il2CppName: get_RawWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlRawWriter* (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::get_RawWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "get_RawWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::get_SaveAttrValue
// Il2CppName: get_SaveAttrValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::get_SaveAttrValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "get_SaveAttrValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::get_InBase64
// Il2CppName: get_InBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::get_InBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "get_InBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::SetSpecialAttribute
// Il2CppName: SetSpecialAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(System::Xml::XmlWellFormedWriter::SpecialAttribute)>(&XmlWellFormedWriter::SetSpecialAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "SetSpecialAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::SpecialAttribute>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteStartDocumentImpl
// Il2CppName: WriteStartDocumentImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(System::Xml::XmlStandalone)>(&XmlWellFormedWriter::WriteStartDocumentImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteStartDocumentImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlStandalone>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::StartFragment
// Il2CppName: StartFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::StartFragment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "StartFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::PushNamespaceImplicit
// Il2CppName: PushNamespaceImplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::PushNamespaceImplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "PushNamespaceImplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::PushNamespaceExplicit
// Il2CppName: PushNamespaceExplicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::PushNamespaceExplicit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "PushNamespaceExplicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AddNamespace
// Il2CppName: AddNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, System::Xml::XmlWellFormedWriter::NamespaceKind)>(&XmlWellFormedWriter::AddNamespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "AddNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::NamespaceKind>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AddToNamespaceHashtable
// Il2CppName: AddToNamespaceHashtable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(int)>(&XmlWellFormedWriter::AddToNamespaceHashtable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "AddToNamespaceHashtable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::LookupNamespaceIndex
// Il2CppName: LookupNamespaceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::LookupNamespaceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "LookupNamespaceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::PopNamespaces
// Il2CppName: PopNamespaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(int, int)>(&XmlWellFormedWriter::PopNamespaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "PopNamespaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::DupAttrException
// Il2CppName: DupAttrException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlException* (*)(::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::DupAttrException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "DupAttrException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AdvanceState
// Il2CppName: AdvanceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(System::Xml::XmlWellFormedWriter::Token)>(&XmlWellFormedWriter::AdvanceState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "AdvanceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::Token>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::StartElementContent
// Il2CppName: StartElementContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::StartElementContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "StartElementContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::GetStateName
// Il2CppName: GetStateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Xml::XmlWellFormedWriter::State)>(&XmlWellFormedWriter::GetStateName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "GetStateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::State>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::LookupNamespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::LookupLocalNamespace
// Il2CppName: LookupLocalNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::LookupLocalNamespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "LookupLocalNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::GeneratePrefix
// Il2CppName: GeneratePrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::GeneratePrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "GeneratePrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::CheckNCName
// Il2CppName: CheckNCName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::CheckNCName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "CheckNCName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::InvalidCharsException
// Il2CppName: InvalidCharsException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppString*, int)>(&XmlWellFormedWriter::InvalidCharsException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "InvalidCharsException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::ThrowInvalidStateTransition
// Il2CppName: ThrowInvalidStateTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(System::Xml::XmlWellFormedWriter::Token, System::Xml::XmlWellFormedWriter::State)>(&XmlWellFormedWriter::ThrowInvalidStateTransition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "ThrowInvalidStateTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::Token>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::State>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::get_IsClosedOrErrorState
// Il2CppName: get_IsClosedOrErrorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::get_IsClosedOrErrorState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "get_IsClosedOrErrorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::AddAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AddToAttrHashTable
// Il2CppName: AddToAttrHashTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(int)>(&XmlWellFormedWriter::AddToAttrHashTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "AddToAttrHashTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&XmlWellFormedWriter::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::WriteState (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::get_WriteState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::WriteStartDocument)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppChar)>(&XmlWellFormedWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppChar, ::Il2CppChar)>(&XmlWellFormedWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWellFormedWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWellFormedWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Array<uint8_t>*, int, int)>(&XmlWellFormedWriter::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)()>(&XmlWellFormedWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::LookupPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Il2CppString*)>(&XmlWellFormedWriter::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::*)(::Array<uint8_t>*, int, int)>(&XmlWellFormedWriter::WriteBinHex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlWellFormedWriter/State
#include "System/Xml/XmlWellFormedWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State Start
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "Start"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State Start
void System::Xml::XmlWellFormedWriter::State::_set_Start(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "Start", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State TopLevel
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_TopLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_TopLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "TopLevel"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State TopLevel
void System::Xml::XmlWellFormedWriter::State::_set_TopLevel(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_TopLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "TopLevel", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State Document
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_Document() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_Document");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "Document"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State Document
void System::Xml::XmlWellFormedWriter::State::_set_Document(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_Document");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "Document", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State Element
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_Element() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_Element");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "Element"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State Element
void System::Xml::XmlWellFormedWriter::State::_set_Element(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_Element");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "Element", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State Content
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_Content() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_Content");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "Content"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State Content
void System::Xml::XmlWellFormedWriter::State::_set_Content(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_Content");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "Content", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State B64Content
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_B64Content() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_B64Content");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "B64Content"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State B64Content
void System::Xml::XmlWellFormedWriter::State::_set_B64Content(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_B64Content");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "B64Content", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State B64Attribute
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_B64Attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_B64Attribute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "B64Attribute"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State B64Attribute
void System::Xml::XmlWellFormedWriter::State::_set_B64Attribute(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_B64Attribute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "B64Attribute", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State AfterRootEle
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_AfterRootEle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_AfterRootEle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "AfterRootEle"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State AfterRootEle
void System::Xml::XmlWellFormedWriter::State::_set_AfterRootEle(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_AfterRootEle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "AfterRootEle", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State Attribute
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_Attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_Attribute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "Attribute"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State Attribute
void System::Xml::XmlWellFormedWriter::State::_set_Attribute(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_Attribute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "Attribute", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State SpecialAttr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_SpecialAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_SpecialAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "SpecialAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State SpecialAttr
void System::Xml::XmlWellFormedWriter::State::_set_SpecialAttr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_SpecialAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "SpecialAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State EndDocument
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_EndDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_EndDocument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "EndDocument"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State EndDocument
void System::Xml::XmlWellFormedWriter::State::_set_EndDocument(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_EndDocument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "EndDocument", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State RootLevelAttr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_RootLevelAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_RootLevelAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "RootLevelAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State RootLevelAttr
void System::Xml::XmlWellFormedWriter::State::_set_RootLevelAttr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_RootLevelAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "RootLevelAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State RootLevelSpecAttr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_RootLevelSpecAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_RootLevelSpecAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "RootLevelSpecAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State RootLevelSpecAttr
void System::Xml::XmlWellFormedWriter::State::_set_RootLevelSpecAttr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_RootLevelSpecAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "RootLevelSpecAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State RootLevelB64Attr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_RootLevelB64Attr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_RootLevelB64Attr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "RootLevelB64Attr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State RootLevelB64Attr
void System::Xml::XmlWellFormedWriter::State::_set_RootLevelB64Attr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_RootLevelB64Attr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "RootLevelB64Attr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State AfterRootLevelAttr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_AfterRootLevelAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_AfterRootLevelAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "AfterRootLevelAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State AfterRootLevelAttr
void System::Xml::XmlWellFormedWriter::State::_set_AfterRootLevelAttr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_AfterRootLevelAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "AfterRootLevelAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State Closed
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_Closed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_Closed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "Closed"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State Closed
void System::Xml::XmlWellFormedWriter::State::_set_Closed(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_Closed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "Closed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State Error
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State Error
void System::Xml::XmlWellFormedWriter::State::_set_Error(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartContent
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartContent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartContent"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartContent
void System::Xml::XmlWellFormedWriter::State::_set_StartContent(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartContent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartContent", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartContentEle
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartContentEle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartContentEle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartContentEle"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartContentEle
void System::Xml::XmlWellFormedWriter::State::_set_StartContentEle(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartContentEle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartContentEle", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartContentB64
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartContentB64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartContentB64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartContentB64"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartContentB64
void System::Xml::XmlWellFormedWriter::State::_set_StartContentB64(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartContentB64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartContentB64", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartDoc
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartDoc() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartDoc");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartDoc"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartDoc
void System::Xml::XmlWellFormedWriter::State::_set_StartDoc(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartDoc");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartDoc", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartDocEle
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartDocEle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartDocEle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartDocEle"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartDocEle
void System::Xml::XmlWellFormedWriter::State::_set_StartDocEle(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartDocEle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartDocEle", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State EndAttrSEle
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_EndAttrSEle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_EndAttrSEle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "EndAttrSEle"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State EndAttrSEle
void System::Xml::XmlWellFormedWriter::State::_set_EndAttrSEle(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_EndAttrSEle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "EndAttrSEle", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State EndAttrEEle
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_EndAttrEEle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_EndAttrEEle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "EndAttrEEle"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State EndAttrEEle
void System::Xml::XmlWellFormedWriter::State::_set_EndAttrEEle(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_EndAttrEEle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "EndAttrEEle", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State EndAttrSCont
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_EndAttrSCont() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_EndAttrSCont");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "EndAttrSCont"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State EndAttrSCont
void System::Xml::XmlWellFormedWriter::State::_set_EndAttrSCont(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_EndAttrSCont");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "EndAttrSCont", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State EndAttrSAttr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_EndAttrSAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_EndAttrSAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "EndAttrSAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State EndAttrSAttr
void System::Xml::XmlWellFormedWriter::State::_set_EndAttrSAttr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_EndAttrSAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "EndAttrSAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State PostB64Cont
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_PostB64Cont() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_PostB64Cont");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "PostB64Cont"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State PostB64Cont
void System::Xml::XmlWellFormedWriter::State::_set_PostB64Cont(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_PostB64Cont");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "PostB64Cont", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State PostB64Attr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_PostB64Attr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_PostB64Attr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "PostB64Attr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State PostB64Attr
void System::Xml::XmlWellFormedWriter::State::_set_PostB64Attr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_PostB64Attr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "PostB64Attr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State PostB64RootAttr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_PostB64RootAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_PostB64RootAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "PostB64RootAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State PostB64RootAttr
void System::Xml::XmlWellFormedWriter::State::_set_PostB64RootAttr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_PostB64RootAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "PostB64RootAttr", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartFragEle
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartFragEle() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartFragEle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartFragEle"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartFragEle
void System::Xml::XmlWellFormedWriter::State::_set_StartFragEle(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartFragEle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartFragEle", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartFragCont
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartFragCont() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartFragCont");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartFragCont"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartFragCont
void System::Xml::XmlWellFormedWriter::State::_set_StartFragCont(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartFragCont");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartFragCont", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartFragB64
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartFragB64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartFragB64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartFragB64"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartFragB64
void System::Xml::XmlWellFormedWriter::State::_set_StartFragB64(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartFragB64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartFragB64", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/State StartRootLevelAttr
System::Xml::XmlWellFormedWriter::State System::Xml::XmlWellFormedWriter::State::_get_StartRootLevelAttr() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_get_StartRootLevelAttr");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::State>("System.Xml", "XmlWellFormedWriter/State", "StartRootLevelAttr"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/State StartRootLevelAttr
void System::Xml::XmlWellFormedWriter::State::_set_StartRootLevelAttr(System::Xml::XmlWellFormedWriter::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::State::_set_StartRootLevelAttr");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/State", "StartRootLevelAttr", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlWellFormedWriter/Token
#include "System/Xml/XmlWellFormedWriter_Token.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token StartDocument
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_StartDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_StartDocument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "StartDocument"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token StartDocument
void System::Xml::XmlWellFormedWriter::Token::_set_StartDocument(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_StartDocument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "StartDocument", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token EndDocument
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_EndDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_EndDocument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "EndDocument"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token EndDocument
void System::Xml::XmlWellFormedWriter::Token::_set_EndDocument(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_EndDocument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "EndDocument", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token PI
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_PI() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_PI");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "PI"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token PI
void System::Xml::XmlWellFormedWriter::Token::_set_PI(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_PI");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "PI", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token Comment
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_Comment() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_Comment");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "Comment"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token Comment
void System::Xml::XmlWellFormedWriter::Token::_set_Comment(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_Comment");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "Comment", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token Dtd
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_Dtd() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_Dtd");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "Dtd"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token Dtd
void System::Xml::XmlWellFormedWriter::Token::_set_Dtd(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_Dtd");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "Dtd", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token StartElement
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_StartElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_StartElement");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "StartElement"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token StartElement
void System::Xml::XmlWellFormedWriter::Token::_set_StartElement(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_StartElement");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "StartElement", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token EndElement
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_EndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_EndElement");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "EndElement"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token EndElement
void System::Xml::XmlWellFormedWriter::Token::_set_EndElement(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_EndElement");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "EndElement", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token StartAttribute
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_StartAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_StartAttribute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "StartAttribute"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token StartAttribute
void System::Xml::XmlWellFormedWriter::Token::_set_StartAttribute(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_StartAttribute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "StartAttribute", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token EndAttribute
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_EndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_EndAttribute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "EndAttribute"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token EndAttribute
void System::Xml::XmlWellFormedWriter::Token::_set_EndAttribute(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_EndAttribute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "EndAttribute", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token Text
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_Text");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "Text"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token Text
void System::Xml::XmlWellFormedWriter::Token::_set_Text(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_Text");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "Text", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token CData
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_CData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_CData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "CData"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token CData
void System::Xml::XmlWellFormedWriter::Token::_set_CData(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_CData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "CData", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token AtomicValue
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_AtomicValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_AtomicValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "AtomicValue"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token AtomicValue
void System::Xml::XmlWellFormedWriter::Token::_set_AtomicValue(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_AtomicValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "AtomicValue", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token Base64
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_Base64() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_Base64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "Base64"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token Base64
void System::Xml::XmlWellFormedWriter::Token::_set_Base64(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_Base64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "Base64", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token RawData
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_RawData() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_RawData");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "RawData"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token RawData
void System::Xml::XmlWellFormedWriter::Token::_set_RawData(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_RawData");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "RawData", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/Token Whitespace
System::Xml::XmlWellFormedWriter::Token System::Xml::XmlWellFormedWriter::Token::_get_Whitespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_get_Whitespace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::Token>("System.Xml", "XmlWellFormedWriter/Token", "Whitespace"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/Token Whitespace
void System::Xml::XmlWellFormedWriter::Token::_set_Whitespace(System::Xml::XmlWellFormedWriter::Token value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Token::_set_Whitespace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/Token", "Whitespace", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter/NamespaceResolverProxy
#include "System/Xml/XmlWellFormedWriter_NamespaceResolverProxy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWellFormedWriter/NamespaceResolverProxy.System.Xml.IXmlNamespaceResolver.LookupNamespace
::Il2CppString* System::Xml::XmlWellFormedWriter::NamespaceResolverProxy::System_Xml_IXmlNamespaceResolver_LookupNamespace(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceResolverProxy::System.Xml.IXmlNamespaceResolver.LookupNamespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Xml.IXmlNamespaceResolver.LookupNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/NamespaceResolverProxy.System.Xml.IXmlNamespaceResolver.LookupPrefix
::Il2CppString* System::Xml::XmlWellFormedWriter::NamespaceResolverProxy::System_Xml_IXmlNamespaceResolver_LookupPrefix(::Il2CppString* namespaceName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceResolverProxy::System.Xml.IXmlNamespaceResolver.LookupPrefix");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Xml.IXmlNamespaceResolver.LookupPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(namespaceName)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, namespaceName);
}
// Writing MetadataGetter for method: XmlWellFormedWriter::NamespaceResolverProxy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::NamespaceResolverProxy::*)(System::Xml::XmlWellFormedWriter*)>(&XmlWellFormedWriter::NamespaceResolverProxy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::NamespaceResolverProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::NamespaceResolverProxy::*)(System::Xml::XmlWellFormedWriter*)>(&XmlWellFormedWriter::NamespaceResolverProxy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::NamespaceResolverProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::NamespaceResolverProxy::System_Xml_IXmlNamespaceResolver_LookupNamespace
// Il2CppName: System.Xml.IXmlNamespaceResolver.LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWellFormedWriter::NamespaceResolverProxy::*)(::Il2CppString*)>(&XmlWellFormedWriter::NamespaceResolverProxy::System_Xml_IXmlNamespaceResolver_LookupNamespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::NamespaceResolverProxy*), "System.Xml.IXmlNamespaceResolver.LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::NamespaceResolverProxy::System_Xml_IXmlNamespaceResolver_LookupPrefix
// Il2CppName: System.Xml.IXmlNamespaceResolver.LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWellFormedWriter::NamespaceResolverProxy::*)(::Il2CppString*)>(&XmlWellFormedWriter::NamespaceResolverProxy::System_Xml_IXmlNamespaceResolver_LookupPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::NamespaceResolverProxy*), "System.Xml.IXmlNamespaceResolver.LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter/ElementScope
#include "System/Xml/XmlWellFormedWriter.hpp"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWellFormedWriter/ElementScope.Set
void System::Xml::XmlWellFormedWriter::ElementScope::Set(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceUri, int prevNSTop) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::ElementScope::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(namespaceUri), ::il2cpp_utils::ExtractType(prevNSTop)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, prefix, localName, namespaceUri, prevNSTop);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/ElementScope.WriteEndElement
void System::Xml::XmlWellFormedWriter::ElementScope::WriteEndElement(System::Xml::XmlRawWriter* rawWriter) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::ElementScope::WriteEndElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawWriter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, rawWriter);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/ElementScope.WriteFullEndElement
void System::Xml::XmlWellFormedWriter::ElementScope::WriteFullEndElement(System::Xml::XmlRawWriter* rawWriter) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::ElementScope::WriteFullEndElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawWriter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, rawWriter);
}
// Writing MetadataGetter for method: XmlWellFormedWriter::ElementScope::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::ElementScope::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, int)>(&XmlWellFormedWriter::ElementScope::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::ElementScope), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::ElementScope::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::ElementScope::*)(System::Xml::XmlRawWriter*)>(&XmlWellFormedWriter::ElementScope::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::ElementScope), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::ElementScope::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::ElementScope::*)(System::Xml::XmlRawWriter*)>(&XmlWellFormedWriter::ElementScope::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::ElementScope), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlWellFormedWriter/NamespaceKind
#include "System/Xml/XmlWellFormedWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind Written
System::Xml::XmlWellFormedWriter::NamespaceKind System::Xml::XmlWellFormedWriter::NamespaceKind::_get_Written() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_get_Written");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::NamespaceKind>("System.Xml", "XmlWellFormedWriter/NamespaceKind", "Written"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind Written
void System::Xml::XmlWellFormedWriter::NamespaceKind::_set_Written(System::Xml::XmlWellFormedWriter::NamespaceKind value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_set_Written");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/NamespaceKind", "Written", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind NeedToWrite
System::Xml::XmlWellFormedWriter::NamespaceKind System::Xml::XmlWellFormedWriter::NamespaceKind::_get_NeedToWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_get_NeedToWrite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::NamespaceKind>("System.Xml", "XmlWellFormedWriter/NamespaceKind", "NeedToWrite"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind NeedToWrite
void System::Xml::XmlWellFormedWriter::NamespaceKind::_set_NeedToWrite(System::Xml::XmlWellFormedWriter::NamespaceKind value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_set_NeedToWrite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/NamespaceKind", "NeedToWrite", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind Implied
System::Xml::XmlWellFormedWriter::NamespaceKind System::Xml::XmlWellFormedWriter::NamespaceKind::_get_Implied() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_get_Implied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::NamespaceKind>("System.Xml", "XmlWellFormedWriter/NamespaceKind", "Implied"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind Implied
void System::Xml::XmlWellFormedWriter::NamespaceKind::_set_Implied(System::Xml::XmlWellFormedWriter::NamespaceKind value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_set_Implied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/NamespaceKind", "Implied", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind Special
System::Xml::XmlWellFormedWriter::NamespaceKind System::Xml::XmlWellFormedWriter::NamespaceKind::_get_Special() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_get_Special");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::NamespaceKind>("System.Xml", "XmlWellFormedWriter/NamespaceKind", "Special"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/NamespaceKind Special
void System::Xml::XmlWellFormedWriter::NamespaceKind::_set_Special(System::Xml::XmlWellFormedWriter::NamespaceKind value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::NamespaceKind::_set_Special");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/NamespaceKind", "Special", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter/Namespace
#include "System/Xml/XmlWellFormedWriter.hpp"
// Including type: System.Xml.XmlWellFormedWriter/NamespaceKind
// Already included the same include: System/Xml/XmlWellFormedWriter.hpp
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWellFormedWriter/Namespace.Set
void System::Xml::XmlWellFormedWriter::Namespace::Set(::Il2CppString* prefix, ::Il2CppString* namespaceUri, System::Xml::XmlWellFormedWriter::NamespaceKind kind) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Namespace::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(namespaceUri), ::il2cpp_utils::ExtractType(kind)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, prefix, namespaceUri, kind);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/Namespace.WriteDecl
void System::Xml::XmlWellFormedWriter::Namespace::WriteDecl(System::Xml::XmlWriter* writer, System::Xml::XmlRawWriter* rawWriter) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::Namespace::WriteDecl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WriteDecl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(rawWriter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer, rawWriter);
}
// Writing MetadataGetter for method: XmlWellFormedWriter::Namespace::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::Namespace::*)(::Il2CppString*, ::Il2CppString*, System::Xml::XmlWellFormedWriter::NamespaceKind)>(&XmlWellFormedWriter::Namespace::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::Namespace), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::NamespaceKind>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::Namespace::WriteDecl
// Il2CppName: WriteDecl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::Namespace::*)(System::Xml::XmlWriter*, System::Xml::XmlRawWriter*)>(&XmlWellFormedWriter::Namespace::WriteDecl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::Namespace), "WriteDecl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlRawWriter*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter/AttrName
#include "System/Xml/XmlWellFormedWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttrName.Set
void System::Xml::XmlWellFormedWriter::AttrName::Set(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceUri) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttrName::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(namespaceUri)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, prefix, localName, namespaceUri);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttrName.IsDuplicate
bool System::Xml::XmlWellFormedWriter::AttrName::IsDuplicate(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceUri) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttrName::IsDuplicate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsDuplicate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(namespaceUri)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, prefix, localName, namespaceUri);
}
// Writing MetadataGetter for method: XmlWellFormedWriter::AttrName::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttrName::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::AttrName::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttrName), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttrName::IsDuplicate
// Il2CppName: IsDuplicate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWellFormedWriter::AttrName::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWellFormedWriter::AttrName::IsDuplicate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttrName), "IsDuplicate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlWellFormedWriter/SpecialAttribute
#include "System/Xml/XmlWellFormedWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute No
System::Xml::XmlWellFormedWriter::SpecialAttribute System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_No() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_No");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::SpecialAttribute>("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "No"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute No
void System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_No(System::Xml::XmlWellFormedWriter::SpecialAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_No");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "No", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute DefaultXmlns
System::Xml::XmlWellFormedWriter::SpecialAttribute System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_DefaultXmlns() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_DefaultXmlns");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::SpecialAttribute>("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "DefaultXmlns"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute DefaultXmlns
void System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_DefaultXmlns(System::Xml::XmlWellFormedWriter::SpecialAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_DefaultXmlns");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "DefaultXmlns", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute PrefixedXmlns
System::Xml::XmlWellFormedWriter::SpecialAttribute System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_PrefixedXmlns() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_PrefixedXmlns");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::SpecialAttribute>("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "PrefixedXmlns"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute PrefixedXmlns
void System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_PrefixedXmlns(System::Xml::XmlWellFormedWriter::SpecialAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_PrefixedXmlns");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "PrefixedXmlns", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute XmlSpace
System::Xml::XmlWellFormedWriter::SpecialAttribute System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_XmlSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_XmlSpace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::SpecialAttribute>("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "XmlSpace"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute XmlSpace
void System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_XmlSpace(System::Xml::XmlWellFormedWriter::SpecialAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_XmlSpace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "XmlSpace", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute XmlLang
System::Xml::XmlWellFormedWriter::SpecialAttribute System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_XmlLang() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_get_XmlLang");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::SpecialAttribute>("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "XmlLang"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/SpecialAttribute XmlLang
void System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_XmlLang(System::Xml::XmlWellFormedWriter::SpecialAttribute value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::SpecialAttribute::_set_XmlLang");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/SpecialAttribute", "XmlLang", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache.hpp"
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache_ItemType.hpp"
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache/Item
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache_Item.hpp"
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache/BufferChunk
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache_BufferChunk.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.get_StringValue
::Il2CppString* System::Xml::XmlWellFormedWriter::AttributeValueCache::get_StringValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::get_StringValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StringValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteEntityRef
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteEntityRef");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteCharEntity
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteCharEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteSurrogateCharEntity
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteSurrogateCharEntity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteWhitespace
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteWhitespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteString
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteChars
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteRaw
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteRaw
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.WriteValue
void System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::WriteValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.Replay
void System::Xml::XmlWellFormedWriter::AttributeValueCache::Replay(System::Xml::XmlWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::Replay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Replay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.Trim
void System::Xml::XmlWellFormedWriter::AttributeValueCache::Trim() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::Trim");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Trim", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.Clear
void System::Xml::XmlWellFormedWriter::AttributeValueCache::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.StartComplexValue
void System::Xml::XmlWellFormedWriter::AttributeValueCache::StartComplexValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::StartComplexValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartComplexValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache.AddItem
void System::Xml::XmlWellFormedWriter::AttributeValueCache::AddItem(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType type, ::Il2CppObject* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::AddItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, data);
}
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::get_StringValue
// Il2CppName: get_StringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWellFormedWriter::AttributeValueCache::*)()>(&XmlWellFormedWriter::AttributeValueCache::get_StringValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "get_StringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Il2CppString*)>(&XmlWellFormedWriter::AttributeValueCache::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Il2CppChar)>(&XmlWellFormedWriter::AttributeValueCache::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Il2CppChar, ::Il2CppChar)>(&XmlWellFormedWriter::AttributeValueCache::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Il2CppString*)>(&XmlWellFormedWriter::AttributeValueCache::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Il2CppString*)>(&XmlWellFormedWriter::AttributeValueCache::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWellFormedWriter::AttributeValueCache::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWellFormedWriter::AttributeValueCache::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Il2CppString*)>(&XmlWellFormedWriter::AttributeValueCache::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(::Il2CppString*)>(&XmlWellFormedWriter::AttributeValueCache::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::Replay
// Il2CppName: Replay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(System::Xml::XmlWriter*)>(&XmlWellFormedWriter::AttributeValueCache::Replay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "Replay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::Trim
// Il2CppName: Trim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)()>(&XmlWellFormedWriter::AttributeValueCache::Trim)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)()>(&XmlWellFormedWriter::AttributeValueCache::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::StartComplexValue
// Il2CppName: StartComplexValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)()>(&XmlWellFormedWriter::AttributeValueCache::StartComplexValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "StartComplexValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::AddItem
// Il2CppName: AddItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType, ::Il2CppObject*)>(&XmlWellFormedWriter::AttributeValueCache::AddItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), "AddItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)()>(&XmlWellFormedWriter::AttributeValueCache::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::*)()>(&XmlWellFormedWriter::AttributeValueCache::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache_ItemType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType EntityRef
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_EntityRef() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_EntityRef");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "EntityRef"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType EntityRef
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_EntityRef(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_EntityRef");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "EntityRef", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType CharEntity
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_CharEntity() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_CharEntity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "CharEntity"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType CharEntity
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_CharEntity(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_CharEntity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "CharEntity", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType SurrogateCharEntity
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_SurrogateCharEntity() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_SurrogateCharEntity");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "SurrogateCharEntity"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType SurrogateCharEntity
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_SurrogateCharEntity(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_SurrogateCharEntity");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "SurrogateCharEntity", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType Whitespace
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_Whitespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_Whitespace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "Whitespace"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType Whitespace
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_Whitespace(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_Whitespace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "Whitespace", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType String
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "String"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType String
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_String(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "String", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType StringChars
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_StringChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_StringChars");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "StringChars"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType StringChars
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_StringChars(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_StringChars");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "StringChars", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType Raw
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_Raw() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_Raw");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "Raw"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType Raw
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_Raw(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_Raw");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "Raw", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType RawChars
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_RawChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_RawChars");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "RawChars"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType RawChars
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_RawChars(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_RawChars");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "RawChars", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType ValueString
System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_ValueString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_get_ValueString");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "ValueString"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType ValueString
void System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_ValueString(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType::_set_ValueString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlWellFormedWriter/AttributeValueCache/ItemType", "ValueString", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache/Item
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache_Item.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWellFormedWriter/AttributeValueCache/Item.Set
void System::Xml::XmlWellFormedWriter::AttributeValueCache::Item::Set(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType type, ::Il2CppObject* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWellFormedWriter::AttributeValueCache::Item::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, data);
}
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::Item::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::Item::*)(System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType, ::Il2CppObject*)>(&XmlWellFormedWriter::AttributeValueCache::Item::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache::Item*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWellFormedWriter::AttributeValueCache::ItemType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::Item::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::Item::*)()>(&XmlWellFormedWriter::AttributeValueCache::Item::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache::Item*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::Item::*)()>(&XmlWellFormedWriter::AttributeValueCache::Item::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache::Item*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter/AttributeValueCache/BufferChunk
#include "System/Xml/XmlWellFormedWriter_AttributeValueCache_BufferChunk.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: XmlWellFormedWriter::AttributeValueCache::BufferChunk::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::BufferChunk::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWellFormedWriter::AttributeValueCache::BufferChunk::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache::BufferChunk*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWellFormedWriter::AttributeValueCache::BufferChunk::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWellFormedWriter::AttributeValueCache::BufferChunk::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWellFormedWriter::AttributeValueCache::BufferChunk*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.WriteState
#include "System/Xml/WriteState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.WriteState Start
System::Xml::WriteState System::Xml::WriteState::_get_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_get_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::WriteState>("System.Xml", "WriteState", "Start"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.WriteState Start
void System::Xml::WriteState::_set_Start(System::Xml::WriteState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_set_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "WriteState", "Start", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.WriteState Prolog
System::Xml::WriteState System::Xml::WriteState::_get_Prolog() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_get_Prolog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::WriteState>("System.Xml", "WriteState", "Prolog"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.WriteState Prolog
void System::Xml::WriteState::_set_Prolog(System::Xml::WriteState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_set_Prolog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "WriteState", "Prolog", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.WriteState Element
System::Xml::WriteState System::Xml::WriteState::_get_Element() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_get_Element");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::WriteState>("System.Xml", "WriteState", "Element"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.WriteState Element
void System::Xml::WriteState::_set_Element(System::Xml::WriteState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_set_Element");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "WriteState", "Element", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.WriteState Attribute
System::Xml::WriteState System::Xml::WriteState::_get_Attribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_get_Attribute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::WriteState>("System.Xml", "WriteState", "Attribute"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.WriteState Attribute
void System::Xml::WriteState::_set_Attribute(System::Xml::WriteState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_set_Attribute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "WriteState", "Attribute", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.WriteState Content
System::Xml::WriteState System::Xml::WriteState::_get_Content() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_get_Content");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::WriteState>("System.Xml", "WriteState", "Content"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.WriteState Content
void System::Xml::WriteState::_set_Content(System::Xml::WriteState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_set_Content");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "WriteState", "Content", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.WriteState Closed
System::Xml::WriteState System::Xml::WriteState::_get_Closed() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_get_Closed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::WriteState>("System.Xml", "WriteState", "Closed"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.WriteState Closed
void System::Xml::WriteState::_set_Closed(System::Xml::WriteState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_set_Closed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "WriteState", "Closed", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.WriteState Error
System::Xml::WriteState System::Xml::WriteState::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::WriteState>("System.Xml", "WriteState", "Error"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.WriteState Error
void System::Xml::WriteState::_set_Error(System::Xml::WriteState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::WriteState::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "WriteState", "Error", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
// Including type: System.Xml.WriteState
#include "System/Xml/WriteState.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWriter.WriteStartDocument
void System::Xml::XmlWriter::WriteStartDocument() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteStartDocument");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartDocument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.WriteDocType
void System::Xml::XmlWriter::WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteDocType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteDocType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(pubid), ::il2cpp_utils::ExtractType(sysid), ::il2cpp_utils::ExtractType(subset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, pubid, sysid, subset);
}
// Autogenerated method: System.Xml.XmlWriter.WriteStartElement
void System::Xml::XmlWriter::WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteStartElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlWriter.WriteStartElement
void System::Xml::XmlWriter::WriteStartElement(::Il2CppString* localName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteStartElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localName);
}
// Autogenerated method: System.Xml.XmlWriter.WriteEndElement
void System::Xml::XmlWriter::WriteEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.WriteFullEndElement
void System::Xml::XmlWriter::WriteFullEndElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteFullEndElement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteFullEndElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.WriteAttributeString
void System::Xml::XmlWriter::WriteAttributeString(::Il2CppString* localName, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteAttributeString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAttributeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localName, value);
}
// Autogenerated method: System.Xml.XmlWriter.WriteAttributeString
void System::Xml::XmlWriter::WriteAttributeString(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteAttributeString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteAttributeString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns, value);
}
// Autogenerated method: System.Xml.XmlWriter.WriteStartAttribute
void System::Xml::XmlWriter::WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteStartAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteStartAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix), ::il2cpp_utils::ExtractType(localName), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, prefix, localName, ns);
}
// Autogenerated method: System.Xml.XmlWriter.WriteEndAttribute
void System::Xml::XmlWriter::WriteEndAttribute() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteEndAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEndAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.WriteCData
void System::Xml::XmlWriter::WriteCData(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteCData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlWriter.WriteComment
void System::Xml::XmlWriter::WriteComment(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteComment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteComment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlWriter.WriteProcessingInstruction
void System::Xml::XmlWriter::WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteProcessingInstruction");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteProcessingInstruction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, text);
}
// Autogenerated method: System.Xml.XmlWriter.WriteEntityRef
void System::Xml::XmlWriter::WriteEntityRef(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteEntityRef");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteEntityRef", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name);
}
// Autogenerated method: System.Xml.XmlWriter.WriteCharEntity
void System::Xml::XmlWriter::WriteCharEntity(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlWriter.WriteWhitespace
void System::Xml::XmlWriter::WriteWhitespace(::Il2CppString* ws) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteWhitespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ws)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ws);
}
// Autogenerated method: System.Xml.XmlWriter.WriteString
void System::Xml::XmlWriter::WriteString(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: System.Xml.XmlWriter.WriteSurrogateCharEntity
void System::Xml::XmlWriter::WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteSurrogateCharEntity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteSurrogateCharEntity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlWriter.WriteChars
void System::Xml::XmlWriter::WriteChars(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteChars");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWriter.WriteRaw
void System::Xml::XmlWriter::WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWriter.WriteRaw
void System::Xml::XmlWriter::WriteRaw(::Il2CppString* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteRaw");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: System.Xml.XmlWriter.WriteBase64
void System::Xml::XmlWriter::WriteBase64(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteBase64");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBase64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWriter.WriteBinHex
void System::Xml::XmlWriter::WriteBinHex(::Array<uint8_t>* buffer, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteBinHex");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteBinHex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, index, count);
}
// Autogenerated method: System.Xml.XmlWriter.get_WriteState
System::Xml::WriteState System::Xml::XmlWriter::get_WriteState() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::get_WriteState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::WriteState, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.Close
void System::Xml::XmlWriter::Close() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::Close");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.Flush
void System::Xml::XmlWriter::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::Flush");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.LookupPrefix
::Il2CppString* System::Xml::XmlWriter::LookupPrefix(::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::LookupPrefix");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, ns);
}
// Autogenerated method: System.Xml.XmlWriter.WriteValue
void System::Xml::XmlWriter::WriteValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::WriteValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlWriter.Dispose
void System::Xml::XmlWriter::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriter.Dispose
void System::Xml::XmlWriter::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposing)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: System.Xml.XmlWriter.Create
System::Xml::XmlWriter* System::Xml::XmlWriter::Create(System::IO::Stream* output, System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlWriter", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output), ::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, output, settings);
}
// Autogenerated method: System.Xml.XmlWriter.Create
System::Xml::XmlWriter* System::Xml::XmlWriter::Create(System::IO::TextWriter* output, System::Xml::XmlWriterSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriter::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlWriter", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output), ::il2cpp_utils::ExtractType(settings)})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlWriter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, output, settings);
}
// Writing MetadataGetter for method: XmlWriter::WriteStartDocument
// Il2CppName: WriteStartDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::WriteStartDocument)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteStartDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteDocType
// Il2CppName: WriteDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWriter::WriteDocType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteStartElement
// Il2CppName: WriteStartElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteStartElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteStartElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteEndElement
// Il2CppName: WriteEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::WriteEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteFullEndElement
// Il2CppName: WriteFullEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::WriteFullEndElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteFullEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteAttributeString
// Il2CppName: WriteAttributeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlWriter::WriteAttributeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteAttributeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteAttributeString
// Il2CppName: WriteAttributeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWriter::WriteAttributeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteAttributeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteStartAttribute
// Il2CppName: WriteStartAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&XmlWriter::WriteStartAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteStartAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteEndAttribute
// Il2CppName: WriteEndAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::WriteEndAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteEndAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteCData
// Il2CppName: WriteCData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteCData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteCData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteComment
// Il2CppName: WriteComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteComment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteProcessingInstruction
// Il2CppName: WriteProcessingInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*, ::Il2CppString*)>(&XmlWriter::WriteProcessingInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteProcessingInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteEntityRef
// Il2CppName: WriteEntityRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteEntityRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteEntityRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteCharEntity
// Il2CppName: WriteCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppChar)>(&XmlWriter::WriteCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteWhitespace
// Il2CppName: WriteWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteString
// Il2CppName: WriteString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteSurrogateCharEntity
// Il2CppName: WriteSurrogateCharEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppChar, ::Il2CppChar)>(&XmlWriter::WriteSurrogateCharEntity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteSurrogateCharEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteChars
// Il2CppName: WriteChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWriter::WriteChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Array<::Il2CppChar>*, int, int)>(&XmlWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteRaw
// Il2CppName: WriteRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteBase64
// Il2CppName: WriteBase64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Array<uint8_t>*, int, int)>(&XmlWriter::WriteBase64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteBase64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteBinHex
// Il2CppName: WriteBinHex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Array<uint8_t>*, int, int)>(&XmlWriter::WriteBinHex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteBinHex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::get_WriteState
// Il2CppName: get_WriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::WriteState (XmlWriter::*)()>(&XmlWriter::get_WriteState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "get_WriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::LookupPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(::Il2CppString*)>(&XmlWriter::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)(bool)>(&XmlWriter::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlWriter* (*)(System::IO::Stream*, System::Xml::XmlWriterSettings*)>(&XmlWriter::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlWriter* (*)(System::IO::TextWriter*, System::Xml::XmlWriterSettings*)>(&XmlWriter::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriterSettings*>()});
  }
};
// Writing MetadataGetter for method: XmlWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriter::*)()>(&XmlWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlOutputMethod
#include "System/Xml/XmlOutputMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlOutputMethod Xml
System::Xml::XmlOutputMethod System::Xml::XmlOutputMethod::_get_Xml() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_get_Xml");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlOutputMethod>("System.Xml", "XmlOutputMethod", "Xml"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlOutputMethod Xml
void System::Xml::XmlOutputMethod::_set_Xml(System::Xml::XmlOutputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_set_Xml");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlOutputMethod", "Xml", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlOutputMethod Html
System::Xml::XmlOutputMethod System::Xml::XmlOutputMethod::_get_Html() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_get_Html");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlOutputMethod>("System.Xml", "XmlOutputMethod", "Html"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlOutputMethod Html
void System::Xml::XmlOutputMethod::_set_Html(System::Xml::XmlOutputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_set_Html");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlOutputMethod", "Html", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlOutputMethod Text
System::Xml::XmlOutputMethod System::Xml::XmlOutputMethod::_get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_get_Text");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlOutputMethod>("System.Xml", "XmlOutputMethod", "Text"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlOutputMethod Text
void System::Xml::XmlOutputMethod::_set_Text(System::Xml::XmlOutputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_set_Text");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlOutputMethod", "Text", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlOutputMethod AutoDetect
System::Xml::XmlOutputMethod System::Xml::XmlOutputMethod::_get_AutoDetect() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_get_AutoDetect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlOutputMethod>("System.Xml", "XmlOutputMethod", "AutoDetect"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlOutputMethod AutoDetect
void System::Xml::XmlOutputMethod::_set_AutoDetect(System::Xml::XmlOutputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlOutputMethod::_set_AutoDetect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlOutputMethod", "AutoDetect", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.TriState
#include "System/Xml/TriState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.TriState Unknown
System::Xml::TriState System::Xml::TriState::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TriState::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::TriState>("System.Xml", "TriState", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.TriState Unknown
void System::Xml::TriState::_set_Unknown(System::Xml::TriState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TriState::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "TriState", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.TriState False
System::Xml::TriState System::Xml::TriState::_get_False() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TriState::_get_False");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::TriState>("System.Xml", "TriState", "False"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.TriState False
void System::Xml::TriState::_set_False(System::Xml::TriState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TriState::_set_False");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "TriState", "False", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.TriState True
System::Xml::TriState System::Xml::TriState::_get_True() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TriState::_get_True");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::TriState>("System.Xml", "TriState", "True"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.TriState True
void System::Xml::TriState::_set_True(System::Xml::TriState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::TriState::_set_True");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "TriState", "True", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.XmlStandalone
#include "System/Xml/XmlStandalone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlStandalone Omit
System::Xml::XmlStandalone System::Xml::XmlStandalone::_get_Omit() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlStandalone::_get_Omit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlStandalone>("System.Xml", "XmlStandalone", "Omit"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlStandalone Omit
void System::Xml::XmlStandalone::_set_Omit(System::Xml::XmlStandalone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlStandalone::_set_Omit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlStandalone", "Omit", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlStandalone Yes
System::Xml::XmlStandalone System::Xml::XmlStandalone::_get_Yes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlStandalone::_get_Yes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlStandalone>("System.Xml", "XmlStandalone", "Yes"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlStandalone Yes
void System::Xml::XmlStandalone::_set_Yes(System::Xml::XmlStandalone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlStandalone::_set_Yes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlStandalone", "Yes", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.XmlStandalone No
System::Xml::XmlStandalone System::Xml::XmlStandalone::_get_No() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlStandalone::_get_No");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlStandalone>("System.Xml", "XmlStandalone", "No"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.XmlStandalone No
void System::Xml::XmlStandalone::_set_No(System::Xml::XmlStandalone value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlStandalone::_set_No");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlStandalone", "No", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWriterSettings
#include "System/Xml/XmlWriterSettings.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Xml.XmlQualifiedName
#include "System/Xml/XmlQualifiedName.hpp"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.IO.TextWriter
#include "System/IO/TextWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlWriterSettings.get_Async
bool System::Xml::XmlWriterSettings::get_Async() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_Encoding
System::Text::Encoding* System::Xml::XmlWriterSettings::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_Encoding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_OmitXmlDeclaration
bool System::Xml::XmlWriterSettings::get_OmitXmlDeclaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_OmitXmlDeclaration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OmitXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_NewLineHandling
System::Xml::NewLineHandling System::Xml::XmlWriterSettings::get_NewLineHandling() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_NewLineHandling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NewLineHandling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::NewLineHandling, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_NewLineChars
::Il2CppString* System::Xml::XmlWriterSettings::get_NewLineChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_NewLineChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NewLineChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_Indent
bool System::Xml::XmlWriterSettings::get_Indent() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_Indent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Indent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.set_Indent
void System::Xml::XmlWriterSettings::set_Indent(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::set_Indent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Indent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_IndentChars
::Il2CppString* System::Xml::XmlWriterSettings::get_IndentChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_IndentChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IndentChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_NewLineOnAttributes
bool System::Xml::XmlWriterSettings::get_NewLineOnAttributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_NewLineOnAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NewLineOnAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_CloseOutput
bool System::Xml::XmlWriterSettings::get_CloseOutput() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_CloseOutput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CloseOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_ConformanceLevel
System::Xml::ConformanceLevel System::Xml::XmlWriterSettings::get_ConformanceLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_ConformanceLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConformanceLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::ConformanceLevel, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.set_ConformanceLevel
void System::Xml::XmlWriterSettings::set_ConformanceLevel(System::Xml::ConformanceLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::set_ConformanceLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConformanceLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_CheckCharacters
bool System::Xml::XmlWriterSettings::get_CheckCharacters() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_CheckCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CheckCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_NamespaceHandling
System::Xml::NamespaceHandling System::Xml::XmlWriterSettings::get_NamespaceHandling() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_NamespaceHandling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NamespaceHandling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::NamespaceHandling, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_WriteEndDocumentOnClose
bool System::Xml::XmlWriterSettings::get_WriteEndDocumentOnClose() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_WriteEndDocumentOnClose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_WriteEndDocumentOnClose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_OutputMethod
System::Xml::XmlOutputMethod System::Xml::XmlWriterSettings::get_OutputMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_OutputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OutputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlOutputMethod, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.set_OutputMethod
void System::Xml::XmlWriterSettings::set_OutputMethod(System::Xml::XmlOutputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::set_OutputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_OutputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlWriterSettings.Clone
System::Xml::XmlWriterSettings* System::Xml::XmlWriterSettings::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::Clone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlWriterSettings*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_CDataSectionElements
System::Collections::Generic::List_1<System::Xml::XmlQualifiedName*>* System::Xml::XmlWriterSettings::get_CDataSectionElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_CDataSectionElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CDataSectionElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<System::Xml::XmlQualifiedName*>*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_DoNotEscapeUriAttributes
bool System::Xml::XmlWriterSettings::get_DoNotEscapeUriAttributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_DoNotEscapeUriAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DoNotEscapeUriAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_MergeCDataSections
bool System::Xml::XmlWriterSettings::get_MergeCDataSections() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_MergeCDataSections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MergeCDataSections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_MediaType
::Il2CppString* System::Xml::XmlWriterSettings::get_MediaType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_MediaType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MediaType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_DocTypeSystem
::Il2CppString* System::Xml::XmlWriterSettings::get_DocTypeSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_DocTypeSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DocTypeSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_DocTypePublic
::Il2CppString* System::Xml::XmlWriterSettings::get_DocTypePublic() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_DocTypePublic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DocTypePublic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_Standalone
System::Xml::XmlStandalone System::Xml::XmlWriterSettings::get_Standalone() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_Standalone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Standalone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlStandalone, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_AutoXmlDeclaration
bool System::Xml::XmlWriterSettings::get_AutoXmlDeclaration() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_AutoXmlDeclaration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AutoXmlDeclaration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_IndentInternal
System::Xml::TriState System::Xml::XmlWriterSettings::get_IndentInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_IndentInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IndentInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::TriState, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.get_IsQuerySpecific
bool System::Xml::XmlWriterSettings::get_IsQuerySpecific() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::get_IsQuerySpecific");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsQuerySpecific", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlWriterSettings.CreateWriter
System::Xml::XmlWriter* System::Xml::XmlWriterSettings::CreateWriter(System::IO::Stream* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::CreateWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlWriter*, false>(this, ___internal__method, output);
}
// Autogenerated method: System.Xml.XmlWriterSettings.CreateWriter
System::Xml::XmlWriter* System::Xml::XmlWriterSettings::CreateWriter(System::IO::TextWriter* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::CreateWriter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateWriter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlWriter*, false>(this, ___internal__method, output);
}
// Autogenerated method: System.Xml.XmlWriterSettings.set_ReadOnly
void System::Xml::XmlWriterSettings::set_ReadOnly(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::set_ReadOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlWriterSettings.CheckReadOnly
void System::Xml::XmlWriterSettings::CheckReadOnly(::Il2CppString* propertyName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::CheckReadOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckReadOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(propertyName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, propertyName);
}
// Autogenerated method: System.Xml.XmlWriterSettings.Initialize
void System::Xml::XmlWriterSettings::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlWriterSettings::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: XmlWriterSettings::get_Async
// Il2CppName: get_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_Async)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (XmlWriterSettings::*)()>(&XmlWriterSettings::get_Encoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_OmitXmlDeclaration
// Il2CppName: get_OmitXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_OmitXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_OmitXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_NewLineHandling
// Il2CppName: get_NewLineHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::NewLineHandling (XmlWriterSettings::*)()>(&XmlWriterSettings::get_NewLineHandling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_NewLineHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_NewLineChars
// Il2CppName: get_NewLineChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWriterSettings::*)()>(&XmlWriterSettings::get_NewLineChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_NewLineChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_Indent
// Il2CppName: get_Indent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_Indent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_Indent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::set_Indent
// Il2CppName: set_Indent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)(bool)>(&XmlWriterSettings::set_Indent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "set_Indent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_IndentChars
// Il2CppName: get_IndentChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWriterSettings::*)()>(&XmlWriterSettings::get_IndentChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_IndentChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_NewLineOnAttributes
// Il2CppName: get_NewLineOnAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_NewLineOnAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_NewLineOnAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_CloseOutput
// Il2CppName: get_CloseOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_CloseOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_CloseOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_ConformanceLevel
// Il2CppName: get_ConformanceLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::ConformanceLevel (XmlWriterSettings::*)()>(&XmlWriterSettings::get_ConformanceLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_ConformanceLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::set_ConformanceLevel
// Il2CppName: set_ConformanceLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)(System::Xml::ConformanceLevel)>(&XmlWriterSettings::set_ConformanceLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "set_ConformanceLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::ConformanceLevel>()});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_CheckCharacters
// Il2CppName: get_CheckCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_CheckCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_CheckCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_NamespaceHandling
// Il2CppName: get_NamespaceHandling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::NamespaceHandling (XmlWriterSettings::*)()>(&XmlWriterSettings::get_NamespaceHandling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_NamespaceHandling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_WriteEndDocumentOnClose
// Il2CppName: get_WriteEndDocumentOnClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_WriteEndDocumentOnClose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_WriteEndDocumentOnClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_OutputMethod
// Il2CppName: get_OutputMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlOutputMethod (XmlWriterSettings::*)()>(&XmlWriterSettings::get_OutputMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_OutputMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::set_OutputMethod
// Il2CppName: set_OutputMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)(System::Xml::XmlOutputMethod)>(&XmlWriterSettings::set_OutputMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "set_OutputMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlOutputMethod>()});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlWriterSettings* (XmlWriterSettings::*)()>(&XmlWriterSettings::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_CDataSectionElements
// Il2CppName: get_CDataSectionElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<System::Xml::XmlQualifiedName*>* (XmlWriterSettings::*)()>(&XmlWriterSettings::get_CDataSectionElements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_CDataSectionElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_DoNotEscapeUriAttributes
// Il2CppName: get_DoNotEscapeUriAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_DoNotEscapeUriAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_DoNotEscapeUriAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_MergeCDataSections
// Il2CppName: get_MergeCDataSections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_MergeCDataSections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_MergeCDataSections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_MediaType
// Il2CppName: get_MediaType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWriterSettings::*)()>(&XmlWriterSettings::get_MediaType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_MediaType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_DocTypeSystem
// Il2CppName: get_DocTypeSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWriterSettings::*)()>(&XmlWriterSettings::get_DocTypeSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_DocTypeSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_DocTypePublic
// Il2CppName: get_DocTypePublic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlWriterSettings::*)()>(&XmlWriterSettings::get_DocTypePublic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_DocTypePublic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_Standalone
// Il2CppName: get_Standalone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlStandalone (XmlWriterSettings::*)()>(&XmlWriterSettings::get_Standalone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_Standalone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_AutoXmlDeclaration
// Il2CppName: get_AutoXmlDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_AutoXmlDeclaration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_AutoXmlDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_IndentInternal
// Il2CppName: get_IndentInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::TriState (XmlWriterSettings::*)()>(&XmlWriterSettings::get_IndentInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_IndentInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::get_IsQuerySpecific
// Il2CppName: get_IsQuerySpecific
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlWriterSettings::*)()>(&XmlWriterSettings::get_IsQuerySpecific)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "get_IsQuerySpecific", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::CreateWriter
// Il2CppName: CreateWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlWriter* (XmlWriterSettings::*)(System::IO::Stream*)>(&XmlWriterSettings::CreateWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "CreateWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::CreateWriter
// Il2CppName: CreateWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlWriter* (XmlWriterSettings::*)(System::IO::TextWriter*)>(&XmlWriterSettings::CreateWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "CreateWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>()});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::set_ReadOnly
// Il2CppName: set_ReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)(bool)>(&XmlWriterSettings::set_ReadOnly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "set_ReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::CheckReadOnly
// Il2CppName: CheckReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)(::Il2CppString*)>(&XmlWriterSettings::CheckReadOnly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "CheckReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)()>(&XmlWriterSettings::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlWriterSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)()>(&XmlWriterSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlWriterSettings::*)()>(&XmlWriterSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlWriterSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.IXmlNamespaceResolver
#include "System/Xml/IXmlNamespaceResolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.IXmlNamespaceResolver.LookupNamespace
::Il2CppString* System::Xml::IXmlNamespaceResolver::LookupNamespace(::Il2CppString* prefix) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::IXmlNamespaceResolver::LookupNamespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupNamespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefix)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, prefix);
}
// Autogenerated method: System.Xml.IXmlNamespaceResolver.LookupPrefix
::Il2CppString* System::Xml::IXmlNamespaceResolver::LookupPrefix(::Il2CppString* namespaceName) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::IXmlNamespaceResolver::LookupPrefix");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupPrefix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(namespaceName)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, namespaceName);
}
// Writing MetadataGetter for method: IXmlNamespaceResolver::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IXmlNamespaceResolver::*)(::Il2CppString*)>(&IXmlNamespaceResolver::LookupNamespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IXmlNamespaceResolver*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IXmlNamespaceResolver::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IXmlNamespaceResolver::*)(::Il2CppString*)>(&IXmlNamespaceResolver::LookupPrefix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IXmlNamespaceResolver*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.ValidateNames
#include "System/Xml/ValidateNames.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Xml.XmlCharType xmlCharType
System::Xml::XmlCharType System::Xml::ValidateNames::_get_xmlCharType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ValidateNames::_get_xmlCharType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlCharType>("System.Xml", "ValidateNames", "xmlCharType"));
}
// Autogenerated static field setter
// Set static field: static private System.Xml.XmlCharType xmlCharType
void System::Xml::ValidateNames::_set_xmlCharType(System::Xml::XmlCharType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ValidateNames::_set_xmlCharType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ValidateNames", "xmlCharType", value));
}
// Autogenerated method: System.Xml.ValidateNames.ParseNCName
int System::Xml::ValidateNames::ParseNCName(::Il2CppString* s, int offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ValidateNames::ParseNCName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "ValidateNames", "ParseNCName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s, offset);
}
// Autogenerated method: System.Xml.ValidateNames.ParseQName
int System::Xml::ValidateNames::ParseQName(::Il2CppString* s, int offset, int& colonOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ValidateNames::ParseQName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "ValidateNames", "ParseQName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s, offset, colonOffset);
}
// Autogenerated method: System.Xml.ValidateNames..cctor
void System::Xml::ValidateNames::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ValidateNames::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "ValidateNames", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ValidateNames::ParseNCName
// Il2CppName: ParseNCName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int)>(&ValidateNames::ParseNCName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValidateNames*), "ParseNCName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ValidateNames::ParseQName
// Il2CppName: ParseQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, int&)>(&ValidateNames::ParseQName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValidateNames*), "ParseQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: ValidateNames::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ValidateNames::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValidateNames*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlCharType
#include "System/Xml/XmlCharType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Object s_Lock
::Il2CppObject* System::Xml::XmlCharType::_get_s_Lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::_get_s_Lock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("System.Xml", "XmlCharType", "s_Lock"));
}
// Autogenerated static field setter
// Set static field: static private System.Object s_Lock
void System::Xml::XmlCharType::_set_s_Lock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::_set_s_Lock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlCharType", "s_Lock", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] s_CharProperties
::Array<uint8_t>* System::Xml::XmlCharType::_get_s_CharProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::_get_s_CharProperties");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("System.Xml", "XmlCharType", "s_CharProperties"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] s_CharProperties
void System::Xml::XmlCharType::_set_s_CharProperties(::Array<uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::_set_s_CharProperties");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlCharType", "s_CharProperties", value));
}
// Autogenerated method: System.Xml.XmlCharType.get_StaticLock
::Il2CppObject* System::Xml::XmlCharType::get_StaticLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::get_StaticLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "get_StaticLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Xml.XmlCharType.InitInstance
void System::Xml::XmlCharType::InitInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::InitInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "InitInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Xml.XmlCharType.SetProperties
void System::Xml::XmlCharType::SetProperties(::Il2CppString* ranges, uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::SetProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "SetProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ranges), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ranges, value);
}
// Autogenerated method: System.Xml.XmlCharType.get_Instance
System::Xml::XmlCharType System::Xml::XmlCharType::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlCharType, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Xml.XmlCharType.IsWhiteSpace
bool System::Xml::XmlCharType::IsWhiteSpace(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsWhiteSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsWhiteSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlCharType.IsCharData
bool System::Xml::XmlCharType::IsCharData(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsCharData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsCharData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlCharType.IsPubidChar
bool System::Xml::XmlCharType::IsPubidChar(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsPubidChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsPubidChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlCharType.IsTextChar
bool System::Xml::XmlCharType::IsTextChar(::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsTextChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsTextChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlCharType.IsHighSurrogate
bool System::Xml::XmlCharType::IsHighSurrogate(int ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsHighSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "IsHighSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlCharType.IsLowSurrogate
bool System::Xml::XmlCharType::IsLowSurrogate(int ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsLowSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "IsLowSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlCharType.IsSurrogate
bool System::Xml::XmlCharType::IsSurrogate(int ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "IsSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ch);
}
// Autogenerated method: System.Xml.XmlCharType.CombineSurrogateChar
int System::Xml::XmlCharType::CombineSurrogateChar(int lowChar, int highChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::CombineSurrogateChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "CombineSurrogateChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowChar), ::il2cpp_utils::ExtractType(highChar)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lowChar, highChar);
}
// Autogenerated method: System.Xml.XmlCharType.IsOnlyWhitespace
bool System::Xml::XmlCharType::IsOnlyWhitespace(::Il2CppString* str) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsOnlyWhitespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsOnlyWhitespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, str);
}
// Autogenerated method: System.Xml.XmlCharType.IsOnlyWhitespaceWithPos
int System::Xml::XmlCharType::IsOnlyWhitespaceWithPos(::Il2CppString* str) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsOnlyWhitespaceWithPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsOnlyWhitespaceWithPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method, str);
}
// Autogenerated method: System.Xml.XmlCharType.IsOnlyCharData
int System::Xml::XmlCharType::IsOnlyCharData(::Il2CppString* str) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsOnlyCharData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsOnlyCharData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method, str);
}
// Autogenerated method: System.Xml.XmlCharType.IsPublicId
int System::Xml::XmlCharType::IsPublicId(::Il2CppString* str) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::IsPublicId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsPublicId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method, str);
}
// Autogenerated method: System.Xml.XmlCharType.InRange
bool System::Xml::XmlCharType::InRange(int value, int start, int end) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlCharType::InRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlCharType", "InRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, start, end);
}
// Writing MetadataGetter for method: XmlCharType::get_StaticLock
// Il2CppName: get_StaticLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)()>(&XmlCharType::get_StaticLock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "get_StaticLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlCharType::InitInstance
// Il2CppName: InitInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&XmlCharType::InitInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "InitInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlCharType::SetProperties
// Il2CppName: SetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, uint8_t)>(&XmlCharType::SetProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "SetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::XmlCharType
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlCharType::*)(::Array<uint8_t>*)>(&XmlCharType::XmlCharType<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlCharType::*)(::Array<uint8_t>*)>(&XmlCharType::XmlCharType<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlCharType (*)()>(&XmlCharType::get_Instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsWhiteSpace
// Il2CppName: IsWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsWhiteSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsCharData
// Il2CppName: IsCharData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsCharData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsCharData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsPubidChar
// Il2CppName: IsPubidChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsPubidChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsPubidChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsTextChar
// Il2CppName: IsTextChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsTextChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsTextChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&XmlCharType::IsHighSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsLowSurrogate
// Il2CppName: IsLowSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&XmlCharType::IsLowSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsLowSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsSurrogate
// Il2CppName: IsSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&XmlCharType::IsSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::CombineSurrogateChar
// Il2CppName: CombineSurrogateChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&XmlCharType::CombineSurrogateChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "CombineSurrogateChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsOnlyWhitespace
// Il2CppName: IsOnlyWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsOnlyWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsOnlyWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsOnlyWhitespaceWithPos
// Il2CppName: IsOnlyWhitespaceWithPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsOnlyWhitespaceWithPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsOnlyWhitespaceWithPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsOnlyCharData
// Il2CppName: IsOnlyCharData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsOnlyCharData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsOnlyCharData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsPublicId
// Il2CppName: IsPublicId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsPublicId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsPublicId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::InRange
// Il2CppName: InRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int)>(&XmlCharType::InRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "InRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: System.Xml.ExceptionType
#include "System/Xml/ExceptionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Xml.ExceptionType ArgumentException
System::Xml::ExceptionType System::Xml::ExceptionType::_get_ArgumentException() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ExceptionType::_get_ArgumentException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ExceptionType>("System.Xml", "ExceptionType", "ArgumentException"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ExceptionType ArgumentException
void System::Xml::ExceptionType::_set_ArgumentException(System::Xml::ExceptionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ExceptionType::_set_ArgumentException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ExceptionType", "ArgumentException", value));
}
// Autogenerated static field getter
// Get static field: static public System.Xml.ExceptionType XmlException
System::Xml::ExceptionType System::Xml::ExceptionType::_get_XmlException() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ExceptionType::_get_XmlException");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::ExceptionType>("System.Xml", "ExceptionType", "XmlException"));
}
// Autogenerated static field setter
// Set static field: static public System.Xml.ExceptionType XmlException
void System::Xml::ExceptionType::_set_XmlException(System::Xml::ExceptionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::ExceptionType::_set_XmlException");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "ExceptionType", "XmlException", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlConvert
#include "System/Xml/XmlConvert.hpp"
// Including type: System.Xml.ExceptionType
#include "System/Xml/ExceptionType.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Xml.XmlCharType xmlCharType
System::Xml::XmlCharType System::Xml::XmlConvert::_get_xmlCharType() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_get_xmlCharType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlCharType>("System.Xml", "XmlConvert", "xmlCharType"));
}
// Autogenerated static field setter
// Set static field: static private System.Xml.XmlCharType xmlCharType
void System::Xml::XmlConvert::_set_xmlCharType(System::Xml::XmlCharType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_set_xmlCharType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlConvert", "xmlCharType", value));
}
// Autogenerated static field getter
// Get static field: static System.Char[] crt
::Array<::Il2CppChar>* System::Xml::XmlConvert::_get_crt() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_get_crt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppChar>*>("System.Xml", "XmlConvert", "crt"));
}
// Autogenerated static field setter
// Set static field: static System.Char[] crt
void System::Xml::XmlConvert::_set_crt(::Array<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_set_crt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlConvert", "crt", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 c_EncodedCharLength
int System::Xml::XmlConvert::_get_c_EncodedCharLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_get_c_EncodedCharLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("System.Xml", "XmlConvert", "c_EncodedCharLength"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 c_EncodedCharLength
void System::Xml::XmlConvert::_set_c_EncodedCharLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_set_c_EncodedCharLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlConvert", "c_EncodedCharLength", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Char[] WhitespaceChars
::Array<::Il2CppChar>* System::Xml::XmlConvert::_get_WhitespaceChars() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_get_WhitespaceChars");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppChar>*>("System.Xml", "XmlConvert", "WhitespaceChars"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Char[] WhitespaceChars
void System::Xml::XmlConvert::_set_WhitespaceChars(::Array<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::_set_WhitespaceChars");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlConvert", "WhitespaceChars", value));
}
// Autogenerated method: System.Xml.XmlConvert.VerifyQName
::Il2CppString* System::Xml::XmlConvert::VerifyQName(::Il2CppString* name, System::Xml::ExceptionType exceptionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::VerifyQName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "VerifyQName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(exceptionType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, exceptionType);
}
// Autogenerated method: System.Xml.XmlConvert.TrimString
::Il2CppString* System::Xml::XmlConvert::TrimString(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::TrimString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "TrimString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlConvert.TrimStringStart
::Il2CppString* System::Xml::XmlConvert::TrimStringStart(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::TrimStringStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "TrimStringStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlConvert.TrimStringEnd
::Il2CppString* System::Xml::XmlConvert::TrimStringEnd(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::TrimStringEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "TrimStringEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: System.Xml.XmlConvert.CreateException
System::Exception* System::Xml::XmlConvert::CreateException(::Il2CppString* res, ::Il2CppString* arg, System::Xml::ExceptionType exceptionType, int lineNo, int linePos) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(res), ::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(exceptionType), ::il2cpp_utils::ExtractType(lineNo), ::il2cpp_utils::ExtractType(linePos)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, res, arg, exceptionType, lineNo, linePos);
}
// Autogenerated method: System.Xml.XmlConvert.CreateException
System::Exception* System::Xml::XmlConvert::CreateException(::Il2CppString* res, ::Array<::Il2CppString*>* args, System::Xml::ExceptionType exceptionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(res), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(exceptionType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, res, args, exceptionType);
}
// Autogenerated method: System.Xml.XmlConvert.CreateException
System::Exception* System::Xml::XmlConvert::CreateException(::Il2CppString* res, ::Array<::Il2CppString*>* args, System::Xml::ExceptionType exceptionType, int lineNo, int linePos) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(res), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(exceptionType), ::il2cpp_utils::ExtractType(lineNo), ::il2cpp_utils::ExtractType(linePos)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, res, args, exceptionType, lineNo, linePos);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidSurrogatePairException
System::Exception* System::Xml::XmlConvert::CreateInvalidSurrogatePairException(::Il2CppChar low, ::Il2CppChar hi) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidSurrogatePairException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidSurrogatePairException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(low), ::il2cpp_utils::ExtractType(hi)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, low, hi);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidSurrogatePairException
System::Exception* System::Xml::XmlConvert::CreateInvalidSurrogatePairException(::Il2CppChar low, ::Il2CppChar hi, System::Xml::ExceptionType exceptionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidSurrogatePairException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidSurrogatePairException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(low), ::il2cpp_utils::ExtractType(hi), ::il2cpp_utils::ExtractType(exceptionType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, low, hi, exceptionType);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidSurrogatePairException
System::Exception* System::Xml::XmlConvert::CreateInvalidSurrogatePairException(::Il2CppChar low, ::Il2CppChar hi, System::Xml::ExceptionType exceptionType, int lineNo, int linePos) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidSurrogatePairException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidSurrogatePairException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(low), ::il2cpp_utils::ExtractType(hi), ::il2cpp_utils::ExtractType(exceptionType), ::il2cpp_utils::ExtractType(lineNo), ::il2cpp_utils::ExtractType(linePos)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, low, hi, exceptionType, lineNo, linePos);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException
System::Exception* System::Xml::XmlConvert::CreateInvalidHighSurrogateCharException(::Il2CppChar hi) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidHighSurrogateCharException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidHighSurrogateCharException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hi)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hi);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException
System::Exception* System::Xml::XmlConvert::CreateInvalidHighSurrogateCharException(::Il2CppChar hi, System::Xml::ExceptionType exceptionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidHighSurrogateCharException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidHighSurrogateCharException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hi), ::il2cpp_utils::ExtractType(exceptionType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hi, exceptionType);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException
System::Exception* System::Xml::XmlConvert::CreateInvalidHighSurrogateCharException(::Il2CppChar hi, System::Xml::ExceptionType exceptionType, int lineNo, int linePos) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidHighSurrogateCharException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidHighSurrogateCharException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hi), ::il2cpp_utils::ExtractType(exceptionType), ::il2cpp_utils::ExtractType(lineNo), ::il2cpp_utils::ExtractType(linePos)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hi, exceptionType, lineNo, linePos);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidCharException
System::Exception* System::Xml::XmlConvert::CreateInvalidCharException(::Il2CppChar invChar, ::Il2CppChar nextChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidCharException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidCharException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(invChar), ::il2cpp_utils::ExtractType(nextChar)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, invChar, nextChar);
}
// Autogenerated method: System.Xml.XmlConvert.CreateInvalidCharException
System::Exception* System::Xml::XmlConvert::CreateInvalidCharException(::Il2CppChar invChar, ::Il2CppChar nextChar, System::Xml::ExceptionType exceptionType) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::CreateInvalidCharException");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", "CreateInvalidCharException", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(invChar), ::il2cpp_utils::ExtractType(nextChar), ::il2cpp_utils::ExtractType(exceptionType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Exception*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, invChar, nextChar, exceptionType);
}
// Autogenerated method: System.Xml.XmlConvert..cctor
void System::Xml::XmlConvert::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlConvert::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlConvert", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: XmlConvert::VerifyQName
// Il2CppName: VerifyQName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, System::Xml::ExceptionType)>(&XmlConvert::VerifyQName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "VerifyQName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::TrimString
// Il2CppName: TrimString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&XmlConvert::TrimString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "TrimString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::TrimStringStart
// Il2CppName: TrimStringStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&XmlConvert::TrimStringStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "TrimStringStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::TrimStringEnd
// Il2CppName: TrimStringEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&XmlConvert::TrimStringEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "TrimStringEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateException
// Il2CppName: CreateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppString*, ::Il2CppString*, System::Xml::ExceptionType, int, int)>(&XmlConvert::CreateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateException
// Il2CppName: CreateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppString*, ::Array<::Il2CppString*>*, System::Xml::ExceptionType)>(&XmlConvert::CreateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateException
// Il2CppName: CreateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppString*, ::Array<::Il2CppString*>*, System::Xml::ExceptionType, int, int)>(&XmlConvert::CreateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidSurrogatePairException
// Il2CppName: CreateInvalidSurrogatePairException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar, ::Il2CppChar)>(&XmlConvert::CreateInvalidSurrogatePairException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidSurrogatePairException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidSurrogatePairException
// Il2CppName: CreateInvalidSurrogatePairException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar, ::Il2CppChar, System::Xml::ExceptionType)>(&XmlConvert::CreateInvalidSurrogatePairException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidSurrogatePairException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidSurrogatePairException
// Il2CppName: CreateInvalidSurrogatePairException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar, ::Il2CppChar, System::Xml::ExceptionType, int, int)>(&XmlConvert::CreateInvalidSurrogatePairException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidSurrogatePairException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidHighSurrogateCharException
// Il2CppName: CreateInvalidHighSurrogateCharException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar)>(&XmlConvert::CreateInvalidHighSurrogateCharException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidHighSurrogateCharException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidHighSurrogateCharException
// Il2CppName: CreateInvalidHighSurrogateCharException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar, System::Xml::ExceptionType)>(&XmlConvert::CreateInvalidHighSurrogateCharException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidHighSurrogateCharException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidHighSurrogateCharException
// Il2CppName: CreateInvalidHighSurrogateCharException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar, System::Xml::ExceptionType, int, int)>(&XmlConvert::CreateInvalidHighSurrogateCharException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidHighSurrogateCharException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidCharException
// Il2CppName: CreateInvalidCharException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar, ::Il2CppChar)>(&XmlConvert::CreateInvalidCharException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidCharException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::CreateInvalidCharException
// Il2CppName: CreateInvalidCharException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (*)(::Il2CppChar, ::Il2CppChar, System::Xml::ExceptionType)>(&XmlConvert::CreateInvalidCharException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), "CreateInvalidCharException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::ExceptionType>()});
  }
};
// Writing MetadataGetter for method: XmlConvert::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&XmlConvert::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlConvert*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlException
#include "System/Xml/XmlException.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlException.FormatUserMessage
::Il2CppString* System::Xml::XmlException::FormatUserMessage(::Il2CppString* message, int lineNumber, int linePosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlException::FormatUserMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlException", "FormatUserMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(lineNumber), ::il2cpp_utils::ExtractType(linePosition)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message, lineNumber, linePosition);
}
// Autogenerated method: System.Xml.XmlException.CreateMessage
::Il2CppString* System::Xml::XmlException::CreateMessage(::Il2CppString* res, ::Array<::Il2CppString*>* args, int lineNumber, int linePosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlException::CreateMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlException", "CreateMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(res), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(lineNumber), ::il2cpp_utils::ExtractType(linePosition)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, res, args, lineNumber, linePosition);
}
// Autogenerated method: System.Xml.XmlException.BuildCharExceptionArgs
::Array<::Il2CppString*>* System::Xml::XmlException::BuildCharExceptionArgs(::Il2CppString* data, int invCharIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlException::BuildCharExceptionArgs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlException", "BuildCharExceptionArgs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(invCharIndex)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, invCharIndex);
}
// Autogenerated method: System.Xml.XmlException.BuildCharExceptionArgs
::Array<::Il2CppString*>* System::Xml::XmlException::BuildCharExceptionArgs(::Il2CppChar invChar, ::Il2CppChar nextChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlException::BuildCharExceptionArgs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlException", "BuildCharExceptionArgs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(invChar), ::il2cpp_utils::ExtractType(nextChar)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppString*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, invChar, nextChar);
}
// Autogenerated method: System.Xml.XmlException.GetObjectData
void System::Xml::XmlException::GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlException::GetObjectData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
}
// Autogenerated method: System.Xml.XmlException.get_Message
::Il2CppString* System::Xml::XmlException::get_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlException::get_Message");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Message", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, System::Exception*, int, int)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, System::Exception*, int, int)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, System::Exception*, int, int, ::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, System::Exception*, int, int, ::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Il2CppString*, int, int)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Il2CppString*, int, int)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Array<::Il2CppString*>*, int, int)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Array<::Il2CppString*>*, int, int)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Array<::Il2CppString*>*, System::Exception*, int, int, ::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*, ::Array<::Il2CppString*>*, System::Exception*, int, int, ::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlException::FormatUserMessage
// Il2CppName: FormatUserMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, int, int)>(&XmlException::FormatUserMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), "FormatUserMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlException::CreateMessage
// Il2CppName: CreateMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppString*>*, int, int)>(&XmlException::CreateMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), "CreateMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlException::BuildCharExceptionArgs
// Il2CppName: BuildCharExceptionArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*, int)>(&XmlException::BuildCharExceptionArgs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), "BuildCharExceptionArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlException::BuildCharExceptionArgs
// Il2CppName: BuildCharExceptionArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppChar, ::Il2CppChar)>(&XmlException::BuildCharExceptionArgs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), "BuildCharExceptionArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: XmlException::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&XmlException::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)()>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)()>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlException::*)(::Il2CppString*)>(&XmlException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlException::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlException::*)()>(&XmlException::get_Message)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlException*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlQualifiedName
#include "System/Xml/XmlQualifiedName.hpp"
// Including type: System.Xml.XmlQualifiedName/HashCodeOfStringDelegate
#include "System/Xml/XmlQualifiedName_HashCodeOfStringDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Xml.XmlQualifiedName/HashCodeOfStringDelegate hashCodeDelegate
System::Xml::XmlQualifiedName::HashCodeOfStringDelegate* System::Xml::XmlQualifiedName::_get_hashCodeDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::_get_hashCodeDelegate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlQualifiedName::HashCodeOfStringDelegate*>("System.Xml", "XmlQualifiedName", "hashCodeDelegate"));
}
// Autogenerated static field setter
// Set static field: static private System.Xml.XmlQualifiedName/HashCodeOfStringDelegate hashCodeDelegate
void System::Xml::XmlQualifiedName::_set_hashCodeDelegate(System::Xml::XmlQualifiedName::HashCodeOfStringDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::_set_hashCodeDelegate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlQualifiedName", "hashCodeDelegate", value));
}
// Autogenerated static field getter
// Get static field: static public readonly System.Xml.XmlQualifiedName Empty
System::Xml::XmlQualifiedName* System::Xml::XmlQualifiedName::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Xml::XmlQualifiedName*>("System.Xml", "XmlQualifiedName", "Empty"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Xml.XmlQualifiedName Empty
void System::Xml::XmlQualifiedName::_set_Empty(System::Xml::XmlQualifiedName* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("System.Xml", "XmlQualifiedName", "Empty", value));
}
// Autogenerated method: System.Xml.XmlQualifiedName.get_Namespace
::Il2CppString* System::Xml::XmlQualifiedName::get_Namespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::get_Namespace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Namespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlQualifiedName.get_Name
::Il2CppString* System::Xml::XmlQualifiedName::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlQualifiedName.GetHashCodeDelegate
System::Xml::XmlQualifiedName::HashCodeOfStringDelegate* System::Xml::XmlQualifiedName::GetHashCodeDelegate() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::GetHashCodeDelegate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlQualifiedName", "GetHashCodeDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Xml::XmlQualifiedName::HashCodeOfStringDelegate*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Xml.XmlQualifiedName.IsRandomizedHashingDisabled
bool System::Xml::XmlQualifiedName::IsRandomizedHashingDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::IsRandomizedHashingDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlQualifiedName", "IsRandomizedHashingDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Xml.XmlQualifiedName.GetHashCodeOfString
int System::Xml::XmlQualifiedName::GetHashCodeOfString(::Il2CppString* s, int length, int64_t additionalEntropy) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::GetHashCodeOfString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlQualifiedName", "GetHashCodeOfString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(additionalEntropy)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s, length, additionalEntropy);
}
// Autogenerated method: System.Xml.XmlQualifiedName.Init
void System::Xml::XmlQualifiedName::Init(::Il2CppString* name, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, ns);
}
// Autogenerated method: System.Xml.XmlQualifiedName..cctor
void System::Xml::XmlQualifiedName::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlQualifiedName", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: System.Xml.XmlQualifiedName.GetHashCode
int System::Xml::XmlQualifiedName::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlQualifiedName.ToString
::Il2CppString* System::Xml::XmlQualifiedName::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: System.Xml.XmlQualifiedName.Equals
bool System::Xml::XmlQualifiedName::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: System.Xml.XmlQualifiedName.op_Equality
bool System::Xml::operator ==(System::Xml::XmlQualifiedName* a, System::Xml::XmlQualifiedName& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlQualifiedName", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(&b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, &b);
}
// Autogenerated method: System.Xml.XmlQualifiedName.op_Inequality
bool System::Xml::operator !=(System::Xml::XmlQualifiedName* a, System::Xml::XmlQualifiedName& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "XmlQualifiedName", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(&b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, &b);
}
// Writing MetadataGetter for method: XmlQualifiedName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::*)(::Il2CppString*)>(&XmlQualifiedName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::*)(::Il2CppString*)>(&XmlQualifiedName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::*)(::Il2CppString*, ::Il2CppString*)>(&XmlQualifiedName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::*)(::Il2CppString*, ::Il2CppString*)>(&XmlQualifiedName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlQualifiedName::*)()>(&XmlQualifiedName::get_Namespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlQualifiedName::*)()>(&XmlQualifiedName::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::GetHashCodeDelegate
// Il2CppName: GetHashCodeDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlQualifiedName::HashCodeOfStringDelegate* (*)()>(&XmlQualifiedName::GetHashCodeDelegate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "GetHashCodeDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::IsRandomizedHashingDisabled
// Il2CppName: IsRandomizedHashingDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&XmlQualifiedName::IsRandomizedHashingDisabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "IsRandomizedHashingDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::GetHashCodeOfString
// Il2CppName: GetHashCodeOfString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, int64_t)>(&XmlQualifiedName::GetHashCodeOfString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "GetHashCodeOfString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::*)(::Il2CppString*, ::Il2CppString*)>(&XmlQualifiedName::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&XmlQualifiedName::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::*)()>(&XmlQualifiedName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::*)()>(&XmlQualifiedName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlQualifiedName::*)()>(&XmlQualifiedName::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (XmlQualifiedName::*)()>(&XmlQualifiedName::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlQualifiedName::*)(::Il2CppObject*)>(&XmlQualifiedName::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Xml::XmlQualifiedName*, System::Xml::XmlQualifiedName&)>(&XmlQualifiedName::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlQualifiedName*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlQualifiedName&>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Xml::XmlQualifiedName*, System::Xml::XmlQualifiedName&)>(&XmlQualifiedName::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName*), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlQualifiedName*>(), ::il2cpp_utils::ExtractIndependentType<System::Xml::XmlQualifiedName&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlQualifiedName/HashCodeOfStringDelegate
#include "System/Xml/XmlQualifiedName_HashCodeOfStringDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.XmlQualifiedName/HashCodeOfStringDelegate.Invoke
int System::Xml::XmlQualifiedName::HashCodeOfStringDelegate::Invoke(::Il2CppString* s, int sLen, int64_t additionalEntropy) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::HashCodeOfStringDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(sLen), ::il2cpp_utils::ExtractType(additionalEntropy)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, s, sLen, additionalEntropy);
}
// Autogenerated method: System.Xml.XmlQualifiedName/HashCodeOfStringDelegate.BeginInvoke
System::IAsyncResult* System::Xml::XmlQualifiedName::HashCodeOfStringDelegate::BeginInvoke(::Il2CppString* s, int sLen, int64_t additionalEntropy, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::HashCodeOfStringDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(sLen), ::il2cpp_utils::ExtractType(additionalEntropy), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, s, sLen, additionalEntropy, callback, object);
}
// Autogenerated method: System.Xml.XmlQualifiedName/HashCodeOfStringDelegate.EndInvoke
int System::Xml::XmlQualifiedName::HashCodeOfStringDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::HashCodeOfStringDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: XmlQualifiedName::HashCodeOfStringDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::HashCodeOfStringDelegate::*)(::Il2CppObject*, System::IntPtr)>(&XmlQualifiedName::HashCodeOfStringDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName::HashCodeOfStringDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlQualifiedName::HashCodeOfStringDelegate::*)(::Il2CppObject*, System::IntPtr)>(&XmlQualifiedName::HashCodeOfStringDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName::HashCodeOfStringDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::HashCodeOfStringDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlQualifiedName::HashCodeOfStringDelegate::*)(::Il2CppString*, int, int64_t)>(&XmlQualifiedName::HashCodeOfStringDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName::HashCodeOfStringDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::HashCodeOfStringDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (XmlQualifiedName::HashCodeOfStringDelegate::*)(::Il2CppString*, int, int64_t, System::AsyncCallback*, ::Il2CppObject*)>(&XmlQualifiedName::HashCodeOfStringDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName::HashCodeOfStringDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: XmlQualifiedName::HashCodeOfStringDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlQualifiedName::HashCodeOfStringDelegate::*)(System::IAsyncResult*)>(&XmlQualifiedName::HashCodeOfStringDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlQualifiedName::HashCodeOfStringDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.Res
#include "System/Xml/Res.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.Res.GetString
::Il2CppString* System::Xml::Res::GetString(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Res::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "Res", "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name);
}
// Autogenerated method: System.Xml.Res.GetString
::Il2CppString* System::Xml::Res::GetString(::Il2CppString* name, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Res::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Xml", "Res", "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, args);
}
// Creating initializer_list -> params proxy for: System.String GetString(System.String name, params System.Object[] args)
::Il2CppString* System::Xml::Res::GetString(::Il2CppString* name, std::initializer_list<::Il2CppObject*> args) {
  return System::Xml::Res::GetString(name, ::Array<::Il2CppObject*>::New(args));
}
// Writing MetadataGetter for method: Res::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&Res::GetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Res*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Res::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&Res::GetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Res*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.Xsl.Runtime.StringConcat
#include "System/Xml/Xsl/Runtime/StringConcat.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: System.Xml.Xsl.Runtime.StringConcat.Clear
void System::Xml::Xsl::Runtime::StringConcat::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Xsl::Runtime::StringConcat::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: System.Xml.Xsl.Runtime.StringConcat.get_Count
int System::Xml::Xsl::Runtime::StringConcat::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Xsl::Runtime::StringConcat::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: System.Xml.Xsl.Runtime.StringConcat.GetResult
::Il2CppString* System::Xml::Xsl::Runtime::StringConcat::GetResult() {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Xsl::Runtime::StringConcat::GetResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: System.Xml.Xsl.Runtime.StringConcat.ConcatNoDelimiter
void System::Xml::Xsl::Runtime::StringConcat::ConcatNoDelimiter(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::Xsl::Runtime::StringConcat::ConcatNoDelimiter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ConcatNoDelimiter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, s);
}
// Writing MetadataGetter for method: StringConcat::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringConcat::*)()>(&StringConcat::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringConcat), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringConcat::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringConcat::*)()>(&StringConcat::get_Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringConcat), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringConcat::GetResult
// Il2CppName: GetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringConcat::*)()>(&StringConcat::GetResult)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringConcat), "GetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringConcat::ConcatNoDelimiter
// Il2CppName: ConcatNoDelimiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringConcat::*)(::Il2CppString*)>(&StringConcat::ConcatNoDelimiter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringConcat), "ConcatNoDelimiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PackedPlayModeBuildLogs
#include "GlobalNamespace/PackedPlayModeBuildLogs.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PackedPlayModeBuildLogs.get_RuntimeBuildLogs
System::Collections::Generic::List_1<GlobalNamespace::PackedPlayModeBuildLogs::RuntimeBuildLog>* GlobalNamespace::PackedPlayModeBuildLogs::get_RuntimeBuildLogs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PackedPlayModeBuildLogs::get_RuntimeBuildLogs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RuntimeBuildLogs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::PackedPlayModeBuildLogs::RuntimeBuildLog>*, false>(this, ___internal__method);
}
// Autogenerated method: PackedPlayModeBuildLogs.set_RuntimeBuildLogs
void GlobalNamespace::PackedPlayModeBuildLogs::set_RuntimeBuildLogs(System::Collections::Generic::List_1<GlobalNamespace::PackedPlayModeBuildLogs::RuntimeBuildLog>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PackedPlayModeBuildLogs::set_RuntimeBuildLogs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_RuntimeBuildLogs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: PackedPlayModeBuildLogs::get_RuntimeBuildLogs
// Il2CppName: get_RuntimeBuildLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::PackedPlayModeBuildLogs::RuntimeBuildLog>* (PackedPlayModeBuildLogs::*)()>(&PackedPlayModeBuildLogs::get_RuntimeBuildLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackedPlayModeBuildLogs*), "get_RuntimeBuildLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PackedPlayModeBuildLogs::set_RuntimeBuildLogs
// Il2CppName: set_RuntimeBuildLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackedPlayModeBuildLogs::*)(System::Collections::Generic::List_1<GlobalNamespace::PackedPlayModeBuildLogs::RuntimeBuildLog>*)>(&PackedPlayModeBuildLogs::set_RuntimeBuildLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackedPlayModeBuildLogs*), "set_RuntimeBuildLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::PackedPlayModeBuildLogs::RuntimeBuildLog>*>()});
  }
};
// Writing MetadataGetter for method: PackedPlayModeBuildLogs::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackedPlayModeBuildLogs::*)()>(&PackedPlayModeBuildLogs::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackedPlayModeBuildLogs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackedPlayModeBuildLogs::*)()>(&PackedPlayModeBuildLogs::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackedPlayModeBuildLogs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PackedPlayModeBuildLogs/RuntimeBuildLog
#include "GlobalNamespace/PackedPlayModeBuildLogs.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PackedPlayModeBuildLogs::RuntimeBuildLog::RuntimeBuildLog
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackedPlayModeBuildLogs::RuntimeBuildLog::*)(UnityEngine::LogType, ::Il2CppString*)>(&PackedPlayModeBuildLogs::RuntimeBuildLog::RuntimeBuildLog<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackedPlayModeBuildLogs::RuntimeBuildLog), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LogType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PackedPlayModeBuildLogs::RuntimeBuildLog::*)(UnityEngine::LogType, ::Il2CppString*)>(&PackedPlayModeBuildLogs::RuntimeBuildLog::RuntimeBuildLog<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PackedPlayModeBuildLogs::RuntimeBuildLog), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LogType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
