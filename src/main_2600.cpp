// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LobbyPlayersDataModel/<>c
#include "GlobalNamespace/LobbyPlayersDataModel_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly LobbyPlayersDataModel/<>c <>9
GlobalNamespace::LobbyPlayersDataModel::$$c* GlobalNamespace::LobbyPlayersDataModel::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::LobbyPlayersDataModel::$$c*>("", "LobbyPlayersDataModel/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly LobbyPlayersDataModel/<>c <>9
void GlobalNamespace::LobbyPlayersDataModel::$$c::_set_$$9(GlobalNamespace::LobbyPlayersDataModel::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LobbyPlayersDataModel/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IBeatmapLevelPack,System.String> <>9__42_0
System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>* GlobalNamespace::LobbyPlayersDataModel::$$c::_get_$$9__42_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$$c::_get_$$9__42_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>*>("", "LobbyPlayersDataModel/<>c", "<>9__42_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IBeatmapLevelPack,System.String> <>9__42_0
void GlobalNamespace::LobbyPlayersDataModel::$$c::_set_$$9__42_0(System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$$c::_set_$$9__42_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LobbyPlayersDataModel/<>c", "<>9__42_0", value)));
}
// Autogenerated method: LobbyPlayersDataModel/<>c..cctor
void GlobalNamespace::LobbyPlayersDataModel::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LobbyPlayersDataModel/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel/<>c.<SetOwnedSongPacks>b__42_0
::Il2CppString* GlobalNamespace::LobbyPlayersDataModel::$$c::$SetOwnedSongPacks$b__42_0(GlobalNamespace::IBeatmapLevelPack* pack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$$c::<SetOwnedSongPacks>b__42_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SetOwnedSongPacks>b__42_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, pack);
}
// Writing MetadataGetter for method: LobbyPlayersDataModel::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LobbyPlayersDataModel::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::$$c::$SetOwnedSongPacks$b__42_0
// Il2CppName: <SetOwnedSongPacks>b__42_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LobbyPlayersDataModel::$$c::*)(GlobalNamespace::IBeatmapLevelPack*)>(&LobbyPlayersDataModel::$$c::$SetOwnedSongPacks$b__42_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel::$$c*), "<SetOwnedSongPacks>b__42_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::$$c::*)()>(&LobbyPlayersDataModel::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::$$c::*)()>(&LobbyPlayersDataModel::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LobbyPlayersDataModel/<SetOwnedSongPacks>d__42
#include "GlobalNamespace/LobbyPlayersDataModel_-SetOwnedSongPacks-d__42.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyPlayersDataModel/<SetOwnedSongPacks>d__42.MoveNext
void GlobalNamespace::LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LobbyPlayersDataModel/<SetOwnedSongPacks>d__42.SetStateMachine
void GlobalNamespace::LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::*)()>(&LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel::$SetOwnedSongPacks$d__42), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&LobbyPlayersDataModel::$SetOwnedSongPacks$d__42::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyPlayersDataModel::$SetOwnedSongPacks$d__42), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LobbyStateDataModel
#include "GlobalNamespace/LobbyStateDataModel.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyStateDataModel.add_playerConnectedEvent
void GlobalNamespace::LobbyStateDataModel::add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::add_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyStateDataModel.remove_playerConnectedEvent
void GlobalNamespace::LobbyStateDataModel::remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::remove_playerConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyStateDataModel.add_playerDisconnectedEvent
void GlobalNamespace::LobbyStateDataModel::add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::add_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyStateDataModel.remove_playerDisconnectedEvent
void GlobalNamespace::LobbyStateDataModel::remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::remove_playerDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LobbyStateDataModel.get_isConnected
bool GlobalNamespace::LobbyStateDataModel::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.get_localPlayer
GlobalNamespace::IConnectedPlayer* GlobalNamespace::LobbyStateDataModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.get_connectedPlayers
System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::LobbyStateDataModel::get_connectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::get_connectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.get_rawConnectedPlayers
System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::LobbyStateDataModel::get_rawConnectedPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::get_rawConnectedPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rawConnectedPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.get_isHost
bool GlobalNamespace::LobbyStateDataModel::get_isHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::get_isHost");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isHost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.get_maxPartySize
int GlobalNamespace::LobbyStateDataModel::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.Activate
void GlobalNamespace::LobbyStateDataModel::Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.Deactivate
void GlobalNamespace::LobbyStateDataModel::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.Dispose
void GlobalNamespace::LobbyStateDataModel::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LobbyStateDataModel.GetPlayerById
GlobalNamespace::IConnectedPlayer* GlobalNamespace::LobbyStateDataModel::GetPlayerById(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::GetPlayerById");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: LobbyStateDataModel.HandleMultiplayerSessionManagerPlayerConnected
void GlobalNamespace::LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerConnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerPlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: LobbyStateDataModel.HandleMultiplayerSessionManagerPlayerDisconnected
void GlobalNamespace::LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerPlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Writing MetadataGetter for method: LobbyStateDataModel::add_playerConnectedEvent
// Il2CppName: add_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&LobbyStateDataModel::add_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "add_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::remove_playerConnectedEvent
// Il2CppName: remove_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&LobbyStateDataModel::remove_playerConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "remove_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::add_playerDisconnectedEvent
// Il2CppName: add_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&LobbyStateDataModel::add_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "add_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::remove_playerDisconnectedEvent
// Il2CppName: remove_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&LobbyStateDataModel::remove_playerDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnectedPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyStateDataModel::*)()>(&LobbyStateDataModel::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (LobbyStateDataModel::*)()>(&LobbyStateDataModel::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::get_connectedPlayers
// Il2CppName: get_connectedPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* (LobbyStateDataModel::*)()>(&LobbyStateDataModel::get_connectedPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "get_connectedPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::get_rawConnectedPlayers
// Il2CppName: get_rawConnectedPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* (LobbyStateDataModel::*)()>(&LobbyStateDataModel::get_rawConnectedPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "get_rawConnectedPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::get_isHost
// Il2CppName: get_isHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LobbyStateDataModel::*)()>(&LobbyStateDataModel::get_isHost)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "get_isHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LobbyStateDataModel::*)()>(&LobbyStateDataModel::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)()>(&LobbyStateDataModel::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)()>(&LobbyStateDataModel::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)()>(&LobbyStateDataModel::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::GetPlayerById
// Il2CppName: GetPlayerById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (LobbyStateDataModel::*)(::Il2CppString*)>(&LobbyStateDataModel::GetPlayerById)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "GetPlayerById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerConnected
// Il2CppName: HandleMultiplayerSessionManagerPlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "HandleMultiplayerSessionManagerPlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerDisconnected
// Il2CppName: HandleMultiplayerSessionManagerPlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LobbyStateDataModel::HandleMultiplayerSessionManagerPlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), "HandleMultiplayerSessionManagerPlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LobbyStateDataModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)()>(&LobbyStateDataModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyStateDataModel::*)()>(&LobbyStateDataModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyStateDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLobbyConnectionController
#include "GlobalNamespace/MultiplayerLobbyConnectionController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: ILobbyGameStateController
#include "GlobalNamespace/ILobbyGameStateController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: UnifiedNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/UnifiedNetworkPlayerModel_CreatePartyConfig.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyConnectionController.add_connectionSuccessEvent
void GlobalNamespace::MultiplayerLobbyConnectionController::add_connectionSuccessEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::add_connectionSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLobbyConnectionController.remove_connectionSuccessEvent
void GlobalNamespace::MultiplayerLobbyConnectionController::remove_connectionSuccessEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::remove_connectionSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLobbyConnectionController.add_connectionFailedEvent
void GlobalNamespace::MultiplayerLobbyConnectionController::add_connectionFailedEvent(System::Action_2<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::add_connectionFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLobbyConnectionController.remove_connectionFailedEvent
void GlobalNamespace::MultiplayerLobbyConnectionController::remove_connectionFailedEvent(System::Action_2<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::remove_connectionFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLobbyConnectionController.get_connectionState
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState GlobalNamespace::MultiplayerLobbyConnectionController::get_connectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::get_connectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyConnectionController.set_connectionState
void GlobalNamespace::MultiplayerLobbyConnectionController::set_connectionState(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::set_connectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_connectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLobbyConnectionController.get_connectionType
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType GlobalNamespace::MultiplayerLobbyConnectionController::get_connectionType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::get_connectionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyConnectionController.set_connectionType
void GlobalNamespace::MultiplayerLobbyConnectionController::set_connectionType(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::set_connectionType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_connectionType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLobbyConnectionController.get_connectionFailedReason
GlobalNamespace::ConnectionFailedReason GlobalNamespace::MultiplayerLobbyConnectionController::get_connectionFailedReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::get_connectionFailedReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionFailedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectionFailedReason, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyConnectionController.set_connectionFailedReason
void GlobalNamespace::MultiplayerLobbyConnectionController::set_connectionFailedReason(GlobalNamespace::ConnectionFailedReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::set_connectionFailedReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_connectionFailedReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLobbyConnectionController.CreateParty
void GlobalNamespace::MultiplayerLobbyConnectionController::CreateParty(GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig* createPartyConfig) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::CreateParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(createPartyConfig)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, createPartyConfig);
}
// Autogenerated method: MultiplayerLobbyConnectionController.ConnectToParty
void GlobalNamespace::MultiplayerLobbyConnectionController::ConnectToParty(::Il2CppString* serverCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::ConnectToParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverCode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverCode);
}
// Autogenerated method: MultiplayerLobbyConnectionController.CreateOrConnectToParty
void GlobalNamespace::MultiplayerLobbyConnectionController::CreateOrConnectToParty(GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig* createPartyConfig) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::CreateOrConnectToParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOrConnectToParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(createPartyConfig)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, createPartyConfig);
}
// Autogenerated method: MultiplayerLobbyConnectionController.ConnectToServer
void GlobalNamespace::MultiplayerLobbyConnectionController::ConnectToServer(GlobalNamespace::INetworkPlayer* server, ::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::ConnectToServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(server), ::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, server, password);
}
// Autogenerated method: MultiplayerLobbyConnectionController.ConnectToMatchmaking
void GlobalNamespace::MultiplayerLobbyConnectionController::ConnectToMatchmaking(GlobalNamespace::BeatmapDifficultyMask beatmapDifficultyMask, GlobalNamespace::SongPackMask songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::ConnectToMatchmaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToMatchmaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapDifficultyMask), ::il2cpp_utils::ExtractType(songPackMask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapDifficultyMask, songPackMask);
}
// Autogenerated method: MultiplayerLobbyConnectionController.DestroyParty
void GlobalNamespace::MultiplayerLobbyConnectionController::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::DestroyParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyConnectionController.LeaveLobby
void GlobalNamespace::MultiplayerLobbyConnectionController::LeaveLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LeaveLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LeaveLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyConnectionController.ClearCurrentConnection
void GlobalNamespace::MultiplayerLobbyConnectionController::ClearCurrentConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::ClearCurrentConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearCurrentConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyConnectionController.HandleMultiplayerSessionManagerConnected
void GlobalNamespace::MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyConnectionController.HandleMultiplayerSessionManagerConnectionFailed
void GlobalNamespace::MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: MultiplayerLobbyConnectionController.HandleMultiplayerSessionManagerConnectionFailedWithRetries
void GlobalNamespace::MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailedWithRetries(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailedWithRetries");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSessionManagerConnectionFailedWithRetries", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::add_connectionSuccessEvent
// Il2CppName: add_connectionSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(System::Action*)>(&MultiplayerLobbyConnectionController::add_connectionSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "add_connectionSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::remove_connectionSuccessEvent
// Il2CppName: remove_connectionSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(System::Action*)>(&MultiplayerLobbyConnectionController::remove_connectionSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "remove_connectionSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::add_connectionFailedEvent
// Il2CppName: add_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(System::Action_2<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason>*)>(&MultiplayerLobbyConnectionController::add_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "add_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::remove_connectionFailedEvent
// Il2CppName: remove_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(System::Action_2<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason>*)>(&MultiplayerLobbyConnectionController::remove_connectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "remove_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::get_connectionState
// Il2CppName: get_connectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::get_connectionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "get_connectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::set_connectionState
// Il2CppName: set_connectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState)>(&MultiplayerLobbyConnectionController::set_connectionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "set_connectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::get_connectionType
// Il2CppName: get_connectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::get_connectionType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "get_connectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::set_connectionType
// Il2CppName: set_connectionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType)>(&MultiplayerLobbyConnectionController::set_connectionType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "set_connectionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::get_connectionFailedReason
// Il2CppName: get_connectionFailedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectionFailedReason (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::get_connectionFailedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "get_connectionFailedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::set_connectionFailedReason
// Il2CppName: set_connectionFailedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::ConnectionFailedReason)>(&MultiplayerLobbyConnectionController::set_connectionFailedReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "set_connectionFailedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::CreateParty
// Il2CppName: CreateParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig*)>(&MultiplayerLobbyConnectionController::CreateParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "CreateParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::ConnectToParty
// Il2CppName: ConnectToParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(::Il2CppString*)>(&MultiplayerLobbyConnectionController::ConnectToParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "ConnectToParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::CreateOrConnectToParty
// Il2CppName: CreateOrConnectToParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig*)>(&MultiplayerLobbyConnectionController::CreateOrConnectToParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "CreateOrConnectToParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::ConnectToServer
// Il2CppName: ConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::INetworkPlayer*, ::Il2CppString*)>(&MultiplayerLobbyConnectionController::ConnectToServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "ConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::ConnectToMatchmaking
// Il2CppName: ConnectToMatchmaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::BeatmapDifficultyMask, GlobalNamespace::SongPackMask)>(&MultiplayerLobbyConnectionController::ConnectToMatchmaking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "ConnectToMatchmaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::DestroyParty
// Il2CppName: DestroyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::DestroyParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "DestroyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::LeaveLobby
// Il2CppName: LeaveLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::LeaveLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "LeaveLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::ClearCurrentConnection
// Il2CppName: ClearCurrentConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::ClearCurrentConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "ClearCurrentConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnected
// Il2CppName: HandleMultiplayerSessionManagerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "HandleMultiplayerSessionManagerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailed
// Il2CppName: HandleMultiplayerSessionManagerConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::ConnectionFailedReason)>(&MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "HandleMultiplayerSessionManagerConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailedWithRetries
// Il2CppName: HandleMultiplayerSessionManagerConnectionFailedWithRetries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)(GlobalNamespace::ConnectionFailedReason)>(&MultiplayerLobbyConnectionController::HandleMultiplayerSessionManagerConnectionFailedWithRetries)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), "HandleMultiplayerSessionManagerConnectionFailedWithRetries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyConnectionController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyConnectionController::*)()>(&MultiplayerLobbyConnectionController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyConnectionController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyConnectionController/LobbyConnectionState
#include "GlobalNamespace/MultiplayerLobbyConnectionController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState None
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState>("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "None"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState None
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_None(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState Connecting
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_Connecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_Connecting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState>("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "Connecting"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState Connecting
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_Connecting(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_Connecting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "Connecting", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState Connected
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState>("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState Connected
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_Connected(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState ConnectionFailed
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_ConnectionFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_get_ConnectionFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState>("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "ConnectionFailed"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionState ConnectionFailed
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_ConnectionFailed(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionState::_set_ConnectionFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionState", "ConnectionFailed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyConnectionController/LobbyConnectionType
#include "GlobalNamespace/MultiplayerLobbyConnectionController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType None
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType>("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType None
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_None(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType PartyHost
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_PartyHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_PartyHost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType>("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "PartyHost"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType PartyHost
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_PartyHost(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_PartyHost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "PartyHost", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType PartyClient
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_PartyClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_PartyClient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType>("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "PartyClient"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType PartyClient
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_PartyClient(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_PartyClient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "PartyClient", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType QuickPlay
GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_QuickPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_get_QuickPlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType>("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "QuickPlay"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerLobbyConnectionController/LobbyConnectionType QuickPlay
void GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_QuickPlay(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType::_set_QuickPlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLobbyConnectionController/LobbyConnectionType", "QuickPlay", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerModeSettings
#include "GlobalNamespace/MultiplayerModeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MultiplayerModeSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSettings::*)()>(&MultiplayerModeSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSettings::*)()>(&MultiplayerModeSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerUnavailableReason
#include "GlobalNamespace/MultiplayerUnavailableReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MultiplayerUnavailableReason NetworkUnreachable
GlobalNamespace::MultiplayerUnavailableReason GlobalNamespace::MultiplayerUnavailableReason::_get_NetworkUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_get_NetworkUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerUnavailableReason>("", "MultiplayerUnavailableReason", "NetworkUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerUnavailableReason NetworkUnreachable
void GlobalNamespace::MultiplayerUnavailableReason::_set_NetworkUnreachable(GlobalNamespace::MultiplayerUnavailableReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_set_NetworkUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReason", "NetworkUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerUnavailableReason UpdateRequired
GlobalNamespace::MultiplayerUnavailableReason GlobalNamespace::MultiplayerUnavailableReason::_get_UpdateRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_get_UpdateRequired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerUnavailableReason>("", "MultiplayerUnavailableReason", "UpdateRequired"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerUnavailableReason UpdateRequired
void GlobalNamespace::MultiplayerUnavailableReason::_set_UpdateRequired(GlobalNamespace::MultiplayerUnavailableReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_set_UpdateRequired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReason", "UpdateRequired", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerUnavailableReason ServerOffline
GlobalNamespace::MultiplayerUnavailableReason GlobalNamespace::MultiplayerUnavailableReason::_get_ServerOffline() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_get_ServerOffline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerUnavailableReason>("", "MultiplayerUnavailableReason", "ServerOffline"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerUnavailableReason ServerOffline
void GlobalNamespace::MultiplayerUnavailableReason::_set_ServerOffline(GlobalNamespace::MultiplayerUnavailableReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_set_ServerOffline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReason", "ServerOffline", value));
}
// Autogenerated static field getter
// Get static field: static public MultiplayerUnavailableReason MaintenanceMode
GlobalNamespace::MultiplayerUnavailableReason GlobalNamespace::MultiplayerUnavailableReason::_get_MaintenanceMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_get_MaintenanceMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MultiplayerUnavailableReason>("", "MultiplayerUnavailableReason", "MaintenanceMode"));
}
// Autogenerated static field setter
// Set static field: static public MultiplayerUnavailableReason MaintenanceMode
void GlobalNamespace::MultiplayerUnavailableReason::_set_MaintenanceMode(GlobalNamespace::MultiplayerUnavailableReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReason::_set_MaintenanceMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReason", "MaintenanceMode", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerUnavailableReasonMethods
#include "GlobalNamespace/MultiplayerUnavailableReasonMethods.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: MultiplayerUnavailableReason
#include "GlobalNamespace/MultiplayerUnavailableReason.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: Polyglot.Language
#include "Polyglot/Language.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE17C38
// Autogenerated static field getter
// Get static field: static private System.String kMultiplayerUnavailableServerOffline
::Il2CppString* GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableServerOffline() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableServerOffline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableServerOffline"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMultiplayerUnavailableServerOffline
void GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableServerOffline(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableServerOffline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableServerOffline", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17C48
// Autogenerated static field getter
// Get static field: static private System.String kMultiplayerUnavailableUpdateRequired
::Il2CppString* GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableUpdateRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableUpdateRequired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableUpdateRequired"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMultiplayerUnavailableUpdateRequired
void GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableUpdateRequired(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableUpdateRequired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableUpdateRequired", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17C58
// Autogenerated static field getter
// Get static field: static private System.String kMultiplayerUnavailableMaintenanceMode
::Il2CppString* GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableMaintenanceMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableMaintenanceMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableMaintenanceMode"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMultiplayerUnavailableMaintenanceMode
void GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableMaintenanceMode(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableMaintenanceMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableMaintenanceMode", value));
}
// [LocalizationKeyAttribute] Offset: 0xE17C68
// Autogenerated static field getter
// Get static field: static private System.String kMultiplayerUnavailableTryAgain
::Il2CppString* GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableTryAgain() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_get_kMultiplayerUnavailableTryAgain");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableTryAgain"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMultiplayerUnavailableTryAgain
void GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableTryAgain(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::_set_kMultiplayerUnavailableTryAgain");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerUnavailableReasonMethods", "kMultiplayerUnavailableTryAgain", value));
}
// Autogenerated method: MultiplayerUnavailableReasonMethods.LocalizedKey
::Il2CppString* GlobalNamespace::MultiplayerUnavailableReasonMethods::LocalizedKey(GlobalNamespace::MultiplayerUnavailableReason multiplayerUnavailableReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::LocalizedKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerUnavailableReasonMethods", "LocalizedKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerUnavailableReason)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, multiplayerUnavailableReason);
}
// Autogenerated method: MultiplayerUnavailableReasonMethods.ErrorCode
::Il2CppString* GlobalNamespace::MultiplayerUnavailableReasonMethods::ErrorCode(GlobalNamespace::MultiplayerUnavailableReason multiplayerUnavailableReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::ErrorCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerUnavailableReasonMethods", "ErrorCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerUnavailableReason)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, multiplayerUnavailableReason);
}
// Autogenerated method: MultiplayerUnavailableReasonMethods.TryGetMultiplayerUnavailableReason
bool GlobalNamespace::MultiplayerUnavailableReasonMethods::TryGetMultiplayerUnavailableReason(GlobalNamespace::MasterServerAvailabilityData* data, GlobalNamespace::MultiplayerUnavailableReason& reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::TryGetMultiplayerUnavailableReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerUnavailableReasonMethods", "TryGetMultiplayerUnavailableReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerUnavailableReason&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, reason);
}
// Autogenerated method: MultiplayerUnavailableReasonMethods.GetLocalizedMessage
::Il2CppString* GlobalNamespace::MultiplayerUnavailableReasonMethods::GetLocalizedMessage(GlobalNamespace::MasterServerAvailabilityData* data, Polyglot::Language language) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::GetLocalizedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerUnavailableReasonMethods", "GetLocalizedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(language)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, language);
}
// Autogenerated method: MultiplayerUnavailableReasonMethods.VersionLessThan
bool GlobalNamespace::MultiplayerUnavailableReasonMethods::VersionLessThan(::Il2CppString* currentVersion, ::Il2CppString* minVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerUnavailableReasonMethods::VersionLessThan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MultiplayerUnavailableReasonMethods", "VersionLessThan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentVersion), ::il2cpp_utils::ExtractType(minVersion)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, currentVersion, minVersion);
}
// Writing MetadataGetter for method: MultiplayerUnavailableReasonMethods::LocalizedKey
// Il2CppName: LocalizedKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::MultiplayerUnavailableReason)>(&MultiplayerUnavailableReasonMethods::LocalizedKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerUnavailableReasonMethods*), "LocalizedKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerUnavailableReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerUnavailableReasonMethods::ErrorCode
// Il2CppName: ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::MultiplayerUnavailableReason)>(&MultiplayerUnavailableReasonMethods::ErrorCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerUnavailableReasonMethods*), "ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerUnavailableReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerUnavailableReasonMethods::TryGetMultiplayerUnavailableReason
// Il2CppName: TryGetMultiplayerUnavailableReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::MasterServerAvailabilityData*, GlobalNamespace::MultiplayerUnavailableReason&)>(&MultiplayerUnavailableReasonMethods::TryGetMultiplayerUnavailableReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerUnavailableReasonMethods*), "TryGetMultiplayerUnavailableReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerAvailabilityData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerUnavailableReason&>()});
  }
};
// Writing MetadataGetter for method: MultiplayerUnavailableReasonMethods::GetLocalizedMessage
// Il2CppName: GetLocalizedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::MasterServerAvailabilityData*, Polyglot::Language)>(&MultiplayerUnavailableReasonMethods::GetLocalizedMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerUnavailableReasonMethods*), "GetLocalizedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerAvailabilityData*>(), ::il2cpp_utils::ExtractIndependentType<Polyglot::Language>()});
  }
};
// Writing MetadataGetter for method: MultiplayerUnavailableReasonMethods::VersionLessThan
// Il2CppName: VersionLessThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&MultiplayerUnavailableReasonMethods::VersionLessThan)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerUnavailableReasonMethods*), "VersionLessThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMaskModelSO
#include "GlobalNamespace/SongPackMaskModelSO.hpp"
// Including type: SongPackMaskModelSO/SongPackDataType
#include "GlobalNamespace/SongPackMaskModelSO_SongPackDataType.hpp"
// Including type: SongPackMaskModelSO/SongPackMaskItem
#include "GlobalNamespace/SongPackMaskModelSO_SongPackMaskItem.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapLevelPackCollectionSO
#include "GlobalNamespace/BeatmapLevelPackCollectionSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPackMaskModelSO.get_defaultSongPackMaskItems
System::Collections::Generic::List_1<::Il2CppString*>* GlobalNamespace::SongPackMaskModelSO::get_defaultSongPackMaskItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::get_defaultSongPackMaskItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultSongPackMaskItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMaskModelSO.get_customSongPackMaskItems
::Array<GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem*>* GlobalNamespace::SongPackMaskModelSO::get_customSongPackMaskItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::get_customSongPackMaskItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_customSongPackMaskItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem*>*, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMaskModelSO.get_ostAndExtrasCollection
GlobalNamespace::BeatmapLevelPackCollectionSO* GlobalNamespace::SongPackMaskModelSO::get_ostAndExtrasCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::get_ostAndExtrasCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ostAndExtrasCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapLevelPackCollectionSO*, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMaskModelSO.get_dlcCollection
GlobalNamespace::BeatmapLevelPackCollectionSO* GlobalNamespace::SongPackMaskModelSO::get_dlcCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::get_dlcCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dlcCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapLevelPackCollectionSO*, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMaskModelSO.ToLocalizedName
::Il2CppString* GlobalNamespace::SongPackMaskModelSO::ToLocalizedName(::Il2CppString* serializedName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::ToLocalizedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToLocalizedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializedName)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, serializedName);
}
// Autogenerated method: SongPackMaskModelSO.ToSongPackMask
bool GlobalNamespace::SongPackMaskModelSO::ToSongPackMask(::Il2CppString* serializedName, GlobalNamespace::SongPackMask& songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::ToSongPackMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToSongPackMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializedName), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, serializedName, songPackMask);
}
// Autogenerated method: SongPackMaskModelSO.ToSongPackMask
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMaskModelSO::ToSongPackMask(::Il2CppString* serializedName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::ToSongPackMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToSongPackMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializedName)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method, serializedName);
}
// Autogenerated method: SongPackMaskModelSO.ToSerializedName
bool GlobalNamespace::SongPackMaskModelSO::ToSerializedName(GlobalNamespace::SongPackMask songPackMask, ::Il2CppString*& serializedName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::ToSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songPackMask), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, songPackMask, serializedName);
}
// Autogenerated method: SongPackMaskModelSO.ToSerializedName
::Il2CppString* GlobalNamespace::SongPackMaskModelSO::ToSerializedName(GlobalNamespace::SongPackMask songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::ToSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songPackMask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, songPackMask);
}
// Autogenerated method: SongPackMaskModelSO.LazyInit
void GlobalNamespace::SongPackMaskModelSO::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongPackMaskModelSO::get_defaultSongPackMaskItems
// Il2CppName: get_defaultSongPackMaskItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<::Il2CppString*>* (SongPackMaskModelSO::*)()>(&SongPackMaskModelSO::get_defaultSongPackMaskItems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "get_defaultSongPackMaskItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::get_customSongPackMaskItems
// Il2CppName: get_customSongPackMaskItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem*>* (SongPackMaskModelSO::*)()>(&SongPackMaskModelSO::get_customSongPackMaskItems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "get_customSongPackMaskItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::get_ostAndExtrasCollection
// Il2CppName: get_ostAndExtrasCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapLevelPackCollectionSO* (SongPackMaskModelSO::*)()>(&SongPackMaskModelSO::get_ostAndExtrasCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "get_ostAndExtrasCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::get_dlcCollection
// Il2CppName: get_dlcCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapLevelPackCollectionSO* (SongPackMaskModelSO::*)()>(&SongPackMaskModelSO::get_dlcCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "get_dlcCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::ToLocalizedName
// Il2CppName: ToLocalizedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMaskModelSO::*)(::Il2CppString*)>(&SongPackMaskModelSO::ToLocalizedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "ToLocalizedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::ToSongPackMask
// Il2CppName: ToSongPackMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongPackMaskModelSO::*)(::Il2CppString*, GlobalNamespace::SongPackMask&)>(&SongPackMaskModelSO::ToSongPackMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "ToSongPackMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask&>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::ToSongPackMask
// Il2CppName: ToSongPackMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (SongPackMaskModelSO::*)(::Il2CppString*)>(&SongPackMaskModelSO::ToSongPackMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "ToSongPackMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::ToSerializedName
// Il2CppName: ToSerializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongPackMaskModelSO::*)(GlobalNamespace::SongPackMask, ::Il2CppString*&)>(&SongPackMaskModelSO::ToSerializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "ToSerializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::ToSerializedName
// Il2CppName: ToSerializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMaskModelSO::*)(GlobalNamespace::SongPackMask)>(&SongPackMaskModelSO::ToSerializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "ToSerializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::LazyInit
// Il2CppName: LazyInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMaskModelSO::*)()>(&SongPackMaskModelSO::LazyInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), "LazyInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMaskModelSO::*)()>(&SongPackMaskModelSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMaskModelSO::*)()>(&SongPackMaskModelSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongPackMaskModelSO/SongPackDataType
#include "GlobalNamespace/SongPackMaskModelSO_SongPackDataType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SongPackMaskModelSO/SongPackDataType SingleBeatmapLevelPack
GlobalNamespace::SongPackMaskModelSO::SongPackDataType GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_SingleBeatmapLevelPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_SingleBeatmapLevelPack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SongPackMaskModelSO::SongPackDataType>("", "SongPackMaskModelSO/SongPackDataType", "SingleBeatmapLevelPack"));
}
// Autogenerated static field setter
// Set static field: static public SongPackMaskModelSO/SongPackDataType SingleBeatmapLevelPack
void GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_SingleBeatmapLevelPack(GlobalNamespace::SongPackMaskModelSO::SongPackDataType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_SingleBeatmapLevelPack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackDataType", "SingleBeatmapLevelPack", value));
}
// Autogenerated static field getter
// Get static field: static public SongPackMaskModelSO/SongPackDataType MultipleBeatmapLevelPacks
GlobalNamespace::SongPackMaskModelSO::SongPackDataType GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_MultipleBeatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_MultipleBeatmapLevelPacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SongPackMaskModelSO::SongPackDataType>("", "SongPackMaskModelSO/SongPackDataType", "MultipleBeatmapLevelPacks"));
}
// Autogenerated static field setter
// Set static field: static public SongPackMaskModelSO/SongPackDataType MultipleBeatmapLevelPacks
void GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_MultipleBeatmapLevelPacks(GlobalNamespace::SongPackMaskModelSO::SongPackDataType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_MultipleBeatmapLevelPacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackDataType", "MultipleBeatmapLevelPacks", value));
}
// Autogenerated static field getter
// Get static field: static public SongPackMaskModelSO/SongPackDataType SinglePreviewBeatmapLevelPack
GlobalNamespace::SongPackMaskModelSO::SongPackDataType GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_SinglePreviewBeatmapLevelPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_SinglePreviewBeatmapLevelPack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SongPackMaskModelSO::SongPackDataType>("", "SongPackMaskModelSO/SongPackDataType", "SinglePreviewBeatmapLevelPack"));
}
// Autogenerated static field setter
// Set static field: static public SongPackMaskModelSO/SongPackDataType SinglePreviewBeatmapLevelPack
void GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_SinglePreviewBeatmapLevelPack(GlobalNamespace::SongPackMaskModelSO::SongPackDataType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_SinglePreviewBeatmapLevelPack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackDataType", "SinglePreviewBeatmapLevelPack", value));
}
// Autogenerated static field getter
// Get static field: static public SongPackMaskModelSO/SongPackDataType MultiplePreviewBeatmapLevelPacks
GlobalNamespace::SongPackMaskModelSO::SongPackDataType GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_MultiplePreviewBeatmapLevelPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_MultiplePreviewBeatmapLevelPacks");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SongPackMaskModelSO::SongPackDataType>("", "SongPackMaskModelSO/SongPackDataType", "MultiplePreviewBeatmapLevelPacks"));
}
// Autogenerated static field setter
// Set static field: static public SongPackMaskModelSO/SongPackDataType MultiplePreviewBeatmapLevelPacks
void GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_MultiplePreviewBeatmapLevelPacks(GlobalNamespace::SongPackMaskModelSO::SongPackDataType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_MultiplePreviewBeatmapLevelPacks");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackDataType", "MultiplePreviewBeatmapLevelPacks", value));
}
// Autogenerated static field getter
// Get static field: static public SongPackMaskModelSO/SongPackDataType SingleBeatmapLevelPackCollection
GlobalNamespace::SongPackMaskModelSO::SongPackDataType GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_SingleBeatmapLevelPackCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_SingleBeatmapLevelPackCollection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SongPackMaskModelSO::SongPackDataType>("", "SongPackMaskModelSO/SongPackDataType", "SingleBeatmapLevelPackCollection"));
}
// Autogenerated static field setter
// Set static field: static public SongPackMaskModelSO/SongPackDataType SingleBeatmapLevelPackCollection
void GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_SingleBeatmapLevelPackCollection(GlobalNamespace::SongPackMaskModelSO::SongPackDataType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_SingleBeatmapLevelPackCollection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackDataType", "SingleBeatmapLevelPackCollection", value));
}
// Autogenerated static field getter
// Get static field: static public SongPackMaskModelSO/SongPackDataType MultipleBeatmapLevelPackCollections
GlobalNamespace::SongPackMaskModelSO::SongPackDataType GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_MultipleBeatmapLevelPackCollections() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_get_MultipleBeatmapLevelPackCollections");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SongPackMaskModelSO::SongPackDataType>("", "SongPackMaskModelSO/SongPackDataType", "MultipleBeatmapLevelPackCollections"));
}
// Autogenerated static field setter
// Set static field: static public SongPackMaskModelSO/SongPackDataType MultipleBeatmapLevelPackCollections
void GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_MultipleBeatmapLevelPackCollections(GlobalNamespace::SongPackMaskModelSO::SongPackDataType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackDataType::_set_MultipleBeatmapLevelPackCollections");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackDataType", "MultipleBeatmapLevelPackCollections", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMaskModelSO/SongPackMaskItem
#include "GlobalNamespace/SongPackMaskModelSO_SongPackMaskItem.hpp"
// Including type: SongPackMaskModelSO/SongPackMaskItem/<>c
#include "GlobalNamespace/SongPackMaskModelSO_SongPackMaskItem_--c.hpp"
// Including type: BeatmapLevelPackSO
#include "GlobalNamespace/BeatmapLevelPackSO.hpp"
// Including type: PreviewBeatmapLevelPackSO
#include "GlobalNamespace/PreviewBeatmapLevelPackSO.hpp"
// Including type: BeatmapLevelPackCollectionSO
#include "GlobalNamespace/BeatmapLevelPackCollectionSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem.get_serializedName
::Il2CppString* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::get_serializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::get_serializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem.get_songPackMask
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::get_songPackMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::get_songPackMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPackMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::get_serializedName
// Il2CppName: get_serializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMaskModelSO::SongPackMaskItem::*)()>(&SongPackMaskModelSO::SongPackMaskItem::get_serializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem*), "get_serializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::get_songPackMask
// Il2CppName: get_songPackMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (SongPackMaskModelSO::SongPackMaskItem::*)()>(&SongPackMaskModelSO::SongPackMaskItem::get_songPackMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem*), "get_songPackMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMaskModelSO::SongPackMaskItem::*)()>(&SongPackMaskModelSO::SongPackMaskItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMaskModelSO::SongPackMaskItem::*)()>(&SongPackMaskModelSO::SongPackMaskItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMaskModelSO/SongPackMaskItem/<>c
#include "GlobalNamespace/SongPackMaskModelSO_SongPackMaskItem_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: BeatmapLevelPackSO
#include "GlobalNamespace/BeatmapLevelPackSO.hpp"
// Including type: PreviewBeatmapLevelPackSO
#include "GlobalNamespace/PreviewBeatmapLevelPackSO.hpp"
// Including type: BeatmapLevelPackCollectionSO
#include "GlobalNamespace/BeatmapLevelPackCollectionSO.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly SongPackMaskModelSO/SongPackMaskItem/<>c <>9
GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c*>("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly SongPackMaskModelSO/SongPackMaskItem/<>c <>9
void GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9(GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IBeatmapLevelPack,System.String> <>9__11_0
System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>*>("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IBeatmapLevelPack,System.String> <>9__11_0
void GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_0(System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<BeatmapLevelPackSO,System.String> <>9__11_1
System::Func_2<GlobalNamespace::BeatmapLevelPackSO*, ::Il2CppString*>* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::BeatmapLevelPackSO*, ::Il2CppString*>*>("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<BeatmapLevelPackSO,System.String> <>9__11_1
void GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_1(System::Func_2<GlobalNamespace::BeatmapLevelPackSO*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<PreviewBeatmapLevelPackSO,System.String> <>9__11_2
System::Func_2<GlobalNamespace::PreviewBeatmapLevelPackSO*, ::Il2CppString*>* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::PreviewBeatmapLevelPackSO*, ::Il2CppString*>*>("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<PreviewBeatmapLevelPackSO,System.String> <>9__11_2
void GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_2(System::Func_2<GlobalNamespace::PreviewBeatmapLevelPackSO*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IBeatmapLevelPack,System.String> <>9__11_4
System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>*>("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_4")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IBeatmapLevelPack,System.String> <>9__11_4
void GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_4(System::Func_2<GlobalNamespace::IBeatmapLevelPack*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_4", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<BeatmapLevelPackCollectionSO,System.Collections.Generic.IEnumerable`1<System.String>> <>9__11_3
System::Func_2<GlobalNamespace::BeatmapLevelPackCollectionSO*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_get_$$9__11_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::BeatmapLevelPackCollectionSO*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>*>("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<BeatmapLevelPackCollectionSO,System.Collections.Generic.IEnumerable`1<System.String>> <>9__11_3
void GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_3(System::Func_2<GlobalNamespace::BeatmapLevelPackCollectionSO*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_set_$$9__11_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "SongPackMaskModelSO/SongPackMaskItem/<>c", "<>9__11_3", value)));
}
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem/<>c..cctor
void GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SongPackMaskModelSO/SongPackMaskItem/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem/<>c.<get_songPackMask>b__11_0
::Il2CppString* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_0(GlobalNamespace::IBeatmapLevelPack* pack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::<get_songPackMask>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_songPackMask>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, pack);
}
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem/<>c.<get_songPackMask>b__11_1
::Il2CppString* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_1(GlobalNamespace::BeatmapLevelPackSO* pack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::<get_songPackMask>b__11_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_songPackMask>b__11_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, pack);
}
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem/<>c.<get_songPackMask>b__11_2
::Il2CppString* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_2(GlobalNamespace::PreviewBeatmapLevelPackSO* pack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::<get_songPackMask>b__11_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_songPackMask>b__11_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, pack);
}
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem/<>c.<get_songPackMask>b__11_3
System::Collections::Generic::IEnumerable_1<::Il2CppString*>* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_3(GlobalNamespace::BeatmapLevelPackCollectionSO* collection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::<get_songPackMask>b__11_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_songPackMask>b__11_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collection)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*, false>(this, ___internal__method, collection);
}
// Autogenerated method: SongPackMaskModelSO/SongPackMaskItem/<>c.<get_songPackMask>b__11_4
::Il2CppString* GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_4(GlobalNamespace::IBeatmapLevelPack* pack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMaskModelSO::SongPackMaskItem::$$c::<get_songPackMask>b__11_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_songPackMask>b__11_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, pack);
}
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SongPackMaskModelSO::SongPackMaskItem::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_0
// Il2CppName: <get_songPackMask>b__11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMaskModelSO::SongPackMaskItem::$$c::*)(GlobalNamespace::IBeatmapLevelPack*)>(&SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), "<get_songPackMask>b__11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_1
// Il2CppName: <get_songPackMask>b__11_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMaskModelSO::SongPackMaskItem::$$c::*)(GlobalNamespace::BeatmapLevelPackSO*)>(&SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), "<get_songPackMask>b__11_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapLevelPackSO*>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_2
// Il2CppName: <get_songPackMask>b__11_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMaskModelSO::SongPackMaskItem::$$c::*)(GlobalNamespace::PreviewBeatmapLevelPackSO*)>(&SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), "<get_songPackMask>b__11_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PreviewBeatmapLevelPackSO*>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_3
// Il2CppName: <get_songPackMask>b__11_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Il2CppString*>* (SongPackMaskModelSO::SongPackMaskItem::$$c::*)(GlobalNamespace::BeatmapLevelPackCollectionSO*)>(&SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), "<get_songPackMask>b__11_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapLevelPackCollectionSO*>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_4
// Il2CppName: <get_songPackMask>b__11_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMaskModelSO::SongPackMaskItem::$$c::*)(GlobalNamespace::IBeatmapLevelPack*)>(&SongPackMaskModelSO::SongPackMaskItem::$$c::$get_songPackMask$b__11_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), "<get_songPackMask>b__11_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
// Writing MetadataGetter for method: SongPackMaskModelSO::SongPackMaskItem::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMaskModelSO::SongPackMaskItem::$$c::*)()>(&SongPackMaskModelSO::SongPackMaskItem::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMaskModelSO::SongPackMaskItem::$$c::*)()>(&SongPackMaskModelSO::SongPackMaskItem::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMaskModelSO::SongPackMaskItem::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMasksModel
#include "GlobalNamespace/SongPackMasksModel.hpp"
// Including type: SongPackMasksModel/<>c__DisplayClass3_0
#include "GlobalNamespace/SongPackMasksModel_--c__DisplayClass3_0.hpp"
// Including type: SongPackMasksModel/<>c__DisplayClass5_0
#include "GlobalNamespace/SongPackMasksModel_--c__DisplayClass5_0.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: SongPackMaskModelSO
#include "GlobalNamespace/SongPackMaskModelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPackMasksModel.get_songPackMaskData
System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>*>* GlobalNamespace::SongPackMasksModel::get_songPackMaskData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMasksModel::get_songPackMaskData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPackMaskData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>*>*, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMasksModel.GetAllSongsMask
GlobalNamespace::SongPackMask GlobalNamespace::SongPackMasksModel::GetAllSongsMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMasksModel::GetAllSongsMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllSongsMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: SongPackMasksModel.GetSongPackMaskText
::Il2CppString* GlobalNamespace::SongPackMasksModel::GetSongPackMaskText(GlobalNamespace::SongPackMask songPackMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMasksModel::GetSongPackMaskText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSongPackMaskText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songPackMask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, songPackMask);
}
// Writing MetadataGetter for method: SongPackMasksModel::get_songPackMaskData
// Il2CppName: get_songPackMaskData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>*>* (SongPackMasksModel::*)()>(&SongPackMasksModel::get_songPackMaskData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel*), "get_songPackMaskData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMasksModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMasksModel::*)(GlobalNamespace::SongPackMaskModelSO*)>(&SongPackMasksModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMaskModelSO*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMasksModel::*)(GlobalNamespace::SongPackMaskModelSO*)>(&SongPackMasksModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMaskModelSO*>()});
  }
};
// Writing MetadataGetter for method: SongPackMasksModel::GetAllSongsMask
// Il2CppName: GetAllSongsMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (SongPackMasksModel::*)()>(&SongPackMasksModel::GetAllSongsMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel*), "GetAllSongsMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPackMasksModel::GetSongPackMaskText
// Il2CppName: GetSongPackMaskText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SongPackMasksModel::*)(GlobalNamespace::SongPackMask)>(&SongPackMasksModel::GetSongPackMaskText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel*), "GetSongPackMaskText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMasksModel/<>c__DisplayClass3_0
#include "GlobalNamespace/SongPackMasksModel_--c__DisplayClass3_0.hpp"
// Including type: SongPackMaskModelSO
#include "GlobalNamespace/SongPackMaskModelSO.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPackMasksModel/<>c__DisplayClass3_0.<.ctor>b__0
System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>* GlobalNamespace::SongPackMasksModel::$$c__DisplayClass3_0::$_ctor$b__0(::Il2CppString* serializedName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMasksModel::$$c__DisplayClass3_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializedName)})));
  return ::il2cpp_utils::RunMethodThrow<System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>*, false>(this, ___internal__method, serializedName);
}
// Writing MetadataGetter for method: SongPackMasksModel::$$c__DisplayClass3_0::$_ctor$b__0
// Il2CppName: <.ctor>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>* (SongPackMasksModel::$$c__DisplayClass3_0::*)(::Il2CppString*)>(&SongPackMasksModel::$$c__DisplayClass3_0::$_ctor$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel::$$c__DisplayClass3_0*), "<.ctor>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongPackMasksModel::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMasksModel::$$c__DisplayClass3_0::*)()>(&SongPackMasksModel::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMasksModel::$$c__DisplayClass3_0::*)()>(&SongPackMasksModel::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPackMasksModel/<>c__DisplayClass5_0
#include "GlobalNamespace/SongPackMasksModel_--c__DisplayClass5_0.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPackMasksModel/<>c__DisplayClass5_0.<GetSongPackMaskText>b__0
bool GlobalNamespace::SongPackMasksModel::$$c__DisplayClass5_0::$GetSongPackMaskText$b__0(System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>* songPackTuple) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPackMasksModel::$$c__DisplayClass5_0::<GetSongPackMaskText>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetSongPackMaskText>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songPackTuple)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, songPackTuple);
}
// Writing MetadataGetter for method: SongPackMasksModel::$$c__DisplayClass5_0::$GetSongPackMaskText$b__0
// Il2CppName: <GetSongPackMaskText>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongPackMasksModel::$$c__DisplayClass5_0::*)(System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>*)>(&SongPackMasksModel::$$c__DisplayClass5_0::$GetSongPackMaskText$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel::$$c__DisplayClass5_0*), "<GetSongPackMaskText>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Tuple_2<GlobalNamespace::SongPackMask, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SongPackMasksModel::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMasksModel::$$c__DisplayClass5_0::*)()>(&SongPackMasksModel::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPackMasksModel::$$c__DisplayClass5_0::*)()>(&SongPackMasksModel::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPackMasksModel::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AuthenticationTokenPlatformExtensions
#include "GlobalNamespace/AuthenticationTokenPlatformExtensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AuthenticationTokenPlatformExtensions.ToAuthenticationTokenPlatform
GlobalNamespace::AuthenticationToken::Platform GlobalNamespace::AuthenticationTokenPlatformExtensions::ToAuthenticationTokenPlatform(GlobalNamespace::UserInfo::Platform platform) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationTokenPlatformExtensions::ToAuthenticationTokenPlatform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AuthenticationTokenPlatformExtensions", "ToAuthenticationTokenPlatform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(platform)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AuthenticationToken::Platform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, platform);
}
// Autogenerated method: AuthenticationTokenPlatformExtensions.ToUserInfoPlatform
GlobalNamespace::UserInfo::Platform GlobalNamespace::AuthenticationTokenPlatformExtensions::ToUserInfoPlatform(GlobalNamespace::AuthenticationToken::Platform platform) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AuthenticationTokenPlatformExtensions::ToUserInfoPlatform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AuthenticationTokenPlatformExtensions", "ToUserInfoPlatform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(platform)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::UserInfo::Platform, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, platform);
}
// Writing MetadataGetter for method: AuthenticationTokenPlatformExtensions::ToAuthenticationTokenPlatform
// Il2CppName: ToAuthenticationTokenPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AuthenticationToken::Platform (*)(GlobalNamespace::UserInfo::Platform)>(&AuthenticationTokenPlatformExtensions::ToAuthenticationTokenPlatform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationTokenPlatformExtensions*), "ToAuthenticationTokenPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UserInfo::Platform>()});
  }
};
// Writing MetadataGetter for method: AuthenticationTokenPlatformExtensions::ToUserInfoPlatform
// Il2CppName: ToUserInfoPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::UserInfo::Platform (*)(GlobalNamespace::AuthenticationToken::Platform)>(&AuthenticationTokenPlatformExtensions::ToUserInfoPlatform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AuthenticationTokenPlatformExtensions*), "ToUserInfoPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AuthenticationToken::Platform>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseNetworkPlayerModel
#include "GlobalNamespace/BaseNetworkPlayerModel.hpp"
// Including type: BaseNetworkPlayerModel/PartyConfig
#include "GlobalNamespace/BaseNetworkPlayerModel_PartyConfig.hpp"
// Including type: BaseNetworkPlayerModel/<GetPartyPlayers>d__55
#include "GlobalNamespace/BaseNetworkPlayerModel_-GetPartyPlayers-d__55.hpp"
// Including type: BaseNetworkPlayerModel/<GetOtherPlayers>d__56
#include "GlobalNamespace/BaseNetworkPlayerModel_-GetOtherPlayers-d__56.hpp"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: INetworkPlayerModelPartyConfig`1
#include "GlobalNamespace/INetworkPlayerModelPartyConfig_1.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseNetworkPlayerModel.get_connectedPlayerManager
GlobalNamespace::ConnectedPlayerManager* GlobalNamespace::BaseNetworkPlayerModel::get_connectedPlayerManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_connectedPlayerManager");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_partyManager
GlobalNamespace::INetworkPlayerModel* GlobalNamespace::BaseNetworkPlayerModel::get_partyManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_partyManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayerModel*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_isConnectedOrConnecting
bool GlobalNamespace::BaseNetworkPlayerModel::get_isConnectedOrConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_isConnectedOrConnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectedOrConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_isConnectionOwner
bool GlobalNamespace::BaseNetworkPlayerModel::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_isConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_localPlayer
GlobalNamespace::INetworkPlayer* GlobalNamespace::BaseNetworkPlayerModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_discoveryEnabled
bool GlobalNamespace::BaseNetworkPlayerModel::get_discoveryEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.set_discoveryEnabled
void GlobalNamespace::BaseNetworkPlayerModel::set_discoveryEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::set_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.get_currentPartySize
int GlobalNamespace::BaseNetworkPlayerModel::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_maxPartySize
int GlobalNamespace::BaseNetworkPlayerModel::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_configuration
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::BaseNetworkPlayerModel::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_configuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.add_connectedPlayerManagerCreatedEvent
void GlobalNamespace::BaseNetworkPlayerModel::add_connectedPlayerManagerCreatedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::add_connectedPlayerManagerCreatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.remove_connectedPlayerManagerCreatedEvent
void GlobalNamespace::BaseNetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.add_connectedPlayerManagerDestroyedEvent
void GlobalNamespace::BaseNetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.remove_connectedPlayerManagerDestroyedEvent
void GlobalNamespace::BaseNetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.add_partyChangedEvent
void GlobalNamespace::BaseNetworkPlayerModel::add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::add_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.remove_partyChangedEvent
void GlobalNamespace::BaseNetworkPlayerModel::remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::remove_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.add_partySizeChangedEvent
void GlobalNamespace::BaseNetworkPlayerModel::add_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::add_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.remove_partySizeChangedEvent
void GlobalNamespace::BaseNetworkPlayerModel::remove_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::remove_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.add_joinRequestedEvent
void GlobalNamespace::BaseNetworkPlayerModel::add_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::add_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.remove_joinRequestedEvent
void GlobalNamespace::BaseNetworkPlayerModel::remove_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::remove_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.add_inviteRequestedEvent
void GlobalNamespace::BaseNetworkPlayerModel::add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::add_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.remove_inviteRequestedEvent
void GlobalNamespace::BaseNetworkPlayerModel::remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::remove_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BaseNetworkPlayerModel.get_partyPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::BaseNetworkPlayerModel::get_partyPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_partyPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.INetworkPlayerModel.get_otherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::BaseNetworkPlayerModel::INetworkPlayerModel_get_otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::INetworkPlayerModel.get_otherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INetworkPlayerModel.get_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_localPlayerIsPartyOwner
bool GlobalNamespace::BaseNetworkPlayerModel::get_localPlayerIsPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_localPlayerIsPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_isServer
bool GlobalNamespace::BaseNetworkPlayerModel::get_isServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_isServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.get_isClient
bool GlobalNamespace::BaseNetworkPlayerModel::get_isClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::get_isClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.GetPartyPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::BaseNetworkPlayerModel::GetPartyPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::GetPartyPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPartyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.GetOtherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::BaseNetworkPlayerModel::GetOtherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::GetOtherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOtherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.ConnectionFailed
void GlobalNamespace::BaseNetworkPlayerModel::ConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::ConnectionFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: BaseNetworkPlayerModel.PlayerConnected
void GlobalNamespace::BaseNetworkPlayerModel::PlayerConnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::PlayerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: BaseNetworkPlayerModel.PlayerDisconnected
void GlobalNamespace::BaseNetworkPlayerModel::PlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::PlayerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: BaseNetworkPlayerModel.PlayerStateChanged
void GlobalNamespace::BaseNetworkPlayerModel::PlayerStateChanged(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::PlayerStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: BaseNetworkPlayerModel.ConnectedPlayerManagerChanged
void GlobalNamespace::BaseNetworkPlayerModel::ConnectedPlayerManagerChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::ConnectedPlayerManagerChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectedPlayerManagerChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.PlayerOrderChanged
void GlobalNamespace::BaseNetworkPlayerModel::PlayerOrderChanged(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::PlayerOrderChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerOrderChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: BaseNetworkPlayerModel.PartySizeChanged
void GlobalNamespace::BaseNetworkPlayerModel::PartySizeChanged(int currentPartySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::PartySizeChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PartySizeChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPartySize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentPartySize);
}
// Autogenerated method: BaseNetworkPlayerModel.Disconnected
void GlobalNamespace::BaseNetworkPlayerModel::Disconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::Disconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: BaseNetworkPlayerModel.Disconnect
void GlobalNamespace::BaseNetworkPlayerModel::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.DestroyParty
void GlobalNamespace::BaseNetworkPlayerModel::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::DestroyParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.DestroyConnectedPlayerManager
void GlobalNamespace::BaseNetworkPlayerModel::DestroyConnectedPlayerManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::DestroyConnectedPlayerManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyConnectedPlayerManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.Log
void GlobalNamespace::BaseNetworkPlayerModel::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: BaseNetworkPlayerModel.OnDestroy
void GlobalNamespace::BaseNetworkPlayerModel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel.Update
void GlobalNamespace::BaseNetworkPlayerModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_connectedPlayerManager
// Il2CppName: get_connectedPlayerManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager* (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_connectedPlayerManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_connectedPlayerManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_partyManager
// Il2CppName: get_partyManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayerModel* (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_partyManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_partyManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_isConnectedOrConnecting
// Il2CppName: get_isConnectedOrConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_isConnectedOrConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_isConnectedOrConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_discoveryEnabled
// Il2CppName: get_discoveryEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_discoveryEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_discoveryEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::set_discoveryEnabled
// Il2CppName: set_discoveryEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(bool)>(&BaseNetworkPlayerModel::set_discoveryEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "set_discoveryEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_configuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::add_connectedPlayerManagerCreatedEvent
// Il2CppName: add_connectedPlayerManagerCreatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&BaseNetworkPlayerModel::add_connectedPlayerManagerCreatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "add_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent
// Il2CppName: remove_connectedPlayerManagerCreatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&BaseNetworkPlayerModel::remove_connectedPlayerManagerCreatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "remove_connectedPlayerManagerCreatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent
// Il2CppName: add_connectedPlayerManagerDestroyedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&BaseNetworkPlayerModel::add_connectedPlayerManagerDestroyedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "add_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent
// Il2CppName: remove_connectedPlayerManagerDestroyedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&BaseNetworkPlayerModel::remove_connectedPlayerManagerDestroyedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "remove_connectedPlayerManagerDestroyedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::add_partyChangedEvent
// Il2CppName: add_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&BaseNetworkPlayerModel::add_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "add_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::remove_partyChangedEvent
// Il2CppName: remove_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&BaseNetworkPlayerModel::remove_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "remove_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::add_partySizeChangedEvent
// Il2CppName: add_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<int>*)>(&BaseNetworkPlayerModel::add_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "add_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::remove_partySizeChangedEvent
// Il2CppName: remove_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<int>*)>(&BaseNetworkPlayerModel::remove_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "remove_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::add_joinRequestedEvent
// Il2CppName: add_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&BaseNetworkPlayerModel::add_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "add_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::remove_joinRequestedEvent
// Il2CppName: remove_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&BaseNetworkPlayerModel::remove_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "remove_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&BaseNetworkPlayerModel::add_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&BaseNetworkPlayerModel::remove_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_partyPlayers
// Il2CppName: get_partyPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_partyPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_partyPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::INetworkPlayerModel_get_otherPlayers
// Il2CppName: INetworkPlayerModel.get_otherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::INetworkPlayerModel_get_otherPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "INetworkPlayerModel.get_otherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_localPlayerIsPartyOwner
// Il2CppName: get_localPlayerIsPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_localPlayerIsPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_isServer
// Il2CppName: get_isServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_isServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_isServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::get_isClient
// Il2CppName: get_isClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::get_isClient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "get_isClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::GetPartyPlayers
// Il2CppName: GetPartyPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::GetPartyPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "GetPartyPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::GetOtherPlayers
// Il2CppName: GetOtherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::GetOtherPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "GetOtherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::ConnectionFailed
// Il2CppName: ConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(GlobalNamespace::ConnectionFailedReason)>(&BaseNetworkPlayerModel::ConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "ConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::PlayerConnected
// Il2CppName: PlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&BaseNetworkPlayerModel::PlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "PlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::PlayerDisconnected
// Il2CppName: PlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&BaseNetworkPlayerModel::PlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "PlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::PlayerStateChanged
// Il2CppName: PlayerStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&BaseNetworkPlayerModel::PlayerStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "PlayerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::ConnectedPlayerManagerChanged
// Il2CppName: ConnectedPlayerManagerChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::ConnectedPlayerManagerChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "ConnectedPlayerManagerChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::PlayerOrderChanged
// Il2CppName: PlayerOrderChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&BaseNetworkPlayerModel::PlayerOrderChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "PlayerOrderChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::PartySizeChanged
// Il2CppName: PartySizeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(int)>(&BaseNetworkPlayerModel::PartySizeChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "PartySizeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::Disconnected
// Il2CppName: Disconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(GlobalNamespace::DisconnectedReason)>(&BaseNetworkPlayerModel::Disconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "Disconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::CreateParty
// Il2CppName: CreateParty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BaseNetworkPlayerModel::DestroyParty
// Il2CppName: DestroyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::DestroyParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "DestroyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::DestroyConnectedPlayerManager
// Il2CppName: DestroyConnectedPlayerManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::DestroyConnectedPlayerManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "DestroyConnectedPlayerManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::CreateConnectedPlayerManager
// Il2CppName: CreateConnectedPlayerManager
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BaseNetworkPlayerModel::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)(::Il2CppString*)>(&BaseNetworkPlayerModel::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::*)()>(&BaseNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseNetworkPlayerModel/PartyConfig
#include "GlobalNamespace/BaseNetworkPlayerModel_PartyConfig.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BaseNetworkPlayerModel::PartyConfig::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::PartyConfig::*)()>(&BaseNetworkPlayerModel::PartyConfig::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::PartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::PartyConfig::*)()>(&BaseNetworkPlayerModel::PartyConfig::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::PartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseNetworkPlayerModel/<GetPartyPlayers>d__55
#include "GlobalNamespace/BaseNetworkPlayerModel_-GetPartyPlayers-d__55.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseNetworkPlayerModel/<GetPartyPlayers>d__55.System.IDisposable.Dispose
void GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetPartyPlayers>d__55.MoveNext
bool GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetPartyPlayers>d__55.System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
GlobalNamespace::INetworkPlayer* GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetPartyPlayers>d__55.System.Collections.IEnumerator.Reset
void GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetPartyPlayers>d__55.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetPartyPlayers>d__55.System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetPartyPlayers>d__55.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)(int)>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)(int)>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)()>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)()>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)()>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)()>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)()>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)()>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (BaseNetworkPlayerModel::$GetPartyPlayers$d__55::*)()>(&BaseNetworkPlayerModel::$GetPartyPlayers$d__55::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetPartyPlayers$d__55*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseNetworkPlayerModel/<GetOtherPlayers>d__56
#include "GlobalNamespace/BaseNetworkPlayerModel_-GetOtherPlayers-d__56.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseNetworkPlayerModel/<GetOtherPlayers>d__56.System.IDisposable.Dispose
void GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetOtherPlayers>d__56.MoveNext
bool GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetOtherPlayers>d__56.System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
GlobalNamespace::INetworkPlayer* GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetOtherPlayers>d__56.System.Collections.IEnumerator.Reset
void GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetOtherPlayers>d__56.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetOtherPlayers>d__56.System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: BaseNetworkPlayerModel/<GetOtherPlayers>d__56.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)(int)>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)(int)>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)()>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)()>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)()>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)()>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)()>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)()>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (BaseNetworkPlayerModel::$GetOtherPlayers$d__56::*)()>(&BaseNetworkPlayerModel::$GetOtherPlayers$d__56::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNetworkPlayerModel::$GetOtherPlayers$d__56*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: GameplayServerFilter
#include "GlobalNamespace/GameplayServerFilter.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IUnifiedNetworkPlayerModel.get_discoveryPolicy
GlobalNamespace::DiscoveryPolicy GlobalNamespace::IUnifiedNetworkPlayerModel::get_discoveryPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_discoveryPolicy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiscoveryPolicy, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.add_partyRefreshingEvent
void GlobalNamespace::IUnifiedNetworkPlayerModel::add_partyRefreshingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::add_partyRefreshingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.remove_partyRefreshingEvent
void GlobalNamespace::IUnifiedNetworkPlayerModel::remove_partyRefreshingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::remove_partyRefreshingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_localPlayer
GlobalNamespace::INetworkPlayer* GlobalNamespace::IUnifiedNetworkPlayerModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_enableLocalNetwork
bool GlobalNamespace::IUnifiedNetworkPlayerModel::get_enableLocalNetwork() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_enableLocalNetwork");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableLocalNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.set_enableLocalNetwork
void GlobalNamespace::IUnifiedNetworkPlayerModel::set_enableLocalNetwork(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::set_enableLocalNetwork");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableLocalNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_publicServers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::IUnifiedNetworkPlayerModel::get_publicServers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_publicServers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_localNetworkPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::IUnifiedNetworkPlayerModel::get_localNetworkPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_localNetworkPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localNetworkPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_serverFilter
GlobalNamespace::GameplayServerFilter GlobalNamespace::IUnifiedNetworkPlayerModel::get_serverFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_serverFilter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.SetServerFilter
void GlobalNamespace::IUnifiedNetworkPlayerModel::SetServerFilter(GlobalNamespace::GameplayServerFilter filter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::SetServerFilter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetServerFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, filter);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.JoinMatchmaking
void GlobalNamespace::IUnifiedNetworkPlayerModel::JoinMatchmaking(GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::DiscoveryPolicy discoveryPolicy, ::Il2CppString* secret, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::JoinMatchmaking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinMatchmaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configuration, discoveryPolicy, secret, code);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.ConnectToServerWithCode
void GlobalNamespace::IUnifiedNetworkPlayerModel::ConnectToServerWithCode(::Il2CppString* serverCode, ::Il2CppString* serverPassword) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::ConnectToServerWithCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServerWithCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverCode), ::il2cpp_utils::ExtractType(serverPassword)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverCode, serverPassword);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.ConnectToServerWithSecret
void GlobalNamespace::IUnifiedNetworkPlayerModel::ConnectToServerWithSecret(::Il2CppString* serverSecret) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::ConnectToServerWithSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServerWithSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverSecret)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverSecret);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.ResetMasterServerReachability
void GlobalNamespace::IUnifiedNetworkPlayerModel::ResetMasterServerReachability() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::ResetMasterServerReachability");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetMasterServerReachability", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_userId
::Il2CppString* GlobalNamespace::IUnifiedNetworkPlayerModel::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_userName
::Il2CppString* GlobalNamespace::IUnifiedNetworkPlayerModel::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_secret
::Il2CppString* GlobalNamespace::IUnifiedNetworkPlayerModel::get_secret() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_secret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IUnifiedNetworkPlayerModel.get_code
::Il2CppString* GlobalNamespace::IUnifiedNetworkPlayerModel::get_code() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IUnifiedNetworkPlayerModel::get_code");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_discoveryPolicy
// Il2CppName: get_discoveryPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DiscoveryPolicy (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_discoveryPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_discoveryPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::add_partyRefreshingEvent
// Il2CppName: add_partyRefreshingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)(System::Action*)>(&IUnifiedNetworkPlayerModel::add_partyRefreshingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "add_partyRefreshingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::remove_partyRefreshingEvent
// Il2CppName: remove_partyRefreshingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)(System::Action*)>(&IUnifiedNetworkPlayerModel::remove_partyRefreshingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "remove_partyRefreshingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_enableLocalNetwork
// Il2CppName: get_enableLocalNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_enableLocalNetwork)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_enableLocalNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::set_enableLocalNetwork
// Il2CppName: set_enableLocalNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)(bool)>(&IUnifiedNetworkPlayerModel::set_enableLocalNetwork)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "set_enableLocalNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_publicServers
// Il2CppName: get_publicServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_publicServers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_publicServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_localNetworkPlayers
// Il2CppName: get_localNetworkPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_localNetworkPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_localNetworkPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_serverFilter
// Il2CppName: get_serverFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_serverFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_serverFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::SetServerFilter
// Il2CppName: SetServerFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)(GlobalNamespace::GameplayServerFilter)>(&IUnifiedNetworkPlayerModel::SetServerFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "SetServerFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter>()});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::JoinMatchmaking
// Il2CppName: JoinMatchmaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)(GlobalNamespace::GameplayServerConfiguration, GlobalNamespace::DiscoveryPolicy, ::Il2CppString*, ::Il2CppString*)>(&IUnifiedNetworkPlayerModel::JoinMatchmaking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "JoinMatchmaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::ConnectToServerWithCode
// Il2CppName: ConnectToServerWithCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)(::Il2CppString*, ::Il2CppString*)>(&IUnifiedNetworkPlayerModel::ConnectToServerWithCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "ConnectToServerWithCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::ConnectToServerWithSecret
// Il2CppName: ConnectToServerWithSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)(::Il2CppString*)>(&IUnifiedNetworkPlayerModel::ConnectToServerWithSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "ConnectToServerWithSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::ResetMasterServerReachability
// Il2CppName: ResetMasterServerReachability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::ResetMasterServerReachability)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "ResetMasterServerReachability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_secret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IUnifiedNetworkPlayerModel::get_code
// Il2CppName: get_code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IUnifiedNetworkPlayerModel::*)()>(&IUnifiedNetworkPlayerModel::get_code)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IUnifiedNetworkPlayerModel*), "get_code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager
#include "GlobalNamespace/LocalNetworkDiscoveryManager.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LocalNetworkDiscoveryManager/BroadcastPacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_BroadcastPacket.hpp"
// Including type: LocalNetworkDiscoveryManager/JoinRequestPacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinRequestPacket.hpp"
// Including type: LocalNetworkDiscoveryManager/JoinResponsePacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinResponsePacket.hpp"
// Including type: LocalNetworkDiscoveryManager/InviteRequestPacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteRequestPacket.hpp"
// Including type: LocalNetworkDiscoveryManager/InviteResponsePacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteResponsePacket.hpp"
// Including type: LocalNetworkDiscoveryManager/PeerUpdatedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_PeerUpdatedDelegate.hpp"
// Including type: LocalNetworkDiscoveryManager/JoinRequestedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinRequestedDelegate.hpp"
// Including type: LocalNetworkDiscoveryManager/JoinRespondedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinRespondedDelegate.hpp"
// Including type: LocalNetworkDiscoveryManager/InviteRequestedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteRequestedDelegate.hpp"
// Including type: LocalNetworkDiscoveryManager/InviteRespondedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteRespondedDelegate.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: NetworkPacketSerializer`2
#include "GlobalNamespace/NetworkPacketSerializer_2.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kBroadcastInterval
float GlobalNamespace::LocalNetworkDiscoveryManager::_get_kBroadcastInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::_get_kBroadcastInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LocalNetworkDiscoveryManager", "kBroadcastInterval"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kBroadcastInterval
void GlobalNamespace::LocalNetworkDiscoveryManager::_set_kBroadcastInterval(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::_set_kBroadcastInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager", "kBroadcastInterval", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 kSignature
uint GlobalNamespace::LocalNetworkDiscoveryManager::_get_kSignature() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::_get_kSignature");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("", "LocalNetworkDiscoveryManager", "kSignature"));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 kSignature
void GlobalNamespace::LocalNetworkDiscoveryManager::_set_kSignature(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::_set_kSignature");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager", "kSignature", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte kVersion
uint8_t GlobalNamespace::LocalNetworkDiscoveryManager::_get_kVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::_get_kVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("", "LocalNetworkDiscoveryManager", "kVersion"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte kVersion
void GlobalNamespace::LocalNetworkDiscoveryManager::_set_kVersion(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::_set_kVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager", "kVersion", value));
}
// Autogenerated method: LocalNetworkDiscoveryManager.add_peerUpdatedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::add_peerUpdatedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::add_peerUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_peerUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.remove_peerUpdatedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::remove_peerUpdatedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::remove_peerUpdatedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_peerUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.add_joinRequestedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRequestedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.remove_joinRequestedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRequestedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.add_joinRespondedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRespondedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRespondedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.remove_joinRespondedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRespondedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRespondedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.add_inviteRequestedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRequestedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.remove_inviteRequestedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRequestedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.add_inviteRespondedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRespondedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRespondedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.remove_inviteRespondedEvent
void GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRespondedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRespondedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.get_userId
::Il2CppString* GlobalNamespace::LocalNetworkDiscoveryManager::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::get_userId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.get_userName
::Il2CppString* GlobalNamespace::LocalNetworkDiscoveryManager::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::get_userName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.get_flags
uint8_t GlobalNamespace::LocalNetworkDiscoveryManager::get_flags() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::get_flags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.set_flags
void GlobalNamespace::LocalNetworkDiscoveryManager::set_flags(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::set_flags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_flags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.get_currentPartySize
int GlobalNamespace::LocalNetworkDiscoveryManager::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::get_currentPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.set_currentPartySize
void GlobalNamespace::LocalNetworkDiscoveryManager::set_currentPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::set_currentPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.get_maxPartySize
int GlobalNamespace::LocalNetworkDiscoveryManager::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::get_maxPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.set_maxPartySize
void GlobalNamespace::LocalNetworkDiscoveryManager::set_maxPartySize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::set_maxPartySize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.get_configuration
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::LocalNetworkDiscoveryManager::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::get_configuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.set_configuration
void GlobalNamespace::LocalNetworkDiscoveryManager::set_configuration(GlobalNamespace::GameplayServerConfiguration value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::set_configuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.get_enableBroadcasting
bool GlobalNamespace::LocalNetworkDiscoveryManager::get_enableBroadcasting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::get_enableBroadcasting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableBroadcasting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.set_enableBroadcasting
void GlobalNamespace::LocalNetworkDiscoveryManager::set_enableBroadcasting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::set_enableBroadcasting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableBroadcasting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkDiscoveryManager.Init
void GlobalNamespace::LocalNetworkDiscoveryManager::Init(int discoveryPort, ::Il2CppString* initUserId, ::Il2CppString* initUserName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(discoveryPort), ::il2cpp_utils::ExtractType(initUserId), ::il2cpp_utils::ExtractType(initUserName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, discoveryPort, initUserId, initUserName);
}
// Autogenerated method: LocalNetworkDiscoveryManager.OnEnable
void GlobalNamespace::LocalNetworkDiscoveryManager::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.OnDisable
void GlobalNamespace::LocalNetworkDiscoveryManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.Update
void GlobalNamespace::LocalNetworkDiscoveryManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkDiscoveryManager.SendJoinRequest
void GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinRequest(System::Net::IPAddress* ip) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ip);
}
// Autogenerated method: LocalNetworkDiscoveryManager.SendJoinResponse
void GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinResponse(System::Net::IPAddress* ip, ::Il2CppString* secret, int multiplayerPort, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ip), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ip, secret, multiplayerPort, blocked);
}
// Autogenerated method: LocalNetworkDiscoveryManager.SendInviteRequest
void GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteRequest(System::Net::IPAddress* ip, ::Il2CppString* secret, int multiplayerPort) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ip), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ip, secret, multiplayerPort);
}
// Autogenerated method: LocalNetworkDiscoveryManager.SendInviteResponse
void GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteResponse(System::Net::IPAddress* ip, bool accepted, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ip), ::il2cpp_utils::ExtractType(accepted), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ip, accepted, blocked);
}
// Autogenerated method: LocalNetworkDiscoveryManager.LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
void GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LocalNetworkDiscoveryManager.LiteNetLib.INetEventListener.OnConnectionRequest
void GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib.INetEventListener.OnConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: LocalNetworkDiscoveryManager.LiteNetLib.INetEventListener.OnNetworkError
void GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketErrorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib.INetEventListener.OnNetworkError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketErrorCode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, socketErrorCode);
}
// Autogenerated method: LocalNetworkDiscoveryManager.LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
void GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib.INetEventListener.OnNetworkLatencyUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, latency);
}
// Autogenerated method: LocalNetworkDiscoveryManager.LiteNetLib.INetEventListener.OnPeerConnected
void GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib.INetEventListener.OnPeerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LocalNetworkDiscoveryManager.LiteNetLib.INetEventListener.OnPeerDisconnected
void GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib.INetEventListener.OnPeerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LocalNetworkDiscoveryManager.LiteNetLib.INetEventListener.OnNetworkReceive
void GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib.INetEventListener.OnNetworkReceive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LocalNetworkDiscoveryManager.<Init>b__56_0
void GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__56_0(GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket* packet, System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::<Init>b__56_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__56_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, endPoint);
}
// Autogenerated method: LocalNetworkDiscoveryManager.<Init>b__56_1
void GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__56_1(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket* packet, System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::<Init>b__56_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__56_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, endPoint);
}
// Autogenerated method: LocalNetworkDiscoveryManager.<Init>b__56_2
void GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__56_2(GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket* packet, System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::<Init>b__56_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__56_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, endPoint);
}
// Autogenerated method: LocalNetworkDiscoveryManager.<Init>b__56_3
void GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__56_3(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket* packet, System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::<Init>b__56_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__56_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, endPoint);
}
// Autogenerated method: LocalNetworkDiscoveryManager.<Init>b__56_4
void GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__56_4(GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket* packet, System::Net::IPEndPoint* endPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::<Init>b__56_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__56_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(endPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, packet, endPoint);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::add_peerUpdatedEvent
// Il2CppName: add_peerUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*)>(&LocalNetworkDiscoveryManager::add_peerUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "add_peerUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::remove_peerUpdatedEvent
// Il2CppName: remove_peerUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*)>(&LocalNetworkDiscoveryManager::remove_peerUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "remove_peerUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::add_joinRequestedEvent
// Il2CppName: add_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*)>(&LocalNetworkDiscoveryManager::add_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "add_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::remove_joinRequestedEvent
// Il2CppName: remove_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*)>(&LocalNetworkDiscoveryManager::remove_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "remove_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::add_joinRespondedEvent
// Il2CppName: add_joinRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*)>(&LocalNetworkDiscoveryManager::add_joinRespondedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "add_joinRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::remove_joinRespondedEvent
// Il2CppName: remove_joinRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*)>(&LocalNetworkDiscoveryManager::remove_joinRespondedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "remove_joinRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*)>(&LocalNetworkDiscoveryManager::add_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*)>(&LocalNetworkDiscoveryManager::remove_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::add_inviteRespondedEvent
// Il2CppName: add_inviteRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*)>(&LocalNetworkDiscoveryManager::add_inviteRespondedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "add_inviteRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::remove_inviteRespondedEvent
// Il2CppName: remove_inviteRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*)>(&LocalNetworkDiscoveryManager::remove_inviteRespondedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "remove_inviteRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::get_flags
// Il2CppName: get_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::get_flags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "get_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::set_flags
// Il2CppName: set_flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(uint8_t)>(&LocalNetworkDiscoveryManager::set_flags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "set_flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::set_currentPartySize
// Il2CppName: set_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(int)>(&LocalNetworkDiscoveryManager::set_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "set_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::set_maxPartySize
// Il2CppName: set_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(int)>(&LocalNetworkDiscoveryManager::set_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "set_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::get_configuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::set_configuration
// Il2CppName: set_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::GameplayServerConfiguration)>(&LocalNetworkDiscoveryManager::set_configuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "set_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::get_enableBroadcasting
// Il2CppName: get_enableBroadcasting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::get_enableBroadcasting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "get_enableBroadcasting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::set_enableBroadcasting
// Il2CppName: set_enableBroadcasting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(bool)>(&LocalNetworkDiscoveryManager::set_enableBroadcasting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "set_enableBroadcasting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(int, ::Il2CppString*, ::Il2CppString*)>(&LocalNetworkDiscoveryManager::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::SendJoinRequest
// Il2CppName: SendJoinRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*)>(&LocalNetworkDiscoveryManager::SendJoinRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "SendJoinRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*, ::Il2CppString*, int, bool)>(&LocalNetworkDiscoveryManager::SendJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::SendInviteRequest
// Il2CppName: SendInviteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*, ::Il2CppString*, int)>(&LocalNetworkDiscoveryManager::SendInviteRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "SendInviteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*, bool, bool)>(&LocalNetworkDiscoveryManager::SendInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::WritePacket
// Il2CppName: WritePacket
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(System::Net::IPEndPoint*, LiteNetLib::NetPacketReader*, LiteNetLib::UnconnectedMessageType)>(&LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPacketReader*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::UnconnectedMessageType>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnConnectionRequest
// Il2CppName: LiteNetLib.INetEventListener.OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(LiteNetLib::ConnectionRequest*)>(&LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnConnectionRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::ConnectionRequest*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkError
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(System::Net::IPEndPoint*, System::Net::Sockets::SocketError)>(&LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*, int)>(&LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerConnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*)>(&LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerDisconnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*, LiteNetLib::DisconnectInfo)>(&LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DisconnectInfo>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceive
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*, LiteNetLib::NetPacketReader*, LiteNetLib::DeliveryMethod)>(&LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPacketReader*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::$Init$b__56_0
// Il2CppName: <Init>b__56_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket*, System::Net::IPEndPoint*)>(&LocalNetworkDiscoveryManager::$Init$b__56_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "<Init>b__56_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::$Init$b__56_1
// Il2CppName: <Init>b__56_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket*, System::Net::IPEndPoint*)>(&LocalNetworkDiscoveryManager::$Init$b__56_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "<Init>b__56_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::$Init$b__56_2
// Il2CppName: <Init>b__56_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket*, System::Net::IPEndPoint*)>(&LocalNetworkDiscoveryManager::$Init$b__56_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "<Init>b__56_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::$Init$b__56_3
// Il2CppName: <Init>b__56_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket*, System::Net::IPEndPoint*)>(&LocalNetworkDiscoveryManager::$Init$b__56_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "<Init>b__56_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::$Init$b__56_4
// Il2CppName: <Init>b__56_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket*, System::Net::IPEndPoint*)>(&LocalNetworkDiscoveryManager::$Init$b__56_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), "<Init>b__56_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::*)()>(&LocalNetworkDiscoveryManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalNetworkDiscoveryManager/PacketType
#include "GlobalNamespace/LocalNetworkDiscoveryManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LocalNetworkDiscoveryManager/PacketType Broadcast
GlobalNamespace::LocalNetworkDiscoveryManager::PacketType GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType>("", "LocalNetworkDiscoveryManager/PacketType", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkDiscoveryManager/PacketType Broadcast
void GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_Broadcast(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager/PacketType", "Broadcast", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
GlobalNamespace::LocalNetworkDiscoveryManager::PacketType GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_JoinRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_JoinRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType>("", "LocalNetworkDiscoveryManager/PacketType", "JoinRequest"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
void GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_JoinRequest(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_JoinRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager/PacketType", "JoinRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
GlobalNamespace::LocalNetworkDiscoveryManager::PacketType GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_JoinResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_JoinResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType>("", "LocalNetworkDiscoveryManager/PacketType", "JoinResponse"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
void GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_JoinResponse(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_JoinResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager/PacketType", "JoinResponse", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
GlobalNamespace::LocalNetworkDiscoveryManager::PacketType GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_InviteRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_InviteRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType>("", "LocalNetworkDiscoveryManager/PacketType", "InviteRequest"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
void GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_InviteRequest(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_InviteRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager/PacketType", "InviteRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
GlobalNamespace::LocalNetworkDiscoveryManager::PacketType GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_InviteResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_get_InviteResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType>("", "LocalNetworkDiscoveryManager/PacketType", "InviteResponse"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
void GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_InviteResponse(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PacketType::_set_InviteResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkDiscoveryManager/PacketType", "InviteResponse", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/BroadcastPacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_BroadcastPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/BroadcastPacket.Serialize
void GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LocalNetworkDiscoveryManager/BroadcastPacket.Deserialize
void GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::BroadcastPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::BroadcastPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&LocalNetworkDiscoveryManager::BroadcastPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::BroadcastPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::BroadcastPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::BroadcastPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&LocalNetworkDiscoveryManager::BroadcastPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::BroadcastPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::BroadcastPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::BroadcastPacket::*)()>(&LocalNetworkDiscoveryManager::BroadcastPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::BroadcastPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::BroadcastPacket::*)()>(&LocalNetworkDiscoveryManager::BroadcastPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::BroadcastPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/JoinRequestPacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRequestPacket.Serialize
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRequestPacket.Deserialize
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRequestPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&LocalNetworkDiscoveryManager::JoinRequestPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRequestPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&LocalNetworkDiscoveryManager::JoinRequestPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRequestPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestPacket::*)()>(&LocalNetworkDiscoveryManager::JoinRequestPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestPacket::*)()>(&LocalNetworkDiscoveryManager::JoinRequestPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/JoinResponsePacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinResponsePacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/JoinResponsePacket.Serialize
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LocalNetworkDiscoveryManager/JoinResponsePacket.Deserialize
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinResponsePacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinResponsePacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&LocalNetworkDiscoveryManager::JoinResponsePacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinResponsePacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinResponsePacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinResponsePacket::*)(LiteNetLib::Utils::NetDataReader*)>(&LocalNetworkDiscoveryManager::JoinResponsePacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinResponsePacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinResponsePacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinResponsePacket::*)()>(&LocalNetworkDiscoveryManager::JoinResponsePacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinResponsePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinResponsePacket::*)()>(&LocalNetworkDiscoveryManager::JoinResponsePacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinResponsePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/InviteRequestPacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRequestPacket.Serialize
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRequestPacket.Deserialize
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRequestPacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestPacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&LocalNetworkDiscoveryManager::InviteRequestPacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestPacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRequestPacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestPacket::*)(LiteNetLib::Utils::NetDataReader*)>(&LocalNetworkDiscoveryManager::InviteRequestPacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestPacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRequestPacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestPacket::*)()>(&LocalNetworkDiscoveryManager::InviteRequestPacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestPacket::*)()>(&LocalNetworkDiscoveryManager::InviteRequestPacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestPacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/InviteResponsePacket
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteResponsePacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/InviteResponsePacket.Serialize
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LocalNetworkDiscoveryManager/InviteResponsePacket.Deserialize
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteResponsePacket::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteResponsePacket::*)(LiteNetLib::Utils::NetDataWriter*)>(&LocalNetworkDiscoveryManager::InviteResponsePacket::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteResponsePacket*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteResponsePacket::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteResponsePacket::*)(LiteNetLib::Utils::NetDataReader*)>(&LocalNetworkDiscoveryManager::InviteResponsePacket::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteResponsePacket*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteResponsePacket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteResponsePacket::*)()>(&LocalNetworkDiscoveryManager::InviteResponsePacket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteResponsePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteResponsePacket::*)()>(&LocalNetworkDiscoveryManager::InviteResponsePacket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteResponsePacket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/PeerUpdatedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_PeerUpdatedDelegate.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/PeerUpdatedDelegate.Invoke
void GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate::Invoke(::Il2CppString* userId, System::Net::IPAddress* remoteEndPoint, ::Il2CppString* userName, int currentPartySize, int maxPartySize, uint8_t flags, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(currentPartySize), ::il2cpp_utils::ExtractType(maxPartySize), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, remoteEndPoint, userName, currentPartySize, maxPartySize, flags, configuration);
}
// Autogenerated method: LocalNetworkDiscoveryManager/PeerUpdatedDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate::BeginInvoke(::Il2CppString* userId, System::Net::IPAddress* remoteEndPoint, ::Il2CppString* userName, int currentPartySize, int maxPartySize, uint8_t flags, GlobalNamespace::GameplayServerConfiguration configuration, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(currentPartySize), ::il2cpp_utils::ExtractType(maxPartySize), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userId, remoteEndPoint, userName, currentPartySize, maxPartySize, flags, configuration, callback, object);
}
// Autogenerated method: LocalNetworkDiscoveryManager/PeerUpdatedDelegate.EndInvoke
void GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::PeerUpdatedDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::PeerUpdatedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::PeerUpdatedDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::PeerUpdatedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::PeerUpdatedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::PeerUpdatedDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::PeerUpdatedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::PeerUpdatedDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::PeerUpdatedDelegate::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, int, int, uint8_t, GlobalNamespace::GameplayServerConfiguration)>(&LocalNetworkDiscoveryManager::PeerUpdatedDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::PeerUpdatedDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::PeerUpdatedDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (LocalNetworkDiscoveryManager::PeerUpdatedDelegate::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, int, int, uint8_t, GlobalNamespace::GameplayServerConfiguration, System::AsyncCallback*, ::Il2CppObject*)>(&LocalNetworkDiscoveryManager::PeerUpdatedDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::PeerUpdatedDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::PeerUpdatedDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::PeerUpdatedDelegate::*)(System::IAsyncResult*)>(&LocalNetworkDiscoveryManager::PeerUpdatedDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::PeerUpdatedDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/JoinRequestedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinRequestedDelegate.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRequestedDelegate.Invoke
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate::Invoke(::Il2CppString* userId, System::Net::IPAddress* remoteEndPoint, ::Il2CppString* userName, uint8_t flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, remoteEndPoint, userName, flags);
}
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRequestedDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate::BeginInvoke(::Il2CppString* userId, System::Net::IPAddress* remoteEndPoint, ::Il2CppString* userName, uint8_t flags, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userId, remoteEndPoint, userName, flags, callback, object);
}
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRequestedDelegate.EndInvoke
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRequestedDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::JoinRequestedDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::JoinRequestedDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRequestedDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestedDelegate::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, uint8_t)>(&LocalNetworkDiscoveryManager::JoinRequestedDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestedDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRequestedDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (LocalNetworkDiscoveryManager::JoinRequestedDelegate::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, uint8_t, System::AsyncCallback*, ::Il2CppObject*)>(&LocalNetworkDiscoveryManager::JoinRequestedDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestedDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRequestedDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRequestedDelegate::*)(System::IAsyncResult*)>(&LocalNetworkDiscoveryManager::JoinRequestedDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRequestedDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/JoinRespondedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_JoinRespondedDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRespondedDelegate.Invoke
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate::Invoke(::Il2CppString* userId, ::Il2CppString* secret, int multiplayerPort, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, secret, multiplayerPort, blocked);
}
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRespondedDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate::BeginInvoke(::Il2CppString* userId, ::Il2CppString* secret, int multiplayerPort, bool blocked, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(blocked), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userId, secret, multiplayerPort, blocked, callback, object);
}
// Autogenerated method: LocalNetworkDiscoveryManager/JoinRespondedDelegate.EndInvoke
void GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRespondedDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRespondedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::JoinRespondedDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRespondedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRespondedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::JoinRespondedDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRespondedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRespondedDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRespondedDelegate::*)(::Il2CppString*, ::Il2CppString*, int, bool)>(&LocalNetworkDiscoveryManager::JoinRespondedDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRespondedDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRespondedDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (LocalNetworkDiscoveryManager::JoinRespondedDelegate::*)(::Il2CppString*, ::Il2CppString*, int, bool, System::AsyncCallback*, ::Il2CppObject*)>(&LocalNetworkDiscoveryManager::JoinRespondedDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRespondedDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::JoinRespondedDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::JoinRespondedDelegate::*)(System::IAsyncResult*)>(&LocalNetworkDiscoveryManager::JoinRespondedDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::JoinRespondedDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/InviteRequestedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteRequestedDelegate.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRequestedDelegate.Invoke
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate::Invoke(::Il2CppString* userId, System::Net::IPAddress* remoteEndPoint, ::Il2CppString* userName, ::Il2CppString* secret, int multiplayerPort, uint8_t flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, remoteEndPoint, userName, secret, multiplayerPort, flags);
}
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRequestedDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate::BeginInvoke(::Il2CppString* userId, System::Net::IPAddress* remoteEndPoint, ::Il2CppString* userName, ::Il2CppString* secret, int multiplayerPort, uint8_t flags, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(userName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userId, remoteEndPoint, userName, secret, multiplayerPort, flags, callback, object);
}
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRequestedDelegate.EndInvoke
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRequestedDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::InviteRequestedDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::InviteRequestedDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRequestedDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestedDelegate::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, ::Il2CppString*, int, uint8_t)>(&LocalNetworkDiscoveryManager::InviteRequestedDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestedDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRequestedDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (LocalNetworkDiscoveryManager::InviteRequestedDelegate::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, ::Il2CppString*, int, uint8_t, System::AsyncCallback*, ::Il2CppObject*)>(&LocalNetworkDiscoveryManager::InviteRequestedDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestedDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRequestedDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRequestedDelegate::*)(System::IAsyncResult*)>(&LocalNetworkDiscoveryManager::InviteRequestedDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRequestedDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkDiscoveryManager/InviteRespondedDelegate
#include "GlobalNamespace/LocalNetworkDiscoveryManager_InviteRespondedDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRespondedDelegate.Invoke
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate::Invoke(::Il2CppString* userId, bool accepted, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(accepted), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, accepted, blocked);
}
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRespondedDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate::BeginInvoke(::Il2CppString* userId, bool accepted, bool blocked, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(accepted), ::il2cpp_utils::ExtractType(blocked), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, userId, accepted, blocked, callback, object);
}
// Autogenerated method: LocalNetworkDiscoveryManager/InviteRespondedDelegate.EndInvoke
void GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRespondedDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRespondedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::InviteRespondedDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRespondedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRespondedDelegate::*)(::Il2CppObject*, System::IntPtr)>(&LocalNetworkDiscoveryManager::InviteRespondedDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRespondedDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRespondedDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRespondedDelegate::*)(::Il2CppString*, bool, bool)>(&LocalNetworkDiscoveryManager::InviteRespondedDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRespondedDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRespondedDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (LocalNetworkDiscoveryManager::InviteRespondedDelegate::*)(::Il2CppString*, bool, bool, System::AsyncCallback*, ::Il2CppObject*)>(&LocalNetworkDiscoveryManager::InviteRespondedDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRespondedDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkDiscoveryManager::InviteRespondedDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkDiscoveryManager::InviteRespondedDelegate::*)(System::IAsyncResult*)>(&LocalNetworkDiscoveryManager::InviteRespondedDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkDiscoveryManager::InviteRespondedDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkPlayerModel
#include "GlobalNamespace/LocalNetworkPlayerModel.hpp"
// Including type: LocalNetworkPlayerModel/LocalNetworkFlags
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkFlags.hpp"
// Including type: LocalNetworkPlayerModel/LocalNetworkPlayer
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkPlayer.hpp"
// Including type: LocalNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/LocalNetworkPlayerModel_CreatePartyConfig.hpp"
// Including type: LocalNetworkPlayerModel/<Start>d__44
#include "GlobalNamespace/LocalNetworkPlayerModel_-Start-d__44.hpp"
// Including type: LocalNetworkDiscoveryManager
#include "GlobalNamespace/LocalNetworkDiscoveryManager.hpp"
// Including type: IPlatformUserModel
#include "GlobalNamespace/IPlatformUserModel.hpp"
// Including type: INetworkConfig
#include "GlobalNamespace/INetworkConfig.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: INetworkPlayerModel
#include "GlobalNamespace/INetworkPlayerModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: LiteNetLibConnectionManager
#include "GlobalNamespace/LiteNetLibConnectionManager.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: INetworkPlayerModelPartyConfig`1
#include "GlobalNamespace/INetworkPlayerModelPartyConfig_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkPlayerModel.get_canInvitePlayers
bool GlobalNamespace::LocalNetworkPlayerModel::get_canInvitePlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_canInvitePlayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvitePlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.get_hasConnectedPeers
bool GlobalNamespace::LocalNetworkPlayerModel::get_hasConnectedPeers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_hasConnectedPeers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasConnectedPeers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.get_otherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::LocalNetworkPlayerModel::get_otherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_otherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.get_hasNetworkingFailed
bool GlobalNamespace::LocalNetworkPlayerModel::get_hasNetworkingFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_hasNetworkingFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasNetworkingFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.get_liteNetLibConnectionManager
GlobalNamespace::LiteNetLibConnectionManager* GlobalNamespace::LocalNetworkPlayerModel::get_liteNetLibConnectionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_liteNetLibConnectionManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_liteNetLibConnectionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LiteNetLibConnectionManager*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.TryGetPlayer
bool GlobalNamespace::LocalNetworkPlayerModel::TryGetPlayer(::Il2CppString* userId, GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*& player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::TryGetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, userId, player);
}
// Autogenerated method: LocalNetworkPlayerModel.GetPlayer
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* GlobalNamespace::LocalNetworkPlayerModel::GetPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: LocalNetworkPlayerModel.RefreshLocalPlayer
void GlobalNamespace::LocalNetworkPlayerModel::RefreshLocalPlayer(bool forcePlayersChanged) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::RefreshLocalPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshLocalPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forcePlayersChanged)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, forcePlayersChanged);
}
// Autogenerated method: LocalNetworkPlayerModel.HandlePeerUpdate
void GlobalNamespace::LocalNetworkPlayerModel::HandlePeerUpdate(::Il2CppString* userId, System::Net::IPAddress* ipAddress, ::Il2CppString* encryptedUserName, int currentPartySize, int maxPartySize, uint8_t flags, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::HandlePeerUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePeerUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(ipAddress), ::il2cpp_utils::ExtractType(encryptedUserName), ::il2cpp_utils::ExtractType(currentPartySize), ::il2cpp_utils::ExtractType(maxPartySize), ::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, ipAddress, encryptedUserName, currentPartySize, maxPartySize, flags, configuration);
}
// Autogenerated method: LocalNetworkPlayerModel.SendJoinRequest
void GlobalNamespace::LocalNetworkPlayerModel::SendJoinRequest(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::SendJoinRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: LocalNetworkPlayerModel.HandleJoinRequest
void GlobalNamespace::LocalNetworkPlayerModel::HandleJoinRequest(::Il2CppString* userId, System::Net::IPAddress* ipAddress, ::Il2CppString* encryptedUserName, uint8_t flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::HandleJoinRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoinRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(ipAddress), ::il2cpp_utils::ExtractType(encryptedUserName), ::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, ipAddress, encryptedUserName, flags);
}
// Autogenerated method: LocalNetworkPlayerModel.SendJoinResponse
void GlobalNamespace::LocalNetworkPlayerModel::SendJoinResponse(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player, bool allowJoin) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::SendJoinResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(allowJoin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, allowJoin);
}
// Autogenerated method: LocalNetworkPlayerModel.HandleJoinResponse
void GlobalNamespace::LocalNetworkPlayerModel::HandleJoinResponse(::Il2CppString* id, ::Il2CppString* secret, int multiplayerPort, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::HandleJoinResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, id, secret, multiplayerPort, blocked);
}
// Autogenerated method: LocalNetworkPlayerModel.SendInviteRequest
void GlobalNamespace::LocalNetworkPlayerModel::SendInviteRequest(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::SendInviteRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: LocalNetworkPlayerModel.HandleInviteRequest
void GlobalNamespace::LocalNetworkPlayerModel::HandleInviteRequest(::Il2CppString* userId, System::Net::IPAddress* ipAddress, ::Il2CppString* encryptedUserName, ::Il2CppString* secret, int multiplayerPort, uint8_t flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::HandleInviteRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInviteRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(ipAddress), ::il2cpp_utils::ExtractType(encryptedUserName), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, ipAddress, encryptedUserName, secret, multiplayerPort, flags);
}
// Autogenerated method: LocalNetworkPlayerModel.SendInviteResponse
void GlobalNamespace::LocalNetworkPlayerModel::SendInviteResponse(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player, bool acceptInvite) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::SendInviteResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(acceptInvite)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player, acceptInvite);
}
// Autogenerated method: LocalNetworkPlayerModel.HandleInviteResponse
void GlobalNamespace::LocalNetworkPlayerModel::HandleInviteResponse(::Il2CppString* userId, bool accepted, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::HandleInviteResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(accepted), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, accepted, blocked);
}
// Autogenerated method: LocalNetworkPlayerModel.ConnectToPeer
void GlobalNamespace::LocalNetworkPlayerModel::ConnectToPeer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::ConnectToPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: LocalNetworkPlayerModel.DisconnectPeer
void GlobalNamespace::LocalNetworkPlayerModel::DisconnectPeer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: LocalNetworkPlayerModel.HandlePlayersChanged
void GlobalNamespace::LocalNetworkPlayerModel::HandlePlayersChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::HandlePlayersChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.TryStartServer
void GlobalNamespace::LocalNetworkPlayerModel::TryStartServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::TryStartServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryStartServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.get_currentPartySize
int GlobalNamespace::LocalNetworkPlayerModel::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.get_discoveryEnabled
bool GlobalNamespace::LocalNetworkPlayerModel::get_discoveryEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.set_discoveryEnabled
void GlobalNamespace::LocalNetworkPlayerModel::set_discoveryEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::set_discoveryEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_discoveryEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.add_partySizeChangedEvent
void GlobalNamespace::LocalNetworkPlayerModel::add_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::add_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.remove_partySizeChangedEvent
void GlobalNamespace::LocalNetworkPlayerModel::remove_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::remove_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.add_partyChangedEvent
void GlobalNamespace::LocalNetworkPlayerModel::add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::add_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.remove_partyChangedEvent
void GlobalNamespace::LocalNetworkPlayerModel::remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::remove_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.add_joinRequestedEvent
void GlobalNamespace::LocalNetworkPlayerModel::add_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::add_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.remove_joinRequestedEvent
void GlobalNamespace::LocalNetworkPlayerModel::remove_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::remove_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.add_inviteRequestedEvent
void GlobalNamespace::LocalNetworkPlayerModel::add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::add_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.remove_inviteRequestedEvent
void GlobalNamespace::LocalNetworkPlayerModel::remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::remove_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LocalNetworkPlayerModel.get_localPlayerIsPartyOwner
bool GlobalNamespace::LocalNetworkPlayerModel::get_localPlayerIsPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_localPlayerIsPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.get_localPlayer
GlobalNamespace::INetworkPlayer* GlobalNamespace::LocalNetworkPlayerModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.Start
void GlobalNamespace::LocalNetworkPlayerModel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.Update
void GlobalNamespace::LocalNetworkPlayerModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.OnDestroy
void GlobalNamespace::LocalNetworkPlayerModel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.GetPartyPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::LocalNetworkPlayerModel::GetPartyPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::GetPartyPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPartyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.GetOtherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::LocalNetworkPlayerModel::GetOtherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::GetOtherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOtherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.PlayerConnected
void GlobalNamespace::LocalNetworkPlayerModel::PlayerConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::PlayerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: LocalNetworkPlayerModel.ConnectionFailed
void GlobalNamespace::LocalNetworkPlayerModel::ConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::ConnectionFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: LocalNetworkPlayerModel.PlayerDisconnected
void GlobalNamespace::LocalNetworkPlayerModel::PlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::PlayerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: LocalNetworkPlayerModel.PlayerStateChanged
void GlobalNamespace::LocalNetworkPlayerModel::PlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::PlayerStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: LocalNetworkPlayerModel.PartySizeChanged
void GlobalNamespace::LocalNetworkPlayerModel::PartySizeChanged(int currentPartySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::PartySizeChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PartySizeChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPartySize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentPartySize);
}
// Autogenerated method: LocalNetworkPlayerModel.DestroyParty
void GlobalNamespace::LocalNetworkPlayerModel::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::DestroyParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.Disconnect
void GlobalNamespace::LocalNetworkPlayerModel::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel.ConnectedPlayerManagerChanged
void GlobalNamespace::LocalNetworkPlayerModel::ConnectedPlayerManagerChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::ConnectedPlayerManagerChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectedPlayerManagerChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_canInvitePlayers
// Il2CppName: get_canInvitePlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_canInvitePlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_canInvitePlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_hasConnectedPeers
// Il2CppName: get_hasConnectedPeers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_hasConnectedPeers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_hasConnectedPeers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_otherPlayers
// Il2CppName: get_otherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_otherPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_otherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_hasNetworkingFailed
// Il2CppName: get_hasNetworkingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_hasNetworkingFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_hasNetworkingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_liteNetLibConnectionManager
// Il2CppName: get_liteNetLibConnectionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LiteNetLibConnectionManager* (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_liteNetLibConnectionManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_liteNetLibConnectionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::TryGetPlayer
// Il2CppName: TryGetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::*)(::Il2CppString*, GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*&)>(&LocalNetworkPlayerModel::TryGetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "TryGetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*&>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* (LocalNetworkPlayerModel::*)(::Il2CppString*)>(&LocalNetworkPlayerModel::GetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::RefreshLocalPlayer
// Il2CppName: RefreshLocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(bool)>(&LocalNetworkPlayerModel::RefreshLocalPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "RefreshLocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::HandlePeerUpdate
// Il2CppName: HandlePeerUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, int, int, uint8_t, GlobalNamespace::GameplayServerConfiguration)>(&LocalNetworkPlayerModel::HandlePeerUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "HandlePeerUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::SendJoinRequest
// Il2CppName: SendJoinRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*)>(&LocalNetworkPlayerModel::SendJoinRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "SendJoinRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::HandleJoinRequest
// Il2CppName: HandleJoinRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, uint8_t)>(&LocalNetworkPlayerModel::HandleJoinRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "HandleJoinRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*, bool)>(&LocalNetworkPlayerModel::SendJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::HandleJoinResponse
// Il2CppName: HandleJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(::Il2CppString*, ::Il2CppString*, int, bool)>(&LocalNetworkPlayerModel::HandleJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "HandleJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::SendInviteRequest
// Il2CppName: SendInviteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*)>(&LocalNetworkPlayerModel::SendInviteRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "SendInviteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::HandleInviteRequest
// Il2CppName: HandleInviteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(::Il2CppString*, System::Net::IPAddress*, ::Il2CppString*, ::Il2CppString*, int, uint8_t)>(&LocalNetworkPlayerModel::HandleInviteRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "HandleInviteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*, bool)>(&LocalNetworkPlayerModel::SendInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::HandleInviteResponse
// Il2CppName: HandleInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(::Il2CppString*, bool, bool)>(&LocalNetworkPlayerModel::HandleInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "HandleInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::ConnectToPeer
// Il2CppName: ConnectToPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*)>(&LocalNetworkPlayerModel::ConnectToPeer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "ConnectToPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::DisconnectPeer
// Il2CppName: DisconnectPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*)>(&LocalNetworkPlayerModel::DisconnectPeer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "DisconnectPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::HandlePlayersChanged
// Il2CppName: HandlePlayersChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::HandlePlayersChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "HandlePlayersChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::TryStartServer
// Il2CppName: TryStartServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::TryStartServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "TryStartServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_discoveryEnabled
// Il2CppName: get_discoveryEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_discoveryEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_discoveryEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::set_discoveryEnabled
// Il2CppName: set_discoveryEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(bool)>(&LocalNetworkPlayerModel::set_discoveryEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "set_discoveryEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::add_partySizeChangedEvent
// Il2CppName: add_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<int>*)>(&LocalNetworkPlayerModel::add_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "add_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::remove_partySizeChangedEvent
// Il2CppName: remove_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<int>*)>(&LocalNetworkPlayerModel::remove_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "remove_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::add_partyChangedEvent
// Il2CppName: add_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&LocalNetworkPlayerModel::add_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "add_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::remove_partyChangedEvent
// Il2CppName: remove_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&LocalNetworkPlayerModel::remove_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "remove_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::add_joinRequestedEvent
// Il2CppName: add_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&LocalNetworkPlayerModel::add_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "add_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::remove_joinRequestedEvent
// Il2CppName: remove_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&LocalNetworkPlayerModel::remove_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "remove_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&LocalNetworkPlayerModel::add_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&LocalNetworkPlayerModel::remove_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_localPlayerIsPartyOwner
// Il2CppName: get_localPlayerIsPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_localPlayerIsPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::GetPartyPlayers
// Il2CppName: GetPartyPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::GetPartyPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "GetPartyPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::GetOtherPlayers
// Il2CppName: GetOtherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::GetOtherPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "GetOtherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::PlayerConnected
// Il2CppName: PlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LocalNetworkPlayerModel::PlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "PlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::ConnectionFailed
// Il2CppName: ConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::ConnectionFailedReason)>(&LocalNetworkPlayerModel::ConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "ConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::PlayerDisconnected
// Il2CppName: PlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LocalNetworkPlayerModel::PlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "PlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::PlayerStateChanged
// Il2CppName: PlayerStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&LocalNetworkPlayerModel::PlayerStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "PlayerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::PartySizeChanged
// Il2CppName: PartySizeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)(int)>(&LocalNetworkPlayerModel::PartySizeChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "PartySizeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::CreateParty
// Il2CppName: CreateParty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LocalNetworkPlayerModel::DestroyParty
// Il2CppName: DestroyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::DestroyParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "DestroyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::ConnectedPlayerManagerChanged
// Il2CppName: ConnectedPlayerManagerChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::ConnectedPlayerManagerChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), "ConnectedPlayerManagerChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::*)()>(&LocalNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalNetworkPlayerModel/LocalNetworkFlags
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags AllowAnyoneToJoin
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_AllowAnyoneToJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_AllowAnyoneToJoin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>("", "LocalNetworkPlayerModel/LocalNetworkFlags", "AllowAnyoneToJoin"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags AllowAnyoneToJoin
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_AllowAnyoneToJoin(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_AllowAnyoneToJoin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkFlags", "AllowAnyoneToJoin", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPartyOwner
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsPartyOwner");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsPartyOwner"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPartyOwner
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsPartyOwner(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsPartyOwner");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsPartyOwner", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPlayer
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsPlayer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsPlayer"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPlayer
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsPlayer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsPlayer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsPlayer", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsSpectating
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsSpectating");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsSpectating"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsSpectating
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsSpectating(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsSpectating");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsSpectating", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsDedicatedServer
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_IsDedicatedServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsDedicatedServer"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsDedicatedServer
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsDedicatedServer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_IsDedicatedServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkFlags", "IsDedicatedServer", value));
}
// Autogenerated static field getter
// Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags OtherPlayersCanInvite
GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_OtherPlayersCanInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_get_OtherPlayersCanInvite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>("", "LocalNetworkPlayerModel/LocalNetworkFlags", "OtherPlayersCanInvite"));
}
// Autogenerated static field setter
// Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags OtherPlayersCanInvite
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_OtherPlayersCanInvite(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags::_set_OtherPlayersCanInvite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkFlags", "OtherPlayersCanInvite", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkPlayerModel/LocalNetworkPlayer
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkPlayer.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kPeerBroadcastTimeout
float GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kPeerBroadcastTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kPeerBroadcastTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kPeerBroadcastTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kPeerBroadcastTimeout
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kPeerBroadcastTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kPeerBroadcastTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kPeerBroadcastTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kConnectionTimeout
float GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kConnectionTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kConnectionTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kConnectionTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kConnectionTimeout
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kConnectionTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kConnectionTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kConnectionTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kRequestTimeout
float GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kRequestTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_get_kRequestTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kRequestTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kRequestTimeout
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kRequestTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::_set_kRequestTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LocalNetworkPlayerModel/LocalNetworkPlayer", "kRequestTimeout", value));
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_userId
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_userName
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_ipAddress
System::Net::IPAddress* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_ipAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_ipAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ipAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPAddress*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isMe
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isPartyOwner
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPartyOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_currentPartySize
int GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_maxPartySize
int GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_difficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_difficulties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_modifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_modifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_songPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_songPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isOpenParty
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isOpenParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isOpenParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOpenParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isPlayer
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isSpectating
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isDedicatedServer
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_otherPlayersCanInvite
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_otherPlayersCanInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_otherPlayersCanInvite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_otherPlayersCanInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isBlocked
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isBlocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isBlocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isBlocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_hasBlockedMe
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_hasBlockedMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_hasBlockedMe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasBlockedMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_secret
::Il2CppString* GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_secret() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_secret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_multiplayerPort
int GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_multiplayerPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_multiplayerPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isMyPartyOwner
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMyPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMyPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isConnected
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_allowedJoinToMyParty
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_allowedJoinToMyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_allowedJoinToMyParty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowedJoinToMyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isConnecting
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_wasConnecting
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_wasConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_wasConnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isTimedOut
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isTimedOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isTimedOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isTimedOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isWaitingOnJoin
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canJoin
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Join
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_requiresPassword
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_requiresPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_requiresPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Join
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isWaitingOnInvite
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canInvite
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Invite
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Invite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Invite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canKick
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canKick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canKick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Kick
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Kick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Kick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canLeave
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canLeave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Leave
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Leave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Leave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canBlock
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canBlock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Block
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Block");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_canUnblock
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canUnblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canUnblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Unblock
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Unblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Unblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SendJoinResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendJoinResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendJoinResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SendInviteResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendInviteResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendInviteResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Update
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Update(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, int currentPartySize, int maxPartySize, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(currentPartySize), ::il2cpp_utils::ExtractType(maxPartySize), ::il2cpp_utils::ExtractType(configuration)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, flags, currentPartySize, maxPartySize, configuration);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.HasFailedToConnect
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::HasFailedToConnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::HasFailedToConnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasFailedToConnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetInvited
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInvited(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, ::Il2CppString* secret, int multiplayerPort) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInvited");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInvited", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flags, secret, multiplayerPort);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetJoinResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinResponse(::Il2CppString* secret, int multiplayerPort, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(multiplayerPort), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, secret, multiplayerPort, blocked);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetInviteResponse
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInviteResponse(bool accepted, bool blocked) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInviteResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accepted), ::il2cpp_utils::ExtractType(blocked)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accepted, blocked);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetJoinRequested
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinRequested(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetJoinRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flags);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetConnected
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.SetDisconnected
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.UpdateState
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::UpdateState(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::UpdateState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.get_isConnectable
bool GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnectable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnectable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/LocalNetworkPlayer.Connect
void GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Connect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_ipAddress
// Il2CppName: get_ipAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPAddress* (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_ipAddress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_ipAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPartyOwner
// Il2CppName: get_isPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_difficulties
// Il2CppName: get_difficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_difficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_difficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_modifiers
// Il2CppName: get_modifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifierMask (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_modifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_modifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_songPacks
// Il2CppName: get_songPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_songPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_songPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isOpenParty
// Il2CppName: get_isOpenParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isOpenParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isOpenParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPlayer
// Il2CppName: get_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isSpectating
// Il2CppName: get_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isDedicatedServer
// Il2CppName: get_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_otherPlayersCanInvite
// Il2CppName: get_otherPlayersCanInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_otherPlayersCanInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_otherPlayersCanInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isBlocked
// Il2CppName: get_isBlocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isBlocked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isBlocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_hasBlockedMe
// Il2CppName: get_hasBlockedMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_hasBlockedMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_hasBlockedMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_secret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_multiplayerPort
// Il2CppName: get_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_multiplayerPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMyPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_allowedJoinToMyParty
// Il2CppName: get_allowedJoinToMyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_allowedJoinToMyParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_allowedJoinToMyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_wasConnecting
// Il2CppName: get_wasConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_wasConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_wasConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isTimedOut
// Il2CppName: get_isTimedOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isTimedOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isTimedOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(GlobalNamespace::LocalNetworkPlayerModel*, ::Il2CppString*, ::Il2CppString*, System::Net::IPAddress*, bool)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(GlobalNamespace::LocalNetworkPlayerModel*, ::Il2CppString*, ::Il2CppString*, System::Net::IPAddress*, bool)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::IPAddress*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_canJoin
// Il2CppName: get_canJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_canJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_requiresPassword
// Il2CppName: get_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_requiresPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(::Il2CppString*)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_canInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Invite
// Il2CppName: Invite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Invite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Invite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_canKick
// Il2CppName: get_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_canKick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Kick
// Il2CppName: Kick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Kick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Kick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_canLeave
// Il2CppName: get_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_canLeave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Leave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_canBlock
// Il2CppName: get_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_canBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Block)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_canUnblock
// Il2CppName: get_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_canUnblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Unblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SendJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SendInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags, int, int, GlobalNamespace::GameplayServerConfiguration)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::HasFailedToConnect
// Il2CppName: HasFailedToConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::HasFailedToConnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "HasFailedToConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SetInvited
// Il2CppName: SetInvited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags, ::Il2CppString*, int)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SetInvited)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetInvited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinResponse
// Il2CppName: SetJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(::Il2CppString*, int, bool)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SetInviteResponse
// Il2CppName: SetInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool, bool)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SetInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinRequested
// Il2CppName: SetJoinRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinRequested)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetJoinRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SetConnected
// Il2CppName: SetConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SetConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::SetDisconnected
// Il2CppName: SetDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::SetDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)(GlobalNamespace::IConnectedPlayer*)>(&LocalNetworkPlayerModel::LocalNetworkPlayer::UpdateState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnectable
// Il2CppName: get_isConnectable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnectable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isConnectable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::LocalNetworkPlayer::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&LocalNetworkPlayerModel::LocalNetworkPlayer::Connect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::LocalNetworkPlayer*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/LocalNetworkPlayerModel_CreatePartyConfig.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LocalNetworkPlayerModel::CreatePartyConfig::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::CreatePartyConfig::*)()>(&LocalNetworkPlayerModel::CreatePartyConfig::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::CreatePartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::CreatePartyConfig::*)()>(&LocalNetworkPlayerModel::CreatePartyConfig::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::CreatePartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalNetworkPlayerModel/<Start>d__44
#include "GlobalNamespace/LocalNetworkPlayerModel_-Start-d__44.hpp"
// Including type: UserInfo
#include "GlobalNamespace/UserInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalNetworkPlayerModel/<Start>d__44.MoveNext
void GlobalNamespace::LocalNetworkPlayerModel::$Start$d__44::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::$Start$d__44::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LocalNetworkPlayerModel/<Start>d__44.SetStateMachine
void GlobalNamespace::LocalNetworkPlayerModel::$Start$d__44::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::$Start$d__44::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: LocalNetworkPlayerModel::$Start$d__44::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::$Start$d__44::*)()>(&LocalNetworkPlayerModel::$Start$d__44::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::$Start$d__44), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalNetworkPlayerModel::$Start$d__44::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalNetworkPlayerModel::$Start$d__44::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&LocalNetworkPlayerModel::$Start$d__44::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalNetworkPlayerModel::$Start$d__44), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkConfigSO
#include "GlobalNamespace/NetworkConfigSO.hpp"
// Including type: MasterServerEndPoint
#include "GlobalNamespace/MasterServerEndPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkConfigSO.get_maxPartySize
int GlobalNamespace::NetworkConfigSO::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConfigSO::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NetworkConfigSO.get_discoveryPort
int GlobalNamespace::NetworkConfigSO::get_discoveryPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConfigSO::get_discoveryPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NetworkConfigSO.get_partyPort
int GlobalNamespace::NetworkConfigSO::get_partyPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConfigSO::get_partyPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_partyPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NetworkConfigSO.get_multiplayerPort
int GlobalNamespace::NetworkConfigSO::get_multiplayerPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConfigSO::get_multiplayerPort");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NetworkConfigSO.get_masterServerEndPoint
GlobalNamespace::MasterServerEndPoint* GlobalNamespace::NetworkConfigSO::get_masterServerEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConfigSO::get_masterServerEndPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: NetworkConfigSO.get_masterServerStatusUrl
::Il2CppString* GlobalNamespace::NetworkConfigSO::get_masterServerStatusUrl() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkConfigSO::get_masterServerStatusUrl");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerStatusUrl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NetworkConfigSO::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NetworkConfigSO::*)()>(&NetworkConfigSO::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkConfigSO::get_discoveryPort
// Il2CppName: get_discoveryPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NetworkConfigSO::*)()>(&NetworkConfigSO::get_discoveryPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), "get_discoveryPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkConfigSO::get_partyPort
// Il2CppName: get_partyPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NetworkConfigSO::*)()>(&NetworkConfigSO::get_partyPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), "get_partyPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkConfigSO::get_multiplayerPort
// Il2CppName: get_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NetworkConfigSO::*)()>(&NetworkConfigSO::get_multiplayerPort)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), "get_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkConfigSO::get_masterServerEndPoint
// Il2CppName: get_masterServerEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MasterServerEndPoint* (NetworkConfigSO::*)()>(&NetworkConfigSO::get_masterServerEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), "get_masterServerEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkConfigSO::get_masterServerStatusUrl
// Il2CppName: get_masterServerStatusUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NetworkConfigSO::*)()>(&NetworkConfigSO::get_masterServerStatusUrl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), "get_masterServerStatusUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkConfigSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkConfigSO::*)()>(&NetworkConfigSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkConfigSO::*)()>(&NetworkConfigSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkConfigSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkPlayerEntitlementChecker
#include "GlobalNamespace/NetworkPlayerEntitlementChecker.hpp"
// Including type: NetworkPlayerEntitlementChecker/CachedTcs
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_CachedTcs.hpp"
// Including type: NetworkPlayerEntitlementChecker/<HandleGetIsEntitledToLevel>d__15
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-HandleGetIsEntitledToLevel-d__15.hpp"
// Including type: NetworkPlayerEntitlementChecker/<GetPlayerLevelEntitlementsAsync>d__17
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetPlayerLevelEntitlementsAsync-d__17.hpp"
// Including type: NetworkPlayerEntitlementChecker/<GetCanPlayLevelAsync>d__18
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetCanPlayLevelAsync-d__18.hpp"
// Including type: NetworkPlayerEntitlementChecker/<GetEntitlementStatus>d__20
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetEntitlementStatus-d__20.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkPlayerEntitlementChecker.add_didInvalidateDataEvent
void GlobalNamespace::NetworkPlayerEntitlementChecker::add_didInvalidateDataEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::add_didInvalidateDataEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInvalidateDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.remove_didInvalidateDataEvent
void GlobalNamespace::NetworkPlayerEntitlementChecker::remove_didInvalidateDataEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::remove_didInvalidateDataEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInvalidateDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.Start
void GlobalNamespace::NetworkPlayerEntitlementChecker::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.OnDestroy
void GlobalNamespace::NetworkPlayerEntitlementChecker::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.InvalidateData
void GlobalNamespace::NetworkPlayerEntitlementChecker::InvalidateData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::InvalidateData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleDataInvalidated
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleDataInvalidated() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::HandleDataInvalidated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDataInvalidated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleLevelEntitlementStatusesInvalidated
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleLevelEntitlementStatusesInvalidated(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::HandleLevelEntitlementStatusesInvalidated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelEntitlementStatusesInvalidated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandlePlayerDisconnected
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::HandlePlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandlePlayerConnected
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandlePlayerConnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::HandlePlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleGetIsEntitledToLevel
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleGetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::HandleGetIsEntitledToLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, levelId);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.HandleSetIsEntitledToLevel
void GlobalNamespace::NetworkPlayerEntitlementChecker::HandleSetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId, GlobalNamespace::EntitlementsStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::HandleSetIsEntitledToLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetIsEntitledToLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(status)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, levelId, status);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetPlayerLevelEntitlementsAsync
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetPlayerLevelEntitlementsAsync(GlobalNamespace::IConnectedPlayer* player, ::Il2CppString* levelId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::GetPlayerLevelEntitlementsAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayerLevelEntitlementsAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*, false>(this, ___internal__method, player, levelId, token);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetCanPlayLevelAsync
System::Threading::Tasks::Task_1<bool>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetCanPlayLevelAsync(::Il2CppString* levelId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::GetCanPlayLevelAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCanPlayLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, levelId, token);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetTcsTaskCanPlayerPlayLevel
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetTcsTaskCanPlayerPlayLevel(GlobalNamespace::IConnectedPlayer* player, ::Il2CppString* levelId, System::Threading::CancellationToken token, bool& rpcRequired) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::GetTcsTaskCanPlayerPlayLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTcsTaskCanPlayerPlayLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*, false>(this, ___internal__method, player, levelId, token, rpcRequired);
}
// Autogenerated method: NetworkPlayerEntitlementChecker.GetEntitlementStatus
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::NetworkPlayerEntitlementChecker::GetEntitlementStatus(::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::GetEntitlementStatus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEntitlementStatus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*, false>(this, ___internal__method, levelId);
}
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::add_didInvalidateDataEvent
// Il2CppName: add_didInvalidateDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)(System::Action*)>(&NetworkPlayerEntitlementChecker::add_didInvalidateDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "add_didInvalidateDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::remove_didInvalidateDataEvent
// Il2CppName: remove_didInvalidateDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)(System::Action*)>(&NetworkPlayerEntitlementChecker::remove_didInvalidateDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "remove_didInvalidateDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)()>(&NetworkPlayerEntitlementChecker::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)()>(&NetworkPlayerEntitlementChecker::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::InvalidateData
// Il2CppName: InvalidateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)()>(&NetworkPlayerEntitlementChecker::InvalidateData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "InvalidateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::HandleDataInvalidated
// Il2CppName: HandleDataInvalidated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)()>(&NetworkPlayerEntitlementChecker::HandleDataInvalidated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "HandleDataInvalidated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::HandleLevelEntitlementStatusesInvalidated
// Il2CppName: HandleLevelEntitlementStatusesInvalidated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)(::Il2CppString*)>(&NetworkPlayerEntitlementChecker::HandleLevelEntitlementStatusesInvalidated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "HandleLevelEntitlementStatusesInvalidated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::HandlePlayerDisconnected
// Il2CppName: HandlePlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)(GlobalNamespace::IConnectedPlayer*)>(&NetworkPlayerEntitlementChecker::HandlePlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "HandlePlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::HandlePlayerConnected
// Il2CppName: HandlePlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)(GlobalNamespace::IConnectedPlayer*)>(&NetworkPlayerEntitlementChecker::HandlePlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "HandlePlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::HandleGetIsEntitledToLevel
// Il2CppName: HandleGetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)(::Il2CppString*, ::Il2CppString*)>(&NetworkPlayerEntitlementChecker::HandleGetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "HandleGetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::HandleSetIsEntitledToLevel
// Il2CppName: HandleSetIsEntitledToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus)>(&NetworkPlayerEntitlementChecker::HandleSetIsEntitledToLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "HandleSetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EntitlementsStatus>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::GetPlayerLevelEntitlementsAsync
// Il2CppName: GetPlayerLevelEntitlementsAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* (NetworkPlayerEntitlementChecker::*)(GlobalNamespace::IConnectedPlayer*, ::Il2CppString*, System::Threading::CancellationToken)>(&NetworkPlayerEntitlementChecker::GetPlayerLevelEntitlementsAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "GetPlayerLevelEntitlementsAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::GetCanPlayLevelAsync
// Il2CppName: GetCanPlayLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (NetworkPlayerEntitlementChecker::*)(::Il2CppString*, System::Threading::CancellationToken)>(&NetworkPlayerEntitlementChecker::GetCanPlayLevelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "GetCanPlayLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::GetTcsTaskCanPlayerPlayLevel
// Il2CppName: GetTcsTaskCanPlayerPlayLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* (NetworkPlayerEntitlementChecker::*)(GlobalNamespace::IConnectedPlayer*, ::Il2CppString*, System::Threading::CancellationToken, bool&)>(&NetworkPlayerEntitlementChecker::GetTcsTaskCanPlayerPlayLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "GetTcsTaskCanPlayerPlayLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::GetEntitlementStatus
// Il2CppName: GetEntitlementStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* (NetworkPlayerEntitlementChecker::*)(::Il2CppString*)>(&NetworkPlayerEntitlementChecker::GetEntitlementStatus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), "GetEntitlementStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)()>(&NetworkPlayerEntitlementChecker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::*)()>(&NetworkPlayerEntitlementChecker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetworkPlayerEntitlementChecker/CachedTcs
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_CachedTcs.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkPlayerEntitlementChecker/CachedTcs.get_task
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::NetworkPlayerEntitlementChecker::CachedTcs::get_task() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::CachedTcs::get_task");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_task", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*, false>(this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker/CachedTcs.SetResult
void GlobalNamespace::NetworkPlayerEntitlementChecker::CachedTcs::SetResult(GlobalNamespace::EntitlementsStatus status) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::CachedTcs::SetResult");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(status)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, status);
}
// Autogenerated method: NetworkPlayerEntitlementChecker/CachedTcs.Refresh
bool GlobalNamespace::NetworkPlayerEntitlementChecker::CachedTcs::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::CachedTcs::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::CachedTcs::get_task
// Il2CppName: get_task
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* (NetworkPlayerEntitlementChecker::CachedTcs::*)()>(&NetworkPlayerEntitlementChecker::CachedTcs::get_task)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::CachedTcs*), "get_task", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::CachedTcs::SetResult
// Il2CppName: SetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::CachedTcs::*)(GlobalNamespace::EntitlementsStatus)>(&NetworkPlayerEntitlementChecker::CachedTcs::SetResult)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::CachedTcs*), "SetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EntitlementsStatus>()});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::CachedTcs::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NetworkPlayerEntitlementChecker::CachedTcs::*)()>(&NetworkPlayerEntitlementChecker::CachedTcs::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::CachedTcs*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::CachedTcs::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::CachedTcs::*)()>(&NetworkPlayerEntitlementChecker::CachedTcs::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::CachedTcs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::CachedTcs::*)()>(&NetworkPlayerEntitlementChecker::CachedTcs::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::CachedTcs*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkPlayerEntitlementChecker/<HandleGetIsEntitledToLevel>d__15
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-HandleGetIsEntitledToLevel-d__15.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkPlayerEntitlementChecker/<HandleGetIsEntitledToLevel>d__15.MoveNext
void GlobalNamespace::NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker/<HandleGetIsEntitledToLevel>d__15.SetStateMachine
void GlobalNamespace::NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::*)()>(&NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$HandleGetIsEntitledToLevel$d__15), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkPlayerEntitlementChecker/<GetPlayerLevelEntitlementsAsync>d__17
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetPlayerLevelEntitlementsAsync-d__17.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkPlayerEntitlementChecker/<GetPlayerLevelEntitlementsAsync>d__17.MoveNext
void GlobalNamespace::NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker/<GetPlayerLevelEntitlementsAsync>d__17.SetStateMachine
void GlobalNamespace::NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::*)()>(&NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$GetPlayerLevelEntitlementsAsync$d__17), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkPlayerEntitlementChecker/<GetCanPlayLevelAsync>d__18
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetCanPlayLevelAsync-d__18.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkPlayerEntitlementChecker/<GetCanPlayLevelAsync>d__18.MoveNext
void GlobalNamespace::NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker/<GetCanPlayLevelAsync>d__18.SetStateMachine
void GlobalNamespace::NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::*)()>(&NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$GetCanPlayLevelAsync$d__18), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetworkPlayerEntitlementChecker/<GetEntitlementStatus>d__20
#include "GlobalNamespace/NetworkPlayerEntitlementChecker_-GetEntitlementStatus-d__20.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetworkPlayerEntitlementChecker/<GetEntitlementStatus>d__20.MoveNext
void GlobalNamespace::NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetworkPlayerEntitlementChecker/<GetEntitlementStatus>d__20.SetStateMachine
void GlobalNamespace::NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::*)()>(&NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetworkPlayerEntitlementChecker::$GetEntitlementStatus$d__20), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NodePoseSyncStateManager
#include "GlobalNamespace/NodePoseSyncStateManager.hpp"
// Including type: NodePoseSyncStateNetSerializable
#include "GlobalNamespace/NodePoseSyncStateNetSerializable.hpp"
// Including type: NodePoseSyncStateDeltaNetSerializable
#include "GlobalNamespace/NodePoseSyncStateDeltaNetSerializable.hpp"
// Including type: IPacketPool`1
#include "GlobalNamespace/IPacketPool_1.hpp"
// Including type: MultiplayerSessionManager/MessageType
#include "GlobalNamespace/MultiplayerSessionManager_MessageType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NodePoseSyncStateManager.get_serializablePool
GlobalNamespace::IPacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>* GlobalNamespace::NodePoseSyncStateManager::get_serializablePool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_serializablePool");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serializablePool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>*, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateManager.get_deltaSerializablePool
GlobalNamespace::IPacketPool_1<GlobalNamespace::NodePoseSyncStateDeltaNetSerializable*>* GlobalNamespace::NodePoseSyncStateManager::get_deltaSerializablePool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_deltaSerializablePool");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaSerializablePool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPacketPool_1<GlobalNamespace::NodePoseSyncStateDeltaNetSerializable*>*, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateManager.Interpolate
GlobalNamespace::PoseSerializable GlobalNamespace::NodePoseSyncStateManager::Interpolate(GlobalNamespace::PoseSerializable prev, float prevTime, GlobalNamespace::PoseSerializable curr, float currTime, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::Interpolate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prev), ::il2cpp_utils::ExtractType(prevTime), ::il2cpp_utils::ExtractType(curr), ::il2cpp_utils::ExtractType(currTime), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(this, ___internal__method, prev, prevTime, curr, currTime, time);
}
// Autogenerated method: NodePoseSyncStateManager.Smooth
GlobalNamespace::PoseSerializable GlobalNamespace::NodePoseSyncStateManager::Smooth(GlobalNamespace::PoseSerializable a, GlobalNamespace::PoseSerializable b, float smooth) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::Smooth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Smooth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(smooth)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PoseSerializable, false>(this, ___internal__method, a, b, smooth);
}
// Autogenerated method: NodePoseSyncStateManager.get_deltaUpdateFrequency
float GlobalNamespace::NodePoseSyncStateManager::get_deltaUpdateFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_deltaUpdateFrequency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaUpdateFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateManager.get_fullStateUpdateFrequency
float GlobalNamespace::NodePoseSyncStateManager::get_fullStateUpdateFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_fullStateUpdateFrequency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fullStateUpdateFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateManager.get_localBufferSize
int GlobalNamespace::NodePoseSyncStateManager::get_localBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_localBufferSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateManager.get_remoteBufferSize
int GlobalNamespace::NodePoseSyncStateManager::get_remoteBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_remoteBufferSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_remoteBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateManager.get_messageType
GlobalNamespace::MultiplayerSessionManager_MessageType GlobalNamespace::NodePoseSyncStateManager::get_messageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_messageType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_messageType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerSessionManager_MessageType, false>(this, ___internal__method);
}
// Autogenerated method: NodePoseSyncStateManager.get_deltaMessageType
GlobalNamespace::MultiplayerSessionManager_MessageType GlobalNamespace::NodePoseSyncStateManager::get_deltaMessageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateManager::get_deltaMessageType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaMessageType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerSessionManager_MessageType, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_serializablePool
// Il2CppName: get_serializablePool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>* (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_serializablePool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_serializablePool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_deltaSerializablePool
// Il2CppName: get_deltaSerializablePool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPacketPool_1<GlobalNamespace::NodePoseSyncStateDeltaNetSerializable*>* (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_deltaSerializablePool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_deltaSerializablePool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::Interpolate
// Il2CppName: Interpolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (NodePoseSyncStateManager::*)(GlobalNamespace::PoseSerializable, float, GlobalNamespace::PoseSerializable, float, float)>(&NodePoseSyncStateManager::Interpolate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "Interpolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::Smooth
// Il2CppName: Smooth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PoseSerializable (NodePoseSyncStateManager::*)(GlobalNamespace::PoseSerializable, GlobalNamespace::PoseSerializable, float)>(&NodePoseSyncStateManager::Smooth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "Smooth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PoseSerializable>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_deltaUpdateFrequency
// Il2CppName: get_deltaUpdateFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_deltaUpdateFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_deltaUpdateFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_fullStateUpdateFrequency
// Il2CppName: get_fullStateUpdateFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_fullStateUpdateFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_fullStateUpdateFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_localBufferSize
// Il2CppName: get_localBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_localBufferSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_localBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_remoteBufferSize
// Il2CppName: get_remoteBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_remoteBufferSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_remoteBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_messageType
// Il2CppName: get_messageType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerSessionManager_MessageType (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_messageType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_messageType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::get_deltaMessageType
// Il2CppName: get_deltaMessageType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerSessionManager_MessageType (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::get_deltaMessageType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), "get_deltaMessageType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NodePoseSyncStateManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodePoseSyncStateManager::*)()>(&NodePoseSyncStateManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodePoseSyncStateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusConnectionManager
#include "GlobalNamespace/OculusConnectionManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: OculusConnectionManager/OculusConnection
#include "GlobalNamespace/OculusConnectionManager_OculusConnection.hpp"
// Including type: OculusConnectionManager/StartServerParams
#include "GlobalNamespace/OculusConnectionManager_StartServerParams.hpp"
// Including type: OculusConnectionManager/ConnectToServerParams
#include "GlobalNamespace/OculusConnectionManager_ConnectToServerParams.hpp"
// Including type: OculusConnectionManager/<HandlePeerConnectionRequest>d__62
#include "GlobalNamespace/OculusConnectionManager_-HandlePeerConnectionRequest-d__62.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: OculusNetworkPlayerModel
#include "GlobalNamespace/OculusNetworkPlayerModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: System.Action`3
#include "System/Action_3.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: IConnectionInitParams`1
#include "GlobalNamespace/IConnectionInitParams_1.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.NetworkingPeer
#include "Oculus/Platform/Models/NetworkingPeer.hpp"
// Including type: Oculus.Platform.SendPolicy
#include "Oculus/Platform/SendPolicy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kPingFrequency
float GlobalNamespace::OculusConnectionManager::_get_kPingFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::_get_kPingFrequency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OculusConnectionManager", "kPingFrequency"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kPingFrequency
void GlobalNamespace::OculusConnectionManager::_set_kPingFrequency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::_set_kPingFrequency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusConnectionManager", "kPingFrequency", value));
}
// Autogenerated method: OculusConnectionManager.add_onConnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::add_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.remove_onConnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::remove_onConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.add_onDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::add_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.remove_onDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::remove_onDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.add_onConnectionFailedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::add_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.remove_onConnectionFailedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::remove_onConnectionFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.add_onConnectionConnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::add_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.remove_onConnectionConnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::remove_onConnectionConnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.add_onConnectionDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::add_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.remove_onConnectionDisconnectedEvent
void GlobalNamespace::OculusConnectionManager::remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::remove_onConnectionDisconnectedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.add_onLatencyUpdatedEvent
void GlobalNamespace::OculusConnectionManager::add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::add_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.remove_onLatencyUpdatedEvent
void GlobalNamespace::OculusConnectionManager::remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::remove_onLatencyUpdatedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.add_onReceivedDataEvent
void GlobalNamespace::OculusConnectionManager::add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::add_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.remove_onReceivedDataEvent
void GlobalNamespace::OculusConnectionManager::remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::remove_onReceivedDataEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_onReceivedDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.get_userId
::Il2CppString* GlobalNamespace::OculusConnectionManager::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_userName
::Il2CppString* GlobalNamespace::OculusConnectionManager::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_isConnected
bool GlobalNamespace::OculusConnectionManager::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_isConnecting
bool GlobalNamespace::OculusConnectionManager::get_isConnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_isConnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_isDisconnecting
bool GlobalNamespace::OculusConnectionManager::get_isDisconnecting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_isDisconnecting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.set_isDisconnecting
void GlobalNamespace::OculusConnectionManager::set_isDisconnecting(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::set_isDisconnecting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDisconnecting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusConnectionManager.get_isDisposed
bool GlobalNamespace::OculusConnectionManager::get_isDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_isDisposed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDisposed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_isConnectionOwner
bool GlobalNamespace::OculusConnectionManager::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_isServer
bool GlobalNamespace::OculusConnectionManager::get_isServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_isServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_isClient
bool GlobalNamespace::OculusConnectionManager::get_isClient() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_isClient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isClient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.get_connectionCount
int GlobalNamespace::OculusConnectionManager::get_connectionCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::get_connectionCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectionCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.SendToAll
void GlobalNamespace::OculusConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod);
}
// Autogenerated method: OculusConnectionManager.SendToAll
void GlobalNamespace::OculusConnectionManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::SendToAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(excludingConnection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod, excludingConnection);
}
// Autogenerated method: OculusConnectionManager.PollUpdate
void GlobalNamespace::OculusConnectionManager::PollUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::PollUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.Disconnect
void GlobalNamespace::OculusConnectionManager::Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: OculusConnectionManager.DisconnectInternal
void GlobalNamespace::OculusConnectionManager::DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::DisconnectInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason), ::il2cpp_utils::ExtractType(connectionFailedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason, connectionFailedReason);
}
// Autogenerated method: OculusConnectionManager.Dispose
void GlobalNamespace::OculusConnectionManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager.GetConnection
GlobalNamespace::IConnection* GlobalNamespace::OculusConnectionManager::GetConnection(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::GetConnection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnection*, false>(this, ___internal__method, index);
}
// Autogenerated method: OculusConnectionManager.HandlePeerConnectionRequest
void GlobalNamespace::OculusConnectionManager::HandlePeerConnectionRequest(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::HandlePeerConnectionRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePeerConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: OculusConnectionManager.HandleConnectionStateChanged
void GlobalNamespace::OculusConnectionManager::HandleConnectionStateChanged(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::HandleConnectionStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectionStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: OculusConnectionManager.GetConnection
GlobalNamespace::OculusConnectionManager::OculusConnection* GlobalNamespace::OculusConnectionManager::GetConnection(uint64_t user) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::GetConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(user)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OculusConnectionManager::OculusConnection*, false>(this, ___internal__method, user);
}
// Autogenerated method: OculusConnectionManager.RemoveConnection
void GlobalNamespace::OculusConnectionManager::RemoveConnection(uint64_t id, GlobalNamespace::DisconnectedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::RemoveConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, id, reason);
}
// Autogenerated method: OculusConnectionManager.AcquireBuffer
::Array<uint8_t>* GlobalNamespace::OculusConnectionManager::AcquireBuffer(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::AcquireBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, size);
}
// Autogenerated method: OculusConnectionManager.ReleaseBuffer
void GlobalNamespace::OculusConnectionManager::ReleaseBuffer(::Array<uint8_t>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::ReleaseBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer);
}
// Autogenerated method: OculusConnectionManager.DeliveryMethodToSendPolicy
Oculus::Platform::SendPolicy GlobalNamespace::OculusConnectionManager::DeliveryMethodToSendPolicy(LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::DeliveryMethodToSendPolicy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusConnectionManager", "DeliveryMethodToSendPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deliveryMethod)})));
  return ::il2cpp_utils::RunMethodThrow<Oculus::Platform::SendPolicy, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, deliveryMethod);
}
// Autogenerated method: OculusConnectionManager.SendPolicyToDeliveryMethod
LiteNetLib::DeliveryMethod GlobalNamespace::OculusConnectionManager::SendPolicyToDeliveryMethod(Oculus::Platform::SendPolicy sendPolicy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::SendPolicyToDeliveryMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusConnectionManager", "SendPolicyToDeliveryMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sendPolicy)})));
  return ::il2cpp_utils::RunMethodThrow<LiteNetLib::DeliveryMethod, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sendPolicy);
}
// Autogenerated method: OculusConnectionManager.VoidHandler
void GlobalNamespace::OculusConnectionManager::VoidHandler(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::VoidHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "OculusConnectionManager", "VoidHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: OculusConnectionManager.<PollUpdate>b__56_0
void GlobalNamespace::OculusConnectionManager::$PollUpdate$b__56_0(GlobalNamespace::OculusConnectionManager::OculusConnection* connection, float latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::<PollUpdate>b__56_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PollUpdate>b__56_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connection, latency);
}
// Writing MetadataGetter for method: OculusConnectionManager::add_onConnectedEvent
// Il2CppName: add_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action*)>(&OculusConnectionManager::add_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "add_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::remove_onConnectedEvent
// Il2CppName: remove_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action*)>(&OculusConnectionManager::remove_onConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "remove_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::add_onDisconnectedEvent
// Il2CppName: add_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&OculusConnectionManager::add_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "add_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::remove_onDisconnectedEvent
// Il2CppName: remove_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&OculusConnectionManager::remove_onDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "remove_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::add_onConnectionFailedEvent
// Il2CppName: add_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&OculusConnectionManager::add_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "add_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::remove_onConnectionFailedEvent
// Il2CppName: remove_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&OculusConnectionManager::remove_onConnectionFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ConnectionFailedReason>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::add_onConnectionConnectedEvent
// Il2CppName: add_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&OculusConnectionManager::add_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::remove_onConnectionConnectedEvent
// Il2CppName: remove_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&OculusConnectionManager::remove_onConnectionConnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IConnection*>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::add_onConnectionDisconnectedEvent
// Il2CppName: add_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&OculusConnectionManager::add_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::remove_onConnectionDisconnectedEvent
// Il2CppName: remove_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&OculusConnectionManager::remove_onConnectionDisconnectedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::add_onLatencyUpdatedEvent
// Il2CppName: add_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&OculusConnectionManager::add_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::remove_onLatencyUpdatedEvent
// Il2CppName: remove_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&OculusConnectionManager::remove_onLatencyUpdatedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::IConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::add_onReceivedDataEvent
// Il2CppName: add_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&OculusConnectionManager::add_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "add_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::remove_onReceivedDataEvent
// Il2CppName: remove_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&OculusConnectionManager::remove_onReceivedDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "remove_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusConnectionManager::*)()>(&OculusConnectionManager::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusConnectionManager::*)()>(&OculusConnectionManager::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::*)()>(&OculusConnectionManager::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::*)()>(&OculusConnectionManager::get_isConnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::*)()>(&OculusConnectionManager::get_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::set_isDisconnecting
// Il2CppName: set_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(bool)>(&OculusConnectionManager::set_isDisconnecting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "set_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_isDisposed
// Il2CppName: get_isDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::*)()>(&OculusConnectionManager::get_isDisposed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_isDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::*)()>(&OculusConnectionManager::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_isServer
// Il2CppName: get_isServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::*)()>(&OculusConnectionManager::get_isServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_isServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_isClient
// Il2CppName: get_isClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::*)()>(&OculusConnectionManager::get_isClient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_isClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::get_connectionCount
// Il2CppName: get_connectionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OculusConnectionManager::*)()>(&OculusConnectionManager::get_connectionCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "get_connectionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&OculusConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod, GlobalNamespace::IConnection*)>(&OculusConnectionManager::SendToAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnection*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)()>(&OculusConnectionManager::PollUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::Init
// Il2CppName: Init
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: OculusConnectionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(GlobalNamespace::DisconnectedReason)>(&OculusConnectionManager::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(GlobalNamespace::DisconnectedReason, GlobalNamespace::ConnectionFailedReason)>(&OculusConnectionManager::DisconnectInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)()>(&OculusConnectionManager::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnection* (OculusConnectionManager::*)(int)>(&OculusConnectionManager::GetConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::HandlePeerConnectionRequest
// Il2CppName: HandlePeerConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>*)>(&OculusConnectionManager::HandlePeerConnectionRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "HandlePeerConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::HandleConnectionStateChanged
// Il2CppName: HandleConnectionStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>*)>(&OculusConnectionManager::HandleConnectionStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "HandleConnectionStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OculusConnectionManager::OculusConnection* (OculusConnectionManager::*)(uint64_t)>(&OculusConnectionManager::GetConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::RemoveConnection
// Il2CppName: RemoveConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(uint64_t, GlobalNamespace::DisconnectedReason)>(&OculusConnectionManager::RemoveConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "RemoveConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::AcquireBuffer
// Il2CppName: AcquireBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (OculusConnectionManager::*)(int)>(&OculusConnectionManager::AcquireBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "AcquireBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::ReleaseBuffer
// Il2CppName: ReleaseBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(::Array<uint8_t>*)>(&OculusConnectionManager::ReleaseBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "ReleaseBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::DeliveryMethodToSendPolicy
// Il2CppName: DeliveryMethodToSendPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Oculus::Platform::SendPolicy (*)(LiteNetLib::DeliveryMethod)>(&OculusConnectionManager::DeliveryMethodToSendPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "DeliveryMethodToSendPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::SendPolicyToDeliveryMethod
// Il2CppName: SendPolicyToDeliveryMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::DeliveryMethod (*)(Oculus::Platform::SendPolicy)>(&OculusConnectionManager::SendPolicyToDeliveryMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "SendPolicyToDeliveryMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::SendPolicy>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::VoidHandler
// Il2CppName: VoidHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>*)>(&OculusConnectionManager::VoidHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "VoidHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::$PollUpdate$b__56_0
// Il2CppName: <PollUpdate>b__56_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)(GlobalNamespace::OculusConnectionManager::OculusConnection*, float)>(&OculusConnectionManager::$PollUpdate$b__56_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), "<PollUpdate>b__56_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OculusConnectionManager::OculusConnection*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)()>(&OculusConnectionManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::*)()>(&OculusConnectionManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusConnectionManager/NetworkMode
#include "GlobalNamespace/OculusConnectionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OculusConnectionManager/NetworkMode None
GlobalNamespace::OculusConnectionManager::NetworkMode GlobalNamespace::OculusConnectionManager::NetworkMode::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::NetworkMode::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OculusConnectionManager::NetworkMode>("", "OculusConnectionManager/NetworkMode", "None"));
}
// Autogenerated static field setter
// Set static field: static public OculusConnectionManager/NetworkMode None
void GlobalNamespace::OculusConnectionManager::NetworkMode::_set_None(GlobalNamespace::OculusConnectionManager::NetworkMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::NetworkMode::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusConnectionManager/NetworkMode", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OculusConnectionManager/NetworkMode Client
GlobalNamespace::OculusConnectionManager::NetworkMode GlobalNamespace::OculusConnectionManager::NetworkMode::_get_Client() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::NetworkMode::_get_Client");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OculusConnectionManager::NetworkMode>("", "OculusConnectionManager/NetworkMode", "Client"));
}
// Autogenerated static field setter
// Set static field: static public OculusConnectionManager/NetworkMode Client
void GlobalNamespace::OculusConnectionManager::NetworkMode::_set_Client(GlobalNamespace::OculusConnectionManager::NetworkMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::NetworkMode::_set_Client");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusConnectionManager/NetworkMode", "Client", value));
}
// Autogenerated static field getter
// Get static field: static public OculusConnectionManager/NetworkMode Server
GlobalNamespace::OculusConnectionManager::NetworkMode GlobalNamespace::OculusConnectionManager::NetworkMode::_get_Server() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::NetworkMode::_get_Server");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OculusConnectionManager::NetworkMode>("", "OculusConnectionManager/NetworkMode", "Server"));
}
// Autogenerated static field setter
// Set static field: static public OculusConnectionManager/NetworkMode Server
void GlobalNamespace::OculusConnectionManager::NetworkMode::_set_Server(GlobalNamespace::OculusConnectionManager::NetworkMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::NetworkMode::_set_Server");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusConnectionManager/NetworkMode", "Server", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusConnectionManager/OculusConnection
#include "GlobalNamespace/OculusConnectionManager_OculusConnection.hpp"
// Including type: OculusConnectionManager/OculusConnection/<>c__DisplayClass15_0
#include "GlobalNamespace/OculusConnectionManager_OculusConnection_--c__DisplayClass15_0.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusConnectionManager/OculusConnection.get_id
uint64_t GlobalNamespace::OculusConnectionManager::OculusConnection::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.get_userId
::Il2CppString* GlobalNamespace::OculusConnectionManager::OculusConnection::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.get_userName
::Il2CppString* GlobalNamespace::OculusConnectionManager::OculusConnection::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.get_isConnectionOwner
bool GlobalNamespace::OculusConnectionManager::OculusConnection::get_isConnectionOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::get_isConnectionOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.Send
void GlobalNamespace::OculusConnectionManager::OculusConnection::Send(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, deliveryMethod);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.Disconnect
void GlobalNamespace::OculusConnectionManager::OculusConnection::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.Ping
void GlobalNamespace::OculusConnectionManager::OculusConnection::Ping(System::Action_2<GlobalNamespace::OculusConnectionManager::OculusConnection*, float>* onPingResult) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::Ping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Ping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onPingResult)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, onPingResult);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.Equals
bool GlobalNamespace::OculusConnectionManager::OculusConnection::Equals(GlobalNamespace::OculusConnectionManager::OculusConnection* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.Equals
bool GlobalNamespace::OculusConnectionManager::OculusConnection::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.GetHashCode
int GlobalNamespace::OculusConnectionManager::OculusConnection::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager/OculusConnection.ToString
::Il2CppString* GlobalNamespace::OculusConnectionManager::OculusConnection::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (OculusConnectionManager::OculusConnection::*)()>(&OculusConnectionManager::OculusConnection::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusConnectionManager::OculusConnection::*)()>(&OculusConnectionManager::OculusConnection::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusConnectionManager::OculusConnection::*)()>(&OculusConnectionManager::OculusConnection::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::OculusConnection::*)()>(&OculusConnectionManager::OculusConnection::get_isConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::*)(uint64_t, ::Il2CppString*, bool)>(&OculusConnectionManager::OculusConnection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::*)(uint64_t, ::Il2CppString*, bool)>(&OculusConnectionManager::OculusConnection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&OculusConnectionManager::OculusConnection::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::DeliveryMethod>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::*)()>(&OculusConnectionManager::OculusConnection::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::Ping
// Il2CppName: Ping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::*)(System::Action_2<GlobalNamespace::OculusConnectionManager::OculusConnection*, float>*)>(&OculusConnectionManager::OculusConnection::Ping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "Ping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::OculusConnectionManager::OculusConnection*, float>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::OculusConnection::*)(GlobalNamespace::OculusConnectionManager::OculusConnection*)>(&OculusConnectionManager::OculusConnection::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OculusConnectionManager::OculusConnection*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusConnectionManager::OculusConnection::*)(::Il2CppObject*)>(&OculusConnectionManager::OculusConnection::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OculusConnectionManager::OculusConnection::*)()>(&OculusConnectionManager::OculusConnection::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusConnectionManager::OculusConnection::*)()>(&OculusConnectionManager::OculusConnection::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusConnectionManager/OculusConnection/<>c__DisplayClass15_0
#include "GlobalNamespace/OculusConnectionManager_OculusConnection_--c__DisplayClass15_0.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.PingResult
#include "Oculus/Platform/Models/PingResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusConnectionManager/OculusConnection/<>c__DisplayClass15_0.<Ping>b__0
void GlobalNamespace::OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::$Ping$b__0(Oculus::Platform::Message_1<Oculus::Platform::Models::PingResult*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::<Ping>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Ping>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::$Ping$b__0
// Il2CppName: <Ping>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::PingResult*>*)>(&OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::$Ping$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0*), "<Ping>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::PingResult*>*>()});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::*)()>(&OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::*)()>(&OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusConnectionManager/StartServerParams
#include "GlobalNamespace/OculusConnectionManager_StartServerParams.hpp"
// Including type: OculusNetworkPlayerModel
#include "GlobalNamespace/OculusNetworkPlayerModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: OculusConnectionManager::StartServerParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::StartServerParams::*)()>(&OculusConnectionManager::StartServerParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::StartServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::StartServerParams::*)()>(&OculusConnectionManager::StartServerParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::StartServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusConnectionManager/ConnectToServerParams
#include "GlobalNamespace/OculusConnectionManager_ConnectToServerParams.hpp"
// Including type: OculusNetworkPlayerModel
#include "GlobalNamespace/OculusNetworkPlayerModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: OculusConnectionManager::ConnectToServerParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::ConnectToServerParams::*)()>(&OculusConnectionManager::ConnectToServerParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::ConnectToServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::ConnectToServerParams::*)()>(&OculusConnectionManager::ConnectToServerParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::ConnectToServerParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusConnectionManager/<HandlePeerConnectionRequest>d__62
#include "GlobalNamespace/OculusConnectionManager_-HandlePeerConnectionRequest-d__62.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.NetworkingPeer
#include "Oculus/Platform/Models/NetworkingPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusConnectionManager/<HandlePeerConnectionRequest>d__62.MoveNext
void GlobalNamespace::OculusConnectionManager::$HandlePeerConnectionRequest$d__62::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::$HandlePeerConnectionRequest$d__62::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: OculusConnectionManager/<HandlePeerConnectionRequest>d__62.SetStateMachine
void GlobalNamespace::OculusConnectionManager::$HandlePeerConnectionRequest$d__62::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::$HandlePeerConnectionRequest$d__62::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: OculusConnectionManager::$HandlePeerConnectionRequest$d__62::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::$HandlePeerConnectionRequest$d__62::*)()>(&OculusConnectionManager::$HandlePeerConnectionRequest$d__62::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::$HandlePeerConnectionRequest$d__62), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusConnectionManager::$HandlePeerConnectionRequest$d__62::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusConnectionManager::$HandlePeerConnectionRequest$d__62::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&OculusConnectionManager::$HandlePeerConnectionRequest$d__62::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusConnectionManager::$HandlePeerConnectionRequest$d__62), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusNetworkPlayerModel
#include "GlobalNamespace/OculusNetworkPlayerModel.hpp"
// Including type: OculusNetworkPlayerModel/OculusNetworkPlayer
#include "GlobalNamespace/OculusNetworkPlayerModel_OculusNetworkPlayer.hpp"
// Including type: OculusNetworkPlayerModel/<Start>d__37
#include "GlobalNamespace/OculusNetworkPlayerModel_-Start-d__37.hpp"
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass45_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass45_0.hpp"
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass46_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass46_0.hpp"
// Including type: OculusNetworkPlayerModel/<HandleRoomInviteReceived>d__46
#include "GlobalNamespace/OculusNetworkPlayerModel_-HandleRoomInviteReceived-d__46.hpp"
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass50_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass50_0.hpp"
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass61_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass61_0.hpp"
// Including type: IPlatformUserModel
#include "GlobalNamespace/IPlatformUserModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: INetworkPlayerModel
#include "GlobalNamespace/INetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: OculusConnectionManager
#include "GlobalNamespace/OculusConnectionManager.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.RoomInviteNotification
#include "Oculus/Platform/Models/RoomInviteNotification.hpp"
// Including type: Oculus.Platform.Models.Room
#include "Oculus/Platform/Models/Room.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: INetworkPlayerModelPartyConfig`1
#include "GlobalNamespace/INetworkPlayerModelPartyConfig_1.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kConnectionTypeKey
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kConnectionTypeKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kConnectionTypeKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kConnectionTypeKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionTypeKey
void GlobalNamespace::OculusNetworkPlayerModel::_set_kConnectionTypeKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kConnectionTypeKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kConnectionTypeKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kConnectionTypeOculus
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kConnectionTypeOculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kConnectionTypeOculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kConnectionTypeOculus"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionTypeOculus
void GlobalNamespace::OculusNetworkPlayerModel::_set_kConnectionTypeOculus(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kConnectionTypeOculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kConnectionTypeOculus", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kConnectionTypeLiteNetLib
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kConnectionTypeLiteNetLib() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kConnectionTypeLiteNetLib");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kConnectionTypeLiteNetLib"));
}
// Autogenerated static field setter
// Set static field: static private System.String kConnectionTypeLiteNetLib
void GlobalNamespace::OculusNetworkPlayerModel::_set_kConnectionTypeLiteNetLib(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kConnectionTypeLiteNetLib");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kConnectionTypeLiteNetLib", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kCurrentPartySizeKey
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kCurrentPartySizeKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kCurrentPartySizeKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kCurrentPartySizeKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCurrentPartySizeKey
void GlobalNamespace::OculusNetworkPlayerModel::_set_kCurrentPartySizeKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kCurrentPartySizeKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kCurrentPartySizeKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMaxPartySizeKey
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kMaxPartySizeKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kMaxPartySizeKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kMaxPartySizeKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMaxPartySizeKey
void GlobalNamespace::OculusNetworkPlayerModel::_set_kMaxPartySizeKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kMaxPartySizeKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kMaxPartySizeKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDifficultiesKey
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kDifficultiesKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kDifficultiesKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kDifficultiesKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDifficultiesKey
void GlobalNamespace::OculusNetworkPlayerModel::_set_kDifficultiesKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kDifficultiesKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kDifficultiesKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kModifiersKey
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kModifiersKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kModifiersKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kModifiersKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kModifiersKey
void GlobalNamespace::OculusNetworkPlayerModel::_set_kModifiersKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kModifiersKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kModifiersKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kSongPacksKey
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::_get_kSongPacksKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kSongPacksKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OculusNetworkPlayerModel", "kSongPacksKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kSongPacksKey
void GlobalNamespace::OculusNetworkPlayerModel::_set_kSongPacksKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kSongPacksKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kSongPacksKey", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kAutoRefreshRate
float GlobalNamespace::OculusNetworkPlayerModel::_get_kAutoRefreshRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_get_kAutoRefreshRate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OculusNetworkPlayerModel", "kAutoRefreshRate"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kAutoRefreshRate
void GlobalNamespace::OculusNetworkPlayerModel::_set_kAutoRefreshRate(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::_set_kAutoRefreshRate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OculusNetworkPlayerModel", "kAutoRefreshRate", value));
}
// Autogenerated method: OculusNetworkPlayerModel.get_oculusConnectionManager
GlobalNamespace::OculusConnectionManager* GlobalNamespace::OculusNetworkPlayerModel::get_oculusConnectionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::get_oculusConnectionManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_oculusConnectionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OculusConnectionManager*, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.GetPlayer
GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* GlobalNamespace::OculusNetworkPlayerModel::GetPlayer(uint64_t id) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*, false>(this, ___internal__method, id);
}
// Autogenerated method: OculusNetworkPlayerModel.GetPlayer
GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* GlobalNamespace::OculusNetworkPlayerModel::GetPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: OculusNetworkPlayerModel.TryCreateRoom
void GlobalNamespace::OculusNetworkPlayerModel::TryCreateRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::TryCreateRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryCreateRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.GetUserName
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::GetUserName(uint64_t id) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::GetUserName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUserName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, id);
}
// Autogenerated method: OculusNetworkPlayerModel.GetUserNameAsync
System::Threading::Tasks::Task_1<::Il2CppString*>* GlobalNamespace::OculusNetworkPlayerModel::GetUserNameAsync(uint64_t id) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::GetUserNameAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUserNameAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Il2CppString*>*, false>(this, ___internal__method, id);
}
// Autogenerated method: OculusNetworkPlayerModel.HandleRoomInviteReceived
void GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteReceived(Oculus::Platform::Message_1<Oculus::Platform::Models::RoomInviteNotification*>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRoomInviteReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: OculusNetworkPlayerModel.HandleRoomInviteAccepted
void GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteAccepted(Oculus::Platform::Message_1<::Il2CppString*>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteAccepted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRoomInviteAccepted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: OculusNetworkPlayerModel.HandleRoomUpdate
void GlobalNamespace::OculusNetworkPlayerModel::HandleRoomUpdate(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::HandleRoomUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRoomUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: OculusNetworkPlayerModel.HandlePlayersChanged
void GlobalNamespace::OculusNetworkPlayerModel::HandlePlayersChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::HandlePlayersChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.Refresh
void GlobalNamespace::OculusNetworkPlayerModel::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.UpdateRoomDataStore
void GlobalNamespace::OculusNetworkPlayerModel::UpdateRoomDataStore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::UpdateRoomDataStore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRoomDataStore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.TryLeaveRoom
void GlobalNamespace::OculusNetworkPlayerModel::TryLeaveRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::TryLeaveRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryLeaveRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.TryConnectToServer
void GlobalNamespace::OculusNetworkPlayerModel::TryConnectToServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::TryConnectToServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryConnectToServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.ShouldAcceptConnectionFromPlayer
System::Threading::Tasks::Task_1<bool>* GlobalNamespace::OculusNetworkPlayerModel::ShouldAcceptConnectionFromPlayer(uint64_t userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::ShouldAcceptConnectionFromPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldAcceptConnectionFromPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<bool>*, false>(this, ___internal__method, userId);
}
// Autogenerated method: OculusNetworkPlayerModel.<TryCreateRoom>b__43_0
void GlobalNamespace::OculusNetworkPlayerModel::$TryCreateRoom$b__43_0(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::<TryCreateRoom>b__43_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TryCreateRoom>b__43_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: OculusNetworkPlayerModel.get_localPlayerIsPartyOwner
bool GlobalNamespace::OculusNetworkPlayerModel::get_localPlayerIsPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::get_localPlayerIsPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.get_localPlayer
GlobalNamespace::INetworkPlayer* GlobalNamespace::OculusNetworkPlayerModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.get_currentPartySize
int GlobalNamespace::OculusNetworkPlayerModel::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.add_partySizeChangedEvent
void GlobalNamespace::OculusNetworkPlayerModel::add_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::add_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel.remove_partySizeChangedEvent
void GlobalNamespace::OculusNetworkPlayerModel::remove_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::remove_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel.add_partyChangedEvent
void GlobalNamespace::OculusNetworkPlayerModel::add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::add_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel.remove_partyChangedEvent
void GlobalNamespace::OculusNetworkPlayerModel::remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::remove_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel.add_inviteRequestedEvent
void GlobalNamespace::OculusNetworkPlayerModel::add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::add_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel.remove_inviteRequestedEvent
void GlobalNamespace::OculusNetworkPlayerModel::remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::remove_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel.Start
void GlobalNamespace::OculusNetworkPlayerModel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.Update
void GlobalNamespace::OculusNetworkPlayerModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.GetPartyPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::OculusNetworkPlayerModel::GetPartyPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::GetPartyPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPartyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.GetOtherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::OculusNetworkPlayerModel::GetOtherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::GetOtherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOtherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.DestroyParty
void GlobalNamespace::OculusNetworkPlayerModel::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::DestroyParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.Disconnect
void GlobalNamespace::OculusNetworkPlayerModel::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel.ConnectionFailed
void GlobalNamespace::OculusNetworkPlayerModel::ConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::ConnectionFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: OculusNetworkPlayerModel.PlayerConnected
void GlobalNamespace::OculusNetworkPlayerModel::PlayerConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::PlayerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: OculusNetworkPlayerModel.PlayerDisconnected
void GlobalNamespace::OculusNetworkPlayerModel::PlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::PlayerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: OculusNetworkPlayerModel.PartySizeChanged
void GlobalNamespace::OculusNetworkPlayerModel::PartySizeChanged(int currentPartySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::PartySizeChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PartySizeChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentPartySize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentPartySize);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::get_oculusConnectionManager
// Il2CppName: get_oculusConnectionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OculusConnectionManager* (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::get_oculusConnectionManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "get_oculusConnectionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* (OculusNetworkPlayerModel::*)(uint64_t)>(&OculusNetworkPlayerModel::GetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* (OculusNetworkPlayerModel::*)(::Il2CppString*)>(&OculusNetworkPlayerModel::GetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::TryCreateRoom
// Il2CppName: TryCreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::TryCreateRoom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "TryCreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::GetUserName
// Il2CppName: GetUserName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusNetworkPlayerModel::*)(uint64_t)>(&OculusNetworkPlayerModel::GetUserName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "GetUserName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::GetUserNameAsync
// Il2CppName: GetUserNameAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<::Il2CppString*>* (OculusNetworkPlayerModel::*)(uint64_t)>(&OculusNetworkPlayerModel::GetUserNameAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "GetUserNameAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::HandleRoomInviteReceived
// Il2CppName: HandleRoomInviteReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::RoomInviteNotification*>*)>(&OculusNetworkPlayerModel::HandleRoomInviteReceived)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "HandleRoomInviteReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::RoomInviteNotification*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::HandleRoomInviteAccepted
// Il2CppName: HandleRoomInviteAccepted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(Oculus::Platform::Message_1<::Il2CppString*>*)>(&OculusNetworkPlayerModel::HandleRoomInviteAccepted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "HandleRoomInviteAccepted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::HandleRoomUpdate
// Il2CppName: HandleRoomUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*)>(&OculusNetworkPlayerModel::HandleRoomUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "HandleRoomUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::HandlePlayersChanged
// Il2CppName: HandlePlayersChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::HandlePlayersChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "HandlePlayersChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::UpdateRoomDataStore
// Il2CppName: UpdateRoomDataStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::UpdateRoomDataStore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "UpdateRoomDataStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::TryLeaveRoom
// Il2CppName: TryLeaveRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::TryLeaveRoom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "TryLeaveRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::TryConnectToServer
// Il2CppName: TryConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::TryConnectToServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "TryConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::ShouldAcceptConnectionFromPlayer
// Il2CppName: ShouldAcceptConnectionFromPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (OculusNetworkPlayerModel::*)(uint64_t)>(&OculusNetworkPlayerModel::ShouldAcceptConnectionFromPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "ShouldAcceptConnectionFromPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$TryCreateRoom$b__43_0
// Il2CppName: <TryCreateRoom>b__43_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*)>(&OculusNetworkPlayerModel::$TryCreateRoom$b__43_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "<TryCreateRoom>b__43_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::get_localPlayerIsPartyOwner
// Il2CppName: get_localPlayerIsPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::get_localPlayerIsPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::add_partySizeChangedEvent
// Il2CppName: add_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(System::Action_1<int>*)>(&OculusNetworkPlayerModel::add_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "add_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::remove_partySizeChangedEvent
// Il2CppName: remove_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(System::Action_1<int>*)>(&OculusNetworkPlayerModel::remove_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "remove_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::add_partyChangedEvent
// Il2CppName: add_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&OculusNetworkPlayerModel::add_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "add_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::remove_partyChangedEvent
// Il2CppName: remove_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&OculusNetworkPlayerModel::remove_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "remove_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&OculusNetworkPlayerModel::add_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&OculusNetworkPlayerModel::remove_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::GetPartyPlayers
// Il2CppName: GetPartyPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::GetPartyPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "GetPartyPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::GetOtherPlayers
// Il2CppName: GetOtherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::GetOtherPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "GetOtherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::CreateParty
// Il2CppName: CreateParty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: OculusNetworkPlayerModel::DestroyParty
// Il2CppName: DestroyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::DestroyParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "DestroyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::ConnectionFailed
// Il2CppName: ConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(GlobalNamespace::ConnectionFailedReason)>(&OculusNetworkPlayerModel::ConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "ConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::PlayerConnected
// Il2CppName: PlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&OculusNetworkPlayerModel::PlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "PlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::PlayerDisconnected
// Il2CppName: PlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&OculusNetworkPlayerModel::PlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "PlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::PartySizeChanged
// Il2CppName: PartySizeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)(int)>(&OculusNetworkPlayerModel::PartySizeChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), "PartySizeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::*)()>(&OculusNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusNetworkPlayerModel/OculusNetworkPlayer
#include "GlobalNamespace/OculusNetworkPlayerModel_OculusNetworkPlayer.hpp"
// Including type: Oculus.Platform.Models.Room
#include "Oculus/Platform/Models/Room.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_id
uint64_t GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_userId
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_userName
::Il2CppString* GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isMe
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isPartyOwner
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPartyOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isRoomOwner
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isRoomOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isRoomOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRoomOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_currentPartySize
int GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_maxPartySize
int GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_difficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_difficulties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_modifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_modifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_songPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_songPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isMyPartyOwner
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMyPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMyPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isOpenParty
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isOpenParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isOpenParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOpenParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isPlayer
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.set_isPlayer
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isPlayer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isSpectating
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.set_isSpectating
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isSpectating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isSpectating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isDedicatedServer
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.set_isDedicatedServer
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isDedicatedServer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isDedicatedServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isConnected
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.set_isConnected
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isConnected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_canJoin
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.Join
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_requiresPassword
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_requiresPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_requiresPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.Join
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Join(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isWaitingOnJoin
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.set_isWaitingOnJoin
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnJoin(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnJoin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_canInvite
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.Invite
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Invite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Invite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_isWaitingOnInvite
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.set_isWaitingOnInvite
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnInvite(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnInvite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_canKick
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canKick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canKick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.Kick
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Kick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Kick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_canLeave
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canLeave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.Leave
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Leave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Leave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_canBlock
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canBlock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.Block
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Block");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.get_canUnblock
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canUnblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::get_canUnblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.Unblock
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Unblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::Unblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.SendJoinResponse
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::SendJoinResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::SendJoinResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.SendInviteResponse
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::SendInviteResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::SendInviteResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.SameRoomAs
bool GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::SameRoomAs(GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::SameRoomAs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SameRoomAs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: OculusNetworkPlayerModel/OculusNetworkPlayer.<Join>b__53_0
void GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::$Join$b__53_0(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::<Join>b__53_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Join>b__53_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPartyOwner
// Il2CppName: get_isPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isRoomOwner
// Il2CppName: get_isRoomOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isRoomOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isRoomOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_difficulties
// Il2CppName: get_difficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_difficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_difficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_modifiers
// Il2CppName: get_modifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifierMask (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_modifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_modifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_songPacks
// Il2CppName: get_songPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_songPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_songPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(GlobalNamespace::OculusNetworkPlayerModel*, uint64_t, ::Il2CppString*, bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OculusNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(GlobalNamespace::OculusNetworkPlayerModel*, uint64_t, ::Il2CppString*, bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OculusNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isMyPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isOpenParty
// Il2CppName: get_isOpenParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isOpenParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isOpenParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPlayer
// Il2CppName: get_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::set_isPlayer
// Il2CppName: set_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::set_isPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "set_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isSpectating
// Il2CppName: get_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::set_isSpectating
// Il2CppName: set_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::set_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "set_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isDedicatedServer
// Il2CppName: get_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::set_isDedicatedServer
// Il2CppName: set_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::set_isDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "set_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::set_isConnected
// Il2CppName: set_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::set_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "set_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_canJoin
// Il2CppName: get_canJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_canJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_canJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_requiresPassword
// Il2CppName: get_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_requiresPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(::Il2CppString*)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnJoin
// Il2CppName: set_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "set_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_canInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::Invite
// Il2CppName: Invite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::Invite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "Invite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_isWaitingOnInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnInvite
// Il2CppName: set_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::set_isWaitingOnInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "set_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_canKick
// Il2CppName: get_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_canKick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::Kick
// Il2CppName: Kick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::Kick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "Kick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_canLeave
// Il2CppName: get_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_canLeave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::Leave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_canBlock
// Il2CppName: get_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_canBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::Block)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::get_canUnblock
// Il2CppName: get_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::get_canUnblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "get_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)()>(&OculusNetworkPlayerModel::OculusNetworkPlayer::Unblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::SendJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(bool)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::SendInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::SameRoomAs
// Il2CppName: SameRoomAs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::SameRoomAs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "SameRoomAs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::OculusNetworkPlayer::$Join$b__53_0
// Il2CppName: <Join>b__53_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::OculusNetworkPlayer::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*)>(&OculusNetworkPlayerModel::OculusNetworkPlayer::$Join$b__53_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::OculusNetworkPlayer*), "<Join>b__53_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusNetworkPlayerModel/<Start>d__37
#include "GlobalNamespace/OculusNetworkPlayerModel_-Start-d__37.hpp"
// Including type: UserInfo
#include "GlobalNamespace/UserInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusNetworkPlayerModel/<Start>d__37.MoveNext
void GlobalNamespace::OculusNetworkPlayerModel::$Start$d__37::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$Start$d__37::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/<Start>d__37.SetStateMachine
void GlobalNamespace::OculusNetworkPlayerModel::$Start$d__37::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$Start$d__37::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$Start$d__37::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$Start$d__37::*)()>(&OculusNetworkPlayerModel::$Start$d__37::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$Start$d__37), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$Start$d__37::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$Start$d__37::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&OculusNetworkPlayerModel::$Start$d__37::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$Start$d__37), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass45_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass45_0.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.User
#include "Oculus/Platform/Models/User.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusNetworkPlayerModel/<>c__DisplayClass45_0.<GetUserNameAsync>b__0
void GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass45_0::$GetUserNameAsync$b__0(Oculus::Platform::Message_1<Oculus::Platform::Models::User*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass45_0::<GetUserNameAsync>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetUserNameAsync>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass45_0::$GetUserNameAsync$b__0
// Il2CppName: <GetUserNameAsync>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass45_0::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::User*>*)>(&OculusNetworkPlayerModel::$$c__DisplayClass45_0::$GetUserNameAsync$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass45_0*), "<GetUserNameAsync>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::User*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass45_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass45_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass45_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass45_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass45_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass45_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass45_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass46_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass46_0.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.Room
#include "Oculus/Platform/Models/Room.hpp"
// Including type: OculusNetworkPlayerModel/OculusNetworkPlayer
#include "GlobalNamespace/OculusNetworkPlayerModel_OculusNetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusNetworkPlayerModel/<>c__DisplayClass46_0.<HandleRoomInviteReceived>b__0
void GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass46_0::$HandleRoomInviteReceived$b__0(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass46_0::<HandleRoomInviteReceived>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleRoomInviteReceived>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass46_0::$HandleRoomInviteReceived$b__0
// Il2CppName: <HandleRoomInviteReceived>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass46_0::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*)>(&OculusNetworkPlayerModel::$$c__DisplayClass46_0::$HandleRoomInviteReceived$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass46_0*), "<HandleRoomInviteReceived>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass46_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass46_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass46_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass46_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass46_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass46_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass46_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusNetworkPlayerModel/<HandleRoomInviteReceived>d__46
#include "GlobalNamespace/OculusNetworkPlayerModel_-HandleRoomInviteReceived-d__46.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.RoomInviteNotification
#include "Oculus/Platform/Models/RoomInviteNotification.hpp"
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass46_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass46_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusNetworkPlayerModel/<HandleRoomInviteReceived>d__46.MoveNext
void GlobalNamespace::OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: OculusNetworkPlayerModel/<HandleRoomInviteReceived>d__46.SetStateMachine
void GlobalNamespace::OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::*)()>(&OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__46), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass50_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass50_0.hpp"
// Including type: Oculus.Platform.Models.UserAndRoomList
#include "Oculus/Platform/Models/UserAndRoomList.hpp"
// Including type: Oculus.Platform.Models.UserList
#include "Oculus/Platform/Models/UserList.hpp"
// Including type: Oculus.Platform.Message`1/Callback
#include "Oculus/Platform/Message_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusNetworkPlayerModel/<>c__DisplayClass50_0.<Refresh>b__0
void GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass50_0::$Refresh$b__0(Oculus::Platform::Message_1<Oculus::Platform::Models::UserAndRoomList*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass50_0::<Refresh>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Refresh>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: OculusNetworkPlayerModel/<>c__DisplayClass50_0.<Refresh>b__1
void GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass50_0::$Refresh$b__1(Oculus::Platform::Message_1<Oculus::Platform::Models::UserList*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass50_0::<Refresh>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Refresh>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass50_0::$Refresh$b__0
// Il2CppName: <Refresh>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass50_0::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::UserAndRoomList*>*)>(&OculusNetworkPlayerModel::$$c__DisplayClass50_0::$Refresh$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass50_0*), "<Refresh>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::UserAndRoomList*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass50_0::$Refresh$b__1
// Il2CppName: <Refresh>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass50_0::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::UserList*>*)>(&OculusNetworkPlayerModel::$$c__DisplayClass50_0::$Refresh$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass50_0*), "<Refresh>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::UserList*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass50_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass50_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass50_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass50_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass50_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass50_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass50_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusNetworkPlayerModel/<>c__DisplayClass61_0
#include "GlobalNamespace/OculusNetworkPlayerModel_--c__DisplayClass61_0.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
// Including type: Oculus.Platform.Models.Room
#include "Oculus/Platform/Models/Room.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusNetworkPlayerModel/<>c__DisplayClass61_0.<ShouldAcceptConnectionFromPlayer>b__0
void GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass61_0::$ShouldAcceptConnectionFromPlayer$b__0(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass61_0::<ShouldAcceptConnectionFromPlayer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ShouldAcceptConnectionFromPlayer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass61_0::$ShouldAcceptConnectionFromPlayer$b__0
// Il2CppName: <ShouldAcceptConnectionFromPlayer>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass61_0::*)(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*)>(&OculusNetworkPlayerModel::$$c__DisplayClass61_0::$ShouldAcceptConnectionFromPlayer$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass61_0*), "<ShouldAcceptConnectionFromPlayer>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>*>()});
  }
};
// Writing MetadataGetter for method: OculusNetworkPlayerModel::$$c__DisplayClass61_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass61_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass61_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass61_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusNetworkPlayerModel::$$c__DisplayClass61_0::*)()>(&OculusNetworkPlayerModel::$$c__DisplayClass61_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusNetworkPlayerModel::$$c__DisplayClass61_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PS4NetworkPlayerModel
#include "GlobalNamespace/PS4NetworkPlayerModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PS4NetworkPlayerModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4NetworkPlayerModel::*)()>(&PS4NetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4NetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4NetworkPlayerModel::*)()>(&PS4NetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4NetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformAuthenticationTokenProvider
#include "GlobalNamespace/PlatformAuthenticationTokenProvider.hpp"
// Including type: PlatformAuthenticationTokenProvider/<>c
#include "GlobalNamespace/PlatformAuthenticationTokenProvider_--c.hpp"
// Including type: PlatformAuthenticationTokenProvider/<GetAuthenticationToken>d__8
#include "GlobalNamespace/PlatformAuthenticationTokenProvider_-GetAuthenticationToken-d__8.hpp"
// Including type: IPlatformUserModel
#include "GlobalNamespace/IPlatformUserModel.hpp"
// Including type: UserInfo
#include "GlobalNamespace/UserInfo.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlatformAuthenticationTokenProvider.get_hashedUserId
::Il2CppString* GlobalNamespace::PlatformAuthenticationTokenProvider::get_hashedUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::get_hashedUserId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hashedUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlatformAuthenticationTokenProvider.GetAuthenticationToken
System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>* GlobalNamespace::PlatformAuthenticationTokenProvider::GetAuthenticationToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::GetAuthenticationToken");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAuthenticationToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::get_hashedUserId
// Il2CppName: get_hashedUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlatformAuthenticationTokenProvider::*)()>(&PlatformAuthenticationTokenProvider::get_hashedUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider*), "get_hashedUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAuthenticationTokenProvider::*)(GlobalNamespace::IPlatformUserModel*, GlobalNamespace::UserInfo*)>(&PlatformAuthenticationTokenProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPlatformUserModel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UserInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAuthenticationTokenProvider::*)(GlobalNamespace::IPlatformUserModel*, GlobalNamespace::UserInfo*)>(&PlatformAuthenticationTokenProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPlatformUserModel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UserInfo*>()});
  }
};
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::GetAuthenticationToken
// Il2CppName: GetAuthenticationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AuthenticationToken>* (PlatformAuthenticationTokenProvider::*)()>(&PlatformAuthenticationTokenProvider::GetAuthenticationToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider*), "GetAuthenticationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformAuthenticationTokenProvider/<>c
#include "GlobalNamespace/PlatformAuthenticationTokenProvider_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly PlatformAuthenticationTokenProvider/<>c <>9
GlobalNamespace::PlatformAuthenticationTokenProvider::$$c* GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::PlatformAuthenticationTokenProvider::$$c*>("", "PlatformAuthenticationTokenProvider/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly PlatformAuthenticationTokenProvider/<>c <>9
void GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_set_$$9(GlobalNamespace::PlatformAuthenticationTokenProvider::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PlatformAuthenticationTokenProvider/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.String,System.Byte> <>9__8_0
System::Func_2<::Il2CppString*, uint8_t>* GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppString*, uint8_t>*>("", "PlatformAuthenticationTokenProvider/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.String,System.Byte> <>9__8_0
void GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_set_$$9__8_0(System::Func_2<::Il2CppString*, uint8_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "PlatformAuthenticationTokenProvider/<>c", "<>9__8_0", value)));
}
// Autogenerated method: PlatformAuthenticationTokenProvider/<>c..cctor
void GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlatformAuthenticationTokenProvider/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PlatformAuthenticationTokenProvider/<>c.<GetAuthenticationToken>b__8_0
uint8_t GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::$GetAuthenticationToken$b__8_0(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$$c::<GetAuthenticationToken>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAuthenticationToken>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(this, ___internal__method, s);
}
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlatformAuthenticationTokenProvider::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::$$c::$GetAuthenticationToken$b__8_0
// Il2CppName: <GetAuthenticationToken>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (PlatformAuthenticationTokenProvider::$$c::*)(::Il2CppString*)>(&PlatformAuthenticationTokenProvider::$$c::$GetAuthenticationToken$b__8_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider::$$c*), "<GetAuthenticationToken>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAuthenticationTokenProvider::$$c::*)()>(&PlatformAuthenticationTokenProvider::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAuthenticationTokenProvider::$$c::*)()>(&PlatformAuthenticationTokenProvider::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlatformAuthenticationTokenProvider/<GetAuthenticationToken>d__8
#include "GlobalNamespace/PlatformAuthenticationTokenProvider_-GetAuthenticationToken-d__8.hpp"
// Including type: PlatformUserAuthTokenData
#include "GlobalNamespace/PlatformUserAuthTokenData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlatformAuthenticationTokenProvider/<GetAuthenticationToken>d__8.MoveNext
void GlobalNamespace::PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: PlatformAuthenticationTokenProvider/<GetAuthenticationToken>d__8.SetStateMachine
void GlobalNamespace::PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::*)()>(&PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__8), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlatformNetworkPlayerModel
#include "GlobalNamespace/PlatformNetworkPlayerModel.hpp"
// Including type: PlatformNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/PlatformNetworkPlayerModel_CreatePartyConfig.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlatformNetworkPlayerModel.get_friends
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::PlatformNetworkPlayerModel::get_friends() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformNetworkPlayerModel::get_friends");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_friends", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlatformNetworkPlayerModel::get_friends
// Il2CppName: get_friends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (PlatformNetworkPlayerModel::*)()>(&PlatformNetworkPlayerModel::get_friends)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformNetworkPlayerModel*), "get_friends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlatformNetworkPlayerModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformNetworkPlayerModel::*)()>(&PlatformNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformNetworkPlayerModel::*)()>(&PlatformNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlatformNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/PlatformNetworkPlayerModel_CreatePartyConfig.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlatformNetworkPlayerModel::CreatePartyConfig::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformNetworkPlayerModel::CreatePartyConfig::*)()>(&PlatformNetworkPlayerModel::CreatePartyConfig::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformNetworkPlayerModel::CreatePartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformNetworkPlayerModel::CreatePartyConfig::*)()>(&PlatformNetworkPlayerModel::CreatePartyConfig::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformNetworkPlayerModel::CreatePartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SceneStartSyncController
#include "GlobalNamespace/SceneStartSyncController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: SceneStartHandler
#include "GlobalNamespace/SceneStartHandler.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kLoadOtherTimeout
float GlobalNamespace::SceneStartSyncController::_get_kLoadOtherTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::_get_kLoadOtherTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SceneStartSyncController", "kLoadOtherTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLoadOtherTimeout
void GlobalNamespace::SceneStartSyncController::_set_kLoadOtherTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::_set_kLoadOtherTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneStartSyncController", "kLoadOtherTimeout", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kLoadSelfTimeout
float GlobalNamespace::SceneStartSyncController::_get_kLoadSelfTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::_get_kLoadSelfTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SceneStartSyncController", "kLoadSelfTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLoadSelfTimeout
void GlobalNamespace::SceneStartSyncController::_set_kLoadSelfTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::_set_kLoadSelfTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SceneStartSyncController", "kLoadSelfTimeout", value));
}
// Autogenerated method: SceneStartSyncController.add_syncStartDidSuccessEvent
void GlobalNamespace::SceneStartSyncController::add_syncStartDidSuccessEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::add_syncStartDidSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncStartDidSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartSyncController.remove_syncStartDidSuccessEvent
void GlobalNamespace::SceneStartSyncController::remove_syncStartDidSuccessEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::remove_syncStartDidSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncStartDidSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartSyncController.add_syncStartDidReceiveTooLateEvent
void GlobalNamespace::SceneStartSyncController::add_syncStartDidReceiveTooLateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::add_syncStartDidReceiveTooLateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncStartDidReceiveTooLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartSyncController.remove_syncStartDidReceiveTooLateEvent
void GlobalNamespace::SceneStartSyncController::remove_syncStartDidReceiveTooLateEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::remove_syncStartDidReceiveTooLateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncStartDidReceiveTooLateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartSyncController.add_syncStartDidFailEvent
void GlobalNamespace::SceneStartSyncController::add_syncStartDidFailEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::add_syncStartDidFailEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncStartDidFailEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartSyncController.remove_syncStartDidFailEvent
void GlobalNamespace::SceneStartSyncController::remove_syncStartDidFailEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::remove_syncStartDidFailEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncStartDidFailEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SceneStartSyncController.Start
void GlobalNamespace::SceneStartSyncController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneStartSyncController.Update
void GlobalNamespace::SceneStartSyncController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneStartSyncController.OnDestroy
void GlobalNamespace::SceneStartSyncController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SceneStartSyncController.StartSceneLoadSync
void GlobalNamespace::SceneStartSyncController::StartSceneLoadSync(GlobalNamespace::PlayersSpecificSettingsAtGameStartModel* playersAtGameStartModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::StartSceneLoadSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSceneLoadSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playersAtGameStartModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playersAtGameStartModel);
}
// Autogenerated method: SceneStartSyncController.HandleSceneSetupDidFinish
void GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidFinish(::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneSetupDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sessionGameId);
}
// Autogenerated method: SceneStartSyncController.HandleSceneSetupDidReceiveTooLate
void GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidReceiveTooLate(::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidReceiveTooLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSceneSetupDidReceiveTooLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sessionGameId);
}
// Writing MetadataGetter for method: SceneStartSyncController::add_syncStartDidSuccessEvent
// Il2CppName: add_syncStartDidSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartSyncController::add_syncStartDidSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "add_syncStartDidSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::remove_syncStartDidSuccessEvent
// Il2CppName: remove_syncStartDidSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartSyncController::remove_syncStartDidSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "remove_syncStartDidSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::add_syncStartDidReceiveTooLateEvent
// Il2CppName: add_syncStartDidReceiveTooLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartSyncController::add_syncStartDidReceiveTooLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "add_syncStartDidReceiveTooLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::remove_syncStartDidReceiveTooLateEvent
// Il2CppName: remove_syncStartDidReceiveTooLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(System::Action_1<::Il2CppString*>*)>(&SceneStartSyncController::remove_syncStartDidReceiveTooLateEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "remove_syncStartDidReceiveTooLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::add_syncStartDidFailEvent
// Il2CppName: add_syncStartDidFailEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(System::Action*)>(&SceneStartSyncController::add_syncStartDidFailEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "add_syncStartDidFailEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::remove_syncStartDidFailEvent
// Il2CppName: remove_syncStartDidFailEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(System::Action*)>(&SceneStartSyncController::remove_syncStartDidFailEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "remove_syncStartDidFailEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)()>(&SceneStartSyncController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)()>(&SceneStartSyncController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)()>(&SceneStartSyncController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::StartSceneLoadSync
// Il2CppName: StartSceneLoadSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*)>(&SceneStartSyncController::StartSceneLoadSync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "StartSceneLoadSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::HandleSceneSetupDidFinish
// Il2CppName: HandleSceneSetupDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(::Il2CppString*)>(&SceneStartSyncController::HandleSceneSetupDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "HandleSceneSetupDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::HandleSceneSetupDidReceiveTooLate
// Il2CppName: HandleSceneSetupDidReceiveTooLate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)(::Il2CppString*)>(&SceneStartSyncController::HandleSceneSetupDidReceiveTooLate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), "HandleSceneSetupDidReceiveTooLate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SceneStartSyncController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)()>(&SceneStartSyncController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneStartSyncController::*)()>(&SceneStartSyncController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneStartSyncController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreSyncStateManager
#include "GlobalNamespace/ScoreSyncStateManager.hpp"
// Including type: StandardScoreSyncStateNetSerializable
#include "GlobalNamespace/StandardScoreSyncStateNetSerializable.hpp"
// Including type: StandardScoreSyncStateDeltaNetSerializable
#include "GlobalNamespace/StandardScoreSyncStateDeltaNetSerializable.hpp"
// Including type: IPacketPool`1
#include "GlobalNamespace/IPacketPool_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScoreSyncStateManager.get_serializablePool
GlobalNamespace::IPacketPool_1<GlobalNamespace::StandardScoreSyncStateNetSerializable*>* GlobalNamespace::ScoreSyncStateManager::get_serializablePool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_serializablePool");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serializablePool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPacketPool_1<GlobalNamespace::StandardScoreSyncStateNetSerializable*>*, false>(this, ___internal__method);
}
// Autogenerated method: ScoreSyncStateManager.get_deltaSerializablePool
GlobalNamespace::IPacketPool_1<GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable*>* GlobalNamespace::ScoreSyncStateManager::get_deltaSerializablePool() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_deltaSerializablePool");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaSerializablePool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPacketPool_1<GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable*>*, false>(this, ___internal__method);
}
// Autogenerated method: ScoreSyncStateManager.Interpolate
int GlobalNamespace::ScoreSyncStateManager::Interpolate(int prev, float prevTime, int curr, float currTime, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::Interpolate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prev), ::il2cpp_utils::ExtractType(prevTime), ::il2cpp_utils::ExtractType(curr), ::il2cpp_utils::ExtractType(currTime), ::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, prev, prevTime, curr, currTime, time);
}
// Autogenerated method: ScoreSyncStateManager.get_deltaUpdateFrequency
float GlobalNamespace::ScoreSyncStateManager::get_deltaUpdateFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_deltaUpdateFrequency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaUpdateFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ScoreSyncStateManager.get_fullStateUpdateFrequency
float GlobalNamespace::ScoreSyncStateManager::get_fullStateUpdateFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_fullStateUpdateFrequency");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fullStateUpdateFrequency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ScoreSyncStateManager.get_localBufferSize
int GlobalNamespace::ScoreSyncStateManager::get_localBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_localBufferSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ScoreSyncStateManager.get_remoteBufferSize
int GlobalNamespace::ScoreSyncStateManager::get_remoteBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_remoteBufferSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_remoteBufferSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ScoreSyncStateManager.get_messageType
GlobalNamespace::MultiplayerSessionManager_MessageType GlobalNamespace::ScoreSyncStateManager::get_messageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_messageType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_messageType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerSessionManager_MessageType, false>(this, ___internal__method);
}
// Autogenerated method: ScoreSyncStateManager.get_deltaMessageType
GlobalNamespace::MultiplayerSessionManager_MessageType GlobalNamespace::ScoreSyncStateManager::get_deltaMessageType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreSyncStateManager::get_deltaMessageType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaMessageType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerSessionManager_MessageType, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ScoreSyncStateManager::get_serializablePool
// Il2CppName: get_serializablePool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPacketPool_1<GlobalNamespace::StandardScoreSyncStateNetSerializable*>* (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_serializablePool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_serializablePool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::get_deltaSerializablePool
// Il2CppName: get_deltaSerializablePool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPacketPool_1<GlobalNamespace::StandardScoreSyncStateDeltaNetSerializable*>* (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_deltaSerializablePool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_deltaSerializablePool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::Interpolate
// Il2CppName: Interpolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreSyncStateManager::*)(int, float, int, float, float)>(&ScoreSyncStateManager::Interpolate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "Interpolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::get_deltaUpdateFrequency
// Il2CppName: get_deltaUpdateFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_deltaUpdateFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_deltaUpdateFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::get_fullStateUpdateFrequency
// Il2CppName: get_fullStateUpdateFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_fullStateUpdateFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_fullStateUpdateFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::get_localBufferSize
// Il2CppName: get_localBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_localBufferSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_localBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::get_remoteBufferSize
// Il2CppName: get_remoteBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_remoteBufferSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_remoteBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::get_messageType
// Il2CppName: get_messageType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerSessionManager_MessageType (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_messageType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_messageType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::get_deltaMessageType
// Il2CppName: get_deltaMessageType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerSessionManager_MessageType (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::get_deltaMessageType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), "get_deltaMessageType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreSyncStateManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreSyncStateManager::*)()>(&ScoreSyncStateManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreSyncStateManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongStartSyncController
#include "GlobalNamespace/SongStartSyncController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: IGameplayRpcManager
#include "GlobalNamespace/IGameplayRpcManager.hpp"
// Including type: SongStartHandler
#include "GlobalNamespace/SongStartHandler.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: PlayersSpecificSettingsAtGameStartModel
#include "GlobalNamespace/PlayersSpecificSettingsAtGameStartModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kAudioLoadTimeoutForceStart
float GlobalNamespace::SongStartSyncController::_get_kAudioLoadTimeoutForceStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::_get_kAudioLoadTimeoutForceStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SongStartSyncController", "kAudioLoadTimeoutForceStart"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kAudioLoadTimeoutForceStart
void GlobalNamespace::SongStartSyncController::_set_kAudioLoadTimeoutForceStart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::_set_kAudioLoadTimeoutForceStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongStartSyncController", "kAudioLoadTimeoutForceStart", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kAudioLoadTimeout
float GlobalNamespace::SongStartSyncController::_get_kAudioLoadTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::_get_kAudioLoadTimeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SongStartSyncController", "kAudioLoadTimeout"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kAudioLoadTimeout
void GlobalNamespace::SongStartSyncController::_set_kAudioLoadTimeout(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::_set_kAudioLoadTimeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SongStartSyncController", "kAudioLoadTimeout", value));
}
// Autogenerated method: SongStartSyncController.get_isSongStarted
bool GlobalNamespace::SongStartSyncController::get_isSongStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::get_isSongStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSongStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SongStartSyncController.get_songStartSyncTime
float GlobalNamespace::SongStartSyncController::get_songStartSyncTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::get_songStartSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songStartSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SongStartSyncController.add_syncStartFailedEvent
void GlobalNamespace::SongStartSyncController::add_syncStartFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::add_syncStartFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncStartFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartSyncController.remove_syncStartFailedEvent
void GlobalNamespace::SongStartSyncController::remove_syncStartFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::remove_syncStartFailedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncStartFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartSyncController.add_syncStartSuccessEvent
void GlobalNamespace::SongStartSyncController::add_syncStartSuccessEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::add_syncStartSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncStartSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartSyncController.remove_syncStartSuccessEvent
void GlobalNamespace::SongStartSyncController::remove_syncStartSuccessEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::remove_syncStartSuccessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncStartSuccessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartSyncController.add_syncResumeEvent
void GlobalNamespace::SongStartSyncController::add_syncResumeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::add_syncResumeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_syncResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartSyncController.remove_syncResumeEvent
void GlobalNamespace::SongStartSyncController::remove_syncResumeEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::remove_syncResumeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_syncResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongStartSyncController.Start
void GlobalNamespace::SongStartSyncController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongStartSyncController.OnDestroy
void GlobalNamespace::SongStartSyncController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongStartSyncController.Update
void GlobalNamespace::SongStartSyncController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongStartSyncController.OnApplicationPause
void GlobalNamespace::SongStartSyncController::OnApplicationPause(bool pauseStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::OnApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pauseStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pauseStatus);
}
// Autogenerated method: SongStartSyncController.StartSong
void GlobalNamespace::SongStartSyncController::StartSong(GlobalNamespace::PlayersSpecificSettingsAtGameStartModel* playersSpecificSettingsAtGameStartModel, ::Il2CppString* sessionGameId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::StartSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playersSpecificSettingsAtGameStartModel), ::il2cpp_utils::ExtractType(sessionGameId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playersSpecificSettingsAtGameStartModel, sessionGameId);
}
// Autogenerated method: SongStartSyncController.HandleSetSongStartSyncTime
void GlobalNamespace::SongStartSyncController::HandleSetSongStartSyncTime(float songStartSyncTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::HandleSetSongStartSyncTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSetSongStartSyncTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songStartSyncTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songStartSyncTime);
}
// Writing MetadataGetter for method: SongStartSyncController::get_isSongStarted
// Il2CppName: get_isSongStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongStartSyncController::*)()>(&SongStartSyncController::get_isSongStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "get_isSongStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::get_songStartSyncTime
// Il2CppName: get_songStartSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SongStartSyncController::*)()>(&SongStartSyncController::get_songStartSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "get_songStartSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::add_syncStartFailedEvent
// Il2CppName: add_syncStartFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(System::Action*)>(&SongStartSyncController::add_syncStartFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "add_syncStartFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::remove_syncStartFailedEvent
// Il2CppName: remove_syncStartFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(System::Action*)>(&SongStartSyncController::remove_syncStartFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "remove_syncStartFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::add_syncStartSuccessEvent
// Il2CppName: add_syncStartSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(System::Action_1<float>*)>(&SongStartSyncController::add_syncStartSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "add_syncStartSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::remove_syncStartSuccessEvent
// Il2CppName: remove_syncStartSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(System::Action_1<float>*)>(&SongStartSyncController::remove_syncStartSuccessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "remove_syncStartSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::add_syncResumeEvent
// Il2CppName: add_syncResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(System::Action_1<float>*)>(&SongStartSyncController::add_syncResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "add_syncResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::remove_syncResumeEvent
// Il2CppName: remove_syncResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(System::Action_1<float>*)>(&SongStartSyncController::remove_syncResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "remove_syncResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)()>(&SongStartSyncController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)()>(&SongStartSyncController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)()>(&SongStartSyncController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(bool)>(&SongStartSyncController::OnApplicationPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::StartSong
// Il2CppName: StartSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*, ::Il2CppString*)>(&SongStartSyncController::StartSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "StartSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::HandleSetSongStartSyncTime
// Il2CppName: HandleSetSongStartSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)(float)>(&SongStartSyncController::HandleSetSongStartSyncTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), "HandleSetSongStartSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SongStartSyncController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)()>(&SongStartSyncController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongStartSyncController::*)()>(&SongStartSyncController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongStartSyncController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamNetworkPlayerModel
#include "GlobalNamespace/SteamNetworkPlayerModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SteamNetworkPlayerModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNetworkPlayerModel::*)()>(&SteamNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamNetworkPlayerModel::*)()>(&SteamNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel
#include "GlobalNamespace/UnifiedNetworkPlayerModel.hpp"
// Including type: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer
#include "GlobalNamespace/UnifiedNetworkPlayerModel_UnifiedNetworkPlayer.hpp"
// Including type: UnifiedNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/UnifiedNetworkPlayerModel_CreatePartyConfig.hpp"
// Including type: UnifiedNetworkPlayerModel/UnifiedNetworkServer
#include "GlobalNamespace/UnifiedNetworkPlayerModel_UnifiedNetworkServer.hpp"
// Including type: UnifiedNetworkPlayerModel/<get_friends>d__80
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-get_friends-d__80.hpp"
// Including type: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-get_localNetworkPlayers-d__82.hpp"
// Including type: UnifiedNetworkPlayerModel/<Start>d__89
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-Start-d__89.hpp"
// Including type: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-GetPartyPlayers-d__91.hpp"
// Including type: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-GetOtherPlayers-d__92.hpp"
// Including type: UnifiedNetworkPlayerModel/<>c__DisplayClass94_0
#include "GlobalNamespace/UnifiedNetworkPlayerModel_--c__DisplayClass94_0.hpp"
// Including type: UnifiedNetworkPlayerModel/<>c
#include "GlobalNamespace/UnifiedNetworkPlayerModel_--c.hpp"
// Including type: PlatformNetworkPlayerModel
#include "GlobalNamespace/PlatformNetworkPlayerModel.hpp"
// Including type: LocalNetworkPlayerModel
#include "GlobalNamespace/LocalNetworkPlayerModel.hpp"
// Including type: IPlatformUserModel
#include "GlobalNamespace/IPlatformUserModel.hpp"
// Including type: INetworkConfig
#include "GlobalNamespace/INetworkConfig.hpp"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: INetworkPlayerModel
#include "GlobalNamespace/INetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: PartyMessageHandler
#include "GlobalNamespace/PartyMessageHandler.hpp"
// Including type: MasterServerConnectionManager
#include "GlobalNamespace/MasterServerConnectionManager.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: INetworkPlayerModelPartyConfig`1
#include "GlobalNamespace/INetworkPlayerModelPartyConfig_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kServerRefreshFrequency
float GlobalNamespace::UnifiedNetworkPlayerModel::_get_kServerRefreshFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::_get_kServerRefreshFrequency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "UnifiedNetworkPlayerModel", "kServerRefreshFrequency"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kServerRefreshFrequency
void GlobalNamespace::UnifiedNetworkPlayerModel::_set_kServerRefreshFrequency(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::_set_kServerRefreshFrequency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnifiedNetworkPlayerModel", "kServerRefreshFrequency", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kServerTimeoutPeriod
float GlobalNamespace::UnifiedNetworkPlayerModel::_get_kServerTimeoutPeriod() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::_get_kServerTimeoutPeriod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "UnifiedNetworkPlayerModel", "kServerTimeoutPeriod"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kServerTimeoutPeriod
void GlobalNamespace::UnifiedNetworkPlayerModel::_set_kServerTimeoutPeriod(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::_set_kServerTimeoutPeriod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "UnifiedNetworkPlayerModel", "kServerTimeoutPeriod", value));
}
// Autogenerated method: UnifiedNetworkPlayerModel.add_partyRefreshingEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::add_partyRefreshingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::add_partyRefreshingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.remove_partyRefreshingEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::remove_partyRefreshingEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::remove_partyRefreshingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyRefreshingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_hasNetworkingFailed
bool GlobalNamespace::UnifiedNetworkPlayerModel::get_hasNetworkingFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_hasNetworkingFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasNetworkingFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_isMasterServerReachable
bool GlobalNamespace::UnifiedNetworkPlayerModel::get_isMasterServerReachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_isMasterServerReachable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMasterServerReachable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_masterServerConnectionManager
GlobalNamespace::MasterServerConnectionManager* GlobalNamespace::UnifiedNetworkPlayerModel::get_masterServerConnectionManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_masterServerConnectionManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_masterServerConnectionManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MasterServerConnectionManager*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_endPoint
System::Net::IPEndPoint* GlobalNamespace::UnifiedNetworkPlayerModel::get_endPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_endPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_endPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_userId
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_userName
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_secret
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_secret() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_secret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_code
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_code() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_code");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_serverName
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_serverName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_serverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_password
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_password() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_password");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_password", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_serverUserId
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_serverUserId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_serverUserId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverUserId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_serverUserName
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::get_serverUserName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_serverUserName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverUserName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_discoveryPolicy
GlobalNamespace::DiscoveryPolicy GlobalNamespace::UnifiedNetworkPlayerModel::get_discoveryPolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_discoveryPolicy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_discoveryPolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::DiscoveryPolicy, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_invitePolicy
GlobalNamespace::InvitePolicy GlobalNamespace::UnifiedNetworkPlayerModel::get_invitePolicy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_invitePolicy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_invitePolicy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::InvitePolicy, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_serverFilter
GlobalNamespace::GameplayServerFilter GlobalNamespace::UnifiedNetworkPlayerModel::get_serverFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_serverFilter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerFilter, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_publicServers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::get_publicServers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_publicServers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_publicServers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_friends
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::get_friends() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_friends");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_friends", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_localNetworkPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::get_localNetworkPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_localNetworkPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localNetworkPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_enableFriends
bool GlobalNamespace::UnifiedNetworkPlayerModel::get_enableFriends() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_enableFriends");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableFriends", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.set_enableFriends
void GlobalNamespace::UnifiedNetworkPlayerModel::set_enableFriends(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::set_enableFriends");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableFriends", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_enableLocalNetwork
bool GlobalNamespace::UnifiedNetworkPlayerModel::get_enableLocalNetwork() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_enableLocalNetwork");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableLocalNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.set_enableLocalNetwork
void GlobalNamespace::UnifiedNetworkPlayerModel::set_enableLocalNetwork(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::set_enableLocalNetwork");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableLocalNetwork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.SetServerFilter
void GlobalNamespace::UnifiedNetworkPlayerModel::SetServerFilter(GlobalNamespace::GameplayServerFilter filter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::SetServerFilter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetServerFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, filter);
}
// Autogenerated method: UnifiedNetworkPlayerModel.Refresh
void GlobalNamespace::UnifiedNetworkPlayerModel::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.RefreshParties
void GlobalNamespace::UnifiedNetworkPlayerModel::RefreshParties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::RefreshParties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshParties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandlePlayersChanged
void GlobalNamespace::UnifiedNetworkPlayerModel::HandlePlayersChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandlePlayersChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayersChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleInviteRequested
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleInviteRequested(GlobalNamespace::INetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleInviteRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInviteRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleJoinRequested
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleJoinRequested(GlobalNamespace::INetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleJoinRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoinRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandlePartyChanged
void GlobalNamespace::UnifiedNetworkPlayerModel::HandlePartyChanged(GlobalNamespace::INetworkPlayerModel* playerModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandlePartyChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePartyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playerModel);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleLocalPlayerConnnected
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleLocalPlayerConnnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleLocalPlayerConnnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLocalPlayerConnnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleFriendConnected
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleFriendConnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleFriendConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFriendConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleLocalPlayerConnectToMasterServer
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleLocalPlayerConnectToMasterServer(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* serverUserId, ::Il2CppString* serverUserName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleLocalPlayerConnectToMasterServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLocalPlayerConnectToMasterServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(serverUserId), ::il2cpp_utils::ExtractType(serverUserName), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, serverName, password, secret, serverUserId, serverUserName, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleFriendConnectToMasterServer
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleFriendConnectToMasterServer(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* serverUserId, ::Il2CppString* serverUserName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleFriendConnectToMasterServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFriendConnectToMasterServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(serverUserId), ::il2cpp_utils::ExtractType(serverUserName), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, endPoint, serverName, password, secret, serverUserId, serverUserName, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleServerStatusChanged
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleServerStatusChanged(::Il2CppString* serverName, ::Il2CppString* password, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleServerStatusChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerStatusChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(password), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(invitePolicy), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverName, password, discoveryPolicy, invitePolicy, maxPlayerCount, configuration);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleConnectedPlayerManagerCreated
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerCreated(GlobalNamespace::INetworkPlayerModel* networkPlayerModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerCreated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectedPlayerManagerCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(networkPlayerModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, networkPlayerModel);
}
// Autogenerated method: UnifiedNetworkPlayerModel.HandleConnectedPlayerManagerDestroyed
void GlobalNamespace::UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerDestroyed(GlobalNamespace::INetworkPlayerModel* networkPlayerModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerDestroyed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectedPlayerManagerDestroyed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(networkPlayerModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, networkPlayerModel);
}
// Autogenerated method: UnifiedNetworkPlayerModel.ResetMasterServerReachability
void GlobalNamespace::UnifiedNetworkPlayerModel::ResetMasterServerReachability() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::ResetMasterServerReachability");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetMasterServerReachability", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.ConnectToServerWithCode
void GlobalNamespace::UnifiedNetworkPlayerModel::ConnectToServerWithCode(::Il2CppString* serverCode, ::Il2CppString* serverPassword) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::ConnectToServerWithCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServerWithCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverCode), ::il2cpp_utils::ExtractType(serverPassword)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverCode, serverPassword);
}
// Autogenerated method: UnifiedNetworkPlayerModel.ConnectToServerWithSecret
void GlobalNamespace::UnifiedNetworkPlayerModel::ConnectToServerWithSecret(::Il2CppString* serverSecret) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::ConnectToServerWithSecret");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectToServerWithSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverSecret)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverSecret);
}
// Autogenerated method: UnifiedNetworkPlayerModel.JoinMatchmaking
void GlobalNamespace::UnifiedNetworkPlayerModel::JoinMatchmaking(GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::DiscoveryPolicy discoveryPolicy, ::Il2CppString* secret, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::JoinMatchmaking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinMatchmaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configuration), ::il2cpp_utils::ExtractType(discoveryPolicy), ::il2cpp_utils::ExtractType(secret), ::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configuration, discoveryPolicy, secret, code);
}
// Autogenerated method: UnifiedNetworkPlayerModel.GetPlayer
GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer* GlobalNamespace::UnifiedNetworkPlayerModel::GetPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::GetPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*, false>(this, ___internal__method, userId);
}
// Autogenerated method: UnifiedNetworkPlayerModel.GetServer
GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer* GlobalNamespace::UnifiedNetworkPlayerModel::GetServer(::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::GetServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer*, false>(this, ___internal__method, code);
}
// Autogenerated method: UnifiedNetworkPlayerModel.add_partySizeChangedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::add_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::add_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.remove_partySizeChangedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::remove_partySizeChangedEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::remove_partySizeChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partySizeChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.add_partyChangedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::add_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.remove_partyChangedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::remove_partyChangedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_partyChangedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.add_joinRequestedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::add_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::add_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.remove_joinRequestedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::remove_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::remove_joinRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joinRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.add_inviteRequestedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::add_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.remove_inviteRequestedEvent
void GlobalNamespace::UnifiedNetworkPlayerModel::remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::remove_inviteRequestedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inviteRequestedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_localPlayerIsPartyOwner
bool GlobalNamespace::UnifiedNetworkPlayerModel::get_localPlayerIsPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_localPlayerIsPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_localPlayer
GlobalNamespace::INetworkPlayer* GlobalNamespace::UnifiedNetworkPlayerModel::get_localPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_localPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_maxPartySize
int GlobalNamespace::UnifiedNetworkPlayerModel::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_configuration
GlobalNamespace::GameplayServerConfiguration GlobalNamespace::UnifiedNetworkPlayerModel::get_configuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_configuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_configuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayServerConfiguration, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.get_currentPartySize
int GlobalNamespace::UnifiedNetworkPlayerModel::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.Start
void GlobalNamespace::UnifiedNetworkPlayerModel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.Update
void GlobalNamespace::UnifiedNetworkPlayerModel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.GetPartyPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::GetPartyPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::GetPartyPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPartyPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.GetOtherPlayers
System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::GetOtherPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::GetOtherPlayers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOtherPlayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.Disconnect
void GlobalNamespace::UnifiedNetworkPlayerModel::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::Disconnect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.Disconnected
void GlobalNamespace::UnifiedNetworkPlayerModel::Disconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::Disconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: UnifiedNetworkPlayerModel.ConnectionFailed
void GlobalNamespace::UnifiedNetworkPlayerModel::ConnectionFailed(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::ConnectionFailed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Autogenerated method: UnifiedNetworkPlayerModel.ConnectedPlayerManagerChanged
void GlobalNamespace::UnifiedNetworkPlayerModel::ConnectedPlayerManagerChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::ConnectedPlayerManagerChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectedPlayerManagerChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.DestroyParty
void GlobalNamespace::UnifiedNetworkPlayerModel::DestroyParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::DestroyParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel.PlayerConnected
void GlobalNamespace::UnifiedNetworkPlayerModel::PlayerConnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::PlayerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: UnifiedNetworkPlayerModel.PlayerDisconnected
void GlobalNamespace::UnifiedNetworkPlayerModel::PlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::PlayerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, player);
}
// Autogenerated method: UnifiedNetworkPlayerModel.PlayerStateChanged
void GlobalNamespace::UnifiedNetworkPlayerModel::PlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::PlayerStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: UnifiedNetworkPlayerModel.PlayerOrderChanged
void GlobalNamespace::UnifiedNetworkPlayerModel::PlayerOrderChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::PlayerOrderChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayerOrderChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::add_partyRefreshingEvent
// Il2CppName: add_partyRefreshingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action*)>(&UnifiedNetworkPlayerModel::add_partyRefreshingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "add_partyRefreshingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::remove_partyRefreshingEvent
// Il2CppName: remove_partyRefreshingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action*)>(&UnifiedNetworkPlayerModel::remove_partyRefreshingEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "remove_partyRefreshingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_hasNetworkingFailed
// Il2CppName: get_hasNetworkingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_hasNetworkingFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_hasNetworkingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_isMasterServerReachable
// Il2CppName: get_isMasterServerReachable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_isMasterServerReachable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_isMasterServerReachable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_masterServerConnectionManager
// Il2CppName: get_masterServerConnectionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MasterServerConnectionManager* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_masterServerConnectionManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_masterServerConnectionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_endPoint
// Il2CppName: get_endPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPEndPoint* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_endPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_endPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_secret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_code
// Il2CppName: get_code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_code)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_serverName
// Il2CppName: get_serverName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_serverName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_serverName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_password
// Il2CppName: get_password
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_password)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_password", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_serverUserId
// Il2CppName: get_serverUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_serverUserId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_serverUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_serverUserName
// Il2CppName: get_serverUserName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_serverUserName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_serverUserName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_discoveryPolicy
// Il2CppName: get_discoveryPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DiscoveryPolicy (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_discoveryPolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_discoveryPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_invitePolicy
// Il2CppName: get_invitePolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::InvitePolicy (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_invitePolicy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_invitePolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_serverFilter
// Il2CppName: get_serverFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerFilter (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_serverFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_serverFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_publicServers
// Il2CppName: get_publicServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_publicServers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_publicServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_friends
// Il2CppName: get_friends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_friends)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_friends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_localNetworkPlayers
// Il2CppName: get_localNetworkPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_localNetworkPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_localNetworkPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_enableFriends
// Il2CppName: get_enableFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_enableFriends)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_enableFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::set_enableFriends
// Il2CppName: set_enableFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(bool)>(&UnifiedNetworkPlayerModel::set_enableFriends)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "set_enableFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_enableLocalNetwork
// Il2CppName: get_enableLocalNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_enableLocalNetwork)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_enableLocalNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::set_enableLocalNetwork
// Il2CppName: set_enableLocalNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(bool)>(&UnifiedNetworkPlayerModel::set_enableLocalNetwork)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "set_enableLocalNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::SetServerFilter
// Il2CppName: SetServerFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::GameplayServerFilter)>(&UnifiedNetworkPlayerModel::SetServerFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "SetServerFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerFilter>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::RefreshParties
// Il2CppName: RefreshParties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::RefreshParties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "RefreshParties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandlePlayersChanged
// Il2CppName: HandlePlayersChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::HandlePlayersChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandlePlayersChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleInviteRequested
// Il2CppName: HandleInviteRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::INetworkPlayer*)>(&UnifiedNetworkPlayerModel::HandleInviteRequested)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleInviteRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleJoinRequested
// Il2CppName: HandleJoinRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::INetworkPlayer*)>(&UnifiedNetworkPlayerModel::HandleJoinRequested)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleJoinRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandlePartyChanged
// Il2CppName: HandlePartyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::INetworkPlayerModel*)>(&UnifiedNetworkPlayerModel::HandlePartyChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandlePartyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayerModel*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleLocalPlayerConnnected
// Il2CppName: HandleLocalPlayerConnnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&UnifiedNetworkPlayerModel::HandleLocalPlayerConnnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleLocalPlayerConnnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleFriendConnected
// Il2CppName: HandleFriendConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&UnifiedNetworkPlayerModel::HandleFriendConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleFriendConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleLocalPlayerConnectToMasterServer
// Il2CppName: HandleLocalPlayerConnectToMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&UnifiedNetworkPlayerModel::HandleLocalPlayerConnectToMasterServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleLocalPlayerConnectToMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleFriendConnectToMasterServer
// Il2CppName: HandleFriendConnectToMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&UnifiedNetworkPlayerModel::HandleFriendConnectToMasterServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleFriendConnectToMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleServerStatusChanged
// Il2CppName: HandleServerStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::DiscoveryPolicy, GlobalNamespace::InvitePolicy, int, GlobalNamespace::GameplayServerConfiguration)>(&UnifiedNetworkPlayerModel::HandleServerStatusChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleServerStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::InvitePolicy>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerCreated
// Il2CppName: HandleConnectedPlayerManagerCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::INetworkPlayerModel*)>(&UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerCreated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleConnectedPlayerManagerCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayerModel*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerDestroyed
// Il2CppName: HandleConnectedPlayerManagerDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::INetworkPlayerModel*)>(&UnifiedNetworkPlayerModel::HandleConnectedPlayerManagerDestroyed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "HandleConnectedPlayerManagerDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayerModel*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::ResetMasterServerReachability
// Il2CppName: ResetMasterServerReachability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::ResetMasterServerReachability)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "ResetMasterServerReachability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::ConnectToServerWithCode
// Il2CppName: ConnectToServerWithCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(::Il2CppString*, ::Il2CppString*)>(&UnifiedNetworkPlayerModel::ConnectToServerWithCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "ConnectToServerWithCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::ConnectToServerWithSecret
// Il2CppName: ConnectToServerWithSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(::Il2CppString*)>(&UnifiedNetworkPlayerModel::ConnectToServerWithSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "ConnectToServerWithSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::JoinMatchmaking
// Il2CppName: JoinMatchmaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::GameplayServerConfiguration, GlobalNamespace::DiscoveryPolicy, ::Il2CppString*, ::Il2CppString*)>(&UnifiedNetworkPlayerModel::JoinMatchmaking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "JoinMatchmaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DiscoveryPolicy>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer* (UnifiedNetworkPlayerModel::*)(::Il2CppString*)>(&UnifiedNetworkPlayerModel::GetPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::GetServer
// Il2CppName: GetServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer* (UnifiedNetworkPlayerModel::*)(::Il2CppString*)>(&UnifiedNetworkPlayerModel::GetServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "GetServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::add_partySizeChangedEvent
// Il2CppName: add_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<int>*)>(&UnifiedNetworkPlayerModel::add_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "add_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::remove_partySizeChangedEvent
// Il2CppName: remove_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<int>*)>(&UnifiedNetworkPlayerModel::remove_partySizeChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "remove_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::add_partyChangedEvent
// Il2CppName: add_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&UnifiedNetworkPlayerModel::add_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "add_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::remove_partyChangedEvent
// Il2CppName: remove_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayerModel*>*)>(&UnifiedNetworkPlayerModel::remove_partyChangedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "remove_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayerModel*>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::add_joinRequestedEvent
// Il2CppName: add_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&UnifiedNetworkPlayerModel::add_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "add_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::remove_joinRequestedEvent
// Il2CppName: remove_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&UnifiedNetworkPlayerModel::remove_joinRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "remove_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&UnifiedNetworkPlayerModel::add_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(System::Action_1<GlobalNamespace::INetworkPlayer*>*)>(&UnifiedNetworkPlayerModel::remove_inviteRequestedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::INetworkPlayer*>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_localPlayerIsPartyOwner
// Il2CppName: get_localPlayerIsPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_localPlayerIsPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_localPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_configuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::GetPartyPlayers
// Il2CppName: GetPartyPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::GetPartyPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "GetPartyPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::GetOtherPlayers
// Il2CppName: GetOtherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::GetOtherPlayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "GetOtherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::Disconnected
// Il2CppName: Disconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::DisconnectedReason)>(&UnifiedNetworkPlayerModel::Disconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "Disconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::ConnectionFailed
// Il2CppName: ConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::ConnectionFailedReason)>(&UnifiedNetworkPlayerModel::ConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "ConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::ConnectedPlayerManagerChanged
// Il2CppName: ConnectedPlayerManagerChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::ConnectedPlayerManagerChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "ConnectedPlayerManagerChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::CreateParty
// Il2CppName: CreateParty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::DestroyParty
// Il2CppName: DestroyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::DestroyParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "DestroyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::PlayerConnected
// Il2CppName: PlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&UnifiedNetworkPlayerModel::PlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "PlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::PlayerDisconnected
// Il2CppName: PlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&UnifiedNetworkPlayerModel::PlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "PlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::PlayerStateChanged
// Il2CppName: PlayerStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&UnifiedNetworkPlayerModel::PlayerStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "PlayerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::PlayerOrderChanged
// Il2CppName: PlayerOrderChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)(GlobalNamespace::IConnectedPlayer*)>(&UnifiedNetworkPlayerModel::PlayerOrderChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), "PlayerOrderChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::*)()>(&UnifiedNetworkPlayerModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer
#include "GlobalNamespace/UnifiedNetworkPlayerModel_UnifiedNetworkPlayer.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_userId
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_userName
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isMe
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_sortIndex
int GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_sortIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_sortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.set_sortIndex
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_sortIndex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_sortIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sortIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_currentPartySize
int GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_maxPartySize
int GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isMyPartyOwner
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMyPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMyPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_difficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_difficulties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_modifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_modifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_songPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_songPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isOpenParty
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isOpenParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isOpenParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOpenParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isConnected
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isPlayer
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.set_isPlayer
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isPlayer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isDedicatedServer
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.set_isDedicatedServer
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isDedicatedServer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isDedicatedServer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isSpectating
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.set_isSpectating
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isSpectating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isSpectating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_canJoin
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.Join
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_requiresPassword
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_requiresPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_requiresPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.Join
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isWaitingOnJoin
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_canInvite
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.Invite
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Invite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Invite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_isWaitingOnInvite
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_canKick
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canKick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canKick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.Kick
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Kick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Kick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_canLeave
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canLeave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.Leave
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Leave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Leave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_canBlock
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canBlock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.Block
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Block");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.get_canUnblock
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canUnblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canUnblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.Unblock
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Unblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Unblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.SendJoinResponse
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendJoinResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendJoinResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.SendInviteResponse
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendInviteResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendInviteResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer.SetIsConnectionOwner
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SetIsConnectionOwner(bool isConnectionOwner) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SetIsConnectionOwner");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIsConnectionOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isConnectionOwner)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isConnectionOwner);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(GlobalNamespace::UnifiedNetworkPlayerModel*, ::Il2CppString*, ::Il2CppString*, bool, bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(GlobalNamespace::UnifiedNetworkPlayerModel*, ::Il2CppString*, ::Il2CppString*, bool, bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_sortIndex
// Il2CppName: get_sortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_sortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_sortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_sortIndex
// Il2CppName: set_sortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(int)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_sortIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "set_sortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isMyPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_difficulties
// Il2CppName: get_difficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_difficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_difficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_modifiers
// Il2CppName: get_modifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifierMask (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_modifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_modifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_songPacks
// Il2CppName: get_songPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_songPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_songPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isOpenParty
// Il2CppName: get_isOpenParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isOpenParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isOpenParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isPlayer
// Il2CppName: get_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isPlayer
// Il2CppName: set_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "set_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isDedicatedServer
// Il2CppName: get_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isDedicatedServer
// Il2CppName: set_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "set_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isSpectating
// Il2CppName: get_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isSpectating
// Il2CppName: set_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::set_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "set_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canJoin
// Il2CppName: get_canJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_canJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_requiresPassword
// Il2CppName: get_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_requiresPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(::Il2CppString*)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Invite
// Il2CppName: Invite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Invite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "Invite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_isWaitingOnInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canKick
// Il2CppName: get_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canKick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Kick
// Il2CppName: Kick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Kick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "Kick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canLeave
// Il2CppName: get_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canLeave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Leave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canBlock
// Il2CppName: get_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Block)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canUnblock
// Il2CppName: get_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::get_canUnblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "get_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::Unblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SendInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SetIsConnectionOwner
// Il2CppName: SetIsConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkPlayer::SetIsConnectionOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*), "SetIsConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/UnifiedNetworkPlayerModel_CreatePartyConfig.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::CreatePartyConfig::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::CreatePartyConfig::*)()>(&UnifiedNetworkPlayerModel::CreatePartyConfig::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::CreatePartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::CreatePartyConfig::*)()>(&UnifiedNetworkPlayerModel::CreatePartyConfig::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::CreatePartyConfig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel/UnifiedNetworkServer
#include "GlobalNamespace/UnifiedNetworkPlayerModel_UnifiedNetworkServer.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Update
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Update(::Il2CppString* serverName, bool hasPassword, int currentPlayerCount, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(hasPassword), ::il2cpp_utils::ExtractType(currentPlayerCount), ::il2cpp_utils::ExtractType(maxPlayerCount), ::il2cpp_utils::ExtractType(configuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverName, hasPassword, currentPlayerCount, maxPlayerCount, configuration);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.INetworkPlayer.get_userId
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer_get_userId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer.get_userId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INetworkPlayer.get_userId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_code
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_code() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_code");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_code", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.INetworkPlayer.get_userName
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer_get_userName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer.get_userName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INetworkPlayer.get_userName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_serverName
::Il2CppString* GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_serverName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_serverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_serverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isMe
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMe");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_currentPartySize
int GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_currentPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_currentPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_maxPartySize
int GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_maxPartySize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_maxPartySize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxPartySize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_difficulties
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_difficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_difficulties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_modifiers
GlobalNamespace::GameplayModifierMask GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_modifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_modifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_songPacks
GlobalNamespace::SongPackMask GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_songPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_songPacks");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isMyPartyOwner
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMyPartyOwner() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMyPartyOwner");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMyPartyOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isOpenParty
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isOpenParty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isOpenParty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOpenParty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isConnected
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_hasTimedOut
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_hasTimedOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_hasTimedOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasTimedOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isPlayer
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isPlayer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isSpectating
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isSpectating");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isDedicatedServer
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isDedicatedServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isDedicatedServer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDedicatedServer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_canJoin
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Join
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_requiresPassword
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_requiresPassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_requiresPassword");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_requiresPassword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Join
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join(::Il2CppString* password) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Join", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(password)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, password);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isWaitingOnJoin
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnJoin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnJoin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnJoin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_canInvite
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Invite
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Invite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Invite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_isWaitingOnInvite
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnInvite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnInvite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isWaitingOnInvite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_canKick
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canKick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canKick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canKick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Kick
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Kick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Kick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Kick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_canLeave
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canLeave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canLeave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Leave
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Leave() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Leave");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Leave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_canBlock
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canBlock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canBlock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Block
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Block() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Block");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Block", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.get_canUnblock
bool GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canUnblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canUnblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canUnblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.Unblock
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Unblock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::Unblock");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unblock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.SendJoinResponse
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendJoinResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendJoinResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendJoinResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Autogenerated method: UnifiedNetworkPlayerModel/UnifiedNetworkServer.SendInviteResponse
void GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendInviteResponse(bool accept) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendInviteResponse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInviteResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(accept)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, accept);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)(GlobalNamespace::UnifiedNetworkPlayerModel*, ::Il2CppString*)>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)(GlobalNamespace::UnifiedNetworkPlayerModel*, ::Il2CppString*)>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)(::Il2CppString*, bool, int, int, GlobalNamespace::GameplayServerConfiguration)>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayServerConfiguration>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer_get_userId
// Il2CppName: INetworkPlayer.get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer_get_userId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "INetworkPlayer.get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_code
// Il2CppName: get_code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_code)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer_get_userName
// Il2CppName: INetworkPlayer.get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::INetworkPlayer_get_userName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "INetworkPlayer.get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_serverName
// Il2CppName: get_serverName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_serverName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_serverName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_currentPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_maxPartySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_difficulties
// Il2CppName: get_difficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_difficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_difficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_modifiers
// Il2CppName: get_modifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifierMask (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_modifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_modifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_songPacks
// Il2CppName: get_songPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_songPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_songPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isMyPartyOwner)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isOpenParty
// Il2CppName: get_isOpenParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isOpenParty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isOpenParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_hasTimedOut
// Il2CppName: get_hasTimedOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_hasTimedOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_hasTimedOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isPlayer
// Il2CppName: get_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isSpectating
// Il2CppName: get_isSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isDedicatedServer
// Il2CppName: get_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isDedicatedServer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canJoin
// Il2CppName: get_canJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_canJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_requiresPassword
// Il2CppName: get_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_requiresPassword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)(::Il2CppString*)>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Join)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnJoin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Invite
// Il2CppName: Invite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Invite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Invite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_isWaitingOnInvite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canKick
// Il2CppName: get_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canKick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Kick
// Il2CppName: Kick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Kick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Kick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canLeave
// Il2CppName: get_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canLeave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Leave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canBlock
// Il2CppName: get_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canBlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Block)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canUnblock
// Il2CppName: get_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::get_canUnblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "get_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)()>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::Unblock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendJoinResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::UnifiedNetworkServer::*)(bool)>(&UnifiedNetworkPlayerModel::UnifiedNetworkServer::SendInviteResponse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::UnifiedNetworkServer*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel/<get_friends>d__80
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-get_friends-d__80.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.System.IDisposable.Dispose
void GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.MoveNext
bool GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.<>m__Finally1
void GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
GlobalNamespace::INetworkPlayer* GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.System.Collections.IEnumerator.Reset
void GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_friends>d__80.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_friends$d__80::*)(int)>(&UnifiedNetworkPlayerModel::$get_friends$d__80::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_friends$d__80::*)(int)>(&UnifiedNetworkPlayerModel::$get_friends$d__80::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnifiedNetworkPlayerModel::$get_friends$d__80::*)()>(&UnifiedNetworkPlayerModel::$get_friends$d__80::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_friends$d__80*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-get_localNetworkPlayers-d__82.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.System.IDisposable.Dispose
void GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.MoveNext
bool GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.<>m__Finally1
void GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
GlobalNamespace::INetworkPlayer* GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.System.Collections.IEnumerator.Reset
void GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<get_localNetworkPlayers>d__82.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)(int)>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)(int)>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::*)()>(&UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnifiedNetworkPlayerModel/<Start>d__89
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-Start-d__89.hpp"
// Including type: UserInfo
#include "GlobalNamespace/UserInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/<Start>d__89.MoveNext
void GlobalNamespace::UnifiedNetworkPlayerModel::$Start$d__89::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$Start$d__89::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<Start>d__89.SetStateMachine
void GlobalNamespace::UnifiedNetworkPlayerModel::$Start$d__89::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$Start$d__89::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$Start$d__89::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$Start$d__89::*)()>(&UnifiedNetworkPlayerModel::$Start$d__89::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$Start$d__89), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$Start$d__89::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$Start$d__89::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&UnifiedNetworkPlayerModel::$Start$d__89::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$Start$d__89), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-GetPartyPlayers-d__91.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91.System.IDisposable.Dispose
void GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91.MoveNext
bool GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91.System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
GlobalNamespace::INetworkPlayer* GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91.System.Collections.IEnumerator.Reset
void GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91.System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetPartyPlayers>d__91.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)(int)>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)(int)>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)()>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)()>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)()>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)()>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)()>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)()>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::*)()>(&UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92
#include "GlobalNamespace/UnifiedNetworkPlayerModel_-GetOtherPlayers-d__92.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnifiedNetworkPlayerModel/UnifiedNetworkServer
#include "GlobalNamespace/UnifiedNetworkPlayerModel_UnifiedNetworkServer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.System.IDisposable.Dispose
void GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.MoveNext
bool GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.<>m__Finally1
void GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.<>m__Finally2
void GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::<>m__Finally2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.<>m__Finally3
void GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::<>m__Finally3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
GlobalNamespace::INetworkPlayer* GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::INetworkPlayer*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.System.Collections.IEnumerator.Reset
void GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>*, false>(this, ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<GetOtherPlayers>d__92.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)(int)>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)(int)>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally2
// Il2CppName: <>m__Finally2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "<>m__Finally2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally3
// Il2CppName: <>m__Finally3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::$$m__Finally3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "<>m__Finally3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::INetworkPlayer* (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_Generic_IEnumerator$INetworkPlayer$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "System.Collections.Generic.IEnumerator<INetworkPlayer>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<GlobalNamespace::INetworkPlayer*>* (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_Generic_IEnumerable$INetworkPlayer$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "System.Collections.Generic.IEnumerable<INetworkPlayer>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::*)()>(&UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnifiedNetworkPlayerModel/<>c__DisplayClass94_0
#include "GlobalNamespace/UnifiedNetworkPlayerModel_--c__DisplayClass94_0.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnifiedNetworkPlayerModel/<>c__DisplayClass94_0.<Refresh>b__0
void GlobalNamespace::UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::$Refresh$b__0(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>* servers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::<Refresh>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Refresh>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(servers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, servers);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<>c__DisplayClass94_0.<Refresh>b__1
void GlobalNamespace::UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::$Refresh$b__1(GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::<Refresh>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Refresh>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::$Refresh$b__0
// Il2CppName: <Refresh>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::*)(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*)>(&UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::$Refresh$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c__DisplayClass94_0*), "<Refresh>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::$Refresh$b__1
// Il2CppName: <Refresh>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::*)(GlobalNamespace::ConnectionFailedReason)>(&UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::$Refresh$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c__DisplayClass94_0*), "<Refresh>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::*)()>(&UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c__DisplayClass94_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::*)()>(&UnifiedNetworkPlayerModel::$$c__DisplayClass94_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c__DisplayClass94_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnifiedNetworkPlayerModel/<>c
#include "GlobalNamespace/UnifiedNetworkPlayerModel_--c.hpp"
// Including type: System.Comparison`1
#include "System/Comparison_1.hpp"
// Including type: UnifiedNetworkPlayerModel/UnifiedNetworkPlayer
#include "GlobalNamespace/UnifiedNetworkPlayerModel_UnifiedNetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnifiedNetworkPlayerModel/<>c <>9
GlobalNamespace::UnifiedNetworkPlayerModel::$$c* GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::UnifiedNetworkPlayerModel::$$c*>("", "UnifiedNetworkPlayerModel/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly UnifiedNetworkPlayerModel/<>c <>9
void GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_set_$$9(GlobalNamespace::UnifiedNetworkPlayerModel::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "UnifiedNetworkPlayerModel/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Comparison`1<UnifiedNetworkPlayerModel/UnifiedNetworkPlayer> <>9__120_0
System::Comparison_1<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*>* GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_get_$$9__120_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_get_$$9__120_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Comparison_1<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*>*>("", "UnifiedNetworkPlayerModel/<>c", "<>9__120_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Comparison`1<UnifiedNetworkPlayerModel/UnifiedNetworkPlayer> <>9__120_0
void GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_set_$$9__120_0(System::Comparison_1<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_set_$$9__120_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "UnifiedNetworkPlayerModel/<>c", "<>9__120_0", value)));
}
// Autogenerated method: UnifiedNetworkPlayerModel/<>c..cctor
void GlobalNamespace::UnifiedNetworkPlayerModel::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "UnifiedNetworkPlayerModel/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnifiedNetworkPlayerModel/<>c.<PlayerOrderChanged>b__120_0
int GlobalNamespace::UnifiedNetworkPlayerModel::$$c::$PlayerOrderChanged$b__120_0(GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer* a, GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer* b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::$$c::<PlayerOrderChanged>b__120_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PlayerOrderChanged>b__120_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, a, b);
}
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnifiedNetworkPlayerModel::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$$c::$PlayerOrderChanged$b__120_0
// Il2CppName: <PlayerOrderChanged>b__120_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnifiedNetworkPlayerModel::$$c::*)(GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*, GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*)>(&UnifiedNetworkPlayerModel::$$c::$PlayerOrderChanged$b__120_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c*), "<PlayerOrderChanged>b__120_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: UnifiedNetworkPlayerModel::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$$c::*)()>(&UnifiedNetworkPlayerModel::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnifiedNetworkPlayerModel::$$c::*)()>(&UnifiedNetworkPlayerModel::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnifiedNetworkPlayerModel::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteExecutionRating
#include "GlobalNamespace/NoteExecutionRating.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteExecutionRating.get_rating
GlobalNamespace::NoteExecutionRating::Rating GlobalNamespace::NoteExecutionRating::get_rating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::get_rating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteExecutionRating::Rating, false>(this, ___internal__method);
}
// Autogenerated method: NoteExecutionRating.set_rating
void GlobalNamespace::NoteExecutionRating::set_rating(GlobalNamespace::NoteExecutionRating::Rating value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::set_rating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteExecutionRating.get_cutScore
int GlobalNamespace::NoteExecutionRating::get_cutScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::get_cutScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NoteExecutionRating.set_cutScore
void GlobalNamespace::NoteExecutionRating::set_cutScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::set_cutScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cutScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteExecutionRating.get_cutDistanceScore
int GlobalNamespace::NoteExecutionRating::get_cutDistanceScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::get_cutDistanceScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutDistanceScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NoteExecutionRating.set_cutDistanceScore
void GlobalNamespace::NoteExecutionRating::set_cutDistanceScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::set_cutDistanceScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cutDistanceScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteExecutionRating.get_cutTimeDeviation
float GlobalNamespace::NoteExecutionRating::get_cutTimeDeviation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::get_cutTimeDeviation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutTimeDeviation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteExecutionRating.set_cutTimeDeviation
void GlobalNamespace::NoteExecutionRating::set_cutTimeDeviation(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::set_cutTimeDeviation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cutTimeDeviation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteExecutionRating.get_cutDirDeviation
float GlobalNamespace::NoteExecutionRating::get_cutDirDeviation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::get_cutDirDeviation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutDirDeviation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteExecutionRating.set_cutDirDeviation
void GlobalNamespace::NoteExecutionRating::set_cutDirDeviation(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::set_cutDirDeviation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_cutDirDeviation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: NoteExecutionRating::get_rating
// Il2CppName: get_rating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteExecutionRating::Rating (NoteExecutionRating::*)()>(&NoteExecutionRating::get_rating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "get_rating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::set_rating
// Il2CppName: set_rating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteExecutionRating::*)(GlobalNamespace::NoteExecutionRating::Rating)>(&NoteExecutionRating::set_rating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "set_rating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteExecutionRating::Rating>()});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::get_cutScore
// Il2CppName: get_cutScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NoteExecutionRating::*)()>(&NoteExecutionRating::get_cutScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "get_cutScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::set_cutScore
// Il2CppName: set_cutScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteExecutionRating::*)(int)>(&NoteExecutionRating::set_cutScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "set_cutScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::get_cutDistanceScore
// Il2CppName: get_cutDistanceScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (NoteExecutionRating::*)()>(&NoteExecutionRating::get_cutDistanceScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "get_cutDistanceScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::set_cutDistanceScore
// Il2CppName: set_cutDistanceScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteExecutionRating::*)(int)>(&NoteExecutionRating::set_cutDistanceScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "set_cutDistanceScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::get_cutTimeDeviation
// Il2CppName: get_cutTimeDeviation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteExecutionRating::*)()>(&NoteExecutionRating::get_cutTimeDeviation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "get_cutTimeDeviation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::set_cutTimeDeviation
// Il2CppName: set_cutTimeDeviation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteExecutionRating::*)(float)>(&NoteExecutionRating::set_cutTimeDeviation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "set_cutTimeDeviation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::get_cutDirDeviation
// Il2CppName: get_cutDirDeviation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteExecutionRating::*)()>(&NoteExecutionRating::get_cutDirDeviation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "get_cutDirDeviation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::set_cutDirDeviation
// Il2CppName: set_cutDirDeviation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteExecutionRating::*)(float)>(&NoteExecutionRating::set_cutDirDeviation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), "set_cutDirDeviation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteExecutionRating::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteExecutionRating::*)(float, GlobalNamespace::NoteExecutionRating::Rating, int, int, float, float)>(&NoteExecutionRating::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteExecutionRating::Rating>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteExecutionRating::*)(float, GlobalNamespace::NoteExecutionRating::Rating, int, int, float, float)>(&NoteExecutionRating::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteExecutionRating*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteExecutionRating::Rating>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteExecutionRating/Rating
#include "GlobalNamespace/NoteExecutionRating.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteExecutionRating/Rating GoodCut
GlobalNamespace::NoteExecutionRating::Rating GlobalNamespace::NoteExecutionRating::Rating::_get_GoodCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::Rating::_get_GoodCut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteExecutionRating::Rating>("", "NoteExecutionRating/Rating", "GoodCut"));
}
// Autogenerated static field setter
// Set static field: static public NoteExecutionRating/Rating GoodCut
void GlobalNamespace::NoteExecutionRating::Rating::_set_GoodCut(GlobalNamespace::NoteExecutionRating::Rating value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::Rating::_set_GoodCut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteExecutionRating/Rating", "GoodCut", value));
}
// Autogenerated static field getter
// Get static field: static public NoteExecutionRating/Rating Missed
GlobalNamespace::NoteExecutionRating::Rating GlobalNamespace::NoteExecutionRating::Rating::_get_Missed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::Rating::_get_Missed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteExecutionRating::Rating>("", "NoteExecutionRating/Rating", "Missed"));
}
// Autogenerated static field setter
// Set static field: static public NoteExecutionRating/Rating Missed
void GlobalNamespace::NoteExecutionRating::Rating::_set_Missed(GlobalNamespace::NoteExecutionRating::Rating value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::Rating::_set_Missed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteExecutionRating/Rating", "Missed", value));
}
// Autogenerated static field getter
// Get static field: static public NoteExecutionRating/Rating BadCut
GlobalNamespace::NoteExecutionRating::Rating GlobalNamespace::NoteExecutionRating::Rating::_get_BadCut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::Rating::_get_BadCut");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteExecutionRating::Rating>("", "NoteExecutionRating/Rating", "BadCut"));
}
// Autogenerated static field setter
// Set static field: static public NoteExecutionRating/Rating BadCut
void GlobalNamespace::NoteExecutionRating::Rating::_set_BadCut(GlobalNamespace::NoteExecutionRating::Rating value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteExecutionRating::Rating::_set_BadCut");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteExecutionRating/Rating", "BadCut", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleExecutionRating
#include "GlobalNamespace/ObstacleExecutionRating.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleExecutionRating.get_rating
GlobalNamespace::ObstacleExecutionRating::Rating GlobalNamespace::ObstacleExecutionRating::get_rating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleExecutionRating::get_rating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleExecutionRating::Rating, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleExecutionRating.set_rating
void GlobalNamespace::ObstacleExecutionRating::set_rating(GlobalNamespace::ObstacleExecutionRating::Rating value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleExecutionRating::set_rating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ObstacleExecutionRating::get_rating
// Il2CppName: get_rating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleExecutionRating::Rating (ObstacleExecutionRating::*)()>(&ObstacleExecutionRating::get_rating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleExecutionRating*), "get_rating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleExecutionRating::set_rating
// Il2CppName: set_rating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleExecutionRating::*)(GlobalNamespace::ObstacleExecutionRating::Rating)>(&ObstacleExecutionRating::set_rating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleExecutionRating*), "set_rating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleExecutionRating::Rating>()});
  }
};
// Writing MetadataGetter for method: ObstacleExecutionRating::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleExecutionRating::*)(float, GlobalNamespace::ObstacleExecutionRating::Rating)>(&ObstacleExecutionRating::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleExecutionRating*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleExecutionRating::Rating>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleExecutionRating::*)(float, GlobalNamespace::ObstacleExecutionRating::Rating)>(&ObstacleExecutionRating::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleExecutionRating*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleExecutionRating::Rating>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleExecutionRating/Rating
#include "GlobalNamespace/ObstacleExecutionRating.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ObstacleExecutionRating/Rating OK
GlobalNamespace::ObstacleExecutionRating::Rating GlobalNamespace::ObstacleExecutionRating::Rating::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleExecutionRating::Rating::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ObstacleExecutionRating::Rating>("", "ObstacleExecutionRating/Rating", "OK"));
}
// Autogenerated static field setter
// Set static field: static public ObstacleExecutionRating/Rating OK
void GlobalNamespace::ObstacleExecutionRating::Rating::_set_OK(GlobalNamespace::ObstacleExecutionRating::Rating value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleExecutionRating::Rating::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleExecutionRating/Rating", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public ObstacleExecutionRating/Rating NotGood
GlobalNamespace::ObstacleExecutionRating::Rating GlobalNamespace::ObstacleExecutionRating::Rating::_get_NotGood() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleExecutionRating::Rating::_get_NotGood");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ObstacleExecutionRating::Rating>("", "ObstacleExecutionRating/Rating", "NotGood"));
}
// Autogenerated static field setter
// Set static field: static public ObstacleExecutionRating/Rating NotGood
void GlobalNamespace::ObstacleExecutionRating::Rating::_set_NotGood(GlobalNamespace::ObstacleExecutionRating::Rating value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleExecutionRating::Rating::_set_NotGood");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleExecutionRating/Rating", "NotGood", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayModifiersHelper
#include "GlobalNamespace/GameplayModifiersHelper.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayModifiersHelper.ToDTO
::Array<BeatSaberAPI::DataTransferObjects::LevelScoreResult::GameplayModifiers>* GlobalNamespace::GameplayModifiersHelper::ToDTO(GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersHelper::ToDTO");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifiersHelper", "ToDTO", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<BeatSaberAPI::DataTransferObjects::LevelScoreResult::GameplayModifiers>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameplayModifiers);
}
// Autogenerated method: GameplayModifiersHelper.FromDTO
GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiersHelper::FromDTO(::Array<BeatSaberAPI::DataTransferObjects::LevelScoreResult::GameplayModifiers>* gameplayModifiersDTOs) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersHelper::FromDTO");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifiersHelper", "FromDTO", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiersDTOs)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameplayModifiersDTOs);
}
// Writing MetadataGetter for method: GameplayModifiersHelper::ToDTO
// Il2CppName: ToDTO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<BeatSaberAPI::DataTransferObjects::LevelScoreResult::GameplayModifiers>* (*)(GlobalNamespace::GameplayModifiers*)>(&GameplayModifiersHelper::ToDTO)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersHelper*), "ToDTO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersHelper::FromDTO
// Il2CppName: FromDTO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (*)(::Array<BeatSaberAPI::DataTransferObjects::LevelScoreResult::GameplayModifiers>*)>(&GameplayModifiersHelper::FromDTO)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersHelper*), "FromDTO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<BeatSaberAPI::DataTransferObjects::LevelScoreResult::GameplayModifiers>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HTTPLeaderboardsModel
#include "GlobalNamespace/HTTPLeaderboardsModel.hpp"
// Including type: HTTPLeaderboardsModel/<>c
#include "GlobalNamespace/HTTPLeaderboardsModel_--c.hpp"
// Including type: HTTPLeaderboardsModel/<GetLeaderboardEntriesAsync>d__10
#include "GlobalNamespace/HTTPLeaderboardsModel_-GetLeaderboardEntriesAsync-d__10.hpp"
// Including type: HTTPLeaderboardsModel/<SendLevelScoreResultAsync>d__11
#include "GlobalNamespace/HTTPLeaderboardsModel_-SendLevelScoreResultAsync-d__11.hpp"
// Including type: OnlineServices.API.IUserLoginDtoDataSource
#include "OnlineServices/API/IUserLoginDtoDataSource.hpp"
// Including type: OnlineServices.API.IApiLeaderboardsModel
#include "OnlineServices/API/IApiLeaderboardsModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: OnlineServices.GetLeaderboardFilterData
#include "OnlineServices/GetLeaderboardFilterData.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: OnlineServices.LevelScoreResultsData
#include "OnlineServices/LevelScoreResultsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HTTPLeaderboardsModel.add_scoreForLeaderboardDidUploadEvent
void GlobalNamespace::HTTPLeaderboardsModel::add_scoreForLeaderboardDidUploadEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::add_scoreForLeaderboardDidUploadEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_scoreForLeaderboardDidUploadEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HTTPLeaderboardsModel.remove_scoreForLeaderboardDidUploadEvent
void GlobalNamespace::HTTPLeaderboardsModel::remove_scoreForLeaderboardDidUploadEvent(System::Action_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::remove_scoreForLeaderboardDidUploadEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_scoreForLeaderboardDidUploadEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HTTPLeaderboardsModel.LogoutAsync
void GlobalNamespace::HTTPLeaderboardsModel::LogoutAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::LogoutAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogoutAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HTTPLeaderboardsModel.GetLeaderboardId
::Il2CppString* GlobalNamespace::HTTPLeaderboardsModel::GetLeaderboardId(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::GetLeaderboardId");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLeaderboardId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, difficultyBeatmap);
}
// Autogenerated method: HTTPLeaderboardsModel.GetLeaderboardEntriesAsync
System::Threading::Tasks::Task_1<OnlineServices::GetLeaderboardEntriesResult>* GlobalNamespace::HTTPLeaderboardsModel::GetLeaderboardEntriesAsync(OnlineServices::GetLeaderboardFilterData leaderboardFilterData, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::GetLeaderboardEntriesAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLeaderboardEntriesAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leaderboardFilterData), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<OnlineServices::GetLeaderboardEntriesResult>*, false>(this, ___internal__method, leaderboardFilterData, cancellationToken);
}
// Autogenerated method: HTTPLeaderboardsModel.SendLevelScoreResultAsync
System::Threading::Tasks::Task_1<OnlineServices::SendLeaderboardEntryResult>* GlobalNamespace::HTTPLeaderboardsModel::SendLevelScoreResultAsync(OnlineServices::LevelScoreResultsData levelResultsData, System::Threading::CancellationToken cancellationToken) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::SendLevelScoreResultAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendLevelScoreResultAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelResultsData), ::il2cpp_utils::ExtractType(cancellationToken)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<OnlineServices::SendLeaderboardEntryResult>*, false>(this, ___internal__method, levelResultsData, cancellationToken);
}
// Writing MetadataGetter for method: HTTPLeaderboardsModel::add_scoreForLeaderboardDidUploadEvent
// Il2CppName: add_scoreForLeaderboardDidUploadEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::*)(System::Action_1<::Il2CppString*>*)>(&HTTPLeaderboardsModel::add_scoreForLeaderboardDidUploadEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), "add_scoreForLeaderboardDidUploadEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::remove_scoreForLeaderboardDidUploadEvent
// Il2CppName: remove_scoreForLeaderboardDidUploadEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::*)(System::Action_1<::Il2CppString*>*)>(&HTTPLeaderboardsModel::remove_scoreForLeaderboardDidUploadEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), "remove_scoreForLeaderboardDidUploadEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::LogoutAsync
// Il2CppName: LogoutAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::*)()>(&HTTPLeaderboardsModel::LogoutAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), "LogoutAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::GetLeaderboardId
// Il2CppName: GetLeaderboardId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HTTPLeaderboardsModel::*)(GlobalNamespace::IDifficultyBeatmap*)>(&HTTPLeaderboardsModel::GetLeaderboardId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), "GetLeaderboardId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::GetLeaderboardEntriesAsync
// Il2CppName: GetLeaderboardEntriesAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<OnlineServices::GetLeaderboardEntriesResult>* (HTTPLeaderboardsModel::*)(OnlineServices::GetLeaderboardFilterData, System::Threading::CancellationToken)>(&HTTPLeaderboardsModel::GetLeaderboardEntriesAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), "GetLeaderboardEntriesAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OnlineServices::GetLeaderboardFilterData>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::SendLevelScoreResultAsync
// Il2CppName: SendLevelScoreResultAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<OnlineServices::SendLeaderboardEntryResult>* (HTTPLeaderboardsModel::*)(OnlineServices::LevelScoreResultsData, System::Threading::CancellationToken)>(&HTTPLeaderboardsModel::SendLevelScoreResultAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), "SendLevelScoreResultAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OnlineServices::LevelScoreResultsData>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::*)()>(&HTTPLeaderboardsModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::*)()>(&HTTPLeaderboardsModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HTTPLeaderboardsModel/<>c
#include "GlobalNamespace/HTTPLeaderboardsModel_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: BeatSaberAPI.DataTransferObjects.LeaderboardEntry
#include "BeatSaberAPI/DataTransferObjects/LeaderboardEntry.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HTTPLeaderboardsModel/<>c <>9
GlobalNamespace::HTTPLeaderboardsModel::$$c* GlobalNamespace::HTTPLeaderboardsModel::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::HTTPLeaderboardsModel::$$c*>("", "HTTPLeaderboardsModel/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HTTPLeaderboardsModel/<>c <>9
void GlobalNamespace::HTTPLeaderboardsModel::$$c::_set_$$9(GlobalNamespace::HTTPLeaderboardsModel::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "HTTPLeaderboardsModel/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<BeatSaberAPI.DataTransferObjects.LeaderboardEntry,System.String> <>9__10_0
System::Func_2<BeatSaberAPI::DataTransferObjects::LeaderboardEntry*, ::Il2CppString*>* GlobalNamespace::HTTPLeaderboardsModel::$$c::_get_$$9__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$$c::_get_$$9__10_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<BeatSaberAPI::DataTransferObjects::LeaderboardEntry*, ::Il2CppString*>*>("", "HTTPLeaderboardsModel/<>c", "<>9__10_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<BeatSaberAPI.DataTransferObjects.LeaderboardEntry,System.String> <>9__10_0
void GlobalNamespace::HTTPLeaderboardsModel::$$c::_set_$$9__10_0(System::Func_2<BeatSaberAPI::DataTransferObjects::LeaderboardEntry*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$$c::_set_$$9__10_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "HTTPLeaderboardsModel/<>c", "<>9__10_0", value)));
}
// Autogenerated method: HTTPLeaderboardsModel/<>c..cctor
void GlobalNamespace::HTTPLeaderboardsModel::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HTTPLeaderboardsModel/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HTTPLeaderboardsModel/<>c.<GetLeaderboardEntriesAsync>b__10_0
::Il2CppString* GlobalNamespace::HTTPLeaderboardsModel::$$c::$GetLeaderboardEntriesAsync$b__10_0(BeatSaberAPI::DataTransferObjects::LeaderboardEntry* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$$c::<GetLeaderboardEntriesAsync>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetLeaderboardEntriesAsync>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: HTTPLeaderboardsModel::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HTTPLeaderboardsModel::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::$$c::$GetLeaderboardEntriesAsync$b__10_0
// Il2CppName: <GetLeaderboardEntriesAsync>b__10_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HTTPLeaderboardsModel::$$c::*)(BeatSaberAPI::DataTransferObjects::LeaderboardEntry*)>(&HTTPLeaderboardsModel::$$c::$GetLeaderboardEntriesAsync$b__10_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel::$$c*), "<GetLeaderboardEntriesAsync>b__10_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<BeatSaberAPI::DataTransferObjects::LeaderboardEntry*>()});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::$$c::*)()>(&HTTPLeaderboardsModel::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::$$c::*)()>(&HTTPLeaderboardsModel::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HTTPLeaderboardsModel/<GetLeaderboardEntriesAsync>d__10
#include "GlobalNamespace/HTTPLeaderboardsModel_-GetLeaderboardEntriesAsync-d__10.hpp"
// Including type: BeatSaberAPI.DataTransferObjects.LeaderboardEntries
#include "BeatSaberAPI/DataTransferObjects/LeaderboardEntries.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HTTPLeaderboardsModel/<GetLeaderboardEntriesAsync>d__10.MoveNext
void GlobalNamespace::HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: HTTPLeaderboardsModel/<GetLeaderboardEntriesAsync>d__10.SetStateMachine
void GlobalNamespace::HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::*)()>(&HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HTTPLeaderboardsModel::$GetLeaderboardEntriesAsync$d__10), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
