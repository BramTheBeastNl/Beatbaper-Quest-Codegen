// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByMethod
#include "Zenject/SubContainerCreatorByMethod.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<Zenject.DiContainer> _installMethod
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& Zenject::SubContainerCreatorByMethod::dyn__installMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByMethod::dyn__installMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installMethod"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByMethod.CreateSubContainer
::Zenject::DiContainer* Zenject::SubContainerCreatorByMethod::CreateSubContainer(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByMethod::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewGameObjectDynamicContext
#include "Zenject/SubContainerCreatorByNewGameObjectDynamicContext.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.GameObjectCreationParameters _gameObjectBindInfo
[[deprecated("Use field access instead!")]] ::Zenject::GameObjectCreationParameters*& Zenject::SubContainerCreatorByNewGameObjectDynamicContext::dyn__gameObjectBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectDynamicContext::dyn__gameObjectBindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjectBindInfo"))->offset;
  return *reinterpret_cast<::Zenject::GameObjectCreationParameters**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewGameObjectDynamicContext.CreateGameObject
::UnityEngine::GameObject* Zenject::SubContainerCreatorByNewGameObjectDynamicContext::CreateGameObject(ByRef<bool> shouldMakeActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectDynamicContext::CreateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, byref(shouldMakeActive));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewGameObjectInstaller
#include "Zenject/SubContainerCreatorByNewGameObjectInstaller.hpp"
// Including type: Zenject.SubContainerCreatorByNewGameObjectInstaller/Zenject.<>c__DisplayClass3_0
#include "Zenject/SubContainerCreatorByNewGameObjectInstaller_--c__DisplayClass3_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _installerType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SubContainerCreatorByNewGameObjectInstaller::dyn__installerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::dyn__installerType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> _extraArgs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::SubContainerCreatorByNewGameObjectInstaller::dyn__extraArgs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::dyn__extraArgs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraArgs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewGameObjectInstaller.AddInstallers
void Zenject::SubContainerCreatorByNewGameObjectInstaller::AddInstallers(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerCreatorByNewGameObjectInstaller/Zenject.<>c__DisplayClass3_0
#include "Zenject/SubContainerCreatorByNewGameObjectInstaller_--c__DisplayClass3_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.SubContainerCreatorByNewGameObjectInstaller <>4__this
[[deprecated("Use field access instead!")]] ::Zenject::SubContainerCreatorByNewGameObjectInstaller*& Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Zenject::SubContainerCreatorByNewGameObjectInstaller**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Zenject.TypeValuePair> args
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::dyn_args() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::dyn_args");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "args"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewGameObjectInstaller/Zenject.<>c__DisplayClass3_0.<AddInstallers>b__0
void Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::$AddInstallers$b__0(::Zenject::DiContainer* subContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::<AddInstallers>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddInstallers>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subContainer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subContainer);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewGameObjectInstaller/Zenject.<>c__DisplayClass3_0.__zenCreate
::Il2CppObject* Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorByNewGameObjectInstaller/<>c__DisplayClass3_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewGameObjectInstaller/Zenject.<>c__DisplayClass3_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectInstaller::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorByNewGameObjectInstaller/<>c__DisplayClass3_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewGameObjectMethod
#include "Zenject/SubContainerCreatorByNewGameObjectMethod.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<Zenject.DiContainer> _installerMethod
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& Zenject::SubContainerCreatorByNewGameObjectMethod::dyn__installerMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectMethod::dyn__installerMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerMethod"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewGameObjectMethod.AddInstallers
void Zenject::SubContainerCreatorByNewGameObjectMethod::AddInstallers(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewGameObjectMethod::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefab
#include "Zenject/SubContainerCreatorByNewPrefab.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.GameObjectCreationParameters _gameObjectBindInfo
[[deprecated("Use field access instead!")]] ::Zenject::GameObjectCreationParameters*& Zenject::SubContainerCreatorByNewPrefab::dyn__gameObjectBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefab::dyn__gameObjectBindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjectBindInfo"))->offset;
  return *reinterpret_cast<::Zenject::GameObjectCreationParameters**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.IPrefabProvider _prefabProvider
[[deprecated("Use field access instead!")]] ::Zenject::IPrefabProvider*& Zenject::SubContainerCreatorByNewPrefab::dyn__prefabProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefab::dyn__prefabProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefabProvider"))->offset;
  return *reinterpret_cast<::Zenject::IPrefabProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::SubContainerCreatorByNewPrefab::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefab::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefab.CreateSubContainer
::Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefab::CreateSubContainer(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::InjectContext* parentContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefab::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(parentContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, args, parentContext);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabDynamicContext
#include "Zenject/SubContainerCreatorByNewPrefabDynamicContext.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.IPrefabProvider _prefabProvider
[[deprecated("Use field access instead!")]] ::Zenject::IPrefabProvider*& Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__prefabProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__prefabProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefabProvider"))->offset;
  return *reinterpret_cast<::Zenject::IPrefabProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.GameObjectCreationParameters _gameObjectBindInfo
[[deprecated("Use field access instead!")]] ::Zenject::GameObjectCreationParameters*& Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__gameObjectBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabDynamicContext::dyn__gameObjectBindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjectBindInfo"))->offset;
  return *reinterpret_cast<::Zenject::GameObjectCreationParameters**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabDynamicContext.CreateGameObject
::UnityEngine::GameObject* Zenject::SubContainerCreatorByNewPrefabDynamicContext::CreateGameObject(ByRef<bool> shouldMakeActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabDynamicContext::CreateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, byref(shouldMakeActive));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabInstaller
#include "Zenject/SubContainerCreatorByNewPrefabInstaller.hpp"
// Including type: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0
#include "Zenject/SubContainerCreatorByNewPrefabInstaller_--c__DisplayClass3_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _installerType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__installerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__installerType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> _extraArgs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__extraArgs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::dyn__extraArgs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraArgs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabInstaller.AddInstallers
void Zenject::SubContainerCreatorByNewPrefabInstaller::AddInstallers(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0
#include "Zenject/SubContainerCreatorByNewPrefabInstaller_--c__DisplayClass3_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.SubContainerCreatorByNewPrefabInstaller <>4__this
[[deprecated("Use field access instead!")]] ::Zenject::SubContainerCreatorByNewPrefabInstaller*& Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Zenject::SubContainerCreatorByNewPrefabInstaller**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Zenject.TypeValuePair> args
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_args() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::dyn_args");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "args"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0.<AddInstallers>b__0
void Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::$AddInstallers$b__0(::Zenject::DiContainer* subContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::<AddInstallers>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddInstallers>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subContainer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, subContainer);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0.__zenCreate
::Il2CppObject* Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorByNewPrefabInstaller/<>c__DisplayClass3_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabInstaller/Zenject.<>c__DisplayClass3_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabInstaller::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorByNewPrefabInstaller/<>c__DisplayClass3_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabMethod
#include "Zenject/SubContainerCreatorByNewPrefabMethod.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<Zenject.DiContainer> _installerMethod
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& Zenject::SubContainerCreatorByNewPrefabMethod::dyn__installerMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabMethod::dyn__installerMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerMethod"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabMethod.AddInstallers
void Zenject::SubContainerCreatorByNewPrefabMethod::AddInstallers(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabMethod::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorByNewPrefabWithParams
#include "Zenject/SubContainerCreatorByNewPrefabWithParams.hpp"
// Including type: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0
#include "Zenject/SubContainerCreatorByNewPrefabWithParams_--c__DisplayClass7_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IPrefabProvider
#include "Zenject/IPrefabProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.IPrefabProvider _prefabProvider
[[deprecated("Use field access instead!")]] ::Zenject::IPrefabProvider*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__prefabProvider() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__prefabProvider");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefabProvider"))->offset;
  return *reinterpret_cast<::Zenject::IPrefabProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _installerType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__installerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__installerType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installerType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.GameObjectCreationParameters _gameObjectBindInfo
[[deprecated("Use field access instead!")]] ::Zenject::GameObjectCreationParameters*& Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__gameObjectBindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::dyn__gameObjectBindInfo");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_gameObjectBindInfo"))->offset;
  return *reinterpret_cast<::Zenject::GameObjectCreationParameters**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams.get_Container
::Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefabWithParams::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams.CreateTempContainer
::Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefabWithParams::CreateTempContainer(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::CreateTempContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateTempContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, args);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams.CreateSubContainer
::Zenject::DiContainer* Zenject::SubContainerCreatorByNewPrefabWithParams::CreateSubContainer(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::InjectContext* parentContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(parentContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, args, parentContext);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0
#include "Zenject/SubContainerCreatorByNewPrefabWithParams_--c__DisplayClass7_0.hpp"
// Including type: Zenject.InjectableInfo
#include "Zenject/InjectableInfo.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.TypeValuePair argPair
[[deprecated("Use field access instead!")]] ::Zenject::TypeValuePair& Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::dyn_argPair() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::dyn_argPair");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "argPair"))->offset;
  return *reinterpret_cast<::Zenject::TypeValuePair*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0.<CreateTempContainer>b__0
bool Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::$CreateTempContainer$b__0(::Zenject::InjectableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::<CreateTempContainer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateTempContainer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0.<CreateTempContainer>b__1
int Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::$CreateTempContainer$b__1(::Zenject::InjectableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::<CreateTempContainer>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateTempContainer>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0.__zenCreate
::Il2CppObject* Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorByNewPrefabWithParams/<>c__DisplayClass7_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SubContainerCreatorByNewPrefabWithParams/Zenject.<>c__DisplayClass7_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorByNewPrefabWithParams::$$c__DisplayClass7_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorByNewPrefabWithParams/<>c__DisplayClass7_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorCached
#include "Zenject/SubContainerCreatorCached.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ISubContainerCreator _subCreator
[[deprecated("Use field access instead!")]] ::Zenject::ISubContainerCreator*& Zenject::SubContainerCreatorCached::dyn__subCreator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorCached::dyn__subCreator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subCreator"))->offset;
  return *reinterpret_cast<::Zenject::ISubContainerCreator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isLookingUp
[[deprecated("Use field access instead!")]] bool& Zenject::SubContainerCreatorCached::dyn__isLookingUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorCached::dyn__isLookingUp");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isLookingUp"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.DiContainer _subContainer
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::SubContainerCreatorCached::dyn__subContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorCached::dyn__subContainer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subContainer"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorCached.CreateSubContainer
::Zenject::DiContainer* Zenject::SubContainerCreatorCached::CreateSubContainer(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorCached::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, args, context);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorDynamicContext
#include "Zenject/SubContainerCreatorDynamicContext.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::SubContainerCreatorDynamicContext::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorDynamicContext::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.get_Container
::Zenject::DiContainer* Zenject::SubContainerCreatorDynamicContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorDynamicContext::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.CreateSubContainer
::Zenject::DiContainer* Zenject::SubContainerCreatorDynamicContext::CreateSubContainer(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::InjectContext* parentContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorDynamicContext::CreateSubContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(parentContext)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, args, parentContext);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.AddInstallers
void Zenject::SubContainerCreatorDynamicContext::AddInstallers(::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ::Zenject::GameObjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorDynamicContext::AddInstallers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, args, context);
}
// Autogenerated method: Zenject.SubContainerCreatorDynamicContext.CreateGameObject
::UnityEngine::GameObject* Zenject::SubContainerCreatorDynamicContext::CreateGameObject(ByRef<bool> shouldMakeActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorDynamicContext::CreateGameObject");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::GameObject*, false>(this, ___internal__method, byref(shouldMakeActive));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerCreatorUtil
#include "Zenject/SubContainerCreatorUtil.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerCreatorUtil.ApplyBindSettings
void Zenject::SubContainerCreatorUtil::ApplyBindSettings(::Zenject::SubContainerCreatorBindInfo* subContainerBindInfo, ::Zenject::DiContainer* subContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerCreatorUtil::ApplyBindSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SubContainerCreatorUtil", "ApplyBindSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subContainerBindInfo), ::il2cpp_utils::ExtractType(subContainer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, subContainerBindInfo, subContainer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerDependencyProvider
#include "Zenject/SubContainerDependencyProvider.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.ISubContainerCreator _subContainerCreator
[[deprecated("Use field access instead!")]] ::Zenject::ISubContainerCreator*& Zenject::SubContainerDependencyProvider::dyn__subContainerCreator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::dyn__subContainerCreator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subContainerCreator"))->offset;
  return *reinterpret_cast<::Zenject::ISubContainerCreator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _dependencyType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::SubContainerDependencyProvider::dyn__dependencyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::dyn__dependencyType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dependencyType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _identifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::SubContainerDependencyProvider::dyn__identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::dyn__identifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_identifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _resolveAll
[[deprecated("Use field access instead!")]] bool& Zenject::SubContainerDependencyProvider::dyn__resolveAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::dyn__resolveAll");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resolveAll"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.get_IsCached
bool Zenject::SubContainerDependencyProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.get_TypeVariesBasedOnMemberType
bool Zenject::SubContainerDependencyProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.GetInstanceType
::System::Type* Zenject::SubContainerDependencyProvider::GetInstanceType(::Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.CreateSubContext
::Zenject::InjectContext* Zenject::SubContainerDependencyProvider::CreateSubContext(::Zenject::InjectContext* parent, ::Zenject::DiContainer* subContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::CreateSubContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(subContainer)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectContext*, false>(this, ___internal__method, parent, subContainer);
}
// Autogenerated method: Zenject.SubContainerDependencyProvider.GetAllInstancesWithInjectSplit
void Zenject::SubContainerDependencyProvider::GetAllInstancesWithInjectSplit(::Zenject::InjectContext* context, ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ByRef<::System::Action*> injectAction, ::System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SubContainerDependencyProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<::System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, context, args, byref(injectAction), buffer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TransientProvider
#include "Zenject/TransientProvider.hpp"
// Including type: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0
#include "Zenject/TransientProvider_--c__DisplayClass11_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.DiContainer _container
[[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& Zenject::TransientProvider::dyn__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::dyn__container");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
  return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Type _concreteType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::TransientProvider::dyn__concreteType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::dyn__concreteType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_concreteType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.TypeValuePair> _extraArguments
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::TransientProvider::dyn__extraArguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::dyn__extraArguments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraArguments"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _concreteIdentifier
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::TransientProvider::dyn__concreteIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::dyn__concreteIdentifier");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_concreteIdentifier"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`2<Zenject.InjectContext,System.Object> _instantiateCallback
[[deprecated("Use field access instead!")]] ::System::Action_2<::Zenject::InjectContext*, ::Il2CppObject*>*& Zenject::TransientProvider::dyn__instantiateCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::dyn__instantiateCallback");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_instantiateCallback"))->offset;
  return *reinterpret_cast<::System::Action_2<::Zenject::InjectContext*, ::Il2CppObject*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TransientProvider.get_IsCached
bool Zenject::TransientProvider::get_IsCached() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::get_IsCached");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCached", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TransientProvider.get_TypeVariesBasedOnMemberType
bool Zenject::TransientProvider::get_TypeVariesBasedOnMemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::get_TypeVariesBasedOnMemberType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeVariesBasedOnMemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TransientProvider.GetInstanceType
::System::Type* Zenject::TransientProvider::GetInstanceType(::Zenject::InjectContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::GetInstanceType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.TransientProvider.GetAllInstancesWithInjectSplit
void Zenject::TransientProvider::GetAllInstancesWithInjectSplit(::Zenject::InjectContext* context, ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>* args, ByRef<::System::Action*> injectAction, ::System::Collections::Generic::List_1<::Il2CppObject*>* buffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::GetAllInstancesWithInjectSplit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllInstancesWithInjectSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context), ::il2cpp_utils::ExtractType(args), ::il2cpp_utils::ExtractIndependentType<::System::Action*&>(), ::il2cpp_utils::ExtractType(buffer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, context, args, byref(injectAction), buffer);
}
// Autogenerated method: Zenject.TransientProvider.GetTypeToCreate
::System::Type* Zenject::TransientProvider::GetTypeToCreate(::System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::GetTypeToCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTypeToCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, contractType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0
#include "Zenject/TransientProvider_--c__DisplayClass11_0.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.TransientProvider <>4__this
[[deprecated("Use field access instead!")]] ::Zenject::TransientProvider*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Zenject::TransientProvider**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object instance
[[deprecated("Use field access instead!")]] ::Il2CppObject*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instance"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Type instanceType
[[deprecated("Use field access instead!")]] ::System::Type*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instanceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_instanceType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "instanceType"))->offset;
  return *reinterpret_cast<::System::Type**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::TypeValuePair>*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_extraArgs() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_extraArgs");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "extraArgs"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::TypeValuePair>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public Zenject.InjectContext context
[[deprecated("Use field access instead!")]] ::Zenject::InjectContext*& Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_context() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::dyn_context");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "context"))->offset;
  return *reinterpret_cast<::Zenject::InjectContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0.<GetAllInstancesWithInjectSplit>b__0
void Zenject::TransientProvider::$$c__DisplayClass11_0::$GetAllInstancesWithInjectSplit$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::<GetAllInstancesWithInjectSplit>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetAllInstancesWithInjectSplit>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0.__zenCreate
::Il2CppObject* Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TransientProvider/<>c__DisplayClass11_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.TransientProvider/Zenject.<>c__DisplayClass11_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TransientProvider::$$c__DisplayClass11_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TransientProvider/<>c__DisplayClass11_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AnimatorIkHandlerManager
#include "Zenject/AnimatorIkHandlerManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IAnimatorIkHandler
#include "Zenject/IAnimatorIkHandler.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.IAnimatorIkHandler> _handlers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::IAnimatorIkHandler*>*& Zenject::AnimatorIkHandlerManager::dyn__handlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorIkHandlerManager::dyn__handlers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handlers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::IAnimatorIkHandler*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.AnimatorIkHandlerManager.Construct
void Zenject::AnimatorIkHandlerManager::Construct(::System::Collections::Generic::List_1<::Zenject::IAnimatorIkHandler*>* handlers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorIkHandlerManager::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handlers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, handlers);
}
// Autogenerated method: Zenject.AnimatorIkHandlerManager.OnAnimatorIk
void Zenject::AnimatorIkHandlerManager::OnAnimatorIk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorIkHandlerManager::OnAnimatorIk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorIk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AnimatorIkHandlerManager.__zenInjectMethod0
void Zenject::AnimatorIkHandlerManager::__zenInjectMethod0(::Il2CppObject* P_0, ::ArrayW<::Il2CppObject*> P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorIkHandlerManager::__zenInjectMethod0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "AnimatorIkHandlerManager", "__zenInjectMethod0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.AnimatorIkHandlerManager.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::AnimatorIkHandlerManager::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorIkHandlerManager::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "AnimatorIkHandlerManager", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AnimatorInstaller
#include "Zenject/AnimatorInstaller.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly UnityEngine.Animator _animator
[[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& Zenject::AnimatorInstaller::dyn__animator() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorInstaller::dyn__animator");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_animator"))->offset;
  return *reinterpret_cast<::UnityEngine::Animator**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.AnimatorInstaller.__zenCreate
::Il2CppObject* Zenject::AnimatorInstaller::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorInstaller::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "AnimatorInstaller", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.AnimatorInstaller.InstallBindings
void Zenject::AnimatorInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AnimatorInstaller.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::AnimatorInstaller::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorInstaller::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "AnimatorInstaller", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.AnimatorMoveHandlerManager
#include "Zenject/AnimatorMoveHandlerManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IAnimatorMoveHandler
#include "Zenject/IAnimatorMoveHandler.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.IAnimatorMoveHandler> _handlers
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::IAnimatorMoveHandler*>*& Zenject::AnimatorMoveHandlerManager::dyn__handlers() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorMoveHandlerManager::dyn__handlers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_handlers"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::IAnimatorMoveHandler*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.AnimatorMoveHandlerManager.Construct
void Zenject::AnimatorMoveHandlerManager::Construct(::System::Collections::Generic::List_1<::Zenject::IAnimatorMoveHandler*>* handlers) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorMoveHandlerManager::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handlers)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, handlers);
}
// Autogenerated method: Zenject.AnimatorMoveHandlerManager.OnAnimatorMove
void Zenject::AnimatorMoveHandlerManager::OnAnimatorMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorMoveHandlerManager::OnAnimatorMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.AnimatorMoveHandlerManager.__zenInjectMethod0
void Zenject::AnimatorMoveHandlerManager::__zenInjectMethod0(::Il2CppObject* P_0, ::ArrayW<::Il2CppObject*> P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorMoveHandlerManager::__zenInjectMethod0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "AnimatorMoveHandlerManager", "__zenInjectMethod0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.AnimatorMoveHandlerManager.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::AnimatorMoveHandlerManager::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::AnimatorMoveHandlerManager::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "AnimatorMoveHandlerManager", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IAnimatorIkHandler
#include "Zenject/IAnimatorIkHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IAnimatorIkHandler.OnAnimatorIk
void Zenject::IAnimatorIkHandler::OnAnimatorIk() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::IAnimatorIkHandler::OnAnimatorIk");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorIk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IAnimatorMoveHandler
#include "Zenject/IAnimatorMoveHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IAnimatorMoveHandler.OnAnimatorMove
void Zenject::IAnimatorMoveHandler::OnAnimatorMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::IAnimatorMoveHandler::OnAnimatorMove");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAnimatorMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DisposableManager
#include "Zenject/DisposableManager.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: Zenject.DisposableManager/Zenject.LateDisposableInfo
#include "Zenject/DisposableManager_LateDisposableInfo.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0
#include "Zenject/DisposableManager_--c__DisplayClass4_0.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1
#include "Zenject/DisposableManager_--c__DisplayClass4_1.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c
#include "Zenject/DisposableManager_--c.hpp"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0
#include "Zenject/DisposableManager_--c__DisplayClass9_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.DisposableManager/Zenject.DisposableInfo> _disposables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::DisposableManager::DisposableInfo>*& Zenject::DisposableManager::dyn__disposables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::dyn__disposables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::DisposableManager::DisposableInfo>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.DisposableManager/Zenject.LateDisposableInfo> _lateDisposables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::DisposableManager::LateDisposableInfo*>*& Zenject::DisposableManager::dyn__lateDisposables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::dyn__lateDisposables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateDisposables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::DisposableManager::LateDisposableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _disposed
[[deprecated("Use field access instead!")]] bool& Zenject::DisposableManager::dyn__disposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::dyn__disposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _lateDisposed
[[deprecated("Use field access instead!")]] bool& Zenject::DisposableManager::dyn__lateDisposed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::dyn__lateDisposed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateDisposed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager.Add
void Zenject::DisposableManager::Add(::System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposableManager.Add
void Zenject::DisposableManager::Add(::System::IDisposable* disposable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable), ::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposable, priority);
}
// Autogenerated method: Zenject.DisposableManager.AddLate
void Zenject::DisposableManager::AddLate(::Zenject::ILateDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposableManager.AddLate
void Zenject::DisposableManager::AddLate(::Zenject::ILateDisposable* disposable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable), ::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposable, priority);
}
// Autogenerated method: Zenject.DisposableManager.Remove
void Zenject::DisposableManager::Remove(::System::IDisposable* disposable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disposable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, disposable);
}
// Autogenerated method: Zenject.DisposableManager.LateDispose
void Zenject::DisposableManager::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::LateDispose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DisposableManager.Dispose
void Zenject::DisposableManager::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.DisposableManager.__zenCreate
::Il2CppObject* Zenject::DisposableManager::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.DisposableManager.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::DisposableManager::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DisposableManager/Zenject.DisposableInfo
#include "Zenject/DisposableManager.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IDisposable Disposable
[[deprecated("Use field access instead!")]] ::System::IDisposable*& Zenject::DisposableManager::DisposableInfo::dyn_Disposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::DisposableInfo::dyn_Disposable");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Disposable"))->offset;
  return *reinterpret_cast<::System::IDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
[[deprecated("Use field access instead!")]] int& Zenject::DisposableManager::DisposableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::DisposableInfo::dyn_Priority");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.DisposableInfo..ctor
// ABORTED elsewhere.  Zenject::DisposableManager::DisposableInfo::DisposableInfo(::System::IDisposable* disposable, int priority)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DisposableManager/Zenject.LateDisposableInfo
#include "Zenject/DisposableManager_LateDisposableInfo.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ILateDisposable LateDisposable
[[deprecated("Use field access instead!")]] ::Zenject::ILateDisposable*& Zenject::DisposableManager::LateDisposableInfo::dyn_LateDisposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::LateDisposableInfo::dyn_LateDisposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "LateDisposable"))->offset;
  return *reinterpret_cast<::Zenject::ILateDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
[[deprecated("Use field access instead!")]] int& Zenject::DisposableManager::LateDisposableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::LateDisposableInfo::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.LateDisposableInfo.__zenCreate
::Il2CppObject* Zenject::DisposableManager::LateDisposableInfo::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::LateDisposableInfo::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/LateDisposableInfo", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.LateDisposableInfo.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::DisposableManager::LateDisposableInfo::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::LateDisposableInfo::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/LateDisposableInfo", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0
#include "Zenject/DisposableManager_--c__DisplayClass4_0.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IDisposable disposable
[[deprecated("Use field access instead!")]] ::System::IDisposable*& Zenject::DisposableManager::$$c__DisplayClass4_0::dyn_disposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_0::dyn_disposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposable"))->offset;
  return *reinterpret_cast<::System::IDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0.<.ctor>b__0
bool Zenject::DisposableManager::$$c__DisplayClass4_0::$_ctor$b__0(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0.__zenCreate
::Il2CppObject* Zenject::DisposableManager::$$c__DisplayClass4_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c__DisplayClass4_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::DisposableManager::$$c__DisplayClass4_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c__DisplayClass4_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1
#include "Zenject/DisposableManager_--c__DisplayClass4_1.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ILateDisposable lateDisposable
[[deprecated("Use field access instead!")]] ::Zenject::ILateDisposable*& Zenject::DisposableManager::$$c__DisplayClass4_1::dyn_lateDisposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_1::dyn_lateDisposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lateDisposable"))->offset;
  return *reinterpret_cast<::Zenject::ILateDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1.<.ctor>b__2
bool Zenject::DisposableManager::$$c__DisplayClass4_1::$_ctor$b__2(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_1::<.ctor>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1.__zenCreate
::Il2CppObject* Zenject::DisposableManager::$$c__DisplayClass4_1::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_1::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c__DisplayClass4_1", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass4_1.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::DisposableManager::$$c__DisplayClass4_1::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass4_1::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c__DisplayClass4_1", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DisposableManager/Zenject.<>c
#include "Zenject/DisposableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.DisposableManager/Zenject.LateDisposableInfo
#include "Zenject/DisposableManager_LateDisposableInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.DisposableManager/Zenject.<>c <>9
::Zenject::DisposableManager::$$c* Zenject::DisposableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::DisposableManager::$$c*>("Zenject", "DisposableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.DisposableManager/Zenject.<>c <>9
void Zenject::DisposableManager::$$c::_set_$$9(::Zenject::DisposableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_1
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>* Zenject::DisposableManager::$$c::_get_$$9__4_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_get_$$9__4_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>*>("Zenject", "DisposableManager/<>c", "<>9__4_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_1
void Zenject::DisposableManager::$$c::_set_$$9__4_1(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_set_$$9__4_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__4_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_3
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>* Zenject::DisposableManager::$$c::_get_$$9__4_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_get_$$9__4_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>*>("Zenject", "DisposableManager/<>c", "<>9__4_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__4_3
void Zenject::DisposableManager::$$c::_set_$$9__4_3(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_set_$$9__4_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__4_3", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.DisposableManager/Zenject.LateDisposableInfo,System.Int32> <>9__10_0
::System::Func_2<::Zenject::DisposableManager::LateDisposableInfo*, int>* Zenject::DisposableManager::$$c::_get_$$9__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_get_$$9__10_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::DisposableManager::LateDisposableInfo*, int>*>("Zenject", "DisposableManager/<>c", "<>9__10_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.DisposableManager/Zenject.LateDisposableInfo,System.Int32> <>9__10_0
void Zenject::DisposableManager::$$c::_set_$$9__10_0(::System::Func_2<::Zenject::DisposableManager::LateDisposableInfo*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_set_$$9__10_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__10_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.DisposableManager/Zenject.DisposableInfo,System.Int32> <>9__11_0
::System::Func_2<::Zenject::DisposableManager::DisposableInfo, int>* Zenject::DisposableManager::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::DisposableManager::DisposableInfo, int>*>("Zenject", "DisposableManager/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.DisposableManager/Zenject.DisposableInfo,System.Int32> <>9__11_0
void Zenject::DisposableManager::$$c::_set_$$9__11_0(::System::Func_2<::Zenject::DisposableManager::DisposableInfo, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "DisposableManager/<>c", "<>9__11_0", value)));
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c..cctor
void Zenject::DisposableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<.ctor>b__4_1
::System::Nullable_1<int> Zenject::DisposableManager::$$c::$_ctor$b__4_1(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::<.ctor>b__4_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__4_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<int>, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<.ctor>b__4_3
::System::Nullable_1<int> Zenject::DisposableManager::$$c::$_ctor$b__4_3(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::<.ctor>b__4_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__4_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<int>, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<LateDispose>b__10_0
int Zenject::DisposableManager::$$c::$LateDispose$b__10_0(::Zenject::DisposableManager::LateDisposableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::<LateDispose>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LateDispose>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.<Dispose>b__11_0
int Zenject::DisposableManager::$$c::$Dispose$b__11_0(::Zenject::DisposableManager::DisposableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::<Dispose>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Dispose>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::DisposableManager::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::DisposableManager::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0
#include "Zenject/DisposableManager_--c__DisplayClass9_0.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.DisposableManager/Zenject.DisposableInfo
#include "Zenject/DisposableManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.IDisposable disposable
[[deprecated("Use field access instead!")]] ::System::IDisposable*& Zenject::DisposableManager::$$c__DisplayClass9_0::dyn_disposable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass9_0::dyn_disposable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "disposable"))->offset;
  return *reinterpret_cast<::System::IDisposable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0.<Remove>b__0
bool Zenject::DisposableManager::$$c__DisplayClass9_0::$Remove$b__0(::Zenject::DisposableManager::DisposableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass9_0::<Remove>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Remove>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0.__zenCreate
::Il2CppObject* Zenject::DisposableManager::$$c__DisplayClass9_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass9_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c__DisplayClass9_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.DisposableManager/Zenject.<>c__DisplayClass9_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::DisposableManager::$$c__DisplayClass9_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DisposableManager::$$c__DisplayClass9_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DisposableManager/<>c__DisplayClass9_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GuiRenderableManager
#include "Zenject/GuiRenderableManager.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.RenderableInfo
#include "Zenject/GuiRenderableManager_RenderableInfo.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0
#include "Zenject/GuiRenderableManager_--c__DisplayClass1_0.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.<>c
#include "Zenject/GuiRenderableManager_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.GuiRenderableManager/Zenject.RenderableInfo> _renderables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::GuiRenderableManager::RenderableInfo*>*& Zenject::GuiRenderableManager::dyn__renderables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::dyn__renderables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::GuiRenderableManager::RenderableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GuiRenderableManager.OnGui
void Zenject::GuiRenderableManager::OnGui() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::OnGui");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGui", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GuiRenderableManager.__zenCreate
::Il2CppObject* Zenject::GuiRenderableManager::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.GuiRenderableManager.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::GuiRenderableManager::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GuiRenderableManager/Zenject.RenderableInfo
#include "Zenject/GuiRenderableManager_RenderableInfo.hpp"
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IGuiRenderable Renderable
[[deprecated("Use field access instead!")]] ::Zenject::IGuiRenderable*& Zenject::GuiRenderableManager::RenderableInfo::dyn_Renderable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::RenderableInfo::dyn_Renderable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Renderable"))->offset;
  return *reinterpret_cast<::Zenject::IGuiRenderable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
[[deprecated("Use field access instead!")]] int& Zenject::GuiRenderableManager::RenderableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::RenderableInfo::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.RenderableInfo.__zenCreate
::Il2CppObject* Zenject::GuiRenderableManager::RenderableInfo::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::RenderableInfo::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/RenderableInfo", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.RenderableInfo.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::GuiRenderableManager::RenderableInfo::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::RenderableInfo::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/RenderableInfo", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0
#include "Zenject/GuiRenderableManager_--c__DisplayClass1_0.hpp"
// Including type: Zenject.IGuiRenderable
#include "Zenject/IGuiRenderable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IGuiRenderable renderable
[[deprecated("Use field access instead!")]] ::Zenject::IGuiRenderable*& Zenject::GuiRenderableManager::$$c__DisplayClass1_0::dyn_renderable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c__DisplayClass1_0::dyn_renderable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "renderable"))->offset;
  return *reinterpret_cast<::Zenject::IGuiRenderable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0.<.ctor>b__1
bool Zenject::GuiRenderableManager::$$c__DisplayClass1_0::$_ctor$b__1(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c__DisplayClass1_0::<.ctor>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0.__zenCreate
::Il2CppObject* Zenject::GuiRenderableManager::$$c__DisplayClass1_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c__DisplayClass1_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/<>c__DisplayClass1_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c__DisplayClass1_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::GuiRenderableManager::$$c__DisplayClass1_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c__DisplayClass1_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/<>c__DisplayClass1_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GuiRenderableManager/Zenject.<>c
#include "Zenject/GuiRenderableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.GuiRenderableManager/Zenject.RenderableInfo
#include "Zenject/GuiRenderableManager_RenderableInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.GuiRenderableManager/Zenject.<>c <>9
::Zenject::GuiRenderableManager::$$c* Zenject::GuiRenderableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::GuiRenderableManager::$$c*>("Zenject", "GuiRenderableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.GuiRenderableManager/Zenject.<>c <>9
void Zenject::GuiRenderableManager::$$c::_set_$$9(::Zenject::GuiRenderableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "GuiRenderableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__1_2
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* Zenject::GuiRenderableManager::$$c::_get_$$9__1_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::_get_$$9__1_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>*>("Zenject", "GuiRenderableManager/<>c", "<>9__1_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__1_2
void Zenject::GuiRenderableManager::$$c::_set_$$9__1_2(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::_set_$$9__1_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "GuiRenderableManager/<>c", "<>9__1_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.GuiRenderableManager/Zenject.RenderableInfo,System.Int32> <>9__1_0
::System::Func_2<::Zenject::GuiRenderableManager::RenderableInfo*, int>* Zenject::GuiRenderableManager::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::GuiRenderableManager::RenderableInfo*, int>*>("Zenject", "GuiRenderableManager/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.GuiRenderableManager/Zenject.RenderableInfo,System.Int32> <>9__1_0
void Zenject::GuiRenderableManager::$$c::_set_$$9__1_0(::System::Func_2<::Zenject::GuiRenderableManager::RenderableInfo*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "GuiRenderableManager/<>c", "<>9__1_0", value)));
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c..cctor
void Zenject::GuiRenderableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c.<.ctor>b__1_2
int Zenject::GuiRenderableManager::$$c::$_ctor$b__1_2(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::<.ctor>b__1_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__1_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c.<.ctor>b__1_0
int Zenject::GuiRenderableManager::$$c::$_ctor$b__1_0(::Zenject::GuiRenderableManager::RenderableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::<.ctor>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::GuiRenderableManager::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.GuiRenderableManager/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::GuiRenderableManager::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderableManager::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderableManager/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.GuiRenderer
#include "Zenject/GuiRenderer.hpp"
// Including type: Zenject.GuiRenderableManager
#include "Zenject/GuiRenderableManager.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.GuiRenderableManager _renderableManager
[[deprecated("Use field access instead!")]] ::Zenject::GuiRenderableManager*& Zenject::GuiRenderer::dyn__renderableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderer::dyn__renderableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderableManager"))->offset;
  return *reinterpret_cast<::Zenject::GuiRenderableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.GuiRenderer.Construct
void Zenject::GuiRenderer::Construct(::Zenject::GuiRenderableManager* renderableManager) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderer::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(renderableManager)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, renderableManager);
}
// Autogenerated method: Zenject.GuiRenderer.OnGUI
void Zenject::GuiRenderer::OnGUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderer::OnGUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GuiRenderer.__zenInjectMethod0
void Zenject::GuiRenderer::__zenInjectMethod0(::Il2CppObject* P_0, ::ArrayW<::Il2CppObject*> P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderer::__zenInjectMethod0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderer", "__zenInjectMethod0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.GuiRenderer.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::GuiRenderer::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::GuiRenderer::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "GuiRenderer", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InitializableManager
#include "Zenject/InitializableManager.hpp"
// Including type: Zenject.InitializableManager/Zenject.InitializableInfo
#include "Zenject/InitializableManager_InitializableInfo.hpp"
// Including type: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/InitializableManager_--c__DisplayClass2_0.hpp"
// Including type: Zenject.InitializableManager/Zenject.<>c
#include "Zenject/InitializableManager_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<Zenject.InitializableManager/Zenject.InitializableInfo> _initializables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::InitializableManager::InitializableInfo*>*& Zenject::InitializableManager::dyn__initializables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::dyn__initializables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::InitializableManager::InitializableInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInitialized
[[deprecated("Use field access instead!")]] bool& Zenject::InitializableManager::dyn__hasInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::dyn__hasInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.InitializableManager.Add
void Zenject::InitializableManager::Add(::Zenject::IInitializable* initializable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initializable);
}
// Autogenerated method: Zenject.InitializableManager.Add
void Zenject::InitializableManager::Add(::Zenject::IInitializable* initializable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializable), ::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, initializable, priority);
}
// Autogenerated method: Zenject.InitializableManager.Initialize
void Zenject::InitializableManager::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InitializableManager.__zenCreate
::Il2CppObject* Zenject::InitializableManager::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.InitializableManager.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::InitializableManager::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InitializableManager/Zenject.InitializableInfo
#include "Zenject/InitializableManager_InitializableInfo.hpp"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IInitializable Initializable
[[deprecated("Use field access instead!")]] ::Zenject::IInitializable*& Zenject::InitializableManager::InitializableInfo::dyn_Initializable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::InitializableInfo::dyn_Initializable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Initializable"))->offset;
  return *reinterpret_cast<::Zenject::IInitializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
[[deprecated("Use field access instead!")]] int& Zenject::InitializableManager::InitializableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::InitializableInfo::dyn_Priority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.InitializableInfo.__zenCreate
::Il2CppObject* Zenject::InitializableManager::InitializableInfo::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::InitializableInfo::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/InitializableInfo", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.InitializableInfo.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::InitializableManager::InitializableInfo::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::InitializableInfo::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/InitializableInfo", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/InitializableManager_--c__DisplayClass2_0.hpp"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IInitializable initializable
[[deprecated("Use field access instead!")]] ::Zenject::IInitializable*& Zenject::InitializableManager::$$c__DisplayClass2_0::dyn_initializable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c__DisplayClass2_0::dyn_initializable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "initializable"))->offset;
  return *reinterpret_cast<::Zenject::IInitializable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0.<.ctor>b__0
bool Zenject::InitializableManager::$$c__DisplayClass2_0::$_ctor$b__0(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c__DisplayClass2_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0.__zenCreate
::Il2CppObject* Zenject::InitializableManager::$$c__DisplayClass2_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c__DisplayClass2_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/<>c__DisplayClass2_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c__DisplayClass2_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::InitializableManager::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/<>c__DisplayClass2_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InitializableManager/Zenject.<>c
#include "Zenject/InitializableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.InitializableManager/Zenject.InitializableInfo
#include "Zenject/InitializableManager_InitializableInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.InitializableManager/Zenject.<>c <>9
::Zenject::InitializableManager::$$c* Zenject::InitializableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::InitializableManager::$$c*>("Zenject", "InitializableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.InitializableManager/Zenject.<>c <>9
void Zenject::InitializableManager::$$c::_set_$$9(::Zenject::InitializableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InitializableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__2_1
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* Zenject::InitializableManager::$$c::_get_$$9__2_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::_get_$$9__2_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>*>("Zenject", "InitializableManager/<>c", "<>9__2_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__2_1
void Zenject::InitializableManager::$$c::_set_$$9__2_1(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::_set_$$9__2_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InitializableManager/<>c", "<>9__2_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.InitializableManager/Zenject.InitializableInfo,System.Int32> <>9__5_0
::System::Func_2<::Zenject::InitializableManager::InitializableInfo*, int>* Zenject::InitializableManager::$$c::_get_$$9__5_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::_get_$$9__5_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::InitializableManager::InitializableInfo*, int>*>("Zenject", "InitializableManager/<>c", "<>9__5_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.InitializableManager/Zenject.InitializableInfo,System.Int32> <>9__5_0
void Zenject::InitializableManager::$$c::_set_$$9__5_0(::System::Func_2<::Zenject::InitializableManager::InitializableInfo*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::_set_$$9__5_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InitializableManager/<>c", "<>9__5_0", value)));
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c..cctor
void Zenject::InitializableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c.<.ctor>b__2_1
int Zenject::InitializableManager::$$c::$_ctor$b__2_1(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::<.ctor>b__2_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c.<Initialize>b__5_0
int Zenject::InitializableManager::$$c::$Initialize$b__5_0(::Zenject::InitializableManager::InitializableInfo* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::<Initialize>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Initialize>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::InitializableManager::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.InitializableManager/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::InitializableManager::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::InitializableManager::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InitializableManager/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.DefaultGameObjectKernel
#include "Zenject/DefaultGameObjectKernel.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.DefaultGameObjectKernel.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::DefaultGameObjectKernel::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::DefaultGameObjectKernel::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "DefaultGameObjectKernel", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.Kernel
#include "Zenject/Kernel.hpp"
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: Zenject.InitializableManager
#include "Zenject/InitializableManager.hpp"
// Including type: Zenject.DisposableManager
#include "Zenject/DisposableManager.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.TickableManager _tickableManager
[[deprecated("Use field access instead!")]] ::Zenject::TickableManager*& Zenject::Kernel::dyn__tickableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::dyn__tickableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickableManager"))->offset;
  return *reinterpret_cast<::Zenject::TickableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InitializableManager _initializableManager
[[deprecated("Use field access instead!")]] ::Zenject::InitializableManager*& Zenject::Kernel::dyn__initializableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::dyn__initializableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializableManager"))->offset;
  return *reinterpret_cast<::Zenject::InitializableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.DisposableManager _disposablesManager
[[deprecated("Use field access instead!")]] ::Zenject::DisposableManager*& Zenject::Kernel::dyn__disposablesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::dyn__disposablesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposablesManager"))->offset;
  return *reinterpret_cast<::Zenject::DisposableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.Kernel.Initialize
void Zenject::Kernel::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.Dispose
void Zenject::Kernel::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.LateDispose
void Zenject::Kernel::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::LateDispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.Tick
void Zenject::Kernel::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.LateTick
void Zenject::Kernel::LateTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::LateTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.FixedTick
void Zenject::Kernel::FixedTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::FixedTick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Kernel.__zenCreate
::Il2CppObject* Zenject::Kernel::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "Kernel", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.Kernel.__zenFieldSetter0
void Zenject::Kernel::__zenFieldSetter0(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::__zenFieldSetter0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "Kernel", "__zenFieldSetter0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.Kernel.__zenFieldSetter1
void Zenject::Kernel::__zenFieldSetter1(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::__zenFieldSetter1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "Kernel", "__zenFieldSetter1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.Kernel.__zenFieldSetter2
void Zenject::Kernel::__zenFieldSetter2(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::__zenFieldSetter2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "Kernel", "__zenFieldSetter2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.Kernel.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::Kernel::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::Kernel::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "Kernel", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.MonoKernel
#include "Zenject/MonoKernel.hpp"
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: Zenject.InitializableManager
#include "Zenject/InitializableManager.hpp"
// Including type: Zenject.DisposableManager
#include "Zenject/DisposableManager.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.TickableManager _tickableManager
[[deprecated("Use field access instead!")]] ::Zenject::TickableManager*& Zenject::MonoKernel::dyn__tickableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::dyn__tickableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickableManager"))->offset;
  return *reinterpret_cast<::Zenject::TickableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.InitializableManager _initializableManager
[[deprecated("Use field access instead!")]] ::Zenject::InitializableManager*& Zenject::MonoKernel::dyn__initializableManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::dyn__initializableManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initializableManager"))->offset;
  return *reinterpret_cast<::Zenject::InitializableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.DisposableManager _disposablesManager
[[deprecated("Use field access instead!")]] ::Zenject::DisposableManager*& Zenject::MonoKernel::dyn__disposablesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::dyn__disposablesManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_disposablesManager"))->offset;
  return *reinterpret_cast<::Zenject::DisposableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _hasInitialized
[[deprecated("Use field access instead!")]] bool& Zenject::MonoKernel::dyn__hasInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::dyn__hasInitialized");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasInitialized"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isDestroyed
[[deprecated("Use field access instead!")]] bool& Zenject::MonoKernel::dyn__isDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::dyn__isDestroyed");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isDestroyed"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.MonoKernel.get_IsDestroyed
bool Zenject::MonoKernel::get_IsDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::get_IsDestroyed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDestroyed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.Start
void Zenject::MonoKernel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.Initialize
void Zenject::MonoKernel::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.Update
void Zenject::MonoKernel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::Update");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.FixedUpdate
void Zenject::MonoKernel::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::FixedUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.LateUpdate
void Zenject::MonoKernel::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::LateUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.OnDestroy
void Zenject::MonoKernel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.MonoKernel.__zenFieldSetter0
void Zenject::MonoKernel::__zenFieldSetter0(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::__zenFieldSetter0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "MonoKernel", "__zenFieldSetter0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.MonoKernel.__zenFieldSetter1
void Zenject::MonoKernel::__zenFieldSetter1(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::__zenFieldSetter1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "MonoKernel", "__zenFieldSetter1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.MonoKernel.__zenFieldSetter2
void Zenject::MonoKernel::__zenFieldSetter2(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::__zenFieldSetter2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "MonoKernel", "__zenFieldSetter2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.MonoKernel.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::MonoKernel::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::MonoKernel::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "MonoKernel", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ProjectKernel
#include "Zenject/ProjectKernel.hpp"
// Including type: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0
#include "Zenject/ProjectKernel_--c__DisplayClass4_0.hpp"
// Including type: Zenject.ZenjectSettings
#include "Zenject/ZenjectSettings.hpp"
// Including type: Zenject.SceneContextRegistry
#include "Zenject/SceneContextRegistry.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Zenject.ZenjectSettings _settings
[[deprecated("Use field access instead!")]] ::Zenject::ZenjectSettings*& Zenject::ProjectKernel::dyn__settings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::dyn__settings");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_settings"))->offset;
  return *reinterpret_cast<::Zenject::ZenjectSettings**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private Zenject.SceneContextRegistry _contextRegistry
[[deprecated("Use field access instead!")]] ::Zenject::SceneContextRegistry*& Zenject::ProjectKernel::dyn__contextRegistry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::dyn__contextRegistry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_contextRegistry"))->offset;
  return *reinterpret_cast<::Zenject::SceneContextRegistry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ProjectKernel.OnApplicationQuit
void Zenject::ProjectKernel::OnApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::OnApplicationQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectKernel.DestroyEverythingInOrder
void Zenject::ProjectKernel::DestroyEverythingInOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::DestroyEverythingInOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyEverythingInOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectKernel.ForceUnloadAllScenes
void Zenject::ProjectKernel::ForceUnloadAllScenes(bool immediate) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::ForceUnloadAllScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceUnloadAllScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediate)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, immediate);
}
// Autogenerated method: Zenject.ProjectKernel.__zenFieldSetter0
void Zenject::ProjectKernel::__zenFieldSetter0(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::__zenFieldSetter0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectKernel", "__zenFieldSetter0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.ProjectKernel.__zenFieldSetter1
void Zenject::ProjectKernel::__zenFieldSetter1(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::__zenFieldSetter1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectKernel", "__zenFieldSetter1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.ProjectKernel.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ProjectKernel::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectKernel", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0
#include "Zenject/ProjectKernel_--c__DisplayClass4_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<UnityEngine.SceneManagement.Scene> sceneOrder
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::SceneManagement::Scene>*& Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_sceneOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_sceneOrder");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sceneOrder"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::UnityEngine::SceneManagement::Scene>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Func`2<Zenject.SceneContext,System.Int32> <>9__0
[[deprecated("Use field access instead!")]] ::System::Func_2<::Zenject::SceneContext*, int>*& Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_$$9__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::$$c__DisplayClass4_0::dyn_$$9__0");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>9__0"))->offset;
  return *reinterpret_cast<::System::Func_2<::Zenject::SceneContext*, int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0.<ForceUnloadAllScenes>b__0
int Zenject::ProjectKernel::$$c__DisplayClass4_0::$ForceUnloadAllScenes$b__0(::Zenject::SceneContext* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::$$c__DisplayClass4_0::<ForceUnloadAllScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ForceUnloadAllScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0.__zenCreate
::Il2CppObject* Zenject::ProjectKernel::$$c__DisplayClass4_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::$$c__DisplayClass4_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectKernel/<>c__DisplayClass4_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ProjectKernel/Zenject.<>c__DisplayClass4_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ProjectKernel::$$c__DisplayClass4_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ProjectKernel::$$c__DisplayClass4_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectKernel/<>c__DisplayClass4_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SceneKernel
#include "Zenject/SceneKernel.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SceneKernel.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SceneKernel::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneKernel::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SceneKernel", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PoolableManager
#include "Zenject/PoolableManager.hpp"
// Including type: Zenject.PoolableManager/Zenject.PoolableInfo
#include "Zenject/PoolableManager_PoolableInfo.hpp"
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/PoolableManager_--c__DisplayClass2_0.hpp"
// Including type: Zenject.PoolableManager/Zenject.<>c
#include "Zenject/PoolableManager_--c.hpp"
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0
#include "Zenject/PoolableManager_--c__DisplayClass3_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.IPoolable> _poolables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::IPoolable*>*& Zenject::PoolableManager::dyn__poolables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::dyn__poolables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_poolables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::IPoolable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isSpawned
[[deprecated("Use field access instead!")]] bool& Zenject::PoolableManager::dyn__isSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::dyn__isSpawned");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isSpawned"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.PoolableManager.CreatePoolableInfo
::Zenject::PoolableManager::PoolableInfo Zenject::PoolableManager::CreatePoolableInfo(::Zenject::IPoolable* poolable, ::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>* priorities) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::CreatePoolableInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePoolableInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poolable), ::il2cpp_utils::ExtractType(priorities)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::PoolableManager::PoolableInfo, false>(this, ___internal__method, poolable, priorities);
}
// Autogenerated method: Zenject.PoolableManager.TriggerOnSpawned
void Zenject::PoolableManager::TriggerOnSpawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::TriggerOnSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerOnSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PoolableManager.TriggerOnDespawned
void Zenject::PoolableManager::TriggerOnDespawned() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::TriggerOnDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerOnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.PoolableManager.__zenCreate
::Il2CppObject* Zenject::PoolableManager::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.PoolableManager.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::PoolableManager::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolableManager/Zenject.PoolableInfo
#include "Zenject/PoolableManager_PoolableInfo.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IPoolable Poolable
[[deprecated("Use field access instead!")]] ::Zenject::IPoolable*& Zenject::PoolableManager::PoolableInfo::dyn_Poolable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::PoolableInfo::dyn_Poolable");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Poolable"))->offset;
  return *reinterpret_cast<::Zenject::IPoolable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Priority
[[deprecated("Use field access instead!")]] int& Zenject::PoolableManager::PoolableInfo::dyn_Priority() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::PoolableInfo::dyn_Priority");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Priority"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.PoolableInfo..ctor
// ABORTED elsewhere.  Zenject::PoolableManager::PoolableInfo::PoolableInfo(::Zenject::IPoolable* poolable, int priority)
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0
#include "Zenject/PoolableManager_--c__DisplayClass2_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
// Including type: Zenject.PoolableManager/Zenject.PoolableInfo
#include "Zenject/PoolableManager_PoolableInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.PoolableManager <>4__this
[[deprecated("Use field access instead!")]] ::Zenject::PoolableManager*& Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_$$4__this() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_$$4__this");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
  return *reinterpret_cast<::Zenject::PoolableManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> priorities
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>*& Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_priorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass2_0::dyn_priorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "priorities"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0.<.ctor>b__0
::Zenject::PoolableManager::PoolableInfo Zenject::PoolableManager::$$c__DisplayClass2_0::$_ctor$b__0(::Zenject::IPoolable* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass2_0::<.ctor>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::PoolableManager::PoolableInfo, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0.__zenCreate
::Il2CppObject* Zenject::PoolableManager::$$c__DisplayClass2_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass2_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c__DisplayClass2_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass2_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::PoolableManager::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass2_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c__DisplayClass2_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PoolableManager/Zenject.<>c
#include "Zenject/PoolableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.PoolableManager/Zenject.<>c <>9
::Zenject::PoolableManager::$$c* Zenject::PoolableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::PoolableManager::$$c*>("Zenject", "PoolableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.PoolableManager/Zenject.<>c <>9
void Zenject::PoolableManager::$$c::_set_$$9(::Zenject::PoolableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,System.Int32> <>9__2_1
::System::Func_2<::Zenject::PoolableManager::PoolableInfo, int>* Zenject::PoolableManager::$$c::_get_$$9__2_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_get_$$9__2_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::PoolableManager::PoolableInfo, int>*>("Zenject", "PoolableManager/<>c", "<>9__2_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,System.Int32> <>9__2_1
void Zenject::PoolableManager::$$c::_set_$$9__2_1(::System::Func_2<::Zenject::PoolableManager::PoolableInfo, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_set_$$9__2_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9__2_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,Zenject.IPoolable> <>9__2_2
::System::Func_2<::Zenject::PoolableManager::PoolableInfo, ::Zenject::IPoolable*>* Zenject::PoolableManager::$$c::_get_$$9__2_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_get_$$9__2_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::Zenject::PoolableManager::PoolableInfo, ::Zenject::IPoolable*>*>("Zenject", "PoolableManager/<>c", "<>9__2_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.PoolableManager/Zenject.PoolableInfo,Zenject.IPoolable> <>9__2_2
void Zenject::PoolableManager::$$c::_set_$$9__2_2(::System::Func_2<::Zenject::PoolableManager::PoolableInfo, ::Zenject::IPoolable*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_set_$$9__2_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9__2_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__3_1
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>* Zenject::PoolableManager::$$c::_get_$$9__3_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_get_$$9__3_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>*>("Zenject", "PoolableManager/<>c", "<>9__3_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Nullable`1<System.Int32>> <>9__3_1
void Zenject::PoolableManager::$$c::_set_$$9__3_1(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Nullable_1<int>>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::_set_$$9__3_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolableManager/<>c", "<>9__3_1", value)));
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c..cctor
void Zenject::PoolableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.<.ctor>b__2_1
int Zenject::PoolableManager::$$c::$_ctor$b__2_1(::Zenject::PoolableManager::PoolableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::<.ctor>b__2_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.<.ctor>b__2_2
::Zenject::IPoolable* Zenject::PoolableManager::$$c::$_ctor$b__2_2(::Zenject::PoolableManager::PoolableInfo x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::<.ctor>b__2_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::IPoolable*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.<CreatePoolableInfo>b__3_1
::System::Nullable_1<int> Zenject::PoolableManager::$$c::$CreatePoolableInfo$b__3_1(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::<CreatePoolableInfo>b__3_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreatePoolableInfo>b__3_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<int>, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::PoolableManager::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::PoolableManager::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0
#include "Zenject/PoolableManager_--c__DisplayClass3_0.hpp"
// Including type: Zenject.IPoolable
#include "Zenject/IPoolable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IPoolable poolable
[[deprecated("Use field access instead!")]] ::Zenject::IPoolable*& Zenject::PoolableManager::$$c__DisplayClass3_0::dyn_poolable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass3_0::dyn_poolable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "poolable"))->offset;
  return *reinterpret_cast<::Zenject::IPoolable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0.<CreatePoolableInfo>b__0
bool Zenject::PoolableManager::$$c__DisplayClass3_0::$CreatePoolableInfo$b__0(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass3_0::<CreatePoolableInfo>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreatePoolableInfo>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0.__zenCreate
::Il2CppObject* Zenject::PoolableManager::$$c__DisplayClass3_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass3_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c__DisplayClass3_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.PoolableManager/Zenject.<>c__DisplayClass3_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::PoolableManager::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::PoolableManager::$$c__DisplayClass3_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolableManager/<>c__DisplayClass3_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SceneContextRegistry
#include "Zenject/SceneContextRegistry.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<UnityEngine.SceneManagement.Scene,Zenject.SceneContext> _map
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::SceneManagement::Scene, ::Zenject::SceneContext*>*& Zenject::SceneContextRegistry::dyn__map() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::dyn__map");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_map"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::UnityEngine::SceneManagement::Scene, ::Zenject::SceneContext*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SceneContextRegistry.get_SceneContexts
::System::Collections::Generic::IEnumerable_1<::Zenject::SceneContext*>* Zenject::SceneContextRegistry::get_SceneContexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::get_SceneContexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SceneContexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::Zenject::SceneContext*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContextRegistry.Add
void Zenject::SceneContextRegistry::Add(::Zenject::SceneContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.SceneContextRegistry.GetSceneContextForScene
::Zenject::SceneContext* Zenject::SceneContextRegistry::GetSceneContextForScene(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::GetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SceneContext*, false>(this, ___internal__method, name);
}
// Autogenerated method: Zenject.SceneContextRegistry.GetSceneContextForScene
::Zenject::SceneContext* Zenject::SceneContextRegistry::GetSceneContextForScene(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::GetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SceneContext*, false>(this, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.TryGetSceneContextForScene
::Zenject::SceneContext* Zenject::SceneContextRegistry::TryGetSceneContextForScene(::StringW name) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::TryGetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SceneContext*, false>(this, ___internal__method, name);
}
// Autogenerated method: Zenject.SceneContextRegistry.TryGetSceneContextForScene
::Zenject::SceneContext* Zenject::SceneContextRegistry::TryGetSceneContextForScene(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::TryGetSceneContextForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetSceneContextForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::SceneContext*, false>(this, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.GetContainerForScene
::Zenject::DiContainer* Zenject::SceneContextRegistry::GetContainerForScene(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::GetContainerForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetContainerForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.TryGetContainerForScene
::Zenject::DiContainer* Zenject::SceneContextRegistry::TryGetContainerForScene(::UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::TryGetContainerForScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetContainerForScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::DiContainer*, false>(this, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContextRegistry.Remove
void Zenject::SceneContextRegistry::Remove(::Zenject::SceneContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, context);
}
// Autogenerated method: Zenject.SceneContextRegistry.__zenCreate
::Il2CppObject* Zenject::SceneContextRegistry::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SceneContextRegistry", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SceneContextRegistry.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SceneContextRegistry::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistry::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SceneContextRegistry", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SceneContextRegistryAdderAndRemover
#include "Zenject/SceneContextRegistryAdderAndRemover.hpp"
// Including type: Zenject.SceneContextRegistry
#include "Zenject/SceneContextRegistry.hpp"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SceneContextRegistry _registry
[[deprecated("Use field access instead!")]] ::Zenject::SceneContextRegistry*& Zenject::SceneContextRegistryAdderAndRemover::dyn__registry() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistryAdderAndRemover::dyn__registry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_registry"))->offset;
  return *reinterpret_cast<::Zenject::SceneContextRegistry**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.SceneContext _sceneContext
[[deprecated("Use field access instead!")]] ::Zenject::SceneContext*& Zenject::SceneContextRegistryAdderAndRemover::dyn__sceneContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistryAdderAndRemover::dyn__sceneContext");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sceneContext"))->offset;
  return *reinterpret_cast<::Zenject::SceneContext**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.SceneContextRegistryAdderAndRemover.Initialize
void Zenject::SceneContextRegistryAdderAndRemover::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistryAdderAndRemover::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContextRegistryAdderAndRemover.Dispose
void Zenject::SceneContextRegistryAdderAndRemover::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistryAdderAndRemover::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContextRegistryAdderAndRemover.__zenCreate
::Il2CppObject* Zenject::SceneContextRegistryAdderAndRemover::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistryAdderAndRemover::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SceneContextRegistryAdderAndRemover", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.SceneContextRegistryAdderAndRemover.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::SceneContextRegistryAdderAndRemover::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::SceneContextRegistryAdderAndRemover::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SceneContextRegistryAdderAndRemover", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TickablesTaskUpdater
#include "Zenject/TickablesTaskUpdater.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.TickablesTaskUpdater.UpdateItem
void Zenject::TickablesTaskUpdater::UpdateItem(::Zenject::ITickable* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickablesTaskUpdater::UpdateItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: Zenject.TickablesTaskUpdater.__zenCreate
::Il2CppObject* Zenject::TickablesTaskUpdater::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickablesTaskUpdater::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickablesTaskUpdater", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.TickablesTaskUpdater.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::TickablesTaskUpdater::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickablesTaskUpdater::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickablesTaskUpdater", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.LateTickablesTaskUpdater
#include "Zenject/LateTickablesTaskUpdater.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.LateTickablesTaskUpdater.UpdateItem
void Zenject::LateTickablesTaskUpdater::UpdateItem(::Zenject::ILateTickable* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::LateTickablesTaskUpdater::UpdateItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: Zenject.LateTickablesTaskUpdater.__zenCreate
::Il2CppObject* Zenject::LateTickablesTaskUpdater::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::LateTickablesTaskUpdater::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "LateTickablesTaskUpdater", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.LateTickablesTaskUpdater.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::LateTickablesTaskUpdater::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::LateTickablesTaskUpdater::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "LateTickablesTaskUpdater", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FixedTickablesTaskUpdater
#include "Zenject/FixedTickablesTaskUpdater.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.FixedTickablesTaskUpdater.UpdateItem
void Zenject::FixedTickablesTaskUpdater::UpdateItem(::Zenject::IFixedTickable* task) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FixedTickablesTaskUpdater::UpdateItem");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, task);
}
// Autogenerated method: Zenject.FixedTickablesTaskUpdater.__zenCreate
::Il2CppObject* Zenject::FixedTickablesTaskUpdater::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FixedTickablesTaskUpdater::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FixedTickablesTaskUpdater", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.FixedTickablesTaskUpdater.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::FixedTickablesTaskUpdater::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::FixedTickablesTaskUpdater::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "FixedTickablesTaskUpdater", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TickableManager
#include "Zenject/TickableManager.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0
#include "Zenject/TickableManager_--c__DisplayClass17_0.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c
#include "Zenject/TickableManager_--c.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0
#include "Zenject/TickableManager_--c__DisplayClass18_0.hpp"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0
#include "Zenject/TickableManager_--c__DisplayClass19_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.TickablesTaskUpdater
#include "Zenject/TickablesTaskUpdater.hpp"
// Including type: Zenject.FixedTickablesTaskUpdater
#include "Zenject/FixedTickablesTaskUpdater.hpp"
// Including type: Zenject.LateTickablesTaskUpdater
#include "Zenject/LateTickablesTaskUpdater.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.ITickable> _tickables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::ITickable*>*& Zenject::TickableManager::dyn__tickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__tickables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tickables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::ITickable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.IFixedTickable> _fixedTickables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::IFixedTickable*>*& Zenject::TickableManager::dyn__fixedTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__fixedTickables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedTickables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::IFixedTickable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<Zenject.ILateTickable> _lateTickables
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Zenject::ILateTickable*>*& Zenject::TickableManager::dyn__lateTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__lateTickables");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateTickables"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::Zenject::ILateTickable*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _priorities
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>*& Zenject::TickableManager::dyn__priorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__priorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_priorities"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _fixedPriorities
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>*& Zenject::TickableManager::dyn__fixedPriorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__fixedPriorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedPriorities"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> _latePriorities
[[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>*& Zenject::TickableManager::dyn__latePriorities() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__latePriorities");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_latePriorities"))->offset;
  return *reinterpret_cast<::System::Collections::Generic::List_1<::ModestTree::Util::ValuePair_2<::System::Type*, int>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.TickablesTaskUpdater _updater
[[deprecated("Use field access instead!")]] ::Zenject::TickablesTaskUpdater*& Zenject::TickableManager::dyn__updater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__updater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updater"))->offset;
  return *reinterpret_cast<::Zenject::TickablesTaskUpdater**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.FixedTickablesTaskUpdater _fixedUpdater
[[deprecated("Use field access instead!")]] ::Zenject::FixedTickablesTaskUpdater*& Zenject::TickableManager::dyn__fixedUpdater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__fixedUpdater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fixedUpdater"))->offset;
  return *reinterpret_cast<::Zenject::FixedTickablesTaskUpdater**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly Zenject.LateTickablesTaskUpdater _lateUpdater
[[deprecated("Use field access instead!")]] ::Zenject::LateTickablesTaskUpdater*& Zenject::TickableManager::dyn__lateUpdater() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__lateUpdater");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lateUpdater"))->offset;
  return *reinterpret_cast<::Zenject::LateTickablesTaskUpdater**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isPaused
[[deprecated("Use field access instead!")]] bool& Zenject::TickableManager::dyn__isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::dyn__isPaused");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isPaused"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager.get_Tickables
::System::Collections::Generic::IEnumerable_1<::Zenject::ITickable*>* Zenject::TickableManager::get_Tickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::get_Tickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Tickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::Zenject::ITickable*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.get_IsPaused
bool Zenject::TickableManager::get_IsPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::get_IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.set_IsPaused
void Zenject::TickableManager::set_IsPaused(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::set_IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.TickableManager.Initialize
void Zenject::TickableManager::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.InitFixedTickables
void Zenject::TickableManager::InitFixedTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::InitFixedTickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitFixedTickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.InitTickables
void Zenject::TickableManager::InitTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::InitTickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitTickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.InitLateTickables
void Zenject::TickableManager::InitLateTickables() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::InitLateTickables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitLateTickables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.Add
void Zenject::TickableManager::Add(::Zenject::ITickable* tickable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable), ::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable, priority);
}
// Autogenerated method: Zenject.TickableManager.Add
void Zenject::TickableManager::Add(::Zenject::ITickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.AddLate
void Zenject::TickableManager::AddLate(::Zenject::ILateTickable* tickable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable), ::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable, priority);
}
// Autogenerated method: Zenject.TickableManager.AddLate
void Zenject::TickableManager::AddLate(::Zenject::ILateTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::AddLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.AddFixed
void Zenject::TickableManager::AddFixed(::Zenject::IFixedTickable* tickable, int priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::AddFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable), ::il2cpp_utils::ExtractType(priority)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable, priority);
}
// Autogenerated method: Zenject.TickableManager.AddFixed
void Zenject::TickableManager::AddFixed(::Zenject::IFixedTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::AddFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.Remove
void Zenject::TickableManager::Remove(::Zenject::ITickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.RemoveLate
void Zenject::TickableManager::RemoveLate(::Zenject::ILateTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::RemoveLate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveLate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.RemoveFixed
void Zenject::TickableManager::RemoveFixed(::Zenject::IFixedTickable* tickable) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::RemoveFixed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFixed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tickable)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tickable);
}
// Autogenerated method: Zenject.TickableManager.Update
void Zenject::TickableManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.FixedUpdate
void Zenject::TickableManager::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.LateUpdate
void Zenject::TickableManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.TickableManager.__zenCreate
::Il2CppObject* Zenject::TickableManager::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.TickableManager.__zenFieldSetter0
void Zenject::TickableManager::__zenFieldSetter0(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenFieldSetter0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenFieldSetter0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.TickableManager.__zenFieldSetter1
void Zenject::TickableManager::__zenFieldSetter1(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenFieldSetter1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenFieldSetter1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.TickableManager.__zenFieldSetter2
void Zenject::TickableManager::__zenFieldSetter2(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenFieldSetter2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenFieldSetter2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.TickableManager.__zenFieldSetter3
void Zenject::TickableManager::__zenFieldSetter3(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenFieldSetter3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenFieldSetter3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.TickableManager.__zenFieldSetter4
void Zenject::TickableManager::__zenFieldSetter4(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenFieldSetter4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenFieldSetter4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.TickableManager.__zenFieldSetter5
void Zenject::TickableManager::__zenFieldSetter5(::Il2CppObject* P_0, ::Il2CppObject* P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenFieldSetter5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenFieldSetter5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.TickableManager.__zenInjectMethod0
void Zenject::TickableManager::__zenInjectMethod0(::Il2CppObject* P_0, ::ArrayW<::Il2CppObject*> P_1) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenInjectMethod0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenInjectMethod0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0), ::il2cpp_utils::ExtractType(P_1)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0, P_1);
}
// Autogenerated method: Zenject.TickableManager.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::TickableManager::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0
#include "Zenject/TickableManager_--c__DisplayClass17_0.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.IFixedTickable tickable
[[deprecated("Use field access instead!")]] ::Zenject::IFixedTickable*& Zenject::TickableManager::$$c__DisplayClass17_0::dyn_tickable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass17_0::dyn_tickable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tickable"))->offset;
  return *reinterpret_cast<::Zenject::IFixedTickable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0.<InitFixedTickables>b__1
bool Zenject::TickableManager::$$c__DisplayClass17_0::$InitFixedTickables$b__1(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass17_0::<InitFixedTickables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitFixedTickables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0.__zenCreate
::Il2CppObject* Zenject::TickableManager::$$c__DisplayClass17_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass17_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c__DisplayClass17_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass17_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::TickableManager::$$c__DisplayClass17_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass17_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c__DisplayClass17_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TickableManager/Zenject.<>c
#include "Zenject/TickableManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.TickableManager/Zenject.<>c <>9
::Zenject::TickableManager::$$c* Zenject::TickableManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Zenject::TickableManager::$$c*>("Zenject", "TickableManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.TickableManager/Zenject.<>c <>9
void Zenject::TickableManager::$$c::_set_$$9(::Zenject::TickableManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__17_0
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>* Zenject::TickableManager::$$c::_get_$$9__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_get_$$9__17_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>*>("Zenject", "TickableManager/<>c", "<>9__17_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__17_0
void Zenject::TickableManager::$$c::_set_$$9__17_0(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_set_$$9__17_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__17_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__17_2
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* Zenject::TickableManager::$$c::_get_$$9__17_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_get_$$9__17_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>*>("Zenject", "TickableManager/<>c", "<>9__17_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__17_2
void Zenject::TickableManager::$$c::_set_$$9__17_2(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_set_$$9__17_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__17_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__18_0
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>* Zenject::TickableManager::$$c::_get_$$9__18_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_get_$$9__18_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>*>("Zenject", "TickableManager/<>c", "<>9__18_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__18_0
void Zenject::TickableManager::$$c::_set_$$9__18_0(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_set_$$9__18_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__18_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__18_2
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* Zenject::TickableManager::$$c::_get_$$9__18_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_get_$$9__18_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>*>("Zenject", "TickableManager/<>c", "<>9__18_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__18_2
void Zenject::TickableManager::$$c::_set_$$9__18_2(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_set_$$9__18_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__18_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__19_0
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>* Zenject::TickableManager::$$c::_get_$$9__19_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_get_$$9__19_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>*>("Zenject", "TickableManager/<>c", "<>9__19_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Type> <>9__19_0
void Zenject::TickableManager::$$c::_set_$$9__19_0(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, ::System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_set_$$9__19_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__19_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__19_2
::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* Zenject::TickableManager::$$c::_get_$$9__19_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_get_$$9__19_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>*>("Zenject", "TickableManager/<>c", "<>9__19_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<ModestTree.Util.ValuePair`2<System.Type,System.Int32>,System.Int32> <>9__19_2
void Zenject::TickableManager::$$c::_set_$$9__19_2(::System::Func_2<::ModestTree::Util::ValuePair_2<::System::Type*, int>*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::_set_$$9__19_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "TickableManager/<>c", "<>9__19_2", value)));
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c..cctor
void Zenject::TickableManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitFixedTickables>b__17_0
::System::Type* Zenject::TickableManager::$$c::$InitFixedTickables$b__17_0(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::<InitFixedTickables>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitFixedTickables>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitFixedTickables>b__17_2
int Zenject::TickableManager::$$c::$InitFixedTickables$b__17_2(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::<InitFixedTickables>b__17_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitFixedTickables>b__17_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitTickables>b__18_0
::System::Type* Zenject::TickableManager::$$c::$InitTickables$b__18_0(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::<InitTickables>b__18_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitTickables>b__18_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitTickables>b__18_2
int Zenject::TickableManager::$$c::$InitTickables$b__18_2(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::<InitTickables>b__18_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitTickables>b__18_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitLateTickables>b__19_0
::System::Type* Zenject::TickableManager::$$c::$InitLateTickables$b__19_0(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::<InitLateTickables>b__19_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitLateTickables>b__19_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<::System::Type*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.<InitLateTickables>b__19_2
int Zenject::TickableManager::$$c::$InitLateTickables$b__19_2(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::<InitLateTickables>b__19_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitLateTickables>b__19_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.__zenCreate
::Il2CppObject* Zenject::TickableManager::$$c::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::TickableManager::$$c::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0
#include "Zenject/TickableManager_--c__DisplayClass18_0.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ITickable tickable
[[deprecated("Use field access instead!")]] ::Zenject::ITickable*& Zenject::TickableManager::$$c__DisplayClass18_0::dyn_tickable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass18_0::dyn_tickable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tickable"))->offset;
  return *reinterpret_cast<::Zenject::ITickable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0.<InitTickables>b__1
bool Zenject::TickableManager::$$c__DisplayClass18_0::$InitTickables$b__1(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass18_0::<InitTickables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitTickables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0.__zenCreate
::Il2CppObject* Zenject::TickableManager::$$c__DisplayClass18_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass18_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c__DisplayClass18_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass18_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::TickableManager::$$c__DisplayClass18_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass18_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c__DisplayClass18_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0
#include "Zenject/TickableManager_--c__DisplayClass19_0.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
// Including type: ModestTree.Util.ValuePair`2
#include "ModestTree/Util/ValuePair_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public Zenject.ILateTickable tickable
[[deprecated("Use field access instead!")]] ::Zenject::ILateTickable*& Zenject::TickableManager::$$c__DisplayClass19_0::dyn_tickable() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass19_0::dyn_tickable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tickable"))->offset;
  return *reinterpret_cast<::Zenject::ILateTickable**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0.<InitLateTickables>b__1
bool Zenject::TickableManager::$$c__DisplayClass19_0::$InitLateTickables$b__1(::ModestTree::Util::ValuePair_2<::System::Type*, int>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass19_0::<InitLateTickables>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitLateTickables>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0.__zenCreate
::Il2CppObject* Zenject::TickableManager::$$c__DisplayClass19_0::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass19_0::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c__DisplayClass19_0", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.TickableManager/Zenject.<>c__DisplayClass19_0.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::TickableManager::$$c__DisplayClass19_0::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::TickableManager::$$c__DisplayClass19_0::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "TickableManager/<>c__DisplayClass19_0", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ActionInstaller
#include "Zenject/ActionInstaller.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.InjectTypeInfo
#include "Zenject/InjectTypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly System.Action`1<Zenject.DiContainer> _installMethod
[[deprecated("Use field access instead!")]] ::System::Action_1<::Zenject::DiContainer*>*& Zenject::ActionInstaller::dyn__installMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ActionInstaller::dyn__installMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_installMethod"))->offset;
  return *reinterpret_cast<::System::Action_1<::Zenject::DiContainer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Zenject.ActionInstaller.__zenCreate
::Il2CppObject* Zenject::ActionInstaller::__zenCreate(::ArrayW<::Il2CppObject*> P_0) {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ActionInstaller::__zenCreate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ActionInstaller", "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
}
// Autogenerated method: Zenject.ActionInstaller.InstallBindings
void Zenject::ActionInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ActionInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ActionInstaller.__zenCreateInjectTypeInfo
::Zenject::InjectTypeInfo* Zenject::ActionInstaller::__zenCreateInjectTypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::ActionInstaller::__zenCreateInjectTypeInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ActionInstaller", "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
