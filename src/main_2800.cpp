// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSaveData/PlayerOverallStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerOverallStatsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::PlayerOverallStatsData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerOverallStatsData::*)(int, int, int, int64_t, int, int, int, int, float, int, int64_t)>(&PlayerSaveData::PlayerOverallStatsData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerOverallStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerOverallStatsData::*)(int, int, int, int64_t, int, int, int, int, float, int, int64_t)>(&PlayerSaveData::PlayerOverallStatsData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerOverallStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: PlayerSaveData::PlayerOverallStatsData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerOverallStatsData::*)()>(&PlayerSaveData::PlayerOverallStatsData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerOverallStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerOverallStatsData::*)()>(&PlayerSaveData::PlayerOverallStatsData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerOverallStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/PlayerLevelStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerLevelStatsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::PlayerLevelStatsData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerLevelStatsData::*)()>(&PlayerSaveData::PlayerLevelStatsData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerLevelStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerLevelStatsData::*)()>(&PlayerSaveData::PlayerLevelStatsData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerLevelStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/PlayerMissionStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerMissionStatsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::PlayerMissionStatsData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerMissionStatsData::*)()>(&PlayerSaveData::PlayerMissionStatsData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerMissionStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PlayerMissionStatsData::*)()>(&PlayerSaveData::PlayerMissionStatsData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PlayerMissionStatsData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSaveData/PracticeSettings
#include "GlobalNamespace/PlayerSaveData_PracticeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::PracticeSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PracticeSettings::*)()>(&PlayerSaveData::PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::PracticeSettings::*)()>(&PlayerSaveData::PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/ColorScheme
#include "GlobalNamespace/PlayerSaveData_ColorScheme.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::ColorScheme::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::ColorScheme::*)(::Il2CppString*, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&PlayerSaveData::ColorScheme::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::ColorScheme*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::ColorScheme::*)(::Il2CppString*, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color)>(&PlayerSaveData::ColorScheme::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::ColorScheme*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/ColorSchemesSettings
#include "GlobalNamespace/PlayerSaveData_ColorSchemesSettings.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: PlayerSaveData/ColorScheme
#include "GlobalNamespace/PlayerSaveData_ColorScheme.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::ColorSchemesSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::ColorSchemesSettings::*)(bool, ::Il2CppString*, System::Collections::Generic::List_1<GlobalNamespace::PlayerSaveData::ColorScheme*>*)>(&PlayerSaveData::ColorSchemesSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::ColorSchemesSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::PlayerSaveData::ColorScheme*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::ColorSchemesSettings::*)(bool, ::Il2CppString*, System::Collections::Generic::List_1<GlobalNamespace::PlayerSaveData::ColorScheme*>*)>(&PlayerSaveData::ColorSchemesSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::ColorSchemesSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::PlayerSaveData::ColorScheme*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/OverrideEnvironmentSettings
#include "GlobalNamespace/PlayerSaveData_OverrideEnvironmentSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::OverrideEnvironmentSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::OverrideEnvironmentSettings::*)()>(&PlayerSaveData::OverrideEnvironmentSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::OverrideEnvironmentSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::OverrideEnvironmentSettings::*)()>(&PlayerSaveData::OverrideEnvironmentSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::OverrideEnvironmentSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/GuestPlayer
#include "GlobalNamespace/PlayerSaveData_GuestPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::GuestPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::GuestPlayer::*)()>(&PlayerSaveData::GuestPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::GuestPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::GuestPlayer::*)()>(&PlayerSaveData::GuestPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::GuestPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/MultiplayerModeSettings
#include "GlobalNamespace/PlayerSaveData_MultiplayerModeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::MultiplayerModeSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::MultiplayerModeSettings::*)()>(&PlayerSaveData::MultiplayerModeSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::MultiplayerModeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::MultiplayerModeSettings::*)()>(&PlayerSaveData::MultiplayerModeSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::MultiplayerModeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/LocalPlayer
#include "GlobalNamespace/PlayerSaveData_LocalPlayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: PlayerSaveData/GameplayModifiers
#include "GlobalNamespace/PlayerSaveData_GameplayModifiers.hpp"
// Including type: PlayerSaveData/PlayerSpecificSettings
#include "GlobalNamespace/PlayerSaveData_PlayerSpecificSettings.hpp"
// Including type: PlayerSaveData/PracticeSettings
#include "GlobalNamespace/PlayerSaveData_PracticeSettings.hpp"
// Including type: PlayerSaveData/PlayerAllOverallStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerAllOverallStatsData.hpp"
// Including type: PlayerSaveData/PlayerLevelStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerLevelStatsData.hpp"
// Including type: PlayerSaveData/PlayerMissionStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerMissionStatsData.hpp"
// Including type: PlayerSaveData/ColorSchemesSettings
#include "GlobalNamespace/PlayerSaveData_ColorSchemesSettings.hpp"
// Including type: PlayerSaveData/OverrideEnvironmentSettings
#include "GlobalNamespace/PlayerSaveData_OverrideEnvironmentSettings.hpp"
// Including type: PlayerSaveData/MultiplayerModeSettings
#include "GlobalNamespace/PlayerSaveData_MultiplayerModeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerSaveData::LocalPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::LocalPlayer::*)()>(&PlayerSaveData::LocalPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::LocalPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSaveData::LocalPlayer::*)()>(&PlayerSaveData::LocalPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSaveData::LocalPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerSpecificSettings.get_leftHanded
bool GlobalNamespace::PlayerSpecificSettings::get_leftHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_leftHanded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHanded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_playerHeight
float GlobalNamespace::PlayerSpecificSettings::get_playerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_playerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_automaticPlayerHeight
bool GlobalNamespace::PlayerSpecificSettings::get_automaticPlayerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_automaticPlayerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_automaticPlayerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_sfxVolume
float GlobalNamespace::PlayerSpecificSettings::get_sfxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_sfxVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sfxVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_reduceDebris
bool GlobalNamespace::PlayerSpecificSettings::get_reduceDebris() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_reduceDebris");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reduceDebris", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_noTextsAndHuds
bool GlobalNamespace::PlayerSpecificSettings::get_noTextsAndHuds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_noTextsAndHuds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noTextsAndHuds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_noFailEffects
bool GlobalNamespace::PlayerSpecificSettings::get_noFailEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_noFailEffects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFailEffects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_advancedHud
bool GlobalNamespace::PlayerSpecificSettings::get_advancedHud() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_advancedHud");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_advancedHud", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_autoRestart
bool GlobalNamespace::PlayerSpecificSettings::get_autoRestart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_autoRestart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoRestart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_saberTrailIntensity
float GlobalNamespace::PlayerSpecificSettings::get_saberTrailIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_saberTrailIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberTrailIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_noteJumpStartBeatOffset
float GlobalNamespace::PlayerSpecificSettings::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_noteJumpStartBeatOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_hideNoteSpawnEffect
bool GlobalNamespace::PlayerSpecificSettings::get_hideNoteSpawnEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_hideNoteSpawnEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hideNoteSpawnEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_adaptiveSfx
bool GlobalNamespace::PlayerSpecificSettings::get_adaptiveSfx() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_adaptiveSfx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_adaptiveSfx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_environmentEffectsFilterDefaultPreset
GlobalNamespace::EnvironmentEffectsFilterPreset GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterDefaultPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterDefaultPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentEffectsFilterDefaultPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentEffectsFilterPreset, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_environmentEffectsFilterExpertPlusPreset
GlobalNamespace::EnvironmentEffectsFilterPreset GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterExpertPlusPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterExpertPlusPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentEffectsFilterExpertPlusPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentEffectsFilterPreset, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.CopyWith
GlobalNamespace::PlayerSpecificSettings* GlobalNamespace::PlayerSpecificSettings::CopyWith(System::Nullable_1<bool> leftHanded, System::Nullable_1<float> playerHeight, System::Nullable_1<bool> automaticPlayerHeight, System::Nullable_1<float> sfxVolume, System::Nullable_1<bool> reduceDebris, System::Nullable_1<bool> noTextsAndHuds, System::Nullable_1<bool> noFailEffects, System::Nullable_1<bool> advancedHud, System::Nullable_1<bool> autoRestart, System::Nullable_1<float> saberTrailIntensity, System::Nullable_1<float> noteJumpStartBeatOffset, System::Nullable_1<bool> hideNoteSpawnEffect, System::Nullable_1<bool> adaptiveSfx, System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset> environmentEffectsFilterDefaultPreset, System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset> environmentEffectsFilterExpertPlusPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::CopyWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHanded), ::il2cpp_utils::ExtractType(playerHeight), ::il2cpp_utils::ExtractType(automaticPlayerHeight), ::il2cpp_utils::ExtractType(sfxVolume), ::il2cpp_utils::ExtractType(reduceDebris), ::il2cpp_utils::ExtractType(noTextsAndHuds), ::il2cpp_utils::ExtractType(noFailEffects), ::il2cpp_utils::ExtractType(advancedHud), ::il2cpp_utils::ExtractType(autoRestart), ::il2cpp_utils::ExtractType(saberTrailIntensity), ::il2cpp_utils::ExtractType(noteJumpStartBeatOffset), ::il2cpp_utils::ExtractType(hideNoteSpawnEffect), ::il2cpp_utils::ExtractType(adaptiveSfx), ::il2cpp_utils::ExtractType(environmentEffectsFilterDefaultPreset), ::il2cpp_utils::ExtractType(environmentEffectsFilterExpertPlusPreset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerSpecificSettings*, false>(this, ___internal__method, leftHanded, playerHeight, automaticPlayerHeight, sfxVolume, reduceDebris, noTextsAndHuds, noFailEffects, advancedHud, autoRestart, saberTrailIntensity, noteJumpStartBeatOffset, hideNoteSpawnEffect, adaptiveSfx, environmentEffectsFilterDefaultPreset, environmentEffectsFilterExpertPlusPreset);
}
// Writing MetadataGetter for method: PlayerSpecificSettings::get_leftHanded
// Il2CppName: get_leftHanded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_leftHanded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_leftHanded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_playerHeight
// Il2CppName: get_playerHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_playerHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_playerHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_automaticPlayerHeight
// Il2CppName: get_automaticPlayerHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_automaticPlayerHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_automaticPlayerHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_sfxVolume
// Il2CppName: get_sfxVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_sfxVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_sfxVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_reduceDebris
// Il2CppName: get_reduceDebris
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_reduceDebris)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_reduceDebris", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_noTextsAndHuds
// Il2CppName: get_noTextsAndHuds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_noTextsAndHuds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_noTextsAndHuds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_noFailEffects
// Il2CppName: get_noFailEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_noFailEffects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_noFailEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_advancedHud
// Il2CppName: get_advancedHud
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_advancedHud)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_advancedHud", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_autoRestart
// Il2CppName: get_autoRestart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_autoRestart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_autoRestart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_saberTrailIntensity
// Il2CppName: get_saberTrailIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_saberTrailIntensity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_saberTrailIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_noteJumpStartBeatOffset
// Il2CppName: get_noteJumpStartBeatOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_noteJumpStartBeatOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_hideNoteSpawnEffect
// Il2CppName: get_hideNoteSpawnEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_hideNoteSpawnEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_hideNoteSpawnEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_adaptiveSfx
// Il2CppName: get_adaptiveSfx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_adaptiveSfx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_adaptiveSfx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_environmentEffectsFilterDefaultPreset
// Il2CppName: get_environmentEffectsFilterDefaultPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentEffectsFilterPreset (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_environmentEffectsFilterDefaultPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_environmentEffectsFilterDefaultPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::get_environmentEffectsFilterExpertPlusPreset
// Il2CppName: get_environmentEffectsFilterExpertPlusPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentEffectsFilterPreset (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::get_environmentEffectsFilterExpertPlusPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "get_environmentEffectsFilterExpertPlusPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettings::*)(bool, float, bool, float, bool, bool, bool, bool, bool, float, float, bool, bool, GlobalNamespace::EnvironmentEffectsFilterPreset, GlobalNamespace::EnvironmentEffectsFilterPreset)>(&PlayerSpecificSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnvironmentEffectsFilterPreset>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnvironmentEffectsFilterPreset>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettings::*)(bool, float, bool, float, bool, bool, bool, bool, bool, float, float, bool, bool, GlobalNamespace::EnvironmentEffectsFilterPreset, GlobalNamespace::EnvironmentEffectsFilterPreset)>(&PlayerSpecificSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnvironmentEffectsFilterPreset>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnvironmentEffectsFilterPreset>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::CopyWith
// Il2CppName: CopyWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerSpecificSettings* (PlayerSpecificSettings::*)(System::Nullable_1<bool>, System::Nullable_1<float>, System::Nullable_1<bool>, System::Nullable_1<float>, System::Nullable_1<bool>, System::Nullable_1<bool>, System::Nullable_1<bool>, System::Nullable_1<bool>, System::Nullable_1<bool>, System::Nullable_1<float>, System::Nullable_1<float>, System::Nullable_1<bool>, System::Nullable_1<bool>, System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset>, System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset>)>(&PlayerSpecificSettings::CopyWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), "CopyWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<float>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<float>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<float>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<float>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<bool>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset>>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset>>()});
  }
};
// Writing MetadataGetter for method: PlayerSpecificSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerSpecificSettings::*)()>(&PlayerSpecificSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerSpecificSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarData.get_headTopId
::Il2CppString* GlobalNamespace::AvatarData::get_headTopId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_headTopId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_headTopId
void GlobalNamespace::AvatarData::set_headTopId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_headTopId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_headTopId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_glassesId
::Il2CppString* GlobalNamespace::AvatarData::get_glassesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_glassesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glassesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_glassesId
void GlobalNamespace::AvatarData::set_glassesId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_glassesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glassesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_facialHairId
::Il2CppString* GlobalNamespace::AvatarData::get_facialHairId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_facialHairId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_facialHairId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_facialHairId
void GlobalNamespace::AvatarData::set_facialHairId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_facialHairId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_facialHairId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_handsId
::Il2CppString* GlobalNamespace::AvatarData::get_handsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_handsId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handsId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_handsId
void GlobalNamespace::AvatarData::set_handsId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_handsId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handsId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesId
::Il2CppString* GlobalNamespace::AvatarData::get_clothesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesId
void GlobalNamespace::AvatarData::set_clothesId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_eyesId
::Il2CppString* GlobalNamespace::AvatarData::get_eyesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_eyesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_eyesId
void GlobalNamespace::AvatarData::set_eyesId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_eyesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eyesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_mouthId
::Il2CppString* GlobalNamespace::AvatarData::get_mouthId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_mouthId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mouthId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_mouthId
void GlobalNamespace::AvatarData::set_mouthId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_mouthId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mouthId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_headTopPrimaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_headTopPrimaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_headTopPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_headTopPrimaryColor
void GlobalNamespace::AvatarData::set_headTopPrimaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_headTopPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_headTopPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_headTopSecondaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_headTopSecondaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_headTopSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_headTopSecondaryColor
void GlobalNamespace::AvatarData::set_headTopSecondaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_headTopSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_headTopSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_glassesColor
UnityEngine::Color GlobalNamespace::AvatarData::get_glassesColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_glassesColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glassesColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_glassesColor
void GlobalNamespace::AvatarData::set_glassesColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_glassesColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glassesColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_facialHairColor
UnityEngine::Color GlobalNamespace::AvatarData::get_facialHairColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_facialHairColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_facialHairColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_facialHairColor
void GlobalNamespace::AvatarData::set_facialHairColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_facialHairColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_facialHairColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_handsColor
UnityEngine::Color GlobalNamespace::AvatarData::get_handsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_handsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_handsColor
void GlobalNamespace::AvatarData::set_handsColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_handsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesPrimaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_clothesPrimaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesPrimaryColor
void GlobalNamespace::AvatarData::set_clothesPrimaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesSecondaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_clothesSecondaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesSecondaryColor
void GlobalNamespace::AvatarData::set_clothesSecondaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesDetailColor
UnityEngine::Color GlobalNamespace::AvatarData::get_clothesDetailColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesDetailColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesDetailColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesDetailColor
void GlobalNamespace::AvatarData::set_clothesDetailColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesDetailColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesDetailColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_skinColorId
::Il2CppString* GlobalNamespace::AvatarData::get_skinColorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_skinColorId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skinColorId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_skinColorId
void GlobalNamespace::AvatarData::set_skinColorId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_skinColorId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_skinColorId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.Clone
GlobalNamespace::AvatarData* GlobalNamespace::AvatarData::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::Clone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarData::get_headTopId
// Il2CppName: get_headTopId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_headTopId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_headTopId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_headTopId
// Il2CppName: set_headTopId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_headTopId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_headTopId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_glassesId
// Il2CppName: get_glassesId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_glassesId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_glassesId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_glassesId
// Il2CppName: set_glassesId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_glassesId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_glassesId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_facialHairId
// Il2CppName: get_facialHairId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_facialHairId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_facialHairId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_facialHairId
// Il2CppName: set_facialHairId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_facialHairId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_facialHairId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_handsId
// Il2CppName: get_handsId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_handsId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_handsId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_handsId
// Il2CppName: set_handsId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_handsId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_handsId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_clothesId
// Il2CppName: get_clothesId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_clothesId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_clothesId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_clothesId
// Il2CppName: set_clothesId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_clothesId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_clothesId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_eyesId
// Il2CppName: get_eyesId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_eyesId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_eyesId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_eyesId
// Il2CppName: set_eyesId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_eyesId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_eyesId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_mouthId
// Il2CppName: get_mouthId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_mouthId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_mouthId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_mouthId
// Il2CppName: set_mouthId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_mouthId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_mouthId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_headTopPrimaryColor
// Il2CppName: get_headTopPrimaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_headTopPrimaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_headTopPrimaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_headTopPrimaryColor
// Il2CppName: set_headTopPrimaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_headTopPrimaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_headTopPrimaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_headTopSecondaryColor
// Il2CppName: get_headTopSecondaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_headTopSecondaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_headTopSecondaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_headTopSecondaryColor
// Il2CppName: set_headTopSecondaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_headTopSecondaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_headTopSecondaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_glassesColor
// Il2CppName: get_glassesColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_glassesColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_glassesColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_glassesColor
// Il2CppName: set_glassesColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_glassesColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_glassesColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_facialHairColor
// Il2CppName: get_facialHairColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_facialHairColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_facialHairColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_facialHairColor
// Il2CppName: set_facialHairColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_facialHairColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_facialHairColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_handsColor
// Il2CppName: get_handsColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_handsColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_handsColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_handsColor
// Il2CppName: set_handsColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_handsColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_handsColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_clothesPrimaryColor
// Il2CppName: get_clothesPrimaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_clothesPrimaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_clothesPrimaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_clothesPrimaryColor
// Il2CppName: set_clothesPrimaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_clothesPrimaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_clothesPrimaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_clothesSecondaryColor
// Il2CppName: get_clothesSecondaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_clothesSecondaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_clothesSecondaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_clothesSecondaryColor
// Il2CppName: set_clothesSecondaryColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_clothesSecondaryColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_clothesSecondaryColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_clothesDetailColor
// Il2CppName: get_clothesDetailColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarData::*)()>(&AvatarData::get_clothesDetailColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_clothesDetailColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_clothesDetailColor
// Il2CppName: set_clothesDetailColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(UnityEngine::Color)>(&AvatarData::set_clothesDetailColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_clothesDetailColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarData::get_skinColorId
// Il2CppName: get_skinColorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AvatarData::*)()>(&AvatarData::get_skinColorId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "get_skinColorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::set_skinColorId
// Il2CppName: set_skinColorId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*)>(&AvatarData::set_skinColorId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "set_skinColorId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*, UnityEngine::Color, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&AvatarData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)(::Il2CppString*, UnityEngine::Color, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, ::Il2CppString*, UnityEngine::Color, UnityEngine::Color, UnityEngine::Color, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&AvatarData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarData::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (AvatarData::*)()>(&AvatarData::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)()>(&AvatarData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarData::*)()>(&AvatarData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarDataFileManagerSO
#include "GlobalNamespace/AvatarDataFileManagerSO.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
// Including type: AvatarSaveData
#include "GlobalNamespace/AvatarSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kAvatarDataFileName
::Il2CppString* GlobalNamespace::AvatarDataFileManagerSO::_get_kAvatarDataFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_get_kAvatarDataFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AvatarDataFileManagerSO", "kAvatarDataFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kAvatarDataFileName
void GlobalNamespace::AvatarDataFileManagerSO::_set_kAvatarDataFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_set_kAvatarDataFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarDataFileManagerSO", "kAvatarDataFileName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kTempFileName
::Il2CppString* GlobalNamespace::AvatarDataFileManagerSO::_get_kTempFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_get_kTempFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AvatarDataFileManagerSO", "kTempFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTempFileName
void GlobalNamespace::AvatarDataFileManagerSO::_set_kTempFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_set_kTempFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarDataFileManagerSO", "kTempFileName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kBackupFileName
::Il2CppString* GlobalNamespace::AvatarDataFileManagerSO::_get_kBackupFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_get_kBackupFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AvatarDataFileManagerSO", "kBackupFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBackupFileName
void GlobalNamespace::AvatarDataFileManagerSO::_set_kBackupFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_set_kBackupFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarDataFileManagerSO", "kBackupFileName", value));
}
// Autogenerated method: AvatarDataFileManagerSO.Save
void GlobalNamespace::AvatarDataFileManagerSO::Save(GlobalNamespace::AvatarData* avatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, avatarData);
}
// Autogenerated method: AvatarDataFileManagerSO.Load
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataFileManagerSO::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataFileManagerSO.LoadFromCurrentVersion
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataFileManagerSO::LoadFromCurrentVersion(GlobalNamespace::AvatarSaveData* avatarSaveData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::LoadFromCurrentVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadFromCurrentVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarSaveData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method, avatarSaveData);
}
// Writing MetadataGetter for method: AvatarDataFileManagerSO::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataFileManagerSO::*)(GlobalNamespace::AvatarData*)>(&AvatarDataFileManagerSO::Save)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataFileManagerSO*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarData*>()});
  }
};
// Writing MetadataGetter for method: AvatarDataFileManagerSO::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (AvatarDataFileManagerSO::*)()>(&AvatarDataFileManagerSO::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataFileManagerSO*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataFileManagerSO::LoadFromCurrentVersion
// Il2CppName: LoadFromCurrentVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (AvatarDataFileManagerSO::*)(GlobalNamespace::AvatarSaveData*)>(&AvatarDataFileManagerSO::LoadFromCurrentVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataFileManagerSO*), "LoadFromCurrentVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarSaveData*>()});
  }
};
// Writing MetadataGetter for method: AvatarDataFileManagerSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataFileManagerSO::*)()>(&AvatarDataFileManagerSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataFileManagerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataFileManagerSO::*)()>(&AvatarDataFileManagerSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataFileManagerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarDataModel
#include "GlobalNamespace/AvatarDataModel.hpp"
// Including type: AvatarDataFileManagerSO
#include "GlobalNamespace/AvatarDataFileManagerSO.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarDataModel.get_avatarData
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataModel::get_avatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::get_avatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_avatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.set_avatarData
void GlobalNamespace::AvatarDataModel::set_avatarData(GlobalNamespace::AvatarData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::set_avatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_avatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarDataModel.OnEnable
void GlobalNamespace::AvatarDataModel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.OnApplicationPause
void GlobalNamespace::AvatarDataModel::OnApplicationPause(bool pauseStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::OnApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pauseStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pauseStatus);
}
// Autogenerated method: AvatarDataModel.OnDisable
void GlobalNamespace::AvatarDataModel::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.Randomize
void GlobalNamespace::AvatarDataModel::Randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::Randomize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Randomize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.Save
void GlobalNamespace::AvatarDataModel::Save() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.Load
void GlobalNamespace::AvatarDataModel::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.CreateDefaultAvatarData
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataModel::CreateDefaultAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::CreateDefaultAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDefaultAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarDataModel::get_avatarData
// Il2CppName: get_avatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (AvatarDataModel::*)()>(&AvatarDataModel::get_avatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "get_avatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::set_avatarData
// Il2CppName: set_avatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)(GlobalNamespace::AvatarData*)>(&AvatarDataModel::set_avatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "set_avatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarData*>()});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)(bool)>(&AvatarDataModel::OnApplicationPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::Randomize
// Il2CppName: Randomize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::Randomize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "Randomize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::Save)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::CreateDefaultAvatarData
// Il2CppName: CreateDefaultAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (AvatarDataModel::*)()>(&AvatarDataModel::CreateDefaultAvatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "CreateDefaultAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarDataModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarDataMultiplayerAvatarDataConverter
#include "GlobalNamespace/AvatarDataMultiplayerAvatarDataConverter.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarDataMultiplayerAvatarDataConverter.CreateMultiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateMultiplayerAvatarData(GlobalNamespace::AvatarData* avatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateMultiplayerAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarDataMultiplayerAvatarDataConverter", "CreateMultiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, avatarData);
}
// Autogenerated method: AvatarDataMultiplayerAvatarDataConverter.CreateAvatarData
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateAvatarData(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarDataMultiplayerAvatarDataConverter", "CreateAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerAvatarData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, multiplayerAvatarData);
}
// Writing MetadataGetter for method: AvatarDataMultiplayerAvatarDataConverter::CreateMultiplayerAvatarData
// Il2CppName: CreateMultiplayerAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerAvatarData (*)(GlobalNamespace::AvatarData*)>(&AvatarDataMultiplayerAvatarDataConverter::CreateMultiplayerAvatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataMultiplayerAvatarDataConverter*), "CreateMultiplayerAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarData*>()});
  }
};
// Writing MetadataGetter for method: AvatarDataMultiplayerAvatarDataConverter::CreateAvatarData
// Il2CppName: CreateAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (*)(GlobalNamespace::MultiplayerAvatarData)>(&AvatarDataMultiplayerAvatarDataConverter::CreateAvatarData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarDataMultiplayerAvatarDataConverter*), "CreateAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerAvatarData>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarMeshPartSO
#include "GlobalNamespace/AvatarMeshPartSO.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarMeshPartSO.get_mesh
UnityEngine::Mesh* GlobalNamespace::AvatarMeshPartSO::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarMeshPartSO::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarMeshPartSO::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (AvatarMeshPartSO::*)()>(&AvatarMeshPartSO::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarMeshPartSO*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarMeshPartSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarMeshPartSO::*)()>(&AvatarMeshPartSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarMeshPartSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarMeshPartSO::*)()>(&AvatarMeshPartSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarMeshPartSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: AvatarPartCollection`1
#include "GlobalNamespace/AvatarPartCollection_1.hpp"
// Including type: AvatarMeshPartSO
#include "GlobalNamespace/AvatarMeshPartSO.hpp"
// Including type: AvatarSpritePartSO
#include "GlobalNamespace/AvatarSpritePartSO.hpp"
// Including type: SkinColorSO
#include "GlobalNamespace/SkinColorSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: AvatarPartsModelSO
#include "GlobalNamespace/AvatarPartsModelSO.hpp"
// Including type: SkinColorSetSO
#include "GlobalNamespace/SkinColorSetSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPartsModel.get_headTopCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_headTopCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_headTopCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_eyesCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModel::get_eyesCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_eyesCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_mouthCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModel::get_mouthCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_mouthCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mouthCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_glassesCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_glassesCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_glassesCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glassesCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_facialHairCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_facialHairCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_facialHairCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_facialHairCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_handsCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_handsCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_handsCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handsCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_clothesCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_clothesCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_clothesCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_skinColors
::Array<GlobalNamespace::SkinColorSO*>* GlobalNamespace::AvatarPartsModel::get_skinColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_skinColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skinColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SkinColorSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.GetColorIndexById
int GlobalNamespace::AvatarPartsModel::GetColorIndexById(::Il2CppString* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::GetColorIndexById");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetColorIndexById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, id);
}
// Autogenerated method: AvatarPartsModel.GetSkinColorById
GlobalNamespace::SkinColorSO* GlobalNamespace::AvatarPartsModel::GetSkinColorById(::Il2CppString* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::GetSkinColorById");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkinColorById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SkinColorSO*, false>(this, ___internal__method, id);
}
// Autogenerated method: AvatarPartsModel.GetRandomColor
GlobalNamespace::SkinColorSO* GlobalNamespace::AvatarPartsModel::GetRandomColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::GetRandomColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRandomColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SkinColorSO*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarPartsModel::get_headTopCollection
// Il2CppName: get_headTopCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_headTopCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_headTopCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::get_eyesCollection
// Il2CppName: get_eyesCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_eyesCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_eyesCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::get_mouthCollection
// Il2CppName: get_mouthCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_mouthCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_mouthCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::get_glassesCollection
// Il2CppName: get_glassesCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_glassesCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_glassesCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::get_facialHairCollection
// Il2CppName: get_facialHairCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_facialHairCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_facialHairCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::get_handsCollection
// Il2CppName: get_handsCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_handsCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_handsCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::get_clothesCollection
// Il2CppName: get_clothesCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_clothesCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_clothesCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::get_skinColors
// Il2CppName: get_skinColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::SkinColorSO*>* (AvatarPartsModel::*)()>(&AvatarPartsModel::get_skinColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "get_skinColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPartsModel::*)(GlobalNamespace::AvatarPartsModelSO*, GlobalNamespace::SkinColorSetSO*)>(&AvatarPartsModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarPartsModelSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SkinColorSetSO*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPartsModel::*)(GlobalNamespace::AvatarPartsModelSO*, GlobalNamespace::SkinColorSetSO*)>(&AvatarPartsModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarPartsModelSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SkinColorSetSO*>()});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::GetColorIndexById
// Il2CppName: GetColorIndexById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AvatarPartsModel::*)(::Il2CppString*)>(&AvatarPartsModel::GetColorIndexById)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "GetColorIndexById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::GetSkinColorById
// Il2CppName: GetSkinColorById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SkinColorSO* (AvatarPartsModel::*)(::Il2CppString*)>(&AvatarPartsModel::GetSkinColorById)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "GetSkinColorById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AvatarPartsModel::GetRandomColor
// Il2CppName: GetRandomColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SkinColorSO* (AvatarPartsModel::*)()>(&AvatarPartsModel::GetRandomColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModel*), "GetRandomColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarPartsModelSO
#include "GlobalNamespace/AvatarPartsModelSO.hpp"
// Including type: AvatarMeshPartSO
#include "GlobalNamespace/AvatarMeshPartSO.hpp"
// Including type: AvatarSpritePartSO
#include "GlobalNamespace/AvatarSpritePartSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPartsModelSO.get_headTops
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_headTops() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_headTops");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTops", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Eyes
::Array<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Eyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Eyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Mouths
::Array<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Mouths() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Mouths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mouths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Glasses
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Glasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Glasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Glasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_FacialHair
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_FacialHair() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_FacialHair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FacialHair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Hands
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Hands() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Hands");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Hands", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Clothes
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Clothes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Clothes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Clothes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarPartsModelSO::get_headTops
// Il2CppName: get_headTops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::get_headTops)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), "get_headTops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModelSO::get_Eyes
// Il2CppName: get_Eyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarSpritePartSO*>* (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::get_Eyes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), "get_Eyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModelSO::get_Mouths
// Il2CppName: get_Mouths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarSpritePartSO*>* (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::get_Mouths)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), "get_Mouths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModelSO::get_Glasses
// Il2CppName: get_Glasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::get_Glasses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), "get_Glasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModelSO::get_FacialHair
// Il2CppName: get_FacialHair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::get_FacialHair)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), "get_FacialHair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModelSO::get_Hands
// Il2CppName: get_Hands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::get_Hands)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), "get_Hands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModelSO::get_Clothes
// Il2CppName: get_Clothes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::get_Clothes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), "get_Clothes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPartsModelSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPartsModelSO::*)()>(&AvatarPartsModelSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPartsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarSaveData
#include "GlobalNamespace/AvatarSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AvatarSaveData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarSaveData::*)()>(&AvatarSaveData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarSaveData::*)()>(&AvatarSaveData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarSpritePartSO
#include "GlobalNamespace/AvatarSpritePartSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarSpritePartSO.get_sprite
UnityEngine::Sprite* GlobalNamespace::AvatarSpritePartSO::get_sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarSpritePartSO::get_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarSpritePartSO::get_sprite
// Il2CppName: get_sprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (AvatarSpritePartSO::*)()>(&AvatarSpritePartSO::get_sprite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarSpritePartSO*), "get_sprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarSpritePartSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarSpritePartSO::*)()>(&AvatarSpritePartSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarSpritePartSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarSpritePartSO::*)()>(&AvatarSpritePartSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarSpritePartSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IAvatarPart
#include "GlobalNamespace/IAvatarPart.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAvatarPart.get_id
::Il2CppString* GlobalNamespace::IAvatarPart::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAvatarPart::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IAvatarPart.get_localizedName
::Il2CppString* GlobalNamespace::IAvatarPart::get_localizedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAvatarPart::get_localizedName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IAvatarPart::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IAvatarPart::*)()>(&IAvatarPart::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAvatarPart*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IAvatarPart::get_localizedName
// Il2CppName: get_localizedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IAvatarPart::*)()>(&IAvatarPart::get_localizedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAvatarPart*), "get_localizedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SkinColorSO
#include "GlobalNamespace/SkinColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SkinColorSO.get_id
::Il2CppString* GlobalNamespace::SkinColorSO::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SkinColorSO::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SkinColorSO.get_Color
UnityEngine::Color GlobalNamespace::SkinColorSO::get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SkinColorSO::get_Color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SkinColorSO::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SkinColorSO::*)()>(&SkinColorSO::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkinColorSO*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SkinColorSO::get_Color
// Il2CppName: get_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (SkinColorSO::*)()>(&SkinColorSO::get_Color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkinColorSO*), "get_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SkinColorSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SkinColorSO::*)()>(&SkinColorSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkinColorSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SkinColorSO::*)()>(&SkinColorSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkinColorSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SkinColorSetSO
#include "GlobalNamespace/SkinColorSetSO.hpp"
// Including type: SkinColorSO
#include "GlobalNamespace/SkinColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SkinColorSetSO.get_colors
::Array<GlobalNamespace::SkinColorSO*>* GlobalNamespace::SkinColorSetSO::get_colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SkinColorSetSO::get_colors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SkinColorSO*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SkinColorSetSO::get_colors
// Il2CppName: get_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::SkinColorSO*>* (SkinColorSetSO::*)()>(&SkinColorSetSO::get_colors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkinColorSetSO*), "get_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SkinColorSetSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SkinColorSetSO::*)()>(&SkinColorSetSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkinColorSetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SkinColorSetSO::*)()>(&SkinColorSetSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkinColorSetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PracticeSettings
#include "GlobalNamespace/PracticeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDelayBeforeStart
float GlobalNamespace::PracticeSettings::_get_kDelayBeforeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::_get_kDelayBeforeStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PracticeSettings", "kDelayBeforeStart"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDelayBeforeStart
void GlobalNamespace::PracticeSettings::_set_kDelayBeforeStart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::_set_kDelayBeforeStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PracticeSettings", "kDelayBeforeStart", value));
}
// Autogenerated method: PracticeSettings.get_startSongTime
float GlobalNamespace::PracticeSettings::get_startSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_startSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PracticeSettings.set_startSongTime
void GlobalNamespace::PracticeSettings::set_startSongTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::set_startSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PracticeSettings.get_songSpeedMul
float GlobalNamespace::PracticeSettings::get_songSpeedMul() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_songSpeedMul");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSpeedMul", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PracticeSettings.set_songSpeedMul
void GlobalNamespace::PracticeSettings::set_songSpeedMul(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::set_songSpeedMul");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_songSpeedMul", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PracticeSettings.get_startInAdvanceAndClearNotes
bool GlobalNamespace::PracticeSettings::get_startInAdvanceAndClearNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_startInAdvanceAndClearNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startInAdvanceAndClearNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PracticeSettings.set_startInAdvanceAndClearNotes
void GlobalNamespace::PracticeSettings::set_startInAdvanceAndClearNotes(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::set_startInAdvanceAndClearNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startInAdvanceAndClearNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PracticeSettings.get_defaultPracticeSettings
GlobalNamespace::PracticeSettings* GlobalNamespace::PracticeSettings::get_defaultPracticeSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_defaultPracticeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PracticeSettings", "get_defaultPracticeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PracticeSettings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PracticeSettings.ResetToDefault
void GlobalNamespace::PracticeSettings::ResetToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::ResetToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PracticeSettings::get_startSongTime
// Il2CppName: get_startSongTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PracticeSettings::*)()>(&PracticeSettings::get_startSongTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "get_startSongTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PracticeSettings::set_startSongTime
// Il2CppName: set_startSongTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)(float)>(&PracticeSettings::set_startSongTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "set_startSongTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PracticeSettings::get_songSpeedMul
// Il2CppName: get_songSpeedMul
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PracticeSettings::*)()>(&PracticeSettings::get_songSpeedMul)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "get_songSpeedMul", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PracticeSettings::set_songSpeedMul
// Il2CppName: set_songSpeedMul
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)(float)>(&PracticeSettings::set_songSpeedMul)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "set_songSpeedMul", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PracticeSettings::get_startInAdvanceAndClearNotes
// Il2CppName: get_startInAdvanceAndClearNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PracticeSettings::*)()>(&PracticeSettings::get_startInAdvanceAndClearNotes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "get_startInAdvanceAndClearNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PracticeSettings::set_startInAdvanceAndClearNotes
// Il2CppName: set_startInAdvanceAndClearNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)(bool)>(&PracticeSettings::set_startInAdvanceAndClearNotes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "set_startInAdvanceAndClearNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PracticeSettings::get_defaultPracticeSettings
// Il2CppName: get_defaultPracticeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PracticeSettings* (*)()>(&PracticeSettings::get_defaultPracticeSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "get_defaultPracticeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PracticeSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)(GlobalNamespace::PracticeSettings*)>(&PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PracticeSettings*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)(GlobalNamespace::PracticeSettings*)>(&PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PracticeSettings*>()});
  }
};
// Writing MetadataGetter for method: PracticeSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)(float, float)>(&PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)(float, float)>(&PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PracticeSettings::ResetToDefault
// Il2CppName: ResetToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)()>(&PracticeSettings::ResetToDefault)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), "ResetToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PracticeSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)()>(&PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PracticeSettings::*)()>(&PracticeSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PracticeSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RankModelHelper
#include "GlobalNamespace/RankModelHelper.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: RankModel/Rank
#include "GlobalNamespace/RankModel_Rank.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RankModelHelper.MaxRankForGameplayModifiers
GlobalNamespace::RankModel::Rank GlobalNamespace::RankModelHelper::MaxRankForGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers, GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel, float energy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RankModelHelper::MaxRankForGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RankModelHelper", "MaxRankForGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(gameplayModifiersModel), ::il2cpp_utils::ExtractType(energy)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::RankModel::Rank, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameplayModifiers, gameplayModifiersModel, energy);
}
// Writing MetadataGetter for method: RankModelHelper::MaxRankForGameplayModifiers
// Il2CppName: MaxRankForGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::RankModel::Rank (*)(GlobalNamespace::GameplayModifiers*, GlobalNamespace::GameplayModifiersModelSO*, float)>(&RankModelHelper::MaxRankForGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RankModelHelper*), "MaxRankForGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiersModelSO*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResetLocalLeaderboardOnKey
#include "GlobalNamespace/ResetLocalLeaderboardOnKey.hpp"
// Including type: LocalLeaderboardsModel
#include "GlobalNamespace/LocalLeaderboardsModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResetLocalLeaderboardOnKey.Update
void GlobalNamespace::ResetLocalLeaderboardOnKey::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResetLocalLeaderboardOnKey::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ResetLocalLeaderboardOnKey::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetLocalLeaderboardOnKey::*)()>(&ResetLocalLeaderboardOnKey::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetLocalLeaderboardOnKey*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResetLocalLeaderboardOnKey::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetLocalLeaderboardOnKey::*)()>(&ResetLocalLeaderboardOnKey::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetLocalLeaderboardOnKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetLocalLeaderboardOnKey::*)()>(&ResetLocalLeaderboardOnKey::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetLocalLeaderboardOnKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMultiplayerRichPresenceData
#include "GlobalNamespace/IMultiplayerRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerRichPresenceData.get_multiplayerLobbyCode
::Il2CppString* GlobalNamespace::IMultiplayerRichPresenceData::get_multiplayerLobbyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerRichPresenceData::get_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerRichPresenceData.set_multiplayerLobbyCode
void GlobalNamespace::IMultiplayerRichPresenceData::set_multiplayerLobbyCode(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerRichPresenceData::set_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerRichPresenceData.get_isJoinable
bool GlobalNamespace::IMultiplayerRichPresenceData::get_isJoinable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerRichPresenceData::get_isJoinable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isJoinable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IMultiplayerRichPresenceData::get_multiplayerLobbyCode
// Il2CppName: get_multiplayerLobbyCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IMultiplayerRichPresenceData::*)()>(&IMultiplayerRichPresenceData::get_multiplayerLobbyCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerRichPresenceData*), "get_multiplayerLobbyCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMultiplayerRichPresenceData::set_multiplayerLobbyCode
// Il2CppName: set_multiplayerLobbyCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMultiplayerRichPresenceData::*)(::Il2CppString*)>(&IMultiplayerRichPresenceData::set_multiplayerLobbyCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerRichPresenceData*), "set_multiplayerLobbyCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IMultiplayerRichPresenceData::get_isJoinable
// Il2CppName: get_isJoinable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMultiplayerRichPresenceData::*)()>(&IMultiplayerRichPresenceData::get_isJoinable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMultiplayerRichPresenceData*), "get_isJoinable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: InMultiplayerRichPresenceData
#include "GlobalNamespace/InMultiplayerRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE189E0
// Autogenerated static field getter
// Get static field: static private System.String kInMultiplayerLobbyRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::_get_kInMultiplayerLobbyRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::_get_kInMultiplayerLobbyRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "InMultiplayerRichPresenceData", "kInMultiplayerLobbyRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kInMultiplayerLobbyRichPresenceLocalizationKey
void GlobalNamespace::InMultiplayerRichPresenceData::_set_kInMultiplayerLobbyRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::_set_kInMultiplayerLobbyRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "InMultiplayerRichPresenceData", "kInMultiplayerLobbyRichPresenceLocalizationKey", value));
}
// Autogenerated method: InMultiplayerRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: InMultiplayerRichPresenceData.set_apiName
void GlobalNamespace::InMultiplayerRichPresenceData::set_apiName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::set_apiName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InMultiplayerRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: InMultiplayerRichPresenceData.set_localizedDescription
void GlobalNamespace::InMultiplayerRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InMultiplayerRichPresenceData.get_multiplayerLobbyCode
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::get_multiplayerLobbyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: InMultiplayerRichPresenceData.set_multiplayerLobbyCode
void GlobalNamespace::InMultiplayerRichPresenceData::set_multiplayerLobbyCode(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::set_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InMultiplayerRichPresenceData.get_isJoinable
bool GlobalNamespace::InMultiplayerRichPresenceData::get_isJoinable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_isJoinable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isJoinable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::get_apiName
// Il2CppName: get_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (InMultiplayerRichPresenceData::*)()>(&InMultiplayerRichPresenceData::get_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), "get_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::set_apiName
// Il2CppName: set_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InMultiplayerRichPresenceData::*)(::Il2CppString*)>(&InMultiplayerRichPresenceData::set_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), "set_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::get_localizedDescription
// Il2CppName: get_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (InMultiplayerRichPresenceData::*)()>(&InMultiplayerRichPresenceData::get_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), "get_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::set_localizedDescription
// Il2CppName: set_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InMultiplayerRichPresenceData::*)(::Il2CppString*)>(&InMultiplayerRichPresenceData::set_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), "set_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::get_multiplayerLobbyCode
// Il2CppName: get_multiplayerLobbyCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (InMultiplayerRichPresenceData::*)()>(&InMultiplayerRichPresenceData::get_multiplayerLobbyCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), "get_multiplayerLobbyCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::set_multiplayerLobbyCode
// Il2CppName: set_multiplayerLobbyCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InMultiplayerRichPresenceData::*)(::Il2CppString*)>(&InMultiplayerRichPresenceData::set_multiplayerLobbyCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), "set_multiplayerLobbyCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::get_isJoinable
// Il2CppName: get_isJoinable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InMultiplayerRichPresenceData::*)()>(&InMultiplayerRichPresenceData::get_isJoinable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), "get_isJoinable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InMultiplayerRichPresenceData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InMultiplayerRichPresenceData::*)(::Il2CppString*)>(&InMultiplayerRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InMultiplayerRichPresenceData::*)(::Il2CppString*)>(&InMultiplayerRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InMultiplayerRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingMultiplayerRichPresenceData
#include "GlobalNamespace/PlayingMultiplayerRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE189F0
// Autogenerated static field getter
// Get static field: static private System.String kPlayingMultiplayerLobbyRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::PlayingMultiplayerRichPresenceData::_get_kPlayingMultiplayerLobbyRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingMultiplayerRichPresenceData::_get_kPlayingMultiplayerLobbyRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayingMultiplayerRichPresenceData", "kPlayingMultiplayerLobbyRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPlayingMultiplayerLobbyRichPresenceLocalizationKey
void GlobalNamespace::PlayingMultiplayerRichPresenceData::_set_kPlayingMultiplayerLobbyRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingMultiplayerRichPresenceData::_set_kPlayingMultiplayerLobbyRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayingMultiplayerRichPresenceData", "kPlayingMultiplayerLobbyRichPresenceLocalizationKey", value));
}
// Writing MetadataGetter for method: PlayingMultiplayerRichPresenceData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingMultiplayerRichPresenceData::*)(GlobalNamespace::IDifficultyBeatmap*, ::Il2CppString*)>(&PlayingMultiplayerRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingMultiplayerRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingMultiplayerRichPresenceData::*)(GlobalNamespace::IDifficultyBeatmap*, ::Il2CppString*)>(&PlayingMultiplayerRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingMultiplayerRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusRichPresencePlatformHandler
#include "GlobalNamespace/OculusRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusRichPresencePlatformHandler.SetPresence
void GlobalNamespace::OculusRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: OculusRichPresencePlatformHandler.Clear
void GlobalNamespace::OculusRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OculusRichPresencePlatformHandler::SetPresence
// Il2CppName: SetPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusRichPresencePlatformHandler::*)(GlobalNamespace::IRichPresenceData*)>(&OculusRichPresencePlatformHandler::SetPresence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusRichPresencePlatformHandler*), "SetPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IRichPresenceData*>()});
  }
};
// Writing MetadataGetter for method: OculusRichPresencePlatformHandler::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusRichPresencePlatformHandler::*)()>(&OculusRichPresencePlatformHandler::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusRichPresencePlatformHandler*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusRichPresencePlatformHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusRichPresencePlatformHandler::*)()>(&OculusRichPresencePlatformHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusRichPresencePlatformHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusRichPresencePlatformHandler::*)()>(&OculusRichPresencePlatformHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusRichPresencePlatformHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::IRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::IRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IRichPresenceData::get_apiName
// Il2CppName: get_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IRichPresenceData::*)()>(&IRichPresenceData::get_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IRichPresenceData*), "get_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IRichPresenceData::get_localizedDescription
// Il2CppName: get_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IRichPresenceData::*)()>(&IRichPresenceData::get_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IRichPresenceData*), "get_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BrowsingMenusRichPresenceData
#include "GlobalNamespace/BrowsingMenusRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE18A10
// Autogenerated static field getter
// Get static field: static private System.String kBrowsingMenusRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::BrowsingMenusRichPresenceData::_get_kBrowsingMenusRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::_get_kBrowsingMenusRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BrowsingMenusRichPresenceData", "kBrowsingMenusRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBrowsingMenusRichPresenceLocalizationKey
void GlobalNamespace::BrowsingMenusRichPresenceData::_set_kBrowsingMenusRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::_set_kBrowsingMenusRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BrowsingMenusRichPresenceData", "kBrowsingMenusRichPresenceLocalizationKey", value));
}
// Autogenerated method: BrowsingMenusRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::BrowsingMenusRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BrowsingMenusRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::BrowsingMenusRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BrowsingMenusRichPresenceData.set_localizedDescription
void GlobalNamespace::BrowsingMenusRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: BrowsingMenusRichPresenceData::get_apiName
// Il2CppName: get_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BrowsingMenusRichPresenceData::*)()>(&BrowsingMenusRichPresenceData::get_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsingMenusRichPresenceData*), "get_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BrowsingMenusRichPresenceData::get_localizedDescription
// Il2CppName: get_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BrowsingMenusRichPresenceData::*)()>(&BrowsingMenusRichPresenceData::get_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsingMenusRichPresenceData*), "get_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BrowsingMenusRichPresenceData::set_localizedDescription
// Il2CppName: set_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BrowsingMenusRichPresenceData::*)(::Il2CppString*)>(&BrowsingMenusRichPresenceData::set_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsingMenusRichPresenceData*), "set_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BrowsingMenusRichPresenceData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BrowsingMenusRichPresenceData::*)()>(&BrowsingMenusRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsingMenusRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BrowsingMenusRichPresenceData::*)()>(&BrowsingMenusRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BrowsingMenusRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingCampaignRichPresenceData
#include "GlobalNamespace/PlayingCampaignRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE18A30
// Autogenerated static field getter
// Get static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::PlayingCampaignRichPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayingCampaignRichPresenceData", "kPlayingCampaignRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
void GlobalNamespace::PlayingCampaignRichPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayingCampaignRichPresenceData", "kPlayingCampaignRichPresenceLocalizationKey", value));
}
// Autogenerated method: PlayingCampaignRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::PlayingCampaignRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingCampaignRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::PlayingCampaignRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingCampaignRichPresenceData.set_localizedDescription
void GlobalNamespace::PlayingCampaignRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: PlayingCampaignRichPresenceData::get_apiName
// Il2CppName: get_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayingCampaignRichPresenceData::*)()>(&PlayingCampaignRichPresenceData::get_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingCampaignRichPresenceData*), "get_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayingCampaignRichPresenceData::get_localizedDescription
// Il2CppName: get_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayingCampaignRichPresenceData::*)()>(&PlayingCampaignRichPresenceData::get_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingCampaignRichPresenceData*), "get_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayingCampaignRichPresenceData::set_localizedDescription
// Il2CppName: set_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingCampaignRichPresenceData::*)(::Il2CppString*)>(&PlayingCampaignRichPresenceData::set_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingCampaignRichPresenceData*), "set_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayingCampaignRichPresenceData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingCampaignRichPresenceData::*)()>(&PlayingCampaignRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingCampaignRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingCampaignRichPresenceData::*)()>(&PlayingCampaignRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingCampaignRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingTutorialPresenceData
#include "GlobalNamespace/PlayingTutorialPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE18A50
// Autogenerated static field getter
// Get static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::PlayingTutorialPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayingTutorialPresenceData", "kPlayingCampaignRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
void GlobalNamespace::PlayingTutorialPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayingTutorialPresenceData", "kPlayingCampaignRichPresenceLocalizationKey", value));
}
// Autogenerated method: PlayingTutorialPresenceData.get_apiName
::Il2CppString* GlobalNamespace::PlayingTutorialPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingTutorialPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::PlayingTutorialPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingTutorialPresenceData.set_localizedDescription
void GlobalNamespace::PlayingTutorialPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: PlayingTutorialPresenceData::get_apiName
// Il2CppName: get_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayingTutorialPresenceData::*)()>(&PlayingTutorialPresenceData::get_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingTutorialPresenceData*), "get_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayingTutorialPresenceData::get_localizedDescription
// Il2CppName: get_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayingTutorialPresenceData::*)()>(&PlayingTutorialPresenceData::get_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingTutorialPresenceData*), "get_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayingTutorialPresenceData::set_localizedDescription
// Il2CppName: set_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingTutorialPresenceData::*)(::Il2CppString*)>(&PlayingTutorialPresenceData::set_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingTutorialPresenceData*), "set_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayingTutorialPresenceData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingTutorialPresenceData::*)()>(&PlayingTutorialPresenceData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingTutorialPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingTutorialPresenceData::*)()>(&PlayingTutorialPresenceData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingTutorialPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingDifficultyBeatmapRichPresenceData
#include "GlobalNamespace/PlayingDifficultyBeatmapRichPresenceData.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.set_apiName
void GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_apiName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_apiName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.set_localizedDescription
void GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.GetDestinationLocalizedString
::Il2CppString* GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::GetDestinationLocalizedString(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::GetDestinationLocalizedString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayingDifficultyBeatmapRichPresenceData", "GetDestinationLocalizedString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, difficultyBeatmap);
}
// Writing MetadataGetter for method: PlayingDifficultyBeatmapRichPresenceData::get_apiName
// Il2CppName: get_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayingDifficultyBeatmapRichPresenceData::*)()>(&PlayingDifficultyBeatmapRichPresenceData::get_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingDifficultyBeatmapRichPresenceData*), "get_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayingDifficultyBeatmapRichPresenceData::set_apiName
// Il2CppName: set_apiName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingDifficultyBeatmapRichPresenceData::*)(::Il2CppString*)>(&PlayingDifficultyBeatmapRichPresenceData::set_apiName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingDifficultyBeatmapRichPresenceData*), "set_apiName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayingDifficultyBeatmapRichPresenceData::get_localizedDescription
// Il2CppName: get_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PlayingDifficultyBeatmapRichPresenceData::*)()>(&PlayingDifficultyBeatmapRichPresenceData::get_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingDifficultyBeatmapRichPresenceData*), "get_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayingDifficultyBeatmapRichPresenceData::set_localizedDescription
// Il2CppName: set_localizedDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingDifficultyBeatmapRichPresenceData::*)(::Il2CppString*)>(&PlayingDifficultyBeatmapRichPresenceData::set_localizedDescription)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingDifficultyBeatmapRichPresenceData*), "set_localizedDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayingDifficultyBeatmapRichPresenceData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingDifficultyBeatmapRichPresenceData::*)(GlobalNamespace::IDifficultyBeatmap*)>(&PlayingDifficultyBeatmapRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingDifficultyBeatmapRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayingDifficultyBeatmapRichPresenceData::*)(GlobalNamespace::IDifficultyBeatmap*)>(&PlayingDifficultyBeatmapRichPresenceData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingDifficultyBeatmapRichPresenceData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: PlayingDifficultyBeatmapRichPresenceData::GetDestinationLocalizedString
// Il2CppName: GetDestinationLocalizedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(GlobalNamespace::IDifficultyBeatmap*)>(&PlayingDifficultyBeatmapRichPresenceData::GetDestinationLocalizedString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayingDifficultyBeatmapRichPresenceData*), "GetDestinationLocalizedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RichPresenceManager
#include "GlobalNamespace/RichPresenceManager.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: MissionLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MissionLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MenuScenesTransitionSetupDataSO
#include "GlobalNamespace/MenuScenesTransitionSetupDataSO.hpp"
// Including type: IRichPresencePlatformHandler
#include "GlobalNamespace/IRichPresencePlatformHandler.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: LobbyGameState
#include "GlobalNamespace/LobbyGameState.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: BrowsingMenusRichPresenceData
#include "GlobalNamespace/BrowsingMenusRichPresenceData.hpp"
// Including type: InMultiplayerRichPresenceData
#include "GlobalNamespace/InMultiplayerRichPresenceData.hpp"
// Including type: PlayingCampaignRichPresenceData
#include "GlobalNamespace/PlayingCampaignRichPresenceData.hpp"
// Including type: PlayingTutorialPresenceData
#include "GlobalNamespace/PlayingTutorialPresenceData.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RichPresenceManager.Awake
void GlobalNamespace::RichPresenceManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.OnDestroy
void GlobalNamespace::RichPresenceManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.HandleLobbyGameStateDidChange
void GlobalNamespace::RichPresenceManager::HandleLobbyGameStateDidChange(GlobalNamespace::MultiplayerGameState newGameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::HandleLobbyGameStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newGameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newGameState);
}
// Autogenerated method: RichPresenceManager.SetMenuPresence
void GlobalNamespace::RichPresenceManager::SetMenuPresence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::SetMenuPresence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMenuPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.HandleGameScenesManagerTransitionDidFinish
void GlobalNamespace::RichPresenceManager::HandleGameScenesManagerTransitionDidFinish(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, Zenject::DiContainer* diContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::HandleGameScenesManagerTransitionDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameScenesManagerTransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(diContainer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, diContainer);
}
// Autogenerated method: RichPresenceManager.HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence
void GlobalNamespace::RichPresenceManager::HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.SetPresence
void GlobalNamespace::RichPresenceManager::SetPresence(GlobalNamespace::IRichPresenceData* presenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::SetPresence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(presenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, presenceData);
}
// Autogenerated method: RichPresenceManager.Clear
void GlobalNamespace::RichPresenceManager::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RichPresenceManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)()>(&RichPresenceManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)()>(&RichPresenceManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::HandleLobbyGameStateDidChange
// Il2CppName: HandleLobbyGameStateDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)(GlobalNamespace::MultiplayerGameState)>(&RichPresenceManager::HandleLobbyGameStateDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "HandleLobbyGameStateDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::SetMenuPresence
// Il2CppName: SetMenuPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)()>(&RichPresenceManager::SetMenuPresence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "SetMenuPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::HandleGameScenesManagerTransitionDidFinish
// Il2CppName: HandleGameScenesManagerTransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)(GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*)>(&RichPresenceManager::HandleGameScenesManagerTransitionDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "HandleGameScenesManagerTransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence
// Il2CppName: HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)()>(&RichPresenceManager::HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::SetPresence
// Il2CppName: SetPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)(GlobalNamespace::IRichPresenceData*)>(&RichPresenceManager::SetPresence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "SetPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IRichPresenceData*>()});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)()>(&RichPresenceManager::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RichPresenceManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)()>(&RichPresenceManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RichPresenceManager::*)()>(&RichPresenceManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RichPresenceManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IRichPresencePlatformHandler
#include "GlobalNamespace/IRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRichPresencePlatformHandler.SetPresence
void GlobalNamespace::IRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: IRichPresencePlatformHandler.Clear
void GlobalNamespace::IRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IRichPresencePlatformHandler::SetPresence
// Il2CppName: SetPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IRichPresencePlatformHandler::*)(GlobalNamespace::IRichPresenceData*)>(&IRichPresencePlatformHandler::SetPresence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IRichPresencePlatformHandler*), "SetPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IRichPresenceData*>()});
  }
};
// Writing MetadataGetter for method: IRichPresencePlatformHandler::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IRichPresencePlatformHandler::*)()>(&IRichPresencePlatformHandler::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IRichPresencePlatformHandler*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TestRichPresencePlatformHandler
#include "GlobalNamespace/TestRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TestRichPresencePlatformHandler.SetPresence
void GlobalNamespace::TestRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: TestRichPresencePlatformHandler.Clear
void GlobalNamespace::TestRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TestRichPresencePlatformHandler::SetPresence
// Il2CppName: SetPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestRichPresencePlatformHandler::*)(GlobalNamespace::IRichPresenceData*)>(&TestRichPresencePlatformHandler::SetPresence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestRichPresencePlatformHandler*), "SetPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IRichPresenceData*>()});
  }
};
// Writing MetadataGetter for method: TestRichPresencePlatformHandler::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestRichPresencePlatformHandler::*)()>(&TestRichPresencePlatformHandler::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestRichPresencePlatformHandler*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestRichPresencePlatformHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestRichPresencePlatformHandler::*)()>(&TestRichPresencePlatformHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestRichPresencePlatformHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestRichPresencePlatformHandler::*)()>(&TestRichPresencePlatformHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestRichPresencePlatformHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamRichPresencePlatformHandler
#include "GlobalNamespace/SteamRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamRichPresencePlatformHandler.SetPresence
void GlobalNamespace::SteamRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: SteamRichPresencePlatformHandler.Clear
void GlobalNamespace::SteamRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamRichPresencePlatformHandler::SetPresence
// Il2CppName: SetPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamRichPresencePlatformHandler::*)(GlobalNamespace::IRichPresenceData*)>(&SteamRichPresencePlatformHandler::SetPresence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamRichPresencePlatformHandler*), "SetPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IRichPresenceData*>()});
  }
};
// Writing MetadataGetter for method: SteamRichPresencePlatformHandler::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamRichPresencePlatformHandler::*)()>(&SteamRichPresencePlatformHandler::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamRichPresencePlatformHandler*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamRichPresencePlatformHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamRichPresencePlatformHandler::*)()>(&SteamRichPresencePlatformHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamRichPresencePlatformHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamRichPresencePlatformHandler::*)()>(&SteamRichPresencePlatformHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamRichPresencePlatformHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreModel
#include "GlobalNamespace/ScoreModel.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxMultiplier
int GlobalNamespace::ScoreModel::_get_kMaxMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxMultiplier
void GlobalNamespace::ScoreModel::_set_kMaxMultiplier(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxBeforeCutSwingRawScore
int GlobalNamespace::ScoreModel::_get_kMaxBeforeCutSwingRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxBeforeCutSwingRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxBeforeCutSwingRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxBeforeCutSwingRawScore
void GlobalNamespace::ScoreModel::_set_kMaxBeforeCutSwingRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxBeforeCutSwingRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxBeforeCutSwingRawScore", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxCutDistanceRawScore
int GlobalNamespace::ScoreModel::_get_kMaxCutDistanceRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxCutDistanceRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxCutDistanceRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxCutDistanceRawScore
void GlobalNamespace::ScoreModel::_set_kMaxCutDistanceRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxCutDistanceRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxCutDistanceRawScore", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxAfterCutSwingRawScore
int GlobalNamespace::ScoreModel::_get_kMaxAfterCutSwingRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxAfterCutSwingRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxAfterCutSwingRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxAfterCutSwingRawScore
void GlobalNamespace::ScoreModel::_set_kMaxAfterCutSwingRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxAfterCutSwingRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxAfterCutSwingRawScore", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxCutRawScore
int GlobalNamespace::ScoreModel::_get_kMaxCutRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxCutRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxCutRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxCutRawScore
void GlobalNamespace::ScoreModel::_set_kMaxCutRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxCutRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxCutRawScore", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSwingScorePart
float GlobalNamespace::ScoreModel::_get_kSwingScorePart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kSwingScorePart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ScoreModel", "kSwingScorePart"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSwingScorePart
void GlobalNamespace::ScoreModel::_set_kSwingScorePart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kSwingScorePart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kSwingScorePart", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kDistanceToCenterScorePart
float GlobalNamespace::ScoreModel::_get_kDistanceToCenterScorePart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kDistanceToCenterScorePart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ScoreModel", "kDistanceToCenterScorePart"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kDistanceToCenterScorePart
void GlobalNamespace::ScoreModel::_set_kDistanceToCenterScorePart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kDistanceToCenterScorePart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kDistanceToCenterScorePart", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxDistanceForDistanceToCenterScore
float GlobalNamespace::ScoreModel::_get_kMaxDistanceForDistanceToCenterScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxDistanceForDistanceToCenterScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ScoreModel", "kMaxDistanceForDistanceToCenterScore"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxDistanceForDistanceToCenterScore
void GlobalNamespace::ScoreModel::_set_kMaxDistanceForDistanceToCenterScore(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxDistanceForDistanceToCenterScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxDistanceForDistanceToCenterScore", value));
}
// Autogenerated method: ScoreModel.MaxRawScoreForNumberOfNotes
int GlobalNamespace::ScoreModel::MaxRawScoreForNumberOfNotes(int noteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::MaxRawScoreForNumberOfNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreModel", "MaxRawScoreForNumberOfNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCount)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, noteCount);
}
// Autogenerated method: ScoreModel.RawScoreWithoutMultiplier
void GlobalNamespace::ScoreModel::RawScoreWithoutMultiplier(GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter, float cutDistanceToCenter, int& beforeCutRawScore, int& afterCutRawScore, int& cutDistanceRawScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::RawScoreWithoutMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreModel", "RawScoreWithoutMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter), ::il2cpp_utils::ExtractType(cutDistanceToCenter), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, saberSwingRatingCounter, cutDistanceToCenter, beforeCutRawScore, afterCutRawScore, cutDistanceRawScore);
}
// Autogenerated method: ScoreModel.GetModifiedScoreForGameplayModifiersScoreMultiplier
int GlobalNamespace::ScoreModel::GetModifiedScoreForGameplayModifiersScoreMultiplier(int rawScore, float gameplayModifiersScoreMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::GetModifiedScoreForGameplayModifiersScoreMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreModel", "GetModifiedScoreForGameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawScore), ::il2cpp_utils::ExtractType(gameplayModifiersScoreMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rawScore, gameplayModifiersScoreMultiplier);
}
// Writing MetadataGetter for method: ScoreModel::MaxRawScoreForNumberOfNotes
// Il2CppName: MaxRawScoreForNumberOfNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&ScoreModel::MaxRawScoreForNumberOfNotes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreModel*), "MaxRawScoreForNumberOfNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScoreModel::RawScoreWithoutMultiplier
// Il2CppName: RawScoreWithoutMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::ISaberSwingRatingCounter*, float, int&, int&, int&)>(&ScoreModel::RawScoreWithoutMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreModel*), "RawScoreWithoutMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ISaberSwingRatingCounter*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: ScoreModel::GetModifiedScoreForGameplayModifiersScoreMultiplier
// Il2CppName: GetModifiedScoreForGameplayModifiersScoreMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, float)>(&ScoreModel::GetModifiedScoreForGameplayModifiersScoreMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreModel*), "GetModifiedScoreForGameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ScoreModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreModel::*)()>(&ScoreModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreModel::*)()>(&ScoreModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelLoader
#include "GlobalNamespace/StandardLevelLoader.hpp"
// Including type: StandardLevelInfoSaveData
#include "GlobalNamespace/StandardLevelInfoSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelLoader.LoadStandardLevelSaveData
GlobalNamespace::StandardLevelInfoSaveData* GlobalNamespace::StandardLevelLoader::LoadStandardLevelSaveData(::Il2CppString* levelInfoFilenamePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelLoader::LoadStandardLevelSaveData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StandardLevelLoader", "LoadStandardLevelSaveData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelInfoFilenamePath)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardLevelInfoSaveData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, levelInfoFilenamePath);
}
// Writing MetadataGetter for method: StandardLevelLoader::LoadStandardLevelSaveData
// Il2CppName: LoadStandardLevelSaveData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardLevelInfoSaveData* (*)(::Il2CppString*)>(&StandardLevelLoader::LoadStandardLevelSaveData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelLoader*), "LoadStandardLevelSaveData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersValueSOOffsets
#include "GlobalNamespace/VRControllersValueSOOffsets.hpp"
// Including type: Vector3SO
#include "GlobalNamespace/Vector3SO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllersValueSOOffsets.get_positionOffset
UnityEngine::Vector3 GlobalNamespace::VRControllersValueSOOffsets::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersValueSOOffsets::get_positionOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersValueSOOffsets.get_rotationOffset
UnityEngine::Vector3 GlobalNamespace::VRControllersValueSOOffsets::get_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersValueSOOffsets::get_rotationOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRControllersValueSOOffsets::get_positionOffset
// Il2CppName: get_positionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (VRControllersValueSOOffsets::*)()>(&VRControllersValueSOOffsets::get_positionOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersValueSOOffsets*), "get_positionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersValueSOOffsets::get_rotationOffset
// Il2CppName: get_rotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (VRControllersValueSOOffsets::*)()>(&VRControllersValueSOOffsets::get_rotationOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersValueSOOffsets*), "get_rotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersValueSOOffsets::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersValueSOOffsets::*)()>(&VRControllersValueSOOffsets::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersValueSOOffsets*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersValueSOOffsets::*)()>(&VRControllersValueSOOffsets::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersValueSOOffsets*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VersionSaveData
#include "GlobalNamespace/VersionSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VersionSaveData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VersionSaveData::*)()>(&VersionSaveData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VersionSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VersionSaveData::*)()>(&VersionSaveData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VersionSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseResultsEnvironmentController
#include "GlobalNamespace/BaseResultsEnvironmentController.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseResultsEnvironmentController.Activate
void GlobalNamespace::BaseResultsEnvironmentController::Activate(bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseResultsEnvironmentController::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, immediately);
}
// Autogenerated method: BaseResultsEnvironmentController.Deactivate
void GlobalNamespace::BaseResultsEnvironmentController::Deactivate(bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseResultsEnvironmentController::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, immediately);
}
// Autogenerated method: BaseResultsEnvironmentController.Setup
void GlobalNamespace::BaseResultsEnvironmentController::Setup(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseResultsEnvironmentController::Setup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, difficultyBeatmap);
}
// Writing MetadataGetter for method: BaseResultsEnvironmentController::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseResultsEnvironmentController::*)(bool)>(&BaseResultsEnvironmentController::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseResultsEnvironmentController*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BaseResultsEnvironmentController::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseResultsEnvironmentController::*)(bool)>(&BaseResultsEnvironmentController::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseResultsEnvironmentController*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BaseResultsEnvironmentController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseResultsEnvironmentController::*)(GlobalNamespace::IDifficultyBeatmap*)>(&BaseResultsEnvironmentController::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseResultsEnvironmentController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: BaseResultsEnvironmentController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseResultsEnvironmentController::*)()>(&BaseResultsEnvironmentController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseResultsEnvironmentController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseResultsEnvironmentController::*)()>(&BaseResultsEnvironmentController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseResultsEnvironmentController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnvironmentBrandingManager
#include "GlobalNamespace/EnvironmentBrandingManager.hpp"
// Including type: EnvironmentBrandingManager/InitData
#include "GlobalNamespace/EnvironmentBrandingManager_InitData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnvironmentBrandingManager.Start
void GlobalNamespace::EnvironmentBrandingManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentBrandingManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnvironmentBrandingManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentBrandingManager::*)()>(&EnvironmentBrandingManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentBrandingManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentBrandingManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentBrandingManager::*)()>(&EnvironmentBrandingManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentBrandingManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentBrandingManager::*)()>(&EnvironmentBrandingManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentBrandingManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentBrandingManager/InitData
#include "GlobalNamespace/EnvironmentBrandingManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: EnvironmentBrandingManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentBrandingManager::InitData::*)(bool)>(&EnvironmentBrandingManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentBrandingManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentBrandingManager::InitData::*)(bool)>(&EnvironmentBrandingManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentBrandingManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuEnvironmentManager
#include "GlobalNamespace/MenuEnvironmentManager.hpp"
// Including type: MenuEnvironmentManager/MenuEnvironmentObjects
#include "GlobalNamespace/MenuEnvironmentManager_MenuEnvironmentObjects.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuEnvironmentManager.Start
void GlobalNamespace::MenuEnvironmentManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuEnvironmentManager.ShowEnvironmentType
void GlobalNamespace::MenuEnvironmentManager::ShowEnvironmentType(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType menuEnvironmentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::ShowEnvironmentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowEnvironmentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(menuEnvironmentType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, menuEnvironmentType);
}
// Writing MetadataGetter for method: MenuEnvironmentManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuEnvironmentManager::*)()>(&MenuEnvironmentManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuEnvironmentManager::ShowEnvironmentType
// Il2CppName: ShowEnvironmentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuEnvironmentManager::*)(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType)>(&MenuEnvironmentManager::ShowEnvironmentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager*), "ShowEnvironmentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType>()});
  }
};
// Writing MetadataGetter for method: MenuEnvironmentManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuEnvironmentManager::*)()>(&MenuEnvironmentManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuEnvironmentManager::*)()>(&MenuEnvironmentManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuEnvironmentManager/MenuEnvironmentType
#include "GlobalNamespace/MenuEnvironmentManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MenuEnvironmentManager/MenuEnvironmentType None
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType>("", "MenuEnvironmentManager/MenuEnvironmentType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MenuEnvironmentManager/MenuEnvironmentType None
void GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_None(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuEnvironmentManager/MenuEnvironmentType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MenuEnvironmentManager/MenuEnvironmentType Default
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType>("", "MenuEnvironmentManager/MenuEnvironmentType", "Default"));
}
// Autogenerated static field setter
// Set static field: static public MenuEnvironmentManager/MenuEnvironmentType Default
void GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Default(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuEnvironmentManager/MenuEnvironmentType", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public MenuEnvironmentManager/MenuEnvironmentType Lobby
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Lobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Lobby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType>("", "MenuEnvironmentManager/MenuEnvironmentType", "Lobby"));
}
// Autogenerated static field setter
// Set static field: static public MenuEnvironmentManager/MenuEnvironmentType Lobby
void GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Lobby(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Lobby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuEnvironmentManager/MenuEnvironmentType", "Lobby", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuEnvironmentManager/MenuEnvironmentObjects
#include "GlobalNamespace/MenuEnvironmentManager_MenuEnvironmentObjects.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuEnvironmentManager/MenuEnvironmentObjects.get_menuEnvironmentType
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_menuEnvironmentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_menuEnvironmentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_menuEnvironmentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType, false>(this, ___internal__method);
}
// Autogenerated method: MenuEnvironmentManager/MenuEnvironmentObjects.get_wrapper
UnityEngine::GameObject* GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_wrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_wrapper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wrapper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MenuEnvironmentManager::MenuEnvironmentObjects::get_menuEnvironmentType
// Il2CppName: get_menuEnvironmentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType (MenuEnvironmentManager::MenuEnvironmentObjects::*)()>(&MenuEnvironmentManager::MenuEnvironmentObjects::get_menuEnvironmentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager::MenuEnvironmentObjects*), "get_menuEnvironmentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuEnvironmentManager::MenuEnvironmentObjects::get_wrapper
// Il2CppName: get_wrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MenuEnvironmentManager::MenuEnvironmentObjects::*)()>(&MenuEnvironmentManager::MenuEnvironmentObjects::get_wrapper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager::MenuEnvironmentObjects*), "get_wrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuEnvironmentManager::MenuEnvironmentObjects::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuEnvironmentManager::MenuEnvironmentObjects::*)()>(&MenuEnvironmentManager::MenuEnvironmentObjects::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager::MenuEnvironmentObjects*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuEnvironmentManager::MenuEnvironmentObjects::*)()>(&MenuEnvironmentManager::MenuEnvironmentObjects::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuEnvironmentManager::MenuEnvironmentObjects*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuNeonLightsGenerator
#include "GlobalNamespace/MenuNeonLightsGenerator.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MenuNeonLightsGenerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuNeonLightsGenerator::*)()>(&MenuNeonLightsGenerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuNeonLightsGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuNeonLightsGenerator::*)()>(&MenuNeonLightsGenerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuNeonLightsGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OffsetByBeatmapObjectSpawnCenter
#include "GlobalNamespace/OffsetByBeatmapObjectSpawnCenter.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OffsetByBeatmapObjectSpawnCenter.Start
void GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OffsetByBeatmapObjectSpawnCenter.HandleSpawnCenterDistanceWasFound
void GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::HandleSpawnCenterDistanceWasFound(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::HandleSpawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Writing MetadataGetter for method: OffsetByBeatmapObjectSpawnCenter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OffsetByBeatmapObjectSpawnCenter::*)()>(&OffsetByBeatmapObjectSpawnCenter::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OffsetByBeatmapObjectSpawnCenter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OffsetByBeatmapObjectSpawnCenter::HandleSpawnCenterDistanceWasFound
// Il2CppName: HandleSpawnCenterDistanceWasFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OffsetByBeatmapObjectSpawnCenter::*)(float)>(&OffsetByBeatmapObjectSpawnCenter::HandleSpawnCenterDistanceWasFound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OffsetByBeatmapObjectSpawnCenter*), "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OffsetByBeatmapObjectSpawnCenter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OffsetByBeatmapObjectSpawnCenter::*)()>(&OffsetByBeatmapObjectSpawnCenter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OffsetByBeatmapObjectSpawnCenter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OffsetByBeatmapObjectSpawnCenter::*)()>(&OffsetByBeatmapObjectSpawnCenter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OffsetByBeatmapObjectSpawnCenter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultsEnvironmentManager
#include "GlobalNamespace/ResultsEnvironmentManager.hpp"
// Including type: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword
#include "GlobalNamespace/ResultsEnvironmentManager_ResultEnvironmentControllerWithKeyword.hpp"
// Including type: ResultsEnvironmentManager/<>c__DisplayClass3_0
#include "GlobalNamespace/ResultsEnvironmentManager_--c__DisplayClass3_0.hpp"
// Including type: BaseResultsEnvironmentController
#include "GlobalNamespace/BaseResultsEnvironmentController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultsEnvironmentManager.GetResultEnvironmentControllerForKeyword
GlobalNamespace::BaseResultsEnvironmentController* GlobalNamespace::ResultsEnvironmentManager::GetResultEnvironmentControllerForKeyword(::Il2CppString* keyword) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::GetResultEnvironmentControllerForKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResultEnvironmentControllerForKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyword)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseResultsEnvironmentController*, false>(this, ___internal__method, keyword);
}
// Autogenerated method: ResultsEnvironmentManager.ShowResultForKeyword
void GlobalNamespace::ResultsEnvironmentManager::ShowResultForKeyword(::Il2CppString* keyword, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::ShowResultForKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowResultForKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyword), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyword, immediately);
}
// Autogenerated method: ResultsEnvironmentManager.HideResultForKeyword
void GlobalNamespace::ResultsEnvironmentManager::HideResultForKeyword(::Il2CppString* keyword, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::HideResultForKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideResultForKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyword), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyword, immediately);
}
// Writing MetadataGetter for method: ResultsEnvironmentManager::GetResultEnvironmentControllerForKeyword
// Il2CppName: GetResultEnvironmentControllerForKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseResultsEnvironmentController* (ResultsEnvironmentManager::*)(::Il2CppString*)>(&ResultsEnvironmentManager::GetResultEnvironmentControllerForKeyword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager*), "GetResultEnvironmentControllerForKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResultsEnvironmentManager::ShowResultForKeyword
// Il2CppName: ShowResultForKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::*)(::Il2CppString*, bool)>(&ResultsEnvironmentManager::ShowResultForKeyword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager*), "ShowResultForKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ResultsEnvironmentManager::HideResultForKeyword
// Il2CppName: HideResultForKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::*)(::Il2CppString*, bool)>(&ResultsEnvironmentManager::HideResultForKeyword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager*), "HideResultForKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ResultsEnvironmentManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::*)()>(&ResultsEnvironmentManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::*)()>(&ResultsEnvironmentManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword
#include "GlobalNamespace/ResultsEnvironmentManager_ResultEnvironmentControllerWithKeyword.hpp"
// Including type: BaseResultsEnvironmentController
#include "GlobalNamespace/BaseResultsEnvironmentController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword.get_keyword
::Il2CppString* GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_keyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_keyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword.get_resultsEnvironmentController
GlobalNamespace::BaseResultsEnvironmentController* GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_resultsEnvironmentController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_resultsEnvironmentController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultsEnvironmentController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseResultsEnvironmentController*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_keyword
// Il2CppName: get_keyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::*)()>(&ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_keyword)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword*), "get_keyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_resultsEnvironmentController
// Il2CppName: get_resultsEnvironmentController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseResultsEnvironmentController* (ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::*)()>(&ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_resultsEnvironmentController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword*), "get_resultsEnvironmentController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::*)()>(&ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::*)()>(&ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultsEnvironmentManager/<>c__DisplayClass3_0
#include "GlobalNamespace/ResultsEnvironmentManager_--c__DisplayClass3_0.hpp"
// Including type: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword
#include "GlobalNamespace/ResultsEnvironmentManager_ResultEnvironmentControllerWithKeyword.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultsEnvironmentManager/<>c__DisplayClass3_0.<GetResultEnvironmentControllerForKeyword>b__0
bool GlobalNamespace::ResultsEnvironmentManager::$$c__DisplayClass3_0::$GetResultEnvironmentControllerForKeyword$b__0(GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword* controllerWithKeyword) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::$$c__DisplayClass3_0::<GetResultEnvironmentControllerForKeyword>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetResultEnvironmentControllerForKeyword>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerWithKeyword)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, controllerWithKeyword);
}
// Writing MetadataGetter for method: ResultsEnvironmentManager::$$c__DisplayClass3_0::$GetResultEnvironmentControllerForKeyword$b__0
// Il2CppName: <GetResultEnvironmentControllerForKeyword>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ResultsEnvironmentManager::$$c__DisplayClass3_0::*)(GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword*)>(&ResultsEnvironmentManager::$$c__DisplayClass3_0::$GetResultEnvironmentControllerForKeyword$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager::$$c__DisplayClass3_0*), "<GetResultEnvironmentControllerForKeyword>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword*>()});
  }
};
// Writing MetadataGetter for method: ResultsEnvironmentManager::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::$$c__DisplayClass3_0::*)()>(&ResultsEnvironmentManager::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsEnvironmentManager::$$c__DisplayClass3_0::*)()>(&ResultsEnvironmentManager::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsEnvironmentManager::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatLine
#include "GlobalNamespace/BeatLine.hpp"
// Including type: BeatLine/Pool
#include "GlobalNamespace/BeatLine_Pool.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatLine.get_isFinished
bool GlobalNamespace::BeatLine::get_isFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::get_isFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatLine.get_rotation
float GlobalNamespace::BeatLine::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatLine.Init
void GlobalNamespace::BeatLine::Init(UnityEngine::Vector3 position, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: BeatLine.AddHighlight
void GlobalNamespace::BeatLine::AddHighlight(float startTime, float arriveDuration, float jumpDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::AddHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(arriveDuration), ::il2cpp_utils::ExtractType(jumpDuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTime, arriveDuration, jumpDuration);
}
// Autogenerated method: BeatLine.ManualUpdate
void GlobalNamespace::BeatLine::ManualUpdate(float songTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime);
}
// Autogenerated method: BeatLine.ColorWasSet
void GlobalNamespace::BeatLine::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: BeatLine::get_isFinished
// Il2CppName: get_isFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatLine::*)()>(&BeatLine::get_isFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), "get_isFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLine::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatLine::*)()>(&BeatLine::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLine::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::*)(UnityEngine::Vector3, float)>(&BeatLine::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatLine::AddHighlight
// Il2CppName: AddHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::*)(float, float, float)>(&BeatLine::AddHighlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), "AddHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatLine::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::*)(float)>(&BeatLine::ManualUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatLine::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::*)(UnityEngine::Color)>(&BeatLine::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: BeatLine::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::*)()>(&BeatLine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::*)()>(&BeatLine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatLine/Pool
#include "GlobalNamespace/BeatLine_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatLine::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::Pool::*)()>(&BeatLine::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLine::Pool::*)()>(&BeatLine::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLine::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatLineManager
#include "GlobalNamespace/BeatLineManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: BeatLine/Pool
#include "GlobalNamespace/BeatLine_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatLineManager.get_isMidRotationValid
bool GlobalNamespace::BeatLineManager::get_isMidRotationValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::get_isMidRotationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMidRotationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.get_midRotation
float GlobalNamespace::BeatLineManager::get_midRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::get_midRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_midRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.get_rotationRange
float GlobalNamespace::BeatLineManager::get_rotationRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::get_rotationRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.Start
void GlobalNamespace::BeatLineManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.OnDestroy
void GlobalNamespace::BeatLineManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.Update
void GlobalNamespace::BeatLineManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.HandleNoteWasSpawned
void GlobalNamespace::BeatLineManager::HandleNoteWasSpawned(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::HandleNoteWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Writing MetadataGetter for method: BeatLineManager::get_isMidRotationValid
// Il2CppName: get_isMidRotationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatLineManager::*)()>(&BeatLineManager::get_isMidRotationValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), "get_isMidRotationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLineManager::get_midRotation
// Il2CppName: get_midRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatLineManager::*)()>(&BeatLineManager::get_midRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), "get_midRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLineManager::get_rotationRange
// Il2CppName: get_rotationRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatLineManager::*)()>(&BeatLineManager::get_rotationRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), "get_rotationRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLineManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLineManager::*)()>(&BeatLineManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLineManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLineManager::*)()>(&BeatLineManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLineManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLineManager::*)()>(&BeatLineManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatLineManager::HandleNoteWasSpawned
// Il2CppName: HandleNoteWasSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLineManager::*)(GlobalNamespace::NoteController*)>(&BeatLineManager::HandleNoteWasSpawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), "HandleNoteWasSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatLineManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLineManager::*)()>(&BeatLineManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatLineManager::*)()>(&BeatLineManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatLineManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BasicBeatmapObjectManager
#include "GlobalNamespace/BasicBeatmapObjectManager.hpp"
// Including type: BasicBeatmapObjectManager/InitData
#include "GlobalNamespace/BasicBeatmapObjectManager_InitData.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: GameNoteController/Pool
#include "GlobalNamespace/GameNoteController_Pool.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BasicBeatmapObjectManager.GetMaxYForRangeInMiddleTwoLanes
float GlobalNamespace::BasicBeatmapObjectManager::GetMaxYForRangeInMiddleTwoLanes(float zStart, float zEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::GetMaxYForRangeInMiddleTwoLanes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaxYForRangeInMiddleTwoLanes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zStart), ::il2cpp_utils::ExtractType(zEnd)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, zStart, zEnd);
}
// Autogenerated method: BasicBeatmapObjectManager.get_activeObstacleControllers
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* GlobalNamespace::BasicBeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: BasicBeatmapObjectManager.SpawnObstacleInternal
GlobalNamespace::ObstacleController* GlobalNamespace::BasicBeatmapObjectManager::SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::SpawnObstacleInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: BasicBeatmapObjectManager.SpawnBombNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BasicBeatmapObjectManager::SpawnBombNoteInternal(GlobalNamespace::NoteData* bombNoteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::SpawnBombNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bombNoteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, bombNoteData, noteSpawnData, rotation);
}
// Autogenerated method: BasicBeatmapObjectManager.SpawnBasicNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BasicBeatmapObjectManager::SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::SpawnBasicNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated method: BasicBeatmapObjectManager.DespawnInternal
void GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BasicBeatmapObjectManager.DespawnInternal
void GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BasicBeatmapObjectManager.DissolveAllObjects
void GlobalNamespace::BasicBeatmapObjectManager::DissolveAllObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::DissolveAllObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveAllObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicBeatmapObjectManager.HideAllBeatmapObjects
void GlobalNamespace::BasicBeatmapObjectManager::HideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::HideAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BasicBeatmapObjectManager.PauseAllBeatmapObjects
void GlobalNamespace::BasicBeatmapObjectManager::PauseAllBeatmapObjects(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::PauseAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pause);
}
// Writing MetadataGetter for method: BasicBeatmapObjectManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::*)(GlobalNamespace::BasicBeatmapObjectManager::InitData*, GlobalNamespace::GameNoteController::Pool*, GlobalNamespace::BombNoteController::Pool*, GlobalNamespace::ObstacleController::Pool*)>(&BasicBeatmapObjectManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BasicBeatmapObjectManager::InitData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BombNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController::Pool*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::*)(GlobalNamespace::BasicBeatmapObjectManager::InitData*, GlobalNamespace::GameNoteController::Pool*, GlobalNamespace::BombNoteController::Pool*, GlobalNamespace::ObstacleController::Pool*)>(&BasicBeatmapObjectManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BasicBeatmapObjectManager::InitData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BombNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController::Pool*>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::GetMaxYForRangeInMiddleTwoLanes
// Il2CppName: GetMaxYForRangeInMiddleTwoLanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BasicBeatmapObjectManager::*)(float, float)>(&BasicBeatmapObjectManager::GetMaxYForRangeInMiddleTwoLanes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "GetMaxYForRangeInMiddleTwoLanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::get_activeObstacleControllers
// Il2CppName: get_activeObstacleControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* (BasicBeatmapObjectManager::*)()>(&BasicBeatmapObjectManager::get_activeObstacleControllers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "get_activeObstacleControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::SpawnObstacleInternal
// Il2CppName: SpawnObstacleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleController* (BasicBeatmapObjectManager::*)(GlobalNamespace::ObstacleData*, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float)>(&BasicBeatmapObjectManager::SpawnObstacleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "SpawnObstacleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::SpawnBombNoteInternal
// Il2CppName: SpawnBombNoteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (BasicBeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float)>(&BasicBeatmapObjectManager::SpawnBombNoteInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "SpawnBombNoteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::SpawnBasicNoteInternal
// Il2CppName: SpawnBasicNoteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (BasicBeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float, float)>(&BasicBeatmapObjectManager::SpawnBasicNoteInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "SpawnBasicNoteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BasicBeatmapObjectManager::DespawnInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BasicBeatmapObjectManager::DespawnInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::DissolveAllObjects
// Il2CppName: DissolveAllObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::*)()>(&BasicBeatmapObjectManager::DissolveAllObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "DissolveAllObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::HideAllBeatmapObjects
// Il2CppName: HideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::*)(bool)>(&BasicBeatmapObjectManager::HideAllBeatmapObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "HideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BasicBeatmapObjectManager::PauseAllBeatmapObjects
// Il2CppName: PauseAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::*)(bool)>(&BasicBeatmapObjectManager::PauseAllBeatmapObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager*), "PauseAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BasicBeatmapObjectManager/InitData
#include "GlobalNamespace/BasicBeatmapObjectManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BasicBeatmapObjectManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::InitData::*)(bool, bool, float, float)>(&BasicBeatmapObjectManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicBeatmapObjectManager::InitData::*)(bool, bool, float, float)>(&BasicBeatmapObjectManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicBeatmapObjectManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapCallbackItemDataList
#include "GlobalNamespace/BeatmapCallbackItemDataList.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnBasicNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBasicNoteCallback.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnLongNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnLongNoteCallback.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnBombNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBombNoteCallback.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnObstacleCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnObstacleCallback.hpp"
// Including type: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_ProcessBeatmapEventCallback.hpp"
// Including type: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_GetRelativeNoteOffsetCallback.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList.InsertBeatmapObjectData
void GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapObjectData(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapObjectData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertBeatmapObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Autogenerated method: BeatmapCallbackItemDataList.InsertBeatmapEventData
void GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapCallbackItemDataList.ProcessData
void GlobalNamespace::BeatmapCallbackItemDataList::ProcessData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapCallbackItemDataList.ProcessNotesByColorType
bool GlobalNamespace::BeatmapCallbackItemDataList::ProcessNotesByColorType(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* notesWithTheSameColorTypeList) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessNotesByColorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNotesByColorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notesWithTheSameColorTypeList)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, notesWithTheSameColorTypeList);
}
// Autogenerated method: BeatmapCallbackItemDataList.SpawnNoteOrLongNote
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnNoteOrLongNote(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnNoteOrLongNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnNoteOrLongNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::*)(GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback*, GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback*, GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback*, GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*, GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*, System::Action*, GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*)>(&BeatmapCallbackItemDataList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::*)(GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback*, GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback*, GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback*, GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*, GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*, System::Action*, GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*)>(&BeatmapCallbackItemDataList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::InsertBeatmapObjectData
// Il2CppName: InsertBeatmapObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::*)(GlobalNamespace::BeatmapObjectData*)>(&BeatmapCallbackItemDataList::InsertBeatmapObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList*), "InsertBeatmapObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::InsertBeatmapEventData
// Il2CppName: InsertBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::*)(GlobalNamespace::BeatmapEventData*)>(&BeatmapCallbackItemDataList::InsertBeatmapEventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList*), "InsertBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::ProcessData
// Il2CppName: ProcessData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::*)()>(&BeatmapCallbackItemDataList::ProcessData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList*), "ProcessData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::ProcessNotesByColorType
// Il2CppName: ProcessNotesByColorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapCallbackItemDataList::*)(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*)>(&BeatmapCallbackItemDataList::ProcessNotesByColorType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList*), "ProcessNotesByColorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnNoteOrLongNote
// Il2CppName: SpawnNoteOrLongNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::*)(GlobalNamespace::NoteData*, float)>(&BeatmapCallbackItemDataList::SpawnNoteOrLongNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList*), "SpawnNoteOrLongNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnBasicNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBasicNoteCallback.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBasicNoteCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::Invoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBasicNoteCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::BeginInvoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, cutDirectionAngleOffset, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBasicNoteCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBasicNoteCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBasicNoteCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnBasicNoteCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBasicNoteCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBasicNoteCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnBasicNoteCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBasicNoteCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBasicNoteCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBasicNoteCallback::*)(GlobalNamespace::NoteData*, float)>(&BeatmapCallbackItemDataList::SpawnBasicNoteCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBasicNoteCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBasicNoteCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapCallbackItemDataList::SpawnBasicNoteCallback::*)(GlobalNamespace::NoteData*, float, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapCallbackItemDataList::SpawnBasicNoteCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBasicNoteCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBasicNoteCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBasicNoteCallback::*)(System::IAsyncResult*)>(&BeatmapCallbackItemDataList::SpawnBasicNoteCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBasicNoteCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnLongNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnLongNoteCallback.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnLongNoteCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::Invoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnLongNoteCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::BeginInvoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, cutDirectionAngleOffset, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnLongNoteCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnLongNoteCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnLongNoteCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnLongNoteCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnLongNoteCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnLongNoteCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnLongNoteCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnLongNoteCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnLongNoteCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnLongNoteCallback::*)(GlobalNamespace::NoteData*, float)>(&BeatmapCallbackItemDataList::SpawnLongNoteCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnLongNoteCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnLongNoteCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapCallbackItemDataList::SpawnLongNoteCallback::*)(GlobalNamespace::NoteData*, float, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapCallbackItemDataList::SpawnLongNoteCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnLongNoteCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnLongNoteCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnLongNoteCallback::*)(System::IAsyncResult*)>(&BeatmapCallbackItemDataList::SpawnLongNoteCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnLongNoteCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnBombNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBombNoteCallback.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBombNoteCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::Invoke(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBombNoteCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::BeginInvoke(GlobalNamespace::NoteData* noteData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBombNoteCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBombNoteCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBombNoteCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnBombNoteCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBombNoteCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBombNoteCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnBombNoteCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBombNoteCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBombNoteCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBombNoteCallback::*)(GlobalNamespace::NoteData*)>(&BeatmapCallbackItemDataList::SpawnBombNoteCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBombNoteCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBombNoteCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapCallbackItemDataList::SpawnBombNoteCallback::*)(GlobalNamespace::NoteData*, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapCallbackItemDataList::SpawnBombNoteCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBombNoteCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnBombNoteCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnBombNoteCallback::*)(System::IAsyncResult*)>(&BeatmapCallbackItemDataList::SpawnBombNoteCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnBombNoteCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnObstacleCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnObstacleCallback.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnObstacleCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::Invoke(GlobalNamespace::ObstacleData* obstacleData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleData);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnObstacleCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::BeginInvoke(GlobalNamespace::ObstacleData* obstacleData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, obstacleData, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnObstacleCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnObstacleCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnObstacleCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnObstacleCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnObstacleCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnObstacleCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::SpawnObstacleCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnObstacleCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnObstacleCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnObstacleCallback::*)(GlobalNamespace::ObstacleData*)>(&BeatmapCallbackItemDataList::SpawnObstacleCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnObstacleCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnObstacleCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapCallbackItemDataList::SpawnObstacleCallback::*)(GlobalNamespace::ObstacleData*, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapCallbackItemDataList::SpawnObstacleCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnObstacleCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::SpawnObstacleCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::SpawnObstacleCallback::*)(System::IAsyncResult*)>(&BeatmapCallbackItemDataList::SpawnObstacleCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::SpawnObstacleCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_ProcessBeatmapEventCallback.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::Invoke(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::BeginInvoke(GlobalNamespace::BeatmapEventData* beatmapEventData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, beatmapEventData, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::*)(GlobalNamespace::BeatmapEventData*)>(&BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::*)(GlobalNamespace::BeatmapEventData*, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::*)(System::IAsyncResult*)>(&BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::ProcessBeatmapEventCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_GetRelativeNoteOffsetCallback.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback.Invoke
UnityEngine::Vector2 GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::Invoke(int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, lineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::BeginInvoke(int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, lineIndex, noteLineLayer, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback.EndInvoke
UnityEngine::Vector2 GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::*)(int, GlobalNamespace::NoteLineLayer)>(&BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::*)(int, GlobalNamespace::NoteLineLayer, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::*)(System::IAsyncResult*)>(&BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
// Including type: BeatmapObjectCallbackController/InitData
#include "GlobalNamespace/BeatmapObjectCallbackController_InitData.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: EnvironmentKeywords
#include "GlobalNamespace/EnvironmentKeywords.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectCallbackController.add_beatmapEventDidTriggerEvent
void GlobalNamespace::BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.remove_beatmapEventDidTriggerEvent
void GlobalNamespace::BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.add_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.remove_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.get_isPaused
bool GlobalNamespace::BeatmapObjectCallbackController::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::get_isPaused");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.Start
void GlobalNamespace::BeatmapObjectCallbackController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.LateUpdate
void GlobalNamespace::BeatmapObjectCallbackController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.AddBeatmapObjectCallback
GlobalNamespace::BeatmapObjectCallbackData* GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: BeatmapObjectCallbackController.RemoveBeatmapObjectCallback
void GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: BeatmapObjectCallbackController.AddBeatmapEventCallback
GlobalNamespace::BeatmapEventCallbackData* GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapEventCallback(GlobalNamespace::BeatmapEventCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapEventCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: BeatmapObjectCallbackController.RemoveBeatmapEventCallback
void GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapEventCallback(GlobalNamespace::BeatmapEventCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: BeatmapObjectCallbackController.SendBeatmapEventDidTriggerEvent
void GlobalNamespace::BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBeatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectCallbackController.SetNewBeatmapData
void GlobalNamespace::BeatmapObjectCallbackController::SetNewBeatmapData(GlobalNamespace::IReadonlyBeatmapData* beatmapData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::SetNewBeatmapData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNewBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapData);
}
// Autogenerated method: BeatmapObjectCallbackController.Pause
void GlobalNamespace::BeatmapObjectCallbackController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.Resume
void GlobalNamespace::BeatmapObjectCallbackController::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent
// Il2CppName: add_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapEventData*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent
// Il2CppName: remove_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapEventData*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent
// Il2CppName: add_callbacksForThisFrameWereProcessedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(System::Action*)>(&BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "add_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent
// Il2CppName: remove_callbacksForThisFrameWereProcessedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(System::Action*)>(&BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "remove_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::get_isPaused
// Il2CppName: get_isPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapObjectCallbackController::*)()>(&BeatmapObjectCallbackController::get_isPaused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "get_isPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)()>(&BeatmapObjectCallbackController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)()>(&BeatmapObjectCallbackController::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::AddBeatmapObjectCallback
// Il2CppName: AddBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectCallbackData* (BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapObjectCallback*, float)>(&BeatmapObjectCallbackController::AddBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "AddBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::RemoveBeatmapObjectCallback
// Il2CppName: RemoveBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapObjectCallbackData*)>(&BeatmapObjectCallbackController::RemoveBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallbackData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::AddBeatmapEventCallback
// Il2CppName: AddBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapEventCallbackData* (BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventCallback*, float)>(&BeatmapObjectCallbackController::AddBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "AddBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::RemoveBeatmapEventCallback
// Il2CppName: RemoveBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventCallbackData*)>(&BeatmapObjectCallbackController::RemoveBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallbackData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent
// Il2CppName: SendBeatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventData*)>(&BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "SendBeatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::SetNewBeatmapData
// Il2CppName: SetNewBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)(GlobalNamespace::IReadonlyBeatmapData*)>(&BeatmapObjectCallbackController::SetNewBeatmapData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "SetNewBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IReadonlyBeatmapData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)()>(&BeatmapObjectCallbackController::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)()>(&BeatmapObjectCallbackController::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallbackController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)()>(&BeatmapObjectCallbackController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::*)()>(&BeatmapObjectCallbackController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectCallbackController/InitData
#include "GlobalNamespace/BeatmapObjectCallbackController_InitData.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatmapObjectCallbackController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::InitData::*)(GlobalNamespace::IReadonlyBeatmapData*, float)>(&BeatmapObjectCallbackController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IReadonlyBeatmapData*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackController::InitData::*)(GlobalNamespace::IReadonlyBeatmapData*, float)>(&BeatmapObjectCallbackController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IReadonlyBeatmapData*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ICutScoreHandlerDidFinishEvent
#include "GlobalNamespace/ICutScoreHandlerDidFinishEvent.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICutScoreHandlerDidFinishEvent.HandleCutScoreHandlerDidFinish
template<>
void GlobalNamespace::ICutScoreHandlerDidFinishEvent::HandleCutScoreHandlerDidFinish(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler* cutScoreHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICutScoreHandlerDidFinishEvent::HandleCutScoreHandlerDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreHandlerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreHandler)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutScoreHandler);
}
// Writing MetadataGetter for method: ICutScoreHandlerDidFinishEvent::HandleCutScoreHandlerDidFinish
// Il2CppName: HandleCutScoreHandlerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICutScoreHandlerDidFinishEvent::*)(T0)>(&ICutScoreHandlerDidFinishEvent::HandleCutScoreHandlerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICutScoreHandlerDidFinishEvent*), "HandleCutScoreHandlerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<T0>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: BeatmapObjectExecutionRating
#include "GlobalNamespace/BeatmapObjectExecutionRating.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: NoteExecutionRating
#include "GlobalNamespace/NoteExecutionRating.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler/Pool
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder_CutScoreHandler_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.get_beatmapObjectExecutionRatings
System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectExecutionRating*>* GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::get_beatmapObjectExecutionRatings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::get_beatmapObjectExecutionRatings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectExecutionRatings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectExecutionRating*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.Start
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.OnDestroy
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.Update
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleCutScoreHandlerDidFinish
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleCutScoreHandlerDidFinish(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler* cutScoreHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleCutScoreHandlerDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreHandlerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreHandler)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutScoreHandler);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleScoreControllerNoteWasCut
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasCut(GlobalNamespace::NoteData* noteData, GlobalNamespace::NoteCutInfo& noteCutInfo, int multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(multiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, noteCutInfo, multiplier);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleScoreControllerNoteWasMissed
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasMissed(GlobalNamespace::NoteData* noteData, int multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreControllerNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(multiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, multiplier);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleObstacleDidPassAvoidedMark
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleObstacleDidPassAvoidedMark(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleObstacleDidPassAvoidedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleDidPassAvoidedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::get_beatmapObjectExecutionRatings
// Il2CppName: get_beatmapObjectExecutionRatings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectExecutionRating*>* (BeatmapObjectExecutionRatingsRecorder::*)()>(&BeatmapObjectExecutionRatingsRecorder::get_beatmapObjectExecutionRatings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "get_beatmapObjectExecutionRatings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)()>(&BeatmapObjectExecutionRatingsRecorder::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)()>(&BeatmapObjectExecutionRatingsRecorder::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)()>(&BeatmapObjectExecutionRatingsRecorder::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::HandleCutScoreHandlerDidFinish
// Il2CppName: HandleCutScoreHandlerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*)>(&BeatmapObjectExecutionRatingsRecorder::HandleCutScoreHandlerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "HandleCutScoreHandlerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasCut
// Il2CppName: HandleScoreControllerNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)(GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo&, int)>(&BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "HandleScoreControllerNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasMissed
// Il2CppName: HandleScoreControllerNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)(GlobalNamespace::NoteData*, int)>(&BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasMissed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "HandleScoreControllerNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::HandleObstacleDidPassAvoidedMark
// Il2CppName: HandleObstacleDidPassAvoidedMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectExecutionRatingsRecorder::HandleObstacleDidPassAvoidedMark)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), "HandleObstacleDidPassAvoidedMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)()>(&BeatmapObjectExecutionRatingsRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::*)()>(&BeatmapObjectExecutionRatingsRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler/Pool
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder_CutScoreHandler_Pool.hpp"
// Including type: NoteExecutionRating
#include "GlobalNamespace/NoteExecutionRating.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: ICutScoreHandlerDidFinishEvent
#include "GlobalNamespace/ICutScoreHandlerDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler.get_didFinishEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::ICutScoreHandlerDidFinishEvent*>* GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::ICutScoreHandlerDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler.Set
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Set(GlobalNamespace::NoteCutInfo& noteCutInfo, GlobalNamespace::NoteExecutionRating* noteExecutionRating, GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Set");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(noteExecutionRating), ::il2cpp_utils::ExtractType(swingRatingCounter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, noteExecutionRating, swingRatingCounter);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler.Reinitialize
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Reinitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Reinitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reinitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler.HandleSaberSwingRatingCounterDidFinish
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::HandleSaberSwingRatingCounterDidFinish(GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::HandleSaberSwingRatingCounterDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberSwingRatingCounter);
}
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::get_didFinishEvent
// Il2CppName: get_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::ICutScoreHandlerDidFinishEvent*>* (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::*)()>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::get_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*), "get_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::*)(GlobalNamespace::NoteCutInfo&, GlobalNamespace::NoteExecutionRating*, GlobalNamespace::ISaberSwingRatingCounter*)>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteExecutionRating*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ISaberSwingRatingCounter*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Reinitialize
// Il2CppName: Reinitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::*)()>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Reinitialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*), "Reinitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::HandleSaberSwingRatingCounterDidFinish
// Il2CppName: HandleSaberSwingRatingCounterDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::*)(GlobalNamespace::ISaberSwingRatingCounter*)>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::HandleSaberSwingRatingCounterDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*), "HandleSaberSwingRatingCounterDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ISaberSwingRatingCounter*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::*)()>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::*)()>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler/Pool
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder_CutScoreHandler_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler/Pool.OnDespawned
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::OnDespawned(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::OnDespawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::OnDespawned
// Il2CppName: OnDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::*)(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*)>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::OnDespawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool*), "OnDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::*)()>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::*)()>(&BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: BeatmapObjectManager/NoteWasCutDelegate
#include "GlobalNamespace/BeatmapObjectManager_NoteWasCutDelegate.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectManager.add_noteWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteWasMissedEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasMissedEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteWasCutEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasCutEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteDidStartJumpEvent
void GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteDidStartJumpEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleDidPassThreeQuartersOfMove2Event
void GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleDidPassThreeQuartersOfMove2Event
void GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleDidPassAvoidedMarkEvent
void GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleDidPassAvoidedMarkEvent
void GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_didHideAllBeatmapObjectsEvent
void GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_didHideAllBeatmapObjectsEvent
void GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.get_activeObstacleControllers
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectManager.SpawnObstacleInternal
GlobalNamespace::ObstacleController* GlobalNamespace::BeatmapObjectManager::SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnObstacleInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBombNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBombNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBombNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBasicNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBasicNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapObjectManager.DespawnInternal
void GlobalNamespace::BeatmapObjectManager::DespawnInternal(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.DespawnInternal
void GlobalNamespace::BeatmapObjectManager::DespawnInternal(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.get_spawnHidden
bool GlobalNamespace::BeatmapObjectManager::get_spawnHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::get_spawnHidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnHidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectManager.set_spawnHidden
void GlobalNamespace::BeatmapObjectManager::set_spawnHidden(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::set_spawnHidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spawnHidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.SpawnObstacle
GlobalNamespace::ObstacleController* GlobalNamespace::BeatmapObjectManager::SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnObstacle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBombNote
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBombNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBombNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBasicNote
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBasicNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBasicNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapObjectManager.SetNoteControllerEventCallbacks
void GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteControllerEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.RemoveNoteControllerEventCallbacks
void GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNoteControllerEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.SetObstacleEventCallbacks
void GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetObstacleEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.RemoveObstacleEventCallbacks
void GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveObstacleEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.Despawn
void GlobalNamespace::BeatmapObjectManager::Despawn(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::Despawn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Despawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.Despawn
void GlobalNamespace::BeatmapObjectManager::Despawn(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::Despawn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Despawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteDidStartJump
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteWasMissed
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteDidFinishJump
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteDidDissolve
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteWasCut
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: BeatmapObjectManager.HandleObstaclePassedThreeQuartersOfMove2
void GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstaclePassedThreeQuartersOfMove2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleObstaclePassedAvoidedMark
void GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstaclePassedAvoidedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleObstacleFinishedMovement
void GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleFinishedMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleObstacleDidDissolve
void GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.InvokeDidHideAllBeatmapObjects
void GlobalNamespace::BeatmapObjectManager::InvokeDidHideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::InvokeDidHideAllBeatmapObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeDidHideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BeatmapObjectManager.DissolveAllObjects
void GlobalNamespace::BeatmapObjectManager::DissolveAllObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::DissolveAllObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveAllObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectManager.HideAllBeatmapObjects
void GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BeatmapObjectManager.PauseAllBeatmapObjects
void GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated method: BeatmapObjectManager.INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
void GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Writing MetadataGetter for method: BeatmapObjectManager::add_noteWasSpawnedEvent
// Il2CppName: add_noteWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::add_noteWasSpawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_noteWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_noteWasSpawnedEvent
// Il2CppName: remove_noteWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::remove_noteWasSpawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_noteWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_noteWasDespawnedEvent
// Il2CppName: add_noteWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::add_noteWasDespawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_noteWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_noteWasDespawnedEvent
// Il2CppName: remove_noteWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::remove_noteWasDespawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_noteWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::add_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::remove_noteWasMissedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*)>(&BeatmapObjectManager::add_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*)>(&BeatmapObjectManager::remove_noteWasCutEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_noteDidStartJumpEvent
// Il2CppName: add_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::add_noteDidStartJumpEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_noteDidStartJumpEvent
// Il2CppName: remove_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&BeatmapObjectManager::remove_noteDidStartJumpEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::NoteController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_obstacleWasSpawnedEvent
// Il2CppName: add_obstacleWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::add_obstacleWasSpawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_obstacleWasSpawnedEvent
// Il2CppName: remove_obstacleWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::remove_obstacleWasSpawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_obstacleWasDespawnedEvent
// Il2CppName: add_obstacleWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::add_obstacleWasDespawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_obstacleWasDespawnedEvent
// Il2CppName: remove_obstacleWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::remove_obstacleWasDespawnedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: add_obstacleDidPassThreeQuartersOfMove2Event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: remove_obstacleDidPassThreeQuartersOfMove2Event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent
// Il2CppName: add_obstacleDidPassAvoidedMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent
// Il2CppName: remove_obstacleDidPassAvoidedMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ObstacleController*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent
// Il2CppName: add_didHideAllBeatmapObjectsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<bool>*)>(&BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "add_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent
// Il2CppName: remove_didHideAllBeatmapObjectsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(System::Action_1<bool>*)>(&BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "remove_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::get_activeObstacleControllers
// Il2CppName: get_activeObstacleControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* (BeatmapObjectManager::*)()>(&BeatmapObjectManager::get_activeObstacleControllers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "get_activeObstacleControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SpawnObstacleInternal
// Il2CppName: SpawnObstacleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleController* (BeatmapObjectManager::*)(GlobalNamespace::ObstacleData*, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float)>(&BeatmapObjectManager::SpawnObstacleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SpawnObstacleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SpawnBombNoteInternal
// Il2CppName: SpawnBombNoteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float)>(&BeatmapObjectManager::SpawnBombNoteInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SpawnBombNoteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SpawnBasicNoteInternal
// Il2CppName: SpawnBasicNoteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float, float)>(&BeatmapObjectManager::SpawnBasicNoteInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SpawnBasicNoteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::DespawnInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::DespawnInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::get_spawnHidden
// Il2CppName: get_spawnHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapObjectManager::*)()>(&BeatmapObjectManager::get_spawnHidden)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "get_spawnHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::set_spawnHidden
// Il2CppName: set_spawnHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(bool)>(&BeatmapObjectManager::set_spawnHidden)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "set_spawnHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SpawnObstacle
// Il2CppName: SpawnObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleController* (BeatmapObjectManager::*)(GlobalNamespace::ObstacleData*, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float)>(&BeatmapObjectManager::SpawnObstacle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SpawnObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SpawnBombNote
// Il2CppName: SpawnBombNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float)>(&BeatmapObjectManager::SpawnBombNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SpawnBombNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SpawnBasicNote
// Il2CppName: SpawnBasicNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float, float)>(&BeatmapObjectManager::SpawnBasicNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SpawnBasicNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SetNoteControllerEventCallbacks
// Il2CppName: SetNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::SetNoteControllerEventCallbacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SetNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::RemoveNoteControllerEventCallbacks
// Il2CppName: RemoveNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::RemoveNoteControllerEventCallbacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "RemoveNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::SetObstacleEventCallbacks
// Il2CppName: SetObstacleEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::SetObstacleEventCallbacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "SetObstacleEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::RemoveObstacleEventCallbacks
// Il2CppName: RemoveObstacleEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::RemoveObstacleEventCallbacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "RemoveObstacleEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::Despawn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::Despawn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleNoteControllerNoteDidStartJump
// Il2CppName: HandleNoteControllerNoteDidStartJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::HandleNoteControllerNoteDidStartJump)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleNoteControllerNoteDidStartJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleNoteControllerNoteWasMissed
// Il2CppName: HandleNoteControllerNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::HandleNoteControllerNoteWasMissed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleNoteControllerNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump
// Il2CppName: HandleNoteControllerNoteDidFinishJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleNoteControllerNoteDidFinishJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleNoteControllerNoteDidDissolve
// Il2CppName: HandleNoteControllerNoteDidDissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&BeatmapObjectManager::HandleNoteControllerNoteDidDissolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleNoteControllerNoteDidDissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleNoteControllerNoteWasCut
// Il2CppName: HandleNoteControllerNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&BeatmapObjectManager::HandleNoteControllerNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2
// Il2CppName: HandleObstaclePassedThreeQuartersOfMove2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleObstaclePassedThreeQuartersOfMove2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleObstaclePassedAvoidedMark
// Il2CppName: HandleObstaclePassedAvoidedMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::HandleObstaclePassedAvoidedMark)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleObstaclePassedAvoidedMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleObstacleFinishedMovement
// Il2CppName: HandleObstacleFinishedMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::HandleObstacleFinishedMovement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleObstacleFinishedMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HandleObstacleDidDissolve
// Il2CppName: HandleObstacleDidDissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&BeatmapObjectManager::HandleObstacleDidDissolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HandleObstacleDidDissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::InvokeDidHideAllBeatmapObjects
// Il2CppName: InvokeDidHideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(bool)>(&BeatmapObjectManager::InvokeDidHideAllBeatmapObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "InvokeDidHideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::DissolveAllObjects
// Il2CppName: DissolveAllObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)()>(&BeatmapObjectManager::DissolveAllObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "DissolveAllObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::HideAllBeatmapObjects
// Il2CppName: HideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(bool)>(&BeatmapObjectManager::HideAllBeatmapObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "HideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::PauseAllBeatmapObjects
// Il2CppName: PauseAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(bool)>(&BeatmapObjectManager::PauseAllBeatmapObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "PauseAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut
// Il2CppName: INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), "INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)()>(&BeatmapObjectManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::*)()>(&BeatmapObjectManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectManager/NoteWasCutDelegate
#include "GlobalNamespace/BeatmapObjectManager_NoteWasCutDelegate.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectManager/NoteWasCutDelegate.Invoke
void GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::Invoke(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: BeatmapObjectManager/NoteWasCutDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::BeginInvoke(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteController, noteCutInfo, callback, object);
}
// Autogenerated method: BeatmapObjectManager/NoteWasCutDelegate.EndInvoke
void GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::EndInvoke(GlobalNamespace::NoteCutInfo& noteCutInfo, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, result);
}
// Writing MetadataGetter for method: BeatmapObjectManager::NoteWasCutDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::NoteWasCutDelegate::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapObjectManager::NoteWasCutDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager::NoteWasCutDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::NoteWasCutDelegate::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapObjectManager::NoteWasCutDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager::NoteWasCutDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::NoteWasCutDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::NoteWasCutDelegate::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&BeatmapObjectManager::NoteWasCutDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager::NoteWasCutDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::NoteWasCutDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapObjectManager::NoteWasCutDelegate::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapObjectManager::NoteWasCutDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager::NoteWasCutDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectManager::NoteWasCutDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectManager::NoteWasCutDelegate::*)(GlobalNamespace::NoteCutInfo&, System::IAsyncResult*)>(&BeatmapObjectManager::NoteWasCutDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectManager::NoteWasCutDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: BeatmapObjectSpawnCenter/PlayerCountToDistance
#include "GlobalNamespace/BeatmapObjectSpawnCenter_PlayerCountToDistance.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnCenter.get_spawnCenterDistance
float GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnCenterDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnCenter.get_spawnCenterDistanceWasFound
bool GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistanceWasFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnCenter.add_spawnCenterDistanceWasFoundEvent
void GlobalNamespace::BeatmapObjectSpawnCenter::add_spawnCenterDistanceWasFoundEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::add_spawnCenterDistanceWasFoundEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_spawnCenterDistanceWasFoundEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnCenter.remove_spawnCenterDistanceWasFoundEvent
void GlobalNamespace::BeatmapObjectSpawnCenter::remove_spawnCenterDistanceWasFoundEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::remove_spawnCenterDistanceWasFoundEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_spawnCenterDistanceWasFoundEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnCenter.CalculateSpawnCenterPosition
float GlobalNamespace::BeatmapObjectSpawnCenter::CalculateSpawnCenterPosition(int numberOfPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::CalculateSpawnCenterPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateSpawnCenterPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfPlayers)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, numberOfPlayers);
}
// Autogenerated method: BeatmapObjectSpawnCenter.ReportAndSaveSpawnCenterDistance
void GlobalNamespace::BeatmapObjectSpawnCenter::ReportAndSaveSpawnCenterDistance(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::ReportAndSaveSpawnCenterDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportAndSaveSpawnCenterDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::get_spawnCenterDistance
// Il2CppName: get_spawnCenterDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnCenter::*)()>(&BeatmapObjectSpawnCenter::get_spawnCenterDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), "get_spawnCenterDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::get_spawnCenterDistanceWasFound
// Il2CppName: get_spawnCenterDistanceWasFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapObjectSpawnCenter::*)()>(&BeatmapObjectSpawnCenter::get_spawnCenterDistanceWasFound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), "get_spawnCenterDistanceWasFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::add_spawnCenterDistanceWasFoundEvent
// Il2CppName: add_spawnCenterDistanceWasFoundEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnCenter::*)(System::Action_1<float>*)>(&BeatmapObjectSpawnCenter::add_spawnCenterDistanceWasFoundEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), "add_spawnCenterDistanceWasFoundEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::remove_spawnCenterDistanceWasFoundEvent
// Il2CppName: remove_spawnCenterDistanceWasFoundEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnCenter::*)(System::Action_1<float>*)>(&BeatmapObjectSpawnCenter::remove_spawnCenterDistanceWasFoundEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), "remove_spawnCenterDistanceWasFoundEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::CalculateSpawnCenterPosition
// Il2CppName: CalculateSpawnCenterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnCenter::*)(int)>(&BeatmapObjectSpawnCenter::CalculateSpawnCenterPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), "CalculateSpawnCenterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::ReportAndSaveSpawnCenterDistance
// Il2CppName: ReportAndSaveSpawnCenterDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnCenter::*)(float)>(&BeatmapObjectSpawnCenter::ReportAndSaveSpawnCenterDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), "ReportAndSaveSpawnCenterDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnCenter::*)()>(&BeatmapObjectSpawnCenter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnCenter::*)()>(&BeatmapObjectSpawnCenter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnCenter/PlayerCountToDistance
#include "GlobalNamespace/BeatmapObjectSpawnCenter_PlayerCountToDistance.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnCenter/PlayerCountToDistance.get_playerCount
int GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_playerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_playerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnCenter/PlayerCountToDistance.get_distance
float GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_distance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::PlayerCountToDistance::get_playerCount
// Il2CppName: get_playerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BeatmapObjectSpawnCenter::PlayerCountToDistance::*)()>(&BeatmapObjectSpawnCenter::PlayerCountToDistance::get_playerCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter::PlayerCountToDistance*), "get_playerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::PlayerCountToDistance::get_distance
// Il2CppName: get_distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnCenter::PlayerCountToDistance::*)()>(&BeatmapObjectSpawnCenter::PlayerCountToDistance::get_distance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter::PlayerCountToDistance*), "get_distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnCenter::PlayerCountToDistance::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnCenter::PlayerCountToDistance::*)()>(&BeatmapObjectSpawnCenter::PlayerCountToDistance::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter::PlayerCountToDistance*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnCenter::PlayerCountToDistance::*)()>(&BeatmapObjectSpawnCenter::PlayerCountToDistance::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnCenter::PlayerCountToDistance*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: BeatmapObjectSpawnController/InitData
#include "GlobalNamespace/BeatmapObjectSpawnController_InitData.hpp"
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapCallbackItemDataList
#include "GlobalNamespace/BeatmapCallbackItemDataList.hpp"
// Including type: SpawnRotationProcessor
#include "GlobalNamespace/SpawnRotationProcessor.hpp"
// Including type: VariableBpmProcessor
#include "GlobalNamespace/VariableBpmProcessor.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnController.get_jumpOffsetY
float GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.set_jumpOffsetY
void GlobalNamespace::BeatmapObjectSpawnController::set_jumpOffsetY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::set_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnController.get_currentBpm
float GlobalNamespace::BeatmapObjectSpawnController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_moveDuration
float GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_jumpDuration
float GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_jumpDistance
float GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_verticalLayerDistance
float GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayerDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_noteJumpMovementSpeed
float GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_noteLinesDistance
float GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_beatmapObjectSpawnMovementData
GlobalNamespace::BeatmapObjectSpawnMovementData* GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_isInitialized
bool GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.add_didInitEvent
void GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnController.remove_didInitEvent
void GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnController.Start
void GlobalNamespace::BeatmapObjectSpawnController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.OnDestroy
void GlobalNamespace::BeatmapObjectSpawnController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.SpawnObstacle
void GlobalNamespace::BeatmapObjectSpawnController::SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::SpawnObstacle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleData);
}
// Autogenerated method: BeatmapObjectSpawnController.SpawnBasicNote
void GlobalNamespace::BeatmapObjectSpawnController::SpawnBasicNote(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::SpawnBasicNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapObjectSpawnController.SpawnBombNote
void GlobalNamespace::BeatmapObjectSpawnController::SpawnBombNote(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::SpawnBombNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapObjectSpawnController.ProcessEarlyBeatmapEventData
void GlobalNamespace::BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEarlyBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectSpawnController.EarlyEventsWereProcessed
void GlobalNamespace::BeatmapObjectSpawnController::EarlyEventsWereProcessed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::EarlyEventsWereProcessed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EarlyEventsWereProcessed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.ProcessLateBeatmapEventData
void GlobalNamespace::BeatmapObjectSpawnController::ProcessLateBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::ProcessLateBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLateBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectSpawnController.HandleBeatmapObjectCallback
void GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapObjectCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapObjectCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Autogenerated method: BeatmapObjectSpawnController.HandleBeatmapEventCallback
void GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapEventCallback(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapEventCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectSpawnController.HandleCallbacksForThisFrameWereProcessed
void GlobalNamespace::BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCallbacksForThisFrameWereProcessed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.StopSpawning
void GlobalNamespace::BeatmapObjectSpawnController::StopSpawning() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::StopSpawning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSpawning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnController.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_jumpOffsetY
// Il2CppName: get_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_jumpOffsetY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::set_jumpOffsetY
// Il2CppName: set_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(float)>(&BeatmapObjectSpawnController::set_jumpOffsetY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "set_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_currentBpm
// Il2CppName: get_currentBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_currentBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_currentBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_moveDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_jumpDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_jumpDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_verticalLayerDistance
// Il2CppName: get_verticalLayerDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_verticalLayerDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_verticalLayerDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_noteLinesDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData
// Il2CppName: get_beatmapObjectSpawnMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectSpawnMovementData* (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::get_isInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(System::Action*)>(&BeatmapObjectSpawnController::add_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(System::Action*)>(&BeatmapObjectSpawnController::remove_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::SpawnObstacle
// Il2CppName: SpawnObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(GlobalNamespace::ObstacleData*)>(&BeatmapObjectSpawnController::SpawnObstacle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "SpawnObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::SpawnBasicNote
// Il2CppName: SpawnBasicNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(GlobalNamespace::NoteData*, float)>(&BeatmapObjectSpawnController::SpawnBasicNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "SpawnBasicNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::SpawnBombNote
// Il2CppName: SpawnBombNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(GlobalNamespace::NoteData*)>(&BeatmapObjectSpawnController::SpawnBombNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "SpawnBombNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData
// Il2CppName: ProcessEarlyBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapEventData*)>(&BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "ProcessEarlyBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::EarlyEventsWereProcessed
// Il2CppName: EarlyEventsWereProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::EarlyEventsWereProcessed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "EarlyEventsWereProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::ProcessLateBeatmapEventData
// Il2CppName: ProcessLateBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapEventData*)>(&BeatmapObjectSpawnController::ProcessLateBeatmapEventData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "ProcessLateBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::HandleBeatmapObjectCallback
// Il2CppName: HandleBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapObjectData*)>(&BeatmapObjectSpawnController::HandleBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "HandleBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::HandleBeatmapEventCallback
// Il2CppName: HandleBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapEventData*)>(&BeatmapObjectSpawnController::HandleBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "HandleBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed
// Il2CppName: HandleCallbacksForThisFrameWereProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "HandleCallbacksForThisFrameWereProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::StopSpawning
// Il2CppName: StopSpawning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::StopSpawning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "StopSpawning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (BeatmapObjectSpawnController::*)(int, GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnController::Get2DNoteOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnController::*)(GlobalNamespace::NoteLineLayer, float)>(&BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::*)()>(&BeatmapObjectSpawnController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnController/InitData
#include "GlobalNamespace/BeatmapObjectSpawnController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatmapObjectSpawnController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::InitData::*)(float, int, float, float, float)>(&BeatmapObjectSpawnController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnController::InitData::*)(float, int, float, float, float)>(&BeatmapObjectSpawnController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnMovementData.get_spawnAheadTime
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_spawnAheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_spawnAheadTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnAheadTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_moveDuration
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_jumpDuration
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_noteLinesDistance
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_verticalLayersDistance
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_verticalLayersDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_verticalLayersDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayersDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_jumpDistance
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_noteJumpMovementSpeed
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.Init
void GlobalNamespace::BeatmapObjectSpawnMovementData::Init(int noteLinesCount, float startNoteJumpMovementSpeed, float startBpm, float noteJumpStartBeatOffset, float jumpOffsetY, UnityEngine::Vector3 rightVec, UnityEngine::Vector3 forwardVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLinesCount), ::il2cpp_utils::ExtractType(startNoteJumpMovementSpeed), ::il2cpp_utils::ExtractType(startBpm), ::il2cpp_utils::ExtractType(noteJumpStartBeatOffset), ::il2cpp_utils::ExtractType(jumpOffsetY), ::il2cpp_utils::ExtractType(rightVec), ::il2cpp_utils::ExtractType(forwardVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteLinesCount, startNoteJumpMovementSpeed, startBpm, noteJumpStartBeatOffset, jumpOffsetY, rightVec, forwardVec);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.Update
void GlobalNamespace::BeatmapObjectSpawnMovementData::Update(float bpm, float jumpOffsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bpm), ::il2cpp_utils::ExtractType(jumpOffsetY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bpm, jumpOffsetY);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.GetObstacleSpawnData
GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleSpawnData(GlobalNamespace::ObstacleData* obstacleData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleSpawnData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObstacleSpawnData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, false>(this, ___internal__method, obstacleData);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.GetJumpingNoteSpawnData
GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData GlobalNamespace::BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetJumpingNoteSpawnData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.GetNoteOffset
UnityEngine::Vector3 GlobalNamespace::BeatmapObjectSpawnMovementData::GetNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::GetNoteOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::BeatmapObjectSpawnMovementData::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::Get2DNoteOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.HighestJumpPosYForLineLayer
float GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighestJumpPosYForLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.HighestJumpPosYForLineLayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighestJumpPosYForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.LineYPosForLineLayer
float GlobalNamespace::BeatmapObjectSpawnMovementData::LineYPosForLineLayer(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::LineYPosForLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LineYPosForLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.NoteJumpGravityForLineLayer
float GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer(GlobalNamespace::NoteLineLayer lineLayer, GlobalNamespace::NoteLineLayer startLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteJumpGravityForLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(startLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, startLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.NoteJumpGravityForLineLayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, GlobalNamespace::NoteLineLayer startLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteJumpGravityForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(startLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, startLineLayer);
}
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::get_spawnAheadTime
// Il2CppName: get_spawnAheadTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::get_spawnAheadTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "get_spawnAheadTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::get_moveDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::get_jumpDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::get_noteLinesDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::get_verticalLayersDistance
// Il2CppName: get_verticalLayersDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::get_verticalLayersDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "get_verticalLayersDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::get_jumpDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::*)(int, float, float, float, float, UnityEngine::Vector3, UnityEngine::Vector3)>(&BeatmapObjectSpawnMovementData::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::*)(float, float)>(&BeatmapObjectSpawnMovementData::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::GetObstacleSpawnData
// Il2CppName: GetObstacleSpawnData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::ObstacleData*)>(&BeatmapObjectSpawnMovementData::GetObstacleSpawnData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "GetObstacleSpawnData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData
// Il2CppName: GetJumpingNoteSpawnData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::NoteData*)>(&BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "GetJumpingNoteSpawnData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::GetNoteOffset
// Il2CppName: GetNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (BeatmapObjectSpawnMovementData::*)(int, GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnMovementData::GetNoteOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "GetNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (BeatmapObjectSpawnMovementData::*)(int, GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnMovementData::Get2DNoteOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::NoteLineLayer, float)>(&BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer
// Il2CppName: HighestJumpPosYForLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "HighestJumpPosYForLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset
// Il2CppName: HighestJumpPosYForLineLayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "HighestJumpPosYForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::LineYPosForLineLayer
// Il2CppName: LineYPosForLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnMovementData::LineYPosForLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "LineYPosForLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer
// Il2CppName: NoteJumpGravityForLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::NoteLineLayer, GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "NoteJumpGravityForLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset
// Il2CppName: NoteJumpGravityForLineLayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapObjectSpawnMovementData::*)(GlobalNamespace::NoteLineLayer, GlobalNamespace::NoteLineLayer)>(&BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), "NoteJumpGravityForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::*)()>(&BeatmapObjectSpawnMovementData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::ObstacleSpawnData::ObstacleSpawnData
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::ObstacleSpawnData::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float, float, float, float)>(&BeatmapObjectSpawnMovementData::ObstacleSpawnData::ObstacleSpawnData<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData::ObstacleSpawnData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::ObstacleSpawnData::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float, float, float, float)>(&BeatmapObjectSpawnMovementData::ObstacleSpawnData::ObstacleSpawnData<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData::ObstacleSpawnData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatmapObjectSpawnMovementData::NoteSpawnData::NoteSpawnData
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::NoteSpawnData::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float, float, float)>(&BeatmapObjectSpawnMovementData::NoteSpawnData::NoteSpawnData<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData::NoteSpawnData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectSpawnMovementData::NoteSpawnData::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float, float, float)>(&BeatmapObjectSpawnMovementData::NoteSpawnData::NoteSpawnData<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectSpawnMovementData::NoteSpawnData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectCallback.Invoke
void GlobalNamespace::BeatmapObjectCallback::Invoke(GlobalNamespace::BeatmapObjectData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapObjectCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapObjectCallback::BeginInvoke(GlobalNamespace::BeatmapObjectData* noteData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, callback, object);
}
// Autogenerated method: BeatmapObjectCallback.EndInvoke
void GlobalNamespace::BeatmapObjectCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapObjectCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapObjectCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapObjectCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallback::*)(GlobalNamespace::BeatmapObjectData*)>(&BeatmapObjectCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapObjectCallback::*)(GlobalNamespace::BeatmapObjectData*, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapObjectCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapObjectCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallback::*)(System::IAsyncResult*)>(&BeatmapObjectCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapEventCallback.Invoke
void GlobalNamespace::BeatmapEventCallback::Invoke(GlobalNamespace::BeatmapEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: BeatmapEventCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapEventCallback::BeginInvoke(GlobalNamespace::BeatmapEventData* eventData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eventData, callback, object);
}
// Autogenerated method: BeatmapEventCallback.EndInvoke
void GlobalNamespace::BeatmapEventCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: BeatmapEventCallback::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapEventCallback::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventCallback::*)(::Il2CppObject*, System::IntPtr)>(&BeatmapEventCallback::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventCallback*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventCallback::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventCallback::*)(GlobalNamespace::BeatmapEventData*)>(&BeatmapEventCallback::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventCallback*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventCallback::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (BeatmapEventCallback::*)(GlobalNamespace::BeatmapEventData*, System::AsyncCallback*, ::Il2CppObject*)>(&BeatmapEventCallback::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventCallback*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: BeatmapEventCallback::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventCallback::*)(System::IAsyncResult*)>(&BeatmapEventCallback::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventCallback*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatmapObjectCallbackData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackData::*)(GlobalNamespace::BeatmapObjectCallback*, float, int)>(&BeatmapObjectCallbackData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapObjectCallbackData::*)(GlobalNamespace::BeatmapObjectCallback*, float, int)>(&BeatmapObjectCallbackData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapObjectCallbackData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BeatmapEventCallbackData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventCallbackData::*)(GlobalNamespace::BeatmapEventCallback*, float)>(&BeatmapEventCallbackData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventCallbackData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapEventCallbackData::*)(GlobalNamespace::BeatmapEventCallback*, float)>(&BeatmapEventCallbackData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapEventCallbackData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapObjectCallbackController.add_beatmapEventDidTriggerEvent
void GlobalNamespace::IBeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.remove_beatmapEventDidTriggerEvent
void GlobalNamespace::IBeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.add_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::IBeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.remove_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::IBeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.AddBeatmapObjectCallback
GlobalNamespace::BeatmapObjectCallbackData* GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: IBeatmapObjectCallbackController.RemoveBeatmapObjectCallback
void GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: IBeatmapObjectCallbackController.AddBeatmapEventCallback
GlobalNamespace::BeatmapEventCallbackData* GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapEventCallback(GlobalNamespace::BeatmapEventCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapEventCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: IBeatmapObjectCallbackController.RemoveBeatmapEventCallback
void GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapEventCallback(GlobalNamespace::BeatmapEventCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: IBeatmapObjectCallbackController.SendBeatmapEventDidTriggerEvent
void GlobalNamespace::IBeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBeatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: IBeatmapObjectCallbackController.SetNewBeatmapData
void GlobalNamespace::IBeatmapObjectCallbackController::SetNewBeatmapData(GlobalNamespace::IReadonlyBeatmapData* beatmapData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::SetNewBeatmapData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNewBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapData);
}
// Autogenerated method: IBeatmapObjectCallbackController.Pause
void GlobalNamespace::IBeatmapObjectCallbackController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectCallbackController.Resume
void GlobalNamespace::IBeatmapObjectCallbackController::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectCallbackController.get_isPaused
bool GlobalNamespace::IBeatmapObjectCallbackController::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::get_isPaused");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent
// Il2CppName: add_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&IBeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapEventData*>*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent
// Il2CppName: remove_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&IBeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapEventData*>*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent
// Il2CppName: add_callbacksForThisFrameWereProcessedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(System::Action*)>(&IBeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "add_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent
// Il2CppName: remove_callbacksForThisFrameWereProcessedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(System::Action*)>(&IBeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "remove_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::AddBeatmapObjectCallback
// Il2CppName: AddBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectCallbackData* (IBeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapObjectCallback*, float)>(&IBeatmapObjectCallbackController::AddBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "AddBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::RemoveBeatmapObjectCallback
// Il2CppName: RemoveBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapObjectCallbackData*)>(&IBeatmapObjectCallbackController::RemoveBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectCallbackData*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::AddBeatmapEventCallback
// Il2CppName: AddBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapEventCallbackData* (IBeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventCallback*, float)>(&IBeatmapObjectCallbackController::AddBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "AddBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallback*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::RemoveBeatmapEventCallback
// Il2CppName: RemoveBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventCallbackData*)>(&IBeatmapObjectCallbackController::RemoveBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventCallbackData*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent
// Il2CppName: SendBeatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventData*)>(&IBeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "SendBeatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::SetNewBeatmapData
// Il2CppName: SetNewBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)(GlobalNamespace::IReadonlyBeatmapData*)>(&IBeatmapObjectCallbackController::SetNewBeatmapData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "SetNewBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IReadonlyBeatmapData*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)()>(&IBeatmapObjectCallbackController::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectCallbackController::*)()>(&IBeatmapObjectCallbackController::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectCallbackController::get_isPaused
// Il2CppName: get_isPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IBeatmapObjectCallbackController::*)()>(&IBeatmapObjectCallbackController::get_isPaused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectCallbackController*), "get_isPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapObjectSpawnController.get_jumpOffsetY
float GlobalNamespace::IBeatmapObjectSpawnController::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.set_jumpOffsetY
void GlobalNamespace::IBeatmapObjectSpawnController::set_jumpOffsetY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::set_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_currentBpm
float GlobalNamespace::IBeatmapObjectSpawnController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_moveDuration
float GlobalNamespace::IBeatmapObjectSpawnController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_moveDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_jumpDuration
float GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_jumpDistance
float GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_verticalLayerDistance
float GlobalNamespace::IBeatmapObjectSpawnController::get_verticalLayerDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_verticalLayerDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayerDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_noteJumpMovementSpeed
float GlobalNamespace::IBeatmapObjectSpawnController::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_noteLinesDistance
float GlobalNamespace::IBeatmapObjectSpawnController::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_noteLinesDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_beatmapObjectSpawnMovementData
GlobalNamespace::BeatmapObjectSpawnMovementData* GlobalNamespace::IBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData*, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_isInitialized
bool GlobalNamespace::IBeatmapObjectSpawnController::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.add_didInitEvent
void GlobalNamespace::IBeatmapObjectSpawnController::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectSpawnController.remove_didInitEvent
void GlobalNamespace::IBeatmapObjectSpawnController::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectSpawnController.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::IBeatmapObjectSpawnController::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::Get2DNoteOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: IBeatmapObjectSpawnController.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::IBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_jumpOffsetY
// Il2CppName: get_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_jumpOffsetY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::set_jumpOffsetY
// Il2CppName: set_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectSpawnController::*)(float)>(&IBeatmapObjectSpawnController::set_jumpOffsetY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "set_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_currentBpm
// Il2CppName: get_currentBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_currentBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_currentBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_moveDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_jumpDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_jumpDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_verticalLayerDistance
// Il2CppName: get_verticalLayerDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_verticalLayerDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_verticalLayerDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_noteLinesDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData
// Il2CppName: get_beatmapObjectSpawnMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectSpawnMovementData* (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IBeatmapObjectSpawnController::*)()>(&IBeatmapObjectSpawnController::get_isInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectSpawnController::*)(System::Action*)>(&IBeatmapObjectSpawnController::add_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBeatmapObjectSpawnController::*)(System::Action*)>(&IBeatmapObjectSpawnController::remove_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (IBeatmapObjectSpawnController::*)(int, GlobalNamespace::NoteLineLayer)>(&IBeatmapObjectSpawnController::Get2DNoteOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IBeatmapObjectSpawnController::*)(GlobalNamespace::NoteLineLayer, float)>(&IBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawnController*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapObjectSpawner.SpawnObstacle
GlobalNamespace::ObstacleController* GlobalNamespace::IBeatmapObjectSpawner::SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawner::SpawnObstacle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: IBeatmapObjectSpawner.SpawnBombNote
GlobalNamespace::NoteController* GlobalNamespace::IBeatmapObjectSpawner::SpawnBombNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawner::SpawnBombNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: IBeatmapObjectSpawner.SpawnBasicNote
GlobalNamespace::NoteController* GlobalNamespace::IBeatmapObjectSpawner::SpawnBasicNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawner::SpawnBasicNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Writing MetadataGetter for method: IBeatmapObjectSpawner::SpawnObstacle
// Il2CppName: SpawnObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleController* (IBeatmapObjectSpawner::*)(GlobalNamespace::ObstacleData*, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float)>(&IBeatmapObjectSpawner::SpawnObstacle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawner*), "SpawnObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawner::SpawnBombNote
// Il2CppName: SpawnBombNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (IBeatmapObjectSpawner::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float)>(&IBeatmapObjectSpawner::SpawnBombNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawner*), "SpawnBombNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IBeatmapObjectSpawner::SpawnBasicNote
// Il2CppName: SpawnBasicNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (IBeatmapObjectSpawner::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float, float)>(&IBeatmapObjectSpawner::SpawnBasicNote)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBeatmapObjectSpawner*), "SpawnBasicNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredBeatmapObjectManager
#include "GlobalNamespace/MirroredBeatmapObjectManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: MirroredBombNoteController/Pool
#include "GlobalNamespace/MirroredBombNoteController_Pool.hpp"
// Including type: MirroredCubeNoteController/Pool
#include "GlobalNamespace/MirroredCubeNoteController_Pool.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: ICubeNoteMirrorable
#include "GlobalNamespace/ICubeNoteMirrorable.hpp"
// Including type: INoteMirrorable
#include "GlobalNamespace/INoteMirrorable.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: MirroredObstacleController/Pool
#include "GlobalNamespace/MirroredObstacleController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MirroredBeatmapObjectManager.HandleNoteWasSpawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasSpawned(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleNoteWasDespawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasDespawned(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleObstacleWasSpawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasSpawned(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleObstacleWasDespawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasDespawned(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleWasDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleDidHideAllBeatmapObjects
void GlobalNamespace::MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidHideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: MirroredBeatmapObjectManager.Finalize
void GlobalNamespace::MirroredBeatmapObjectManager::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MirroredBeatmapObjectManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)(GlobalNamespace::BeatmapObjectManager*, GlobalNamespace::MirroredCubeNoteController::Pool*, GlobalNamespace::MirroredBombNoteController::Pool*, GlobalNamespace::MirroredObstacleController::Pool*)>(&MirroredBeatmapObjectManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MirroredCubeNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MirroredBombNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MirroredObstacleController::Pool*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)(GlobalNamespace::BeatmapObjectManager*, GlobalNamespace::MirroredCubeNoteController::Pool*, GlobalNamespace::MirroredBombNoteController::Pool*, GlobalNamespace::MirroredObstacleController::Pool*)>(&MirroredBeatmapObjectManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectManager*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MirroredCubeNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MirroredBombNoteController::Pool*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MirroredObstacleController::Pool*>()});
  }
};
// Writing MetadataGetter for method: MirroredBeatmapObjectManager::HandleNoteWasSpawned
// Il2CppName: HandleNoteWasSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&MirroredBeatmapObjectManager::HandleNoteWasSpawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), "HandleNoteWasSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: MirroredBeatmapObjectManager::HandleNoteWasDespawned
// Il2CppName: HandleNoteWasDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&MirroredBeatmapObjectManager::HandleNoteWasDespawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), "HandleNoteWasDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: MirroredBeatmapObjectManager::HandleObstacleWasSpawned
// Il2CppName: HandleObstacleWasSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&MirroredBeatmapObjectManager::HandleObstacleWasSpawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), "HandleObstacleWasSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: MirroredBeatmapObjectManager::HandleObstacleWasDespawned
// Il2CppName: HandleObstacleWasDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&MirroredBeatmapObjectManager::HandleObstacleWasDespawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), "HandleObstacleWasDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleController*>()});
  }
};
// Writing MetadataGetter for method: MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects
// Il2CppName: HandleDidHideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)(bool)>(&MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), "HandleDidHideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MirroredBeatmapObjectManager::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MirroredBeatmapObjectManager::*)()>(&MirroredBeatmapObjectManager::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MirroredBeatmapObjectManager*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapObjectSpawnController
#include "GlobalNamespace/MockBeatmapObjectSpawnController.hpp"
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockBeatmapObjectSpawnController.get_jumpOffsetY
float GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.set_jumpOffsetY
void GlobalNamespace::MockBeatmapObjectSpawnController::set_jumpOffsetY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::set_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_currentBpm
float GlobalNamespace::MockBeatmapObjectSpawnController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_moveDuration
float GlobalNamespace::MockBeatmapObjectSpawnController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_moveDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_jumpDuration
float GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_jumpDistance
float GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_verticalLayerDistance
float GlobalNamespace::MockBeatmapObjectSpawnController::get_verticalLayerDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_verticalLayerDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayerDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_noteJumpMovementSpeed
float GlobalNamespace::MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_noteLinesDistance
float GlobalNamespace::MockBeatmapObjectSpawnController::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_noteLinesDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_beatmapObjectSpawnMovementData
GlobalNamespace::BeatmapObjectSpawnMovementData* GlobalNamespace::MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData*, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_isInitialized
bool GlobalNamespace::MockBeatmapObjectSpawnController::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.add_didInitEvent
void GlobalNamespace::MockBeatmapObjectSpawnController::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockBeatmapObjectSpawnController.remove_didInitEvent
void GlobalNamespace::MockBeatmapObjectSpawnController::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockBeatmapObjectSpawnController.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::MockBeatmapObjectSpawnController::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::Get2DNoteOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: MockBeatmapObjectSpawnController.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_jumpOffsetY
// Il2CppName: get_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_jumpOffsetY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::set_jumpOffsetY
// Il2CppName: set_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockBeatmapObjectSpawnController::*)(float)>(&MockBeatmapObjectSpawnController::set_jumpOffsetY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "set_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_currentBpm
// Il2CppName: get_currentBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_currentBpm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_currentBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_moveDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_jumpDuration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_jumpDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_verticalLayerDistance
// Il2CppName: get_verticalLayerDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_verticalLayerDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_verticalLayerDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_noteLinesDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData
// Il2CppName: get_beatmapObjectSpawnMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectSpawnMovementData* (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::get_isInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockBeatmapObjectSpawnController::*)(System::Action*)>(&MockBeatmapObjectSpawnController::add_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockBeatmapObjectSpawnController::*)(System::Action*)>(&MockBeatmapObjectSpawnController::remove_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (MockBeatmapObjectSpawnController::*)(int, GlobalNamespace::NoteLineLayer)>(&MockBeatmapObjectSpawnController::Get2DNoteOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>()});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MockBeatmapObjectSpawnController::*)(GlobalNamespace::NoteLineLayer, float)>(&MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteLineLayer>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MockBeatmapObjectSpawnController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockBeatmapObjectSpawnController::*)()>(&MockBeatmapObjectSpawnController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockBeatmapObjectSpawnController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseNoteVisuals
#include "GlobalNamespace/BaseNoteVisuals.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseNoteVisuals.Awake
void GlobalNamespace::BaseNoteVisuals::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNoteVisuals.OnDestroy
void GlobalNamespace::BaseNoteVisuals::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNoteVisuals.HandleNoteControllerDidInit
void GlobalNamespace::BaseNoteVisuals::HandleNoteControllerDidInit(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BaseNoteVisuals.HandleNoteControllerNoteDidStartDissolving
void GlobalNamespace::BaseNoteVisuals::HandleNoteControllerNoteDidStartDissolving(GlobalNamespace::NoteControllerBase* noteController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::HandleNoteControllerNoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, duration);
}
// Autogenerated method: BaseNoteVisuals.AnimateCutout
void GlobalNamespace::BaseNoteVisuals::AnimateCutout(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::AnimateCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Writing MetadataGetter for method: BaseNoteVisuals::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNoteVisuals::*)()>(&BaseNoteVisuals::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNoteVisuals*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNoteVisuals::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNoteVisuals::*)()>(&BaseNoteVisuals::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNoteVisuals*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BaseNoteVisuals::HandleNoteControllerDidInit
// Il2CppName: HandleNoteControllerDidInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNoteVisuals::*)(GlobalNamespace::NoteControllerBase*)>(&BaseNoteVisuals::HandleNoteControllerDidInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNoteVisuals*), "HandleNoteControllerDidInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteControllerBase*>()});
  }
};
// Writing MetadataGetter for method: BaseNoteVisuals::HandleNoteControllerNoteDidStartDissolving
// Il2CppName: HandleNoteControllerNoteDidStartDissolving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNoteVisuals::*)(GlobalNamespace::NoteControllerBase*, float)>(&BaseNoteVisuals::HandleNoteControllerNoteDidStartDissolving)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNoteVisuals*), "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteControllerBase*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BaseNoteVisuals::AnimateCutout
// Il2CppName: AnimateCutout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNoteVisuals::*)(float, float, float)>(&BaseNoteVisuals::AnimateCutout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNoteVisuals*), "AnimateCutout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BaseNoteVisuals::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNoteVisuals::*)()>(&BaseNoteVisuals::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNoteVisuals*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BaseNoteVisuals::*)()>(&BaseNoteVisuals::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BaseNoteVisuals*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombNoteController
#include "GlobalNamespace/BombNoteController.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BombNoteController.Init
void GlobalNamespace::BombNoteController::Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity);
}
// Autogenerated method: BombNoteController.HandleDidPassHalfJump
void GlobalNamespace::BombNoteController::HandleDidPassHalfJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::HandleDidPassHalfJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidPassHalfJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.HandleWasCutBySaber
void GlobalNamespace::BombNoteController::HandleWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::HandleWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: BombNoteController.set_hide
void GlobalNamespace::BombNoteController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::set_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BombNoteController.get_hide
bool GlobalNamespace::BombNoteController::get_hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::get_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.set_pause
void GlobalNamespace::BombNoteController::set_pause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::set_pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BombNoteController.Awake
void GlobalNamespace::BombNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.OnDestroy
void GlobalNamespace::BombNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.NoteDidPassMissedMarker
void GlobalNamespace::BombNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.NoteDidStartDissolving
void GlobalNamespace::BombNoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BombNoteController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)(GlobalNamespace::NoteData*, float, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float, float, float)>(&BombNoteController::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BombNoteController::HandleDidPassHalfJump
// Il2CppName: HandleDidPassHalfJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)()>(&BombNoteController::HandleDidPassHalfJump)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "HandleDidPassHalfJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombNoteController::HandleWasCutBySaber
// Il2CppName: HandleWasCutBySaber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)(GlobalNamespace::Saber*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&BombNoteController::HandleWasCutBySaber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "HandleWasCutBySaber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: BombNoteController::set_hide
// Il2CppName: set_hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)(bool)>(&BombNoteController::set_hide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "set_hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BombNoteController::get_hide
// Il2CppName: get_hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BombNoteController::*)()>(&BombNoteController::get_hide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "get_hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombNoteController::set_pause
// Il2CppName: set_pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)(bool)>(&BombNoteController::set_pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "set_pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BombNoteController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)()>(&BombNoteController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombNoteController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)()>(&BombNoteController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombNoteController::NoteDidPassMissedMarker
// Il2CppName: NoteDidPassMissedMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)()>(&BombNoteController::NoteDidPassMissedMarker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "NoteDidPassMissedMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombNoteController::NoteDidStartDissolving
// Il2CppName: NoteDidStartDissolving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)()>(&BombNoteController::NoteDidStartDissolving)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), "NoteDidStartDissolving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombNoteController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)()>(&BombNoteController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::*)()>(&BombNoteController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BombNoteController::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::Pool::*)()>(&BombNoteController::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombNoteController::Pool::*)()>(&BombNoteController::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombNoteController::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorNoteVisuals
#include "GlobalNamespace/ColorNoteVisuals.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1925C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorId
int GlobalNamespace::ColorNoteVisuals::_get__colorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::_get__colorId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ColorNoteVisuals", "_colorId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorId
void GlobalNamespace::ColorNoteVisuals::_set__colorId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::_set__colorId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorNoteVisuals", "_colorId", value));
}
// Autogenerated method: ColorNoteVisuals.add_didInitEvent
void GlobalNamespace::ColorNoteVisuals::add_didInitEvent(System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.remove_didInitEvent
void GlobalNamespace::ColorNoteVisuals::remove_didInitEvent(System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.set_showArrow
void GlobalNamespace::ColorNoteVisuals::set_showArrow(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::set_showArrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showArrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.set_showCircle
void GlobalNamespace::ColorNoteVisuals::set_showCircle(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::set_showCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.Awake
void GlobalNamespace::ColorNoteVisuals::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorNoteVisuals.OnDestroy
void GlobalNamespace::ColorNoteVisuals::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerDidInit
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerDidInit(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerNoteDidPassJumpThreeQuarters
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerNoteDidStartDissolving
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving(GlobalNamespace::NoteControllerBase* noteController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, duration);
}
// Autogenerated method: ColorNoteVisuals..cctor
void GlobalNamespace::ColorNoteVisuals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorNoteVisuals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ColorNoteVisuals::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)(System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>*)>(&ColorNoteVisuals::add_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>*>()});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)(System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>*)>(&ColorNoteVisuals::remove_didInitEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>*>()});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::set_showArrow
// Il2CppName: set_showArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)(bool)>(&ColorNoteVisuals::set_showArrow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "set_showArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::set_showCircle
// Il2CppName: set_showCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)(bool)>(&ColorNoteVisuals::set_showCircle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "set_showCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)()>(&ColorNoteVisuals::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)()>(&ColorNoteVisuals::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::HandleNoteControllerDidInit
// Il2CppName: HandleNoteControllerDidInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)(GlobalNamespace::NoteControllerBase*)>(&ColorNoteVisuals::HandleNoteControllerDidInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "HandleNoteControllerDidInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteControllerBase*>()});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters
// Il2CppName: HandleNoteControllerNoteDidPassJumpThreeQuarters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)(GlobalNamespace::NoteControllerBase*)>(&ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "HandleNoteControllerNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteControllerBase*>()});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving
// Il2CppName: HandleNoteControllerNoteDidStartDissolving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)(GlobalNamespace::NoteControllerBase*, float)>(&ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteControllerBase*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)()>(&ColorNoteVisuals::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorNoteVisuals::*)()>(&ColorNoteVisuals::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorNoteVisuals::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ColorNoteVisuals::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorNoteVisuals*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisappearingArrowController
#include "GlobalNamespace/DisappearingArrowController.hpp"
// Including type: GameNoteController
#include "GlobalNamespace/GameNoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisappearingArrowController.get_gameNoteController
GlobalNamespace::GameNoteController* GlobalNamespace::DisappearingArrowController::get_gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisappearingArrowController::get_gameNoteController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameNoteController*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DisappearingArrowController::get_gameNoteController
// Il2CppName: get_gameNoteController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameNoteController* (DisappearingArrowController::*)()>(&DisappearingArrowController::get_gameNoteController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisappearingArrowController*), "get_gameNoteController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisappearingArrowController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisappearingArrowController::*)()>(&DisappearingArrowController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisappearingArrowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisappearingArrowController::*)()>(&DisappearingArrowController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisappearingArrowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
