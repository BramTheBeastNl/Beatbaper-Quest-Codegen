// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSaveData/PlayerOverallStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerOverallStatsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/PlayerLevelStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerLevelStatsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/PlayerMissionStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerMissionStatsData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSaveData/PracticeSettings
#include "GlobalNamespace/PlayerSaveData_PracticeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/ColorScheme
#include "GlobalNamespace/PlayerSaveData_ColorScheme.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/ColorSchemesSettings
#include "GlobalNamespace/PlayerSaveData_ColorSchemesSettings.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: PlayerSaveData/ColorScheme
#include "GlobalNamespace/PlayerSaveData_ColorScheme.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/OverrideEnvironmentSettings
#include "GlobalNamespace/PlayerSaveData_OverrideEnvironmentSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/GuestPlayer
#include "GlobalNamespace/PlayerSaveData_GuestPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/MultiplayerModeSettings
#include "GlobalNamespace/PlayerSaveData_MultiplayerModeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerSaveData/LocalPlayer
#include "GlobalNamespace/PlayerSaveData_LocalPlayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: PlayerSaveData/GameplayModifiers
#include "GlobalNamespace/PlayerSaveData_GameplayModifiers.hpp"
// Including type: PlayerSaveData/PlayerSpecificSettings
#include "GlobalNamespace/PlayerSaveData_PlayerSpecificSettings.hpp"
// Including type: PlayerSaveData/PracticeSettings
#include "GlobalNamespace/PlayerSaveData_PracticeSettings.hpp"
// Including type: PlayerSaveData/PlayerAllOverallStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerAllOverallStatsData.hpp"
// Including type: PlayerSaveData/PlayerLevelStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerLevelStatsData.hpp"
// Including type: PlayerSaveData/PlayerMissionStatsData
#include "GlobalNamespace/PlayerSaveData_PlayerMissionStatsData.hpp"
// Including type: PlayerSaveData/ColorSchemesSettings
#include "GlobalNamespace/PlayerSaveData_ColorSchemesSettings.hpp"
// Including type: PlayerSaveData/OverrideEnvironmentSettings
#include "GlobalNamespace/PlayerSaveData_OverrideEnvironmentSettings.hpp"
// Including type: PlayerSaveData/MultiplayerModeSettings
#include "GlobalNamespace/PlayerSaveData_MultiplayerModeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayerSpecificSettings.get_leftHanded
bool GlobalNamespace::PlayerSpecificSettings::get_leftHanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_leftHanded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHanded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_playerHeight
float GlobalNamespace::PlayerSpecificSettings::get_playerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_playerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_automaticPlayerHeight
bool GlobalNamespace::PlayerSpecificSettings::get_automaticPlayerHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_automaticPlayerHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_automaticPlayerHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_sfxVolume
float GlobalNamespace::PlayerSpecificSettings::get_sfxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_sfxVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sfxVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_reduceDebris
bool GlobalNamespace::PlayerSpecificSettings::get_reduceDebris() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_reduceDebris");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reduceDebris", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_noTextsAndHuds
bool GlobalNamespace::PlayerSpecificSettings::get_noTextsAndHuds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_noTextsAndHuds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noTextsAndHuds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_noFailEffects
bool GlobalNamespace::PlayerSpecificSettings::get_noFailEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_noFailEffects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFailEffects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_advancedHud
bool GlobalNamespace::PlayerSpecificSettings::get_advancedHud() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_advancedHud");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_advancedHud", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_autoRestart
bool GlobalNamespace::PlayerSpecificSettings::get_autoRestart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_autoRestart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoRestart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_saberTrailIntensity
float GlobalNamespace::PlayerSpecificSettings::get_saberTrailIntensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_saberTrailIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_saberTrailIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_noteJumpStartBeatOffset
float GlobalNamespace::PlayerSpecificSettings::get_noteJumpStartBeatOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_noteJumpStartBeatOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpStartBeatOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_hideNoteSpawnEffect
bool GlobalNamespace::PlayerSpecificSettings::get_hideNoteSpawnEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_hideNoteSpawnEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hideNoteSpawnEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_adaptiveSfx
bool GlobalNamespace::PlayerSpecificSettings::get_adaptiveSfx() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_adaptiveSfx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_adaptiveSfx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_environmentEffectsFilterDefaultPreset
GlobalNamespace::EnvironmentEffectsFilterPreset GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterDefaultPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterDefaultPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentEffectsFilterDefaultPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentEffectsFilterPreset, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.get_environmentEffectsFilterExpertPlusPreset
GlobalNamespace::EnvironmentEffectsFilterPreset GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterExpertPlusPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::get_environmentEffectsFilterExpertPlusPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentEffectsFilterExpertPlusPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::EnvironmentEffectsFilterPreset, false>(this, ___internal__method);
}
// Autogenerated method: PlayerSpecificSettings.CopyWith
GlobalNamespace::PlayerSpecificSettings* GlobalNamespace::PlayerSpecificSettings::CopyWith(System::Nullable_1<bool> leftHanded, System::Nullable_1<float> playerHeight, System::Nullable_1<bool> automaticPlayerHeight, System::Nullable_1<float> sfxVolume, System::Nullable_1<bool> reduceDebris, System::Nullable_1<bool> noTextsAndHuds, System::Nullable_1<bool> noFailEffects, System::Nullable_1<bool> advancedHud, System::Nullable_1<bool> autoRestart, System::Nullable_1<float> saberTrailIntensity, System::Nullable_1<float> noteJumpStartBeatOffset, System::Nullable_1<bool> hideNoteSpawnEffect, System::Nullable_1<bool> adaptiveSfx, System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset> environmentEffectsFilterDefaultPreset, System::Nullable_1<GlobalNamespace::EnvironmentEffectsFilterPreset> environmentEffectsFilterExpertPlusPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::CopyWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHanded), ::il2cpp_utils::ExtractType(playerHeight), ::il2cpp_utils::ExtractType(automaticPlayerHeight), ::il2cpp_utils::ExtractType(sfxVolume), ::il2cpp_utils::ExtractType(reduceDebris), ::il2cpp_utils::ExtractType(noTextsAndHuds), ::il2cpp_utils::ExtractType(noFailEffects), ::il2cpp_utils::ExtractType(advancedHud), ::il2cpp_utils::ExtractType(autoRestart), ::il2cpp_utils::ExtractType(saberTrailIntensity), ::il2cpp_utils::ExtractType(noteJumpStartBeatOffset), ::il2cpp_utils::ExtractType(hideNoteSpawnEffect), ::il2cpp_utils::ExtractType(adaptiveSfx), ::il2cpp_utils::ExtractType(environmentEffectsFilterDefaultPreset), ::il2cpp_utils::ExtractType(environmentEffectsFilterExpertPlusPreset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerSpecificSettings*, false>(this, ___internal__method, leftHanded, playerHeight, automaticPlayerHeight, sfxVolume, reduceDebris, noTextsAndHuds, noFailEffects, advancedHud, autoRestart, saberTrailIntensity, noteJumpStartBeatOffset, hideNoteSpawnEffect, adaptiveSfx, environmentEffectsFilterDefaultPreset, environmentEffectsFilterExpertPlusPreset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarData.get_headTopId
::Il2CppString* GlobalNamespace::AvatarData::get_headTopId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_headTopId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_headTopId
void GlobalNamespace::AvatarData::set_headTopId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_headTopId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_headTopId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_glassesId
::Il2CppString* GlobalNamespace::AvatarData::get_glassesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_glassesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glassesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_glassesId
void GlobalNamespace::AvatarData::set_glassesId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_glassesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glassesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_facialHairId
::Il2CppString* GlobalNamespace::AvatarData::get_facialHairId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_facialHairId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_facialHairId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_facialHairId
void GlobalNamespace::AvatarData::set_facialHairId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_facialHairId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_facialHairId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_handsId
::Il2CppString* GlobalNamespace::AvatarData::get_handsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_handsId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handsId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_handsId
void GlobalNamespace::AvatarData::set_handsId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_handsId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handsId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesId
::Il2CppString* GlobalNamespace::AvatarData::get_clothesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesId
void GlobalNamespace::AvatarData::set_clothesId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_eyesId
::Il2CppString* GlobalNamespace::AvatarData::get_eyesId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_eyesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_eyesId
void GlobalNamespace::AvatarData::set_eyesId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_eyesId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_eyesId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_mouthId
::Il2CppString* GlobalNamespace::AvatarData::get_mouthId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_mouthId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mouthId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_mouthId
void GlobalNamespace::AvatarData::set_mouthId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_mouthId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mouthId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_headTopPrimaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_headTopPrimaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_headTopPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_headTopPrimaryColor
void GlobalNamespace::AvatarData::set_headTopPrimaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_headTopPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_headTopPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_headTopSecondaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_headTopSecondaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_headTopSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_headTopSecondaryColor
void GlobalNamespace::AvatarData::set_headTopSecondaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_headTopSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_headTopSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_glassesColor
UnityEngine::Color GlobalNamespace::AvatarData::get_glassesColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_glassesColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glassesColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_glassesColor
void GlobalNamespace::AvatarData::set_glassesColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_glassesColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glassesColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_facialHairColor
UnityEngine::Color GlobalNamespace::AvatarData::get_facialHairColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_facialHairColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_facialHairColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_facialHairColor
void GlobalNamespace::AvatarData::set_facialHairColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_facialHairColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_facialHairColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_handsColor
UnityEngine::Color GlobalNamespace::AvatarData::get_handsColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_handsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_handsColor
void GlobalNamespace::AvatarData::set_handsColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_handsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesPrimaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_clothesPrimaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesPrimaryColor
void GlobalNamespace::AvatarData::set_clothesPrimaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesPrimaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesPrimaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesSecondaryColor
UnityEngine::Color GlobalNamespace::AvatarData::get_clothesSecondaryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesSecondaryColor
void GlobalNamespace::AvatarData::set_clothesSecondaryColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesSecondaryColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesSecondaryColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_clothesDetailColor
UnityEngine::Color GlobalNamespace::AvatarData::get_clothesDetailColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_clothesDetailColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesDetailColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_clothesDetailColor
void GlobalNamespace::AvatarData::set_clothesDetailColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_clothesDetailColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clothesDetailColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.get_skinColorId
::Il2CppString* GlobalNamespace::AvatarData::get_skinColorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::get_skinColorId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skinColorId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarData.set_skinColorId
void GlobalNamespace::AvatarData::set_skinColorId(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::set_skinColorId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_skinColorId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarData.Clone
GlobalNamespace::AvatarData* GlobalNamespace::AvatarData::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarData::Clone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarDataFileManagerSO
#include "GlobalNamespace/AvatarDataFileManagerSO.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
// Including type: AvatarSaveData
#include "GlobalNamespace/AvatarSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kAvatarDataFileName
::Il2CppString* GlobalNamespace::AvatarDataFileManagerSO::_get_kAvatarDataFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_get_kAvatarDataFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AvatarDataFileManagerSO", "kAvatarDataFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kAvatarDataFileName
void GlobalNamespace::AvatarDataFileManagerSO::_set_kAvatarDataFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_set_kAvatarDataFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarDataFileManagerSO", "kAvatarDataFileName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kTempFileName
::Il2CppString* GlobalNamespace::AvatarDataFileManagerSO::_get_kTempFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_get_kTempFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AvatarDataFileManagerSO", "kTempFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTempFileName
void GlobalNamespace::AvatarDataFileManagerSO::_set_kTempFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_set_kTempFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarDataFileManagerSO", "kTempFileName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kBackupFileName
::Il2CppString* GlobalNamespace::AvatarDataFileManagerSO::_get_kBackupFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_get_kBackupFileName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AvatarDataFileManagerSO", "kBackupFileName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBackupFileName
void GlobalNamespace::AvatarDataFileManagerSO::_set_kBackupFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::_set_kBackupFileName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarDataFileManagerSO", "kBackupFileName", value));
}
// Autogenerated method: AvatarDataFileManagerSO.Save
void GlobalNamespace::AvatarDataFileManagerSO::Save(GlobalNamespace::AvatarData* avatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, avatarData);
}
// Autogenerated method: AvatarDataFileManagerSO.Load
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataFileManagerSO::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataFileManagerSO.LoadFromCurrentVersion
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataFileManagerSO::LoadFromCurrentVersion(GlobalNamespace::AvatarSaveData* avatarSaveData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataFileManagerSO::LoadFromCurrentVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadFromCurrentVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarSaveData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method, avatarSaveData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarDataModel
#include "GlobalNamespace/AvatarDataModel.hpp"
// Including type: AvatarDataFileManagerSO
#include "GlobalNamespace/AvatarDataFileManagerSO.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarDataModel.get_avatarData
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataModel::get_avatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::get_avatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_avatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.set_avatarData
void GlobalNamespace::AvatarDataModel::set_avatarData(GlobalNamespace::AvatarData* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::set_avatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_avatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarDataModel.OnEnable
void GlobalNamespace::AvatarDataModel::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.OnApplicationPause
void GlobalNamespace::AvatarDataModel::OnApplicationPause(bool pauseStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::OnApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pauseStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pauseStatus);
}
// Autogenerated method: AvatarDataModel.OnDisable
void GlobalNamespace::AvatarDataModel::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.Randomize
void GlobalNamespace::AvatarDataModel::Randomize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::Randomize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Randomize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.Save
void GlobalNamespace::AvatarDataModel::Save() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.Load
void GlobalNamespace::AvatarDataModel::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarDataModel.CreateDefaultAvatarData
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataModel::CreateDefaultAvatarData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::CreateDefaultAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDefaultAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarDataMultiplayerAvatarDataConverter
#include "GlobalNamespace/AvatarDataMultiplayerAvatarDataConverter.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarDataMultiplayerAvatarDataConverter.CreateMultiplayerAvatarData
GlobalNamespace::MultiplayerAvatarData GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateMultiplayerAvatarData(GlobalNamespace::AvatarData* avatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateMultiplayerAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarDataMultiplayerAvatarDataConverter", "CreateMultiplayerAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MultiplayerAvatarData, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, avatarData);
}
// Autogenerated method: AvatarDataMultiplayerAvatarDataConverter.CreateAvatarData
GlobalNamespace::AvatarData* GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateAvatarData(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataMultiplayerAvatarDataConverter::CreateAvatarData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarDataMultiplayerAvatarDataConverter", "CreateAvatarData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerAvatarData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, multiplayerAvatarData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarMeshPartSO
#include "GlobalNamespace/AvatarMeshPartSO.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarMeshPartSO.get_mesh
UnityEngine::Mesh* GlobalNamespace::AvatarMeshPartSO::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarMeshPartSO::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: AvatarPartCollection`1
#include "GlobalNamespace/AvatarPartCollection_1.hpp"
// Including type: AvatarMeshPartSO
#include "GlobalNamespace/AvatarMeshPartSO.hpp"
// Including type: AvatarSpritePartSO
#include "GlobalNamespace/AvatarSpritePartSO.hpp"
// Including type: SkinColorSO
#include "GlobalNamespace/SkinColorSO.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: AvatarPartsModelSO
#include "GlobalNamespace/AvatarPartsModelSO.hpp"
// Including type: SkinColorSetSO
#include "GlobalNamespace/SkinColorSetSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPartsModel.get_headTopCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_headTopCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_headTopCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTopCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_eyesCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModel::get_eyesCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_eyesCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_mouthCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModel::get_mouthCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_mouthCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mouthCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_glassesCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_glassesCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_glassesCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glassesCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_facialHairCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_facialHairCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_facialHairCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_facialHairCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_handsCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_handsCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_handsCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handsCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_clothesCollection
GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModel::get_clothesCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_clothesCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clothesCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPartCollection_1<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.get_skinColors
::Array<GlobalNamespace::SkinColorSO*>* GlobalNamespace::AvatarPartsModel::get_skinColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::get_skinColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_skinColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SkinColorSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModel.GetColorIndexById
int GlobalNamespace::AvatarPartsModel::GetColorIndexById(::Il2CppString* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::GetColorIndexById");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetColorIndexById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, id);
}
// Autogenerated method: AvatarPartsModel.GetSkinColorById
GlobalNamespace::SkinColorSO* GlobalNamespace::AvatarPartsModel::GetSkinColorById(::Il2CppString* id) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::GetSkinColorById");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkinColorById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SkinColorSO*, false>(this, ___internal__method, id);
}
// Autogenerated method: AvatarPartsModel.GetRandomColor
GlobalNamespace::SkinColorSO* GlobalNamespace::AvatarPartsModel::GetRandomColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModel::GetRandomColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRandomColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SkinColorSO*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarPartsModelSO
#include "GlobalNamespace/AvatarPartsModelSO.hpp"
// Including type: AvatarMeshPartSO
#include "GlobalNamespace/AvatarMeshPartSO.hpp"
// Including type: AvatarSpritePartSO
#include "GlobalNamespace/AvatarSpritePartSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPartsModelSO.get_headTops
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_headTops() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_headTops");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headTops", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Eyes
::Array<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Eyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Eyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Eyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Mouths
::Array<GlobalNamespace::AvatarSpritePartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Mouths() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Mouths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mouths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarSpritePartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Glasses
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Glasses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Glasses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Glasses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_FacialHair
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_FacialHair() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_FacialHair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FacialHair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Hands
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Hands() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Hands");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Hands", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPartsModelSO.get_Clothes
::Array<GlobalNamespace::AvatarMeshPartSO*>* GlobalNamespace::AvatarPartsModelSO::get_Clothes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::get_Clothes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Clothes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::AvatarMeshPartSO*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarSaveData
#include "GlobalNamespace/AvatarSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarSpritePartSO
#include "GlobalNamespace/AvatarSpritePartSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarSpritePartSO.get_sprite
UnityEngine::Sprite* GlobalNamespace::AvatarSpritePartSO::get_sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarSpritePartSO::get_sprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IAvatarPart
#include "GlobalNamespace/IAvatarPart.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAvatarPart.get_id
::Il2CppString* GlobalNamespace::IAvatarPart::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAvatarPart::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IAvatarPart.get_localizedName
::Il2CppString* GlobalNamespace::IAvatarPart::get_localizedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAvatarPart::get_localizedName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SkinColorSO
#include "GlobalNamespace/SkinColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SkinColorSO.get_id
::Il2CppString* GlobalNamespace::SkinColorSO::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SkinColorSO::get_id");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SkinColorSO.get_Color
UnityEngine::Color GlobalNamespace::SkinColorSO::get_Color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SkinColorSO::get_Color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SkinColorSetSO
#include "GlobalNamespace/SkinColorSetSO.hpp"
// Including type: SkinColorSO
#include "GlobalNamespace/SkinColorSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SkinColorSetSO.get_colors
::Array<GlobalNamespace::SkinColorSO*>* GlobalNamespace::SkinColorSetSO::get_colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SkinColorSetSO::get_colors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SkinColorSO*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PracticeSettings
#include "GlobalNamespace/PracticeSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDelayBeforeStart
float GlobalNamespace::PracticeSettings::_get_kDelayBeforeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::_get_kDelayBeforeStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PracticeSettings", "kDelayBeforeStart"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDelayBeforeStart
void GlobalNamespace::PracticeSettings::_set_kDelayBeforeStart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::_set_kDelayBeforeStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PracticeSettings", "kDelayBeforeStart", value));
}
// Autogenerated method: PracticeSettings.get_startSongTime
float GlobalNamespace::PracticeSettings::get_startSongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_startSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PracticeSettings.set_startSongTime
void GlobalNamespace::PracticeSettings::set_startSongTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::set_startSongTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startSongTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PracticeSettings.get_songSpeedMul
float GlobalNamespace::PracticeSettings::get_songSpeedMul() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_songSpeedMul");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSpeedMul", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: PracticeSettings.set_songSpeedMul
void GlobalNamespace::PracticeSettings::set_songSpeedMul(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::set_songSpeedMul");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_songSpeedMul", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PracticeSettings.get_startInAdvanceAndClearNotes
bool GlobalNamespace::PracticeSettings::get_startInAdvanceAndClearNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_startInAdvanceAndClearNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startInAdvanceAndClearNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PracticeSettings.set_startInAdvanceAndClearNotes
void GlobalNamespace::PracticeSettings::set_startInAdvanceAndClearNotes(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::set_startInAdvanceAndClearNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_startInAdvanceAndClearNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PracticeSettings.get_defaultPracticeSettings
GlobalNamespace::PracticeSettings* GlobalNamespace::PracticeSettings::get_defaultPracticeSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::get_defaultPracticeSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PracticeSettings", "get_defaultPracticeSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PracticeSettings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: PracticeSettings.ResetToDefault
void GlobalNamespace::PracticeSettings::ResetToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PracticeSettings::ResetToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RankModelHelper
#include "GlobalNamespace/RankModelHelper.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: RankModel/Rank
#include "GlobalNamespace/RankModel_Rank.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RankModelHelper.MaxRankForGameplayModifiers
GlobalNamespace::RankModel::Rank GlobalNamespace::RankModelHelper::MaxRankForGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers, GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel, float energy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RankModelHelper::MaxRankForGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RankModelHelper", "MaxRankForGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(gameplayModifiersModel), ::il2cpp_utils::ExtractType(energy)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::RankModel::Rank, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameplayModifiers, gameplayModifiersModel, energy);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResetLocalLeaderboardOnKey
#include "GlobalNamespace/ResetLocalLeaderboardOnKey.hpp"
// Including type: LocalLeaderboardsModel
#include "GlobalNamespace/LocalLeaderboardsModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResetLocalLeaderboardOnKey.Update
void GlobalNamespace::ResetLocalLeaderboardOnKey::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResetLocalLeaderboardOnKey::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMultiplayerRichPresenceData
#include "GlobalNamespace/IMultiplayerRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMultiplayerRichPresenceData.get_multiplayerLobbyCode
::Il2CppString* GlobalNamespace::IMultiplayerRichPresenceData::get_multiplayerLobbyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerRichPresenceData::get_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IMultiplayerRichPresenceData.set_multiplayerLobbyCode
void GlobalNamespace::IMultiplayerRichPresenceData::set_multiplayerLobbyCode(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerRichPresenceData::set_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMultiplayerRichPresenceData.get_isJoinable
bool GlobalNamespace::IMultiplayerRichPresenceData::get_isJoinable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMultiplayerRichPresenceData::get_isJoinable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isJoinable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: InMultiplayerRichPresenceData
#include "GlobalNamespace/InMultiplayerRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE189E0
// Autogenerated static field getter
// Get static field: static private System.String kInMultiplayerLobbyRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::_get_kInMultiplayerLobbyRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::_get_kInMultiplayerLobbyRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "InMultiplayerRichPresenceData", "kInMultiplayerLobbyRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kInMultiplayerLobbyRichPresenceLocalizationKey
void GlobalNamespace::InMultiplayerRichPresenceData::_set_kInMultiplayerLobbyRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::_set_kInMultiplayerLobbyRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "InMultiplayerRichPresenceData", "kInMultiplayerLobbyRichPresenceLocalizationKey", value));
}
// Autogenerated method: InMultiplayerRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: InMultiplayerRichPresenceData.set_apiName
void GlobalNamespace::InMultiplayerRichPresenceData::set_apiName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::set_apiName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InMultiplayerRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: InMultiplayerRichPresenceData.set_localizedDescription
void GlobalNamespace::InMultiplayerRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InMultiplayerRichPresenceData.get_multiplayerLobbyCode
::Il2CppString* GlobalNamespace::InMultiplayerRichPresenceData::get_multiplayerLobbyCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: InMultiplayerRichPresenceData.set_multiplayerLobbyCode
void GlobalNamespace::InMultiplayerRichPresenceData::set_multiplayerLobbyCode(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::set_multiplayerLobbyCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_multiplayerLobbyCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InMultiplayerRichPresenceData.get_isJoinable
bool GlobalNamespace::InMultiplayerRichPresenceData::get_isJoinable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InMultiplayerRichPresenceData::get_isJoinable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isJoinable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingMultiplayerRichPresenceData
#include "GlobalNamespace/PlayingMultiplayerRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE189F0
// Autogenerated static field getter
// Get static field: static private System.String kPlayingMultiplayerLobbyRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::PlayingMultiplayerRichPresenceData::_get_kPlayingMultiplayerLobbyRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingMultiplayerRichPresenceData::_get_kPlayingMultiplayerLobbyRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayingMultiplayerRichPresenceData", "kPlayingMultiplayerLobbyRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPlayingMultiplayerLobbyRichPresenceLocalizationKey
void GlobalNamespace::PlayingMultiplayerRichPresenceData::_set_kPlayingMultiplayerLobbyRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingMultiplayerRichPresenceData::_set_kPlayingMultiplayerLobbyRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayingMultiplayerRichPresenceData", "kPlayingMultiplayerLobbyRichPresenceLocalizationKey", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusRichPresencePlatformHandler
#include "GlobalNamespace/OculusRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusRichPresencePlatformHandler.SetPresence
void GlobalNamespace::OculusRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: OculusRichPresencePlatformHandler.Clear
void GlobalNamespace::OculusRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::IRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: IRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::IRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BrowsingMenusRichPresenceData
#include "GlobalNamespace/BrowsingMenusRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE18A10
// Autogenerated static field getter
// Get static field: static private System.String kBrowsingMenusRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::BrowsingMenusRichPresenceData::_get_kBrowsingMenusRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::_get_kBrowsingMenusRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BrowsingMenusRichPresenceData", "kBrowsingMenusRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBrowsingMenusRichPresenceLocalizationKey
void GlobalNamespace::BrowsingMenusRichPresenceData::_set_kBrowsingMenusRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::_set_kBrowsingMenusRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BrowsingMenusRichPresenceData", "kBrowsingMenusRichPresenceLocalizationKey", value));
}
// Autogenerated method: BrowsingMenusRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::BrowsingMenusRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BrowsingMenusRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::BrowsingMenusRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BrowsingMenusRichPresenceData.set_localizedDescription
void GlobalNamespace::BrowsingMenusRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BrowsingMenusRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingCampaignRichPresenceData
#include "GlobalNamespace/PlayingCampaignRichPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE18A30
// Autogenerated static field getter
// Get static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::PlayingCampaignRichPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayingCampaignRichPresenceData", "kPlayingCampaignRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
void GlobalNamespace::PlayingCampaignRichPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayingCampaignRichPresenceData", "kPlayingCampaignRichPresenceLocalizationKey", value));
}
// Autogenerated method: PlayingCampaignRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::PlayingCampaignRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingCampaignRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::PlayingCampaignRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingCampaignRichPresenceData.set_localizedDescription
void GlobalNamespace::PlayingCampaignRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingCampaignRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingTutorialPresenceData
#include "GlobalNamespace/PlayingTutorialPresenceData.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE18A50
// Autogenerated static field getter
// Get static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
::Il2CppString* GlobalNamespace::PlayingTutorialPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::_get_kPlayingCampaignRichPresenceLocalizationKey");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PlayingTutorialPresenceData", "kPlayingCampaignRichPresenceLocalizationKey"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPlayingCampaignRichPresenceLocalizationKey
void GlobalNamespace::PlayingTutorialPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::_set_kPlayingCampaignRichPresenceLocalizationKey");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlayingTutorialPresenceData", "kPlayingCampaignRichPresenceLocalizationKey", value));
}
// Autogenerated method: PlayingTutorialPresenceData.get_apiName
::Il2CppString* GlobalNamespace::PlayingTutorialPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingTutorialPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::PlayingTutorialPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingTutorialPresenceData.set_localizedDescription
void GlobalNamespace::PlayingTutorialPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingTutorialPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayingDifficultyBeatmapRichPresenceData
#include "GlobalNamespace/PlayingDifficultyBeatmapRichPresenceData.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.get_apiName
::Il2CppString* GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_apiName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_apiName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.set_apiName
void GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_apiName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_apiName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_apiName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.get_localizedDescription
::Il2CppString* GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_localizedDescription() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::get_localizedDescription");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.set_localizedDescription
void GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_localizedDescription(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::set_localizedDescription");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localizedDescription", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PlayingDifficultyBeatmapRichPresenceData.GetDestinationLocalizedString
::Il2CppString* GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::GetDestinationLocalizedString(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayingDifficultyBeatmapRichPresenceData::GetDestinationLocalizedString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PlayingDifficultyBeatmapRichPresenceData", "GetDestinationLocalizedString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, difficultyBeatmap);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RichPresenceManager
#include "GlobalNamespace/RichPresenceManager.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: MissionLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MissionLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MenuScenesTransitionSetupDataSO
#include "GlobalNamespace/MenuScenesTransitionSetupDataSO.hpp"
// Including type: IRichPresencePlatformHandler
#include "GlobalNamespace/IRichPresencePlatformHandler.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: LobbyGameState
#include "GlobalNamespace/LobbyGameState.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: BrowsingMenusRichPresenceData
#include "GlobalNamespace/BrowsingMenusRichPresenceData.hpp"
// Including type: InMultiplayerRichPresenceData
#include "GlobalNamespace/InMultiplayerRichPresenceData.hpp"
// Including type: PlayingCampaignRichPresenceData
#include "GlobalNamespace/PlayingCampaignRichPresenceData.hpp"
// Including type: PlayingTutorialPresenceData
#include "GlobalNamespace/PlayingTutorialPresenceData.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RichPresenceManager.Awake
void GlobalNamespace::RichPresenceManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.OnDestroy
void GlobalNamespace::RichPresenceManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.HandleLobbyGameStateDidChange
void GlobalNamespace::RichPresenceManager::HandleLobbyGameStateDidChange(GlobalNamespace::MultiplayerGameState newGameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::HandleLobbyGameStateDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newGameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newGameState);
}
// Autogenerated method: RichPresenceManager.SetMenuPresence
void GlobalNamespace::RichPresenceManager::SetMenuPresence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::SetMenuPresence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMenuPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.HandleGameScenesManagerTransitionDidFinish
void GlobalNamespace::RichPresenceManager::HandleGameScenesManagerTransitionDidFinish(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, Zenject::DiContainer* diContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::HandleGameScenesManagerTransitionDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameScenesManagerTransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(diContainer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, diContainer);
}
// Autogenerated method: RichPresenceManager.HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence
void GlobalNamespace::RichPresenceManager::HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerDataDidChangeShareMultiplayerLobbyCodeInRichPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RichPresenceManager.SetPresence
void GlobalNamespace::RichPresenceManager::SetPresence(GlobalNamespace::IRichPresenceData* presenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::SetPresence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(presenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, presenceData);
}
// Autogenerated method: RichPresenceManager.Clear
void GlobalNamespace::RichPresenceManager::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RichPresenceManager::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IRichPresencePlatformHandler
#include "GlobalNamespace/IRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IRichPresencePlatformHandler.SetPresence
void GlobalNamespace::IRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: IRichPresencePlatformHandler.Clear
void GlobalNamespace::IRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TestRichPresencePlatformHandler
#include "GlobalNamespace/TestRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TestRichPresencePlatformHandler.SetPresence
void GlobalNamespace::TestRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: TestRichPresencePlatformHandler.Clear
void GlobalNamespace::TestRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamRichPresencePlatformHandler
#include "GlobalNamespace/SteamRichPresencePlatformHandler.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamRichPresencePlatformHandler.SetPresence
void GlobalNamespace::SteamRichPresencePlatformHandler::SetPresence(GlobalNamespace::IRichPresenceData* richPresenceData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamRichPresencePlatformHandler::SetPresence");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPresence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(richPresenceData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, richPresenceData);
}
// Autogenerated method: SteamRichPresencePlatformHandler.Clear
void GlobalNamespace::SteamRichPresencePlatformHandler::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamRichPresencePlatformHandler::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreModel
#include "GlobalNamespace/ScoreModel.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxMultiplier
int GlobalNamespace::ScoreModel::_get_kMaxMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxMultiplier"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxMultiplier
void GlobalNamespace::ScoreModel::_set_kMaxMultiplier(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxBeforeCutSwingRawScore
int GlobalNamespace::ScoreModel::_get_kMaxBeforeCutSwingRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxBeforeCutSwingRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxBeforeCutSwingRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxBeforeCutSwingRawScore
void GlobalNamespace::ScoreModel::_set_kMaxBeforeCutSwingRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxBeforeCutSwingRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxBeforeCutSwingRawScore", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxCutDistanceRawScore
int GlobalNamespace::ScoreModel::_get_kMaxCutDistanceRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxCutDistanceRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxCutDistanceRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxCutDistanceRawScore
void GlobalNamespace::ScoreModel::_set_kMaxCutDistanceRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxCutDistanceRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxCutDistanceRawScore", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxAfterCutSwingRawScore
int GlobalNamespace::ScoreModel::_get_kMaxAfterCutSwingRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxAfterCutSwingRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxAfterCutSwingRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxAfterCutSwingRawScore
void GlobalNamespace::ScoreModel::_set_kMaxAfterCutSwingRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxAfterCutSwingRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxAfterCutSwingRawScore", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxCutRawScore
int GlobalNamespace::ScoreModel::_get_kMaxCutRawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxCutRawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreModel", "kMaxCutRawScore"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxCutRawScore
void GlobalNamespace::ScoreModel::_set_kMaxCutRawScore(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxCutRawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxCutRawScore", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kSwingScorePart
float GlobalNamespace::ScoreModel::_get_kSwingScorePart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kSwingScorePart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ScoreModel", "kSwingScorePart"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSwingScorePart
void GlobalNamespace::ScoreModel::_set_kSwingScorePart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kSwingScorePart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kSwingScorePart", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kDistanceToCenterScorePart
float GlobalNamespace::ScoreModel::_get_kDistanceToCenterScorePart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kDistanceToCenterScorePart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ScoreModel", "kDistanceToCenterScorePart"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kDistanceToCenterScorePart
void GlobalNamespace::ScoreModel::_set_kDistanceToCenterScorePart(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kDistanceToCenterScorePart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kDistanceToCenterScorePart", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxDistanceForDistanceToCenterScore
float GlobalNamespace::ScoreModel::_get_kMaxDistanceForDistanceToCenterScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_get_kMaxDistanceForDistanceToCenterScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ScoreModel", "kMaxDistanceForDistanceToCenterScore"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxDistanceForDistanceToCenterScore
void GlobalNamespace::ScoreModel::_set_kMaxDistanceForDistanceToCenterScore(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::_set_kMaxDistanceForDistanceToCenterScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreModel", "kMaxDistanceForDistanceToCenterScore", value));
}
// Autogenerated method: ScoreModel.MaxRawScoreForNumberOfNotes
int GlobalNamespace::ScoreModel::MaxRawScoreForNumberOfNotes(int noteCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::MaxRawScoreForNumberOfNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreModel", "MaxRawScoreForNumberOfNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCount)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, noteCount);
}
// Autogenerated method: ScoreModel.RawScoreWithoutMultiplier
void GlobalNamespace::ScoreModel::RawScoreWithoutMultiplier(GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter, float cutDistanceToCenter, int& beforeCutRawScore, int& afterCutRawScore, int& cutDistanceRawScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::RawScoreWithoutMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreModel", "RawScoreWithoutMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter), ::il2cpp_utils::ExtractType(cutDistanceToCenter), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, saberSwingRatingCounter, cutDistanceToCenter, beforeCutRawScore, afterCutRawScore, cutDistanceRawScore);
}
// Autogenerated method: ScoreModel.GetModifiedScoreForGameplayModifiersScoreMultiplier
int GlobalNamespace::ScoreModel::GetModifiedScoreForGameplayModifiersScoreMultiplier(int rawScore, float gameplayModifiersScoreMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreModel::GetModifiedScoreForGameplayModifiersScoreMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreModel", "GetModifiedScoreForGameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawScore), ::il2cpp_utils::ExtractType(gameplayModifiersScoreMultiplier)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rawScore, gameplayModifiersScoreMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelLoader
#include "GlobalNamespace/StandardLevelLoader.hpp"
// Including type: StandardLevelInfoSaveData
#include "GlobalNamespace/StandardLevelInfoSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelLoader.LoadStandardLevelSaveData
GlobalNamespace::StandardLevelInfoSaveData* GlobalNamespace::StandardLevelLoader::LoadStandardLevelSaveData(::Il2CppString* levelInfoFilenamePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelLoader::LoadStandardLevelSaveData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StandardLevelLoader", "LoadStandardLevelSaveData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelInfoFilenamePath)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::StandardLevelInfoSaveData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, levelInfoFilenamePath);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersValueSOOffsets
#include "GlobalNamespace/VRControllersValueSOOffsets.hpp"
// Including type: Vector3SO
#include "GlobalNamespace/Vector3SO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllersValueSOOffsets.get_positionOffset
UnityEngine::Vector3 GlobalNamespace::VRControllersValueSOOffsets::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersValueSOOffsets::get_positionOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersValueSOOffsets.get_rotationOffset
UnityEngine::Vector3 GlobalNamespace::VRControllersValueSOOffsets::get_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersValueSOOffsets::get_rotationOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VersionSaveData
#include "GlobalNamespace/VersionSaveData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseResultsEnvironmentController
#include "GlobalNamespace/BaseResultsEnvironmentController.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseResultsEnvironmentController.Activate
void GlobalNamespace::BaseResultsEnvironmentController::Activate(bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseResultsEnvironmentController::Activate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, immediately);
}
// Autogenerated method: BaseResultsEnvironmentController.Deactivate
void GlobalNamespace::BaseResultsEnvironmentController::Deactivate(bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseResultsEnvironmentController::Deactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, immediately);
}
// Autogenerated method: BaseResultsEnvironmentController.Setup
void GlobalNamespace::BaseResultsEnvironmentController::Setup(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseResultsEnvironmentController::Setup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, difficultyBeatmap);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: EnvironmentBrandingManager
#include "GlobalNamespace/EnvironmentBrandingManager.hpp"
// Including type: EnvironmentBrandingManager/InitData
#include "GlobalNamespace/EnvironmentBrandingManager_InitData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnvironmentBrandingManager.Start
void GlobalNamespace::EnvironmentBrandingManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentBrandingManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentBrandingManager/InitData
#include "GlobalNamespace/EnvironmentBrandingManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuEnvironmentManager
#include "GlobalNamespace/MenuEnvironmentManager.hpp"
// Including type: MenuEnvironmentManager/MenuEnvironmentObjects
#include "GlobalNamespace/MenuEnvironmentManager_MenuEnvironmentObjects.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuEnvironmentManager.Start
void GlobalNamespace::MenuEnvironmentManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuEnvironmentManager.ShowEnvironmentType
void GlobalNamespace::MenuEnvironmentManager::ShowEnvironmentType(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType menuEnvironmentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::ShowEnvironmentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowEnvironmentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(menuEnvironmentType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, menuEnvironmentType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuEnvironmentManager/MenuEnvironmentType
#include "GlobalNamespace/MenuEnvironmentManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MenuEnvironmentManager/MenuEnvironmentType None
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType>("", "MenuEnvironmentManager/MenuEnvironmentType", "None"));
}
// Autogenerated static field setter
// Set static field: static public MenuEnvironmentManager/MenuEnvironmentType None
void GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_None(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuEnvironmentManager/MenuEnvironmentType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public MenuEnvironmentManager/MenuEnvironmentType Default
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType>("", "MenuEnvironmentManager/MenuEnvironmentType", "Default"));
}
// Autogenerated static field setter
// Set static field: static public MenuEnvironmentManager/MenuEnvironmentType Default
void GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Default(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuEnvironmentManager/MenuEnvironmentType", "Default", value));
}
// Autogenerated static field getter
// Get static field: static public MenuEnvironmentManager/MenuEnvironmentType Lobby
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Lobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_get_Lobby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType>("", "MenuEnvironmentManager/MenuEnvironmentType", "Lobby"));
}
// Autogenerated static field setter
// Set static field: static public MenuEnvironmentManager/MenuEnvironmentType Lobby
void GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Lobby(GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType::_set_Lobby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MenuEnvironmentManager/MenuEnvironmentType", "Lobby", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuEnvironmentManager/MenuEnvironmentObjects
#include "GlobalNamespace/MenuEnvironmentManager_MenuEnvironmentObjects.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuEnvironmentManager/MenuEnvironmentObjects.get_menuEnvironmentType
GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_menuEnvironmentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_menuEnvironmentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_menuEnvironmentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType, false>(this, ___internal__method);
}
// Autogenerated method: MenuEnvironmentManager/MenuEnvironmentObjects.get_wrapper
UnityEngine::GameObject* GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_wrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects::get_wrapper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wrapper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuNeonLightsGenerator
#include "GlobalNamespace/MenuNeonLightsGenerator.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OffsetByBeatmapObjectSpawnCenter
#include "GlobalNamespace/OffsetByBeatmapObjectSpawnCenter.hpp"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OffsetByBeatmapObjectSpawnCenter.Start
void GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OffsetByBeatmapObjectSpawnCenter.HandleSpawnCenterDistanceWasFound
void GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::HandleSpawnCenterDistanceWasFound(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OffsetByBeatmapObjectSpawnCenter::HandleSpawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultsEnvironmentManager
#include "GlobalNamespace/ResultsEnvironmentManager.hpp"
// Including type: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword
#include "GlobalNamespace/ResultsEnvironmentManager_ResultEnvironmentControllerWithKeyword.hpp"
// Including type: ResultsEnvironmentManager/<>c__DisplayClass3_0
#include "GlobalNamespace/ResultsEnvironmentManager_--c__DisplayClass3_0.hpp"
// Including type: BaseResultsEnvironmentController
#include "GlobalNamespace/BaseResultsEnvironmentController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultsEnvironmentManager.GetResultEnvironmentControllerForKeyword
GlobalNamespace::BaseResultsEnvironmentController* GlobalNamespace::ResultsEnvironmentManager::GetResultEnvironmentControllerForKeyword(::Il2CppString* keyword) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::GetResultEnvironmentControllerForKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResultEnvironmentControllerForKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyword)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseResultsEnvironmentController*, false>(this, ___internal__method, keyword);
}
// Autogenerated method: ResultsEnvironmentManager.ShowResultForKeyword
void GlobalNamespace::ResultsEnvironmentManager::ShowResultForKeyword(::Il2CppString* keyword, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::ShowResultForKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowResultForKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyword), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyword, immediately);
}
// Autogenerated method: ResultsEnvironmentManager.HideResultForKeyword
void GlobalNamespace::ResultsEnvironmentManager::HideResultForKeyword(::Il2CppString* keyword, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::HideResultForKeyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideResultForKeyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyword), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyword, immediately);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword
#include "GlobalNamespace/ResultsEnvironmentManager_ResultEnvironmentControllerWithKeyword.hpp"
// Including type: BaseResultsEnvironmentController
#include "GlobalNamespace/BaseResultsEnvironmentController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword.get_keyword
::Il2CppString* GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_keyword() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_keyword");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keyword", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword.get_resultsEnvironmentController
GlobalNamespace::BaseResultsEnvironmentController* GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_resultsEnvironmentController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword::get_resultsEnvironmentController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultsEnvironmentController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BaseResultsEnvironmentController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultsEnvironmentManager/<>c__DisplayClass3_0
#include "GlobalNamespace/ResultsEnvironmentManager_--c__DisplayClass3_0.hpp"
// Including type: ResultsEnvironmentManager/ResultEnvironmentControllerWithKeyword
#include "GlobalNamespace/ResultsEnvironmentManager_ResultEnvironmentControllerWithKeyword.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultsEnvironmentManager/<>c__DisplayClass3_0.<GetResultEnvironmentControllerForKeyword>b__0
bool GlobalNamespace::ResultsEnvironmentManager::$$c__DisplayClass3_0::$GetResultEnvironmentControllerForKeyword$b__0(GlobalNamespace::ResultsEnvironmentManager::ResultEnvironmentControllerWithKeyword* controllerWithKeyword) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsEnvironmentManager::$$c__DisplayClass3_0::<GetResultEnvironmentControllerForKeyword>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetResultEnvironmentControllerForKeyword>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controllerWithKeyword)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, controllerWithKeyword);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatLine
#include "GlobalNamespace/BeatLine.hpp"
// Including type: BeatLine/Pool
#include "GlobalNamespace/BeatLine_Pool.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatLine.get_isFinished
bool GlobalNamespace::BeatLine::get_isFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::get_isFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatLine.get_rotation
float GlobalNamespace::BeatLine::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatLine.Init
void GlobalNamespace::BeatLine::Init(UnityEngine::Vector3 position, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: BeatLine.AddHighlight
void GlobalNamespace::BeatLine::AddHighlight(float startTime, float arriveDuration, float jumpDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::AddHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(arriveDuration), ::il2cpp_utils::ExtractType(jumpDuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTime, arriveDuration, jumpDuration);
}
// Autogenerated method: BeatLine.ManualUpdate
void GlobalNamespace::BeatLine::ManualUpdate(float songTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, songTime);
}
// Autogenerated method: BeatLine.ColorWasSet
void GlobalNamespace::BeatLine::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLine::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatLine/Pool
#include "GlobalNamespace/BeatLine_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatLineManager
#include "GlobalNamespace/BeatLineManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: BeatLine/Pool
#include "GlobalNamespace/BeatLine_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatLineManager.get_isMidRotationValid
bool GlobalNamespace::BeatLineManager::get_isMidRotationValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::get_isMidRotationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isMidRotationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.get_midRotation
float GlobalNamespace::BeatLineManager::get_midRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::get_midRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_midRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.get_rotationRange
float GlobalNamespace::BeatLineManager::get_rotationRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::get_rotationRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.Start
void GlobalNamespace::BeatLineManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.OnDestroy
void GlobalNamespace::BeatLineManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.Update
void GlobalNamespace::BeatLineManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatLineManager.HandleNoteWasSpawned
void GlobalNamespace::BeatLineManager::HandleNoteWasSpawned(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatLineManager::HandleNoteWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BasicBeatmapObjectManager
#include "GlobalNamespace/BasicBeatmapObjectManager.hpp"
// Including type: BasicBeatmapObjectManager/InitData
#include "GlobalNamespace/BasicBeatmapObjectManager_InitData.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: GameNoteController/Pool
#include "GlobalNamespace/GameNoteController_Pool.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BasicBeatmapObjectManager.GetMaxYForRangeInMiddleTwoLanes
float GlobalNamespace::BasicBeatmapObjectManager::GetMaxYForRangeInMiddleTwoLanes(float zStart, float zEnd) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::GetMaxYForRangeInMiddleTwoLanes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaxYForRangeInMiddleTwoLanes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(zStart), ::il2cpp_utils::ExtractType(zEnd)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, zStart, zEnd);
}
// Autogenerated method: BasicBeatmapObjectManager.get_activeObstacleControllers
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* GlobalNamespace::BasicBeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: BasicBeatmapObjectManager.SpawnObstacleInternal
GlobalNamespace::ObstacleController* GlobalNamespace::BasicBeatmapObjectManager::SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::SpawnObstacleInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: BasicBeatmapObjectManager.SpawnBombNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BasicBeatmapObjectManager::SpawnBombNoteInternal(GlobalNamespace::NoteData* bombNoteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::SpawnBombNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bombNoteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, bombNoteData, noteSpawnData, rotation);
}
// Autogenerated method: BasicBeatmapObjectManager.SpawnBasicNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BasicBeatmapObjectManager::SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::SpawnBasicNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated method: BasicBeatmapObjectManager.DespawnInternal
void GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BasicBeatmapObjectManager.DespawnInternal
void GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BasicBeatmapObjectManager.DissolveAllObjects
void GlobalNamespace::BasicBeatmapObjectManager::DissolveAllObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::DissolveAllObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveAllObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicBeatmapObjectManager.HideAllBeatmapObjects
void GlobalNamespace::BasicBeatmapObjectManager::HideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::HideAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BasicBeatmapObjectManager.PauseAllBeatmapObjects
void GlobalNamespace::BasicBeatmapObjectManager::PauseAllBeatmapObjects(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicBeatmapObjectManager::PauseAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BasicBeatmapObjectManager/InitData
#include "GlobalNamespace/BasicBeatmapObjectManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapCallbackItemDataList
#include "GlobalNamespace/BeatmapCallbackItemDataList.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnBasicNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBasicNoteCallback.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnLongNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnLongNoteCallback.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnBombNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBombNoteCallback.hpp"
// Including type: BeatmapCallbackItemDataList/SpawnObstacleCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnObstacleCallback.hpp"
// Including type: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_ProcessBeatmapEventCallback.hpp"
// Including type: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_GetRelativeNoteOffsetCallback.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList.InsertBeatmapObjectData
void GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapObjectData(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapObjectData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertBeatmapObjectData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Autogenerated method: BeatmapCallbackItemDataList.InsertBeatmapEventData
void GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::InsertBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapCallbackItemDataList.ProcessData
void GlobalNamespace::BeatmapCallbackItemDataList::ProcessData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapCallbackItemDataList.ProcessNotesByColorType
bool GlobalNamespace::BeatmapCallbackItemDataList::ProcessNotesByColorType(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* notesWithTheSameColorTypeList) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessNotesByColorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessNotesByColorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notesWithTheSameColorTypeList)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, notesWithTheSameColorTypeList);
}
// Autogenerated method: BeatmapCallbackItemDataList.SpawnNoteOrLongNote
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnNoteOrLongNote(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnNoteOrLongNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnNoteOrLongNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnBasicNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBasicNoteCallback.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBasicNoteCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::Invoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBasicNoteCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::BeginInvoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, cutDirectionAngleOffset, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBasicNoteCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnLongNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnLongNoteCallback.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnLongNoteCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::Invoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnLongNoteCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::BeginInvoke(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, cutDirectionAngleOffset, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnLongNoteCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnBombNoteCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnBombNoteCallback.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBombNoteCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::Invoke(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBombNoteCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::BeginInvoke(GlobalNamespace::NoteData* noteData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnBombNoteCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/SpawnObstacleCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_SpawnObstacleCallback.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/SpawnObstacleCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::Invoke(GlobalNamespace::ObstacleData* obstacleData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleData);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnObstacleCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::BeginInvoke(GlobalNamespace::ObstacleData* obstacleData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, obstacleData, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/SpawnObstacleCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_ProcessBeatmapEventCallback.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback.Invoke
void GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::Invoke(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::BeginInvoke(GlobalNamespace::BeatmapEventData* beatmapEventData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, beatmapEventData, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/ProcessBeatmapEventCallback.EndInvoke
void GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback
#include "GlobalNamespace/BeatmapCallbackItemDataList_GetRelativeNoteOffsetCallback.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback.Invoke
UnityEngine::Vector2 GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::Invoke(int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, lineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::BeginInvoke(int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineIndex), ::il2cpp_utils::ExtractType(noteLineLayer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, lineIndex, noteLineLayer, callback, object);
}
// Autogenerated method: BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback.EndInvoke
UnityEngine::Vector2 GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
// Including type: BeatmapObjectCallbackController/InitData
#include "GlobalNamespace/BeatmapObjectCallbackController_InitData.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: EnvironmentKeywords
#include "GlobalNamespace/EnvironmentKeywords.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectCallbackController.add_beatmapEventDidTriggerEvent
void GlobalNamespace::BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.remove_beatmapEventDidTriggerEvent
void GlobalNamespace::BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.add_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.remove_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectCallbackController.get_isPaused
bool GlobalNamespace::BeatmapObjectCallbackController::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::get_isPaused");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.Start
void GlobalNamespace::BeatmapObjectCallbackController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.LateUpdate
void GlobalNamespace::BeatmapObjectCallbackController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.AddBeatmapObjectCallback
GlobalNamespace::BeatmapObjectCallbackData* GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: BeatmapObjectCallbackController.RemoveBeatmapObjectCallback
void GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: BeatmapObjectCallbackController.AddBeatmapEventCallback
GlobalNamespace::BeatmapEventCallbackData* GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapEventCallback(GlobalNamespace::BeatmapEventCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapEventCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: BeatmapObjectCallbackController.RemoveBeatmapEventCallback
void GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapEventCallback(GlobalNamespace::BeatmapEventCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: BeatmapObjectCallbackController.SendBeatmapEventDidTriggerEvent
void GlobalNamespace::BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBeatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectCallbackController.SetNewBeatmapData
void GlobalNamespace::BeatmapObjectCallbackController::SetNewBeatmapData(GlobalNamespace::IReadonlyBeatmapData* beatmapData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::SetNewBeatmapData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNewBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapData);
}
// Autogenerated method: BeatmapObjectCallbackController.Pause
void GlobalNamespace::BeatmapObjectCallbackController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectCallbackController.Resume
void GlobalNamespace::BeatmapObjectCallbackController::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectCallbackController/InitData
#include "GlobalNamespace/BeatmapObjectCallbackController_InitData.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ICutScoreHandlerDidFinishEvent
#include "GlobalNamespace/ICutScoreHandlerDidFinishEvent.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder_CutScoreHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICutScoreHandlerDidFinishEvent.HandleCutScoreHandlerDidFinish
void GlobalNamespace::ICutScoreHandlerDidFinishEvent::HandleCutScoreHandlerDidFinish(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder_CutScoreHandler* cutScoreHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICutScoreHandlerDidFinishEvent::HandleCutScoreHandlerDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreHandlerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreHandler)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutScoreHandler);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectExecutionRating
#include "GlobalNamespace/BeatmapObjectExecutionRating.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler/Pool
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder_CutScoreHandler_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.get_beatmapObjectExecutionRatings
System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectExecutionRating*>* GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::get_beatmapObjectExecutionRatings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::get_beatmapObjectExecutionRatings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectExecutionRatings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectExecutionRating*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.Start
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.OnDestroy
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.Update
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleCutScoreHandlerDidFinish
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleCutScoreHandlerDidFinish(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder_CutScoreHandler* cutScoreHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleCutScoreHandlerDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCutScoreHandlerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutScoreHandler)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutScoreHandler);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleScoreControllerNoteWasCut
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasCut(GlobalNamespace::NoteData* noteData, GlobalNamespace::NoteCutInfo& noteCutInfo, int multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(multiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, noteCutInfo, multiplier);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleScoreControllerNoteWasMissed
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasMissed(GlobalNamespace::NoteData* noteData, int multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleScoreControllerNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreControllerNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(multiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, multiplier);
}
// Autogenerated method: BeatmapObjectExecutionRatingsRecorder.HandleObstacleDidPassAvoidedMark
void GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleObstacleDidPassAvoidedMark(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::HandleObstacleDidPassAvoidedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleDidPassAvoidedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: BeatmapObjectManager/NoteWasCutDelegate
#include "GlobalNamespace/BeatmapObjectManager_NoteWasCutDelegate.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectManager.add_noteWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteWasMissedEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasMissedEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteWasCutEvent
void GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteWasCutEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_noteDidStartJumpEvent
void GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_noteDidStartJumpEvent
void GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleWasSpawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleWasDespawnedEvent
void GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleDidPassThreeQuartersOfMove2Event
void GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleDidPassThreeQuartersOfMove2Event
void GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_obstacleDidPassAvoidedMarkEvent
void GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_obstacleDidPassAvoidedMarkEvent
void GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.add_didHideAllBeatmapObjectsEvent
void GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.remove_didHideAllBeatmapObjectsEvent
void GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.get_activeObstacleControllers
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectManager.SpawnObstacleInternal
GlobalNamespace::ObstacleController* GlobalNamespace::BeatmapObjectManager::SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnObstacleInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBombNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBombNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBombNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBasicNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBasicNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapObjectManager.DespawnInternal
void GlobalNamespace::BeatmapObjectManager::DespawnInternal(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.DespawnInternal
void GlobalNamespace::BeatmapObjectManager::DespawnInternal(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.get_spawnHidden
bool GlobalNamespace::BeatmapObjectManager::get_spawnHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::get_spawnHidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnHidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectManager.set_spawnHidden
void GlobalNamespace::BeatmapObjectManager::set_spawnHidden(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::set_spawnHidden");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spawnHidden", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectManager.SpawnObstacle
GlobalNamespace::ObstacleController* GlobalNamespace::BeatmapObjectManager::SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnObstacle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBombNote
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBombNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBombNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: BeatmapObjectManager.SpawnBasicNote
GlobalNamespace::NoteController* GlobalNamespace::BeatmapObjectManager::SpawnBasicNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SpawnBasicNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapObjectManager.SetNoteControllerEventCallbacks
void GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNoteControllerEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.RemoveNoteControllerEventCallbacks
void GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNoteControllerEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.SetObstacleEventCallbacks
void GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetObstacleEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.RemoveObstacleEventCallbacks
void GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveObstacleEventCallbacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.Despawn
void GlobalNamespace::BeatmapObjectManager::Despawn(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::Despawn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Despawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.Despawn
void GlobalNamespace::BeatmapObjectManager::Despawn(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::Despawn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Despawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteDidStartJump
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteWasMissed
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteDidFinishJump
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteDidDissolve
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatmapObjectManager.HandleNoteControllerNoteWasCut
void GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: BeatmapObjectManager.HandleObstaclePassedThreeQuartersOfMove2
void GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstaclePassedThreeQuartersOfMove2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleObstaclePassedAvoidedMark
void GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstaclePassedAvoidedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleObstacleFinishedMovement
void GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleFinishedMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.HandleObstacleDidDissolve
void GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: BeatmapObjectManager.InvokeDidHideAllBeatmapObjects
void GlobalNamespace::BeatmapObjectManager::InvokeDidHideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::InvokeDidHideAllBeatmapObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeDidHideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BeatmapObjectManager.DissolveAllObjects
void GlobalNamespace::BeatmapObjectManager::DissolveAllObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::DissolveAllObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveAllObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectManager.HideAllBeatmapObjects
void GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: BeatmapObjectManager.PauseAllBeatmapObjects
void GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated method: BeatmapObjectManager.INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
void GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectManager/NoteWasCutDelegate
#include "GlobalNamespace/BeatmapObjectManager_NoteWasCutDelegate.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectManager/NoteWasCutDelegate.Invoke
void GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::Invoke(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: BeatmapObjectManager/NoteWasCutDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::BeginInvoke(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteController, noteCutInfo, callback, object);
}
// Autogenerated method: BeatmapObjectManager/NoteWasCutDelegate.EndInvoke
void GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::EndInvoke(GlobalNamespace::NoteCutInfo& noteCutInfo, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectSpawnCenter
#include "GlobalNamespace/BeatmapObjectSpawnCenter.hpp"
// Including type: BeatmapObjectSpawnCenter/PlayerCountToDistance
#include "GlobalNamespace/BeatmapObjectSpawnCenter_PlayerCountToDistance.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnCenter.get_spawnCenterDistance
float GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnCenterDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnCenter.get_spawnCenterDistanceWasFound
bool GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistanceWasFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::get_spawnCenterDistanceWasFound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnCenterDistanceWasFound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnCenter.add_spawnCenterDistanceWasFoundEvent
void GlobalNamespace::BeatmapObjectSpawnCenter::add_spawnCenterDistanceWasFoundEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::add_spawnCenterDistanceWasFoundEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_spawnCenterDistanceWasFoundEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnCenter.remove_spawnCenterDistanceWasFoundEvent
void GlobalNamespace::BeatmapObjectSpawnCenter::remove_spawnCenterDistanceWasFoundEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::remove_spawnCenterDistanceWasFoundEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_spawnCenterDistanceWasFoundEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnCenter.CalculateSpawnCenterPosition
float GlobalNamespace::BeatmapObjectSpawnCenter::CalculateSpawnCenterPosition(int numberOfPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::CalculateSpawnCenterPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateSpawnCenterPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfPlayers)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, numberOfPlayers);
}
// Autogenerated method: BeatmapObjectSpawnCenter.ReportAndSaveSpawnCenterDistance
void GlobalNamespace::BeatmapObjectSpawnCenter::ReportAndSaveSpawnCenterDistance(float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::ReportAndSaveSpawnCenterDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReportAndSaveSpawnCenterDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnCenter/PlayerCountToDistance
#include "GlobalNamespace/BeatmapObjectSpawnCenter_PlayerCountToDistance.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnCenter/PlayerCountToDistance.get_playerCount
int GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_playerCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_playerCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnCenter/PlayerCountToDistance.get_distance
float GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance::get_distance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: BeatmapObjectSpawnController/InitData
#include "GlobalNamespace/BeatmapObjectSpawnController_InitData.hpp"
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapCallbackItemDataList
#include "GlobalNamespace/BeatmapCallbackItemDataList.hpp"
// Including type: SpawnRotationProcessor
#include "GlobalNamespace/SpawnRotationProcessor.hpp"
// Including type: VariableBpmProcessor
#include "GlobalNamespace/VariableBpmProcessor.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnController.get_jumpOffsetY
float GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.set_jumpOffsetY
void GlobalNamespace::BeatmapObjectSpawnController::set_jumpOffsetY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::set_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnController.get_currentBpm
float GlobalNamespace::BeatmapObjectSpawnController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_moveDuration
float GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_jumpDuration
float GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_jumpDistance
float GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_verticalLayerDistance
float GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayerDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_noteJumpMovementSpeed
float GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_noteLinesDistance
float GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_beatmapObjectSpawnMovementData
GlobalNamespace::BeatmapObjectSpawnMovementData* GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.get_isInitialized
bool GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.add_didInitEvent
void GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnController.remove_didInitEvent
void GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapObjectSpawnController.Start
void GlobalNamespace::BeatmapObjectSpawnController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.OnDestroy
void GlobalNamespace::BeatmapObjectSpawnController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.SpawnObstacle
void GlobalNamespace::BeatmapObjectSpawnController::SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::SpawnObstacle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleData);
}
// Autogenerated method: BeatmapObjectSpawnController.SpawnBasicNote
void GlobalNamespace::BeatmapObjectSpawnController::SpawnBasicNote(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::SpawnBasicNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, cutDirectionAngleOffset);
}
// Autogenerated method: BeatmapObjectSpawnController.SpawnBombNote
void GlobalNamespace::BeatmapObjectSpawnController::SpawnBombNote(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::SpawnBombNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapObjectSpawnController.ProcessEarlyBeatmapEventData
void GlobalNamespace::BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEarlyBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectSpawnController.EarlyEventsWereProcessed
void GlobalNamespace::BeatmapObjectSpawnController::EarlyEventsWereProcessed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::EarlyEventsWereProcessed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EarlyEventsWereProcessed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.ProcessLateBeatmapEventData
void GlobalNamespace::BeatmapObjectSpawnController::ProcessLateBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::ProcessLateBeatmapEventData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLateBeatmapEventData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectSpawnController.HandleBeatmapObjectCallback
void GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapObjectCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapObjectCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Autogenerated method: BeatmapObjectSpawnController.HandleBeatmapEventCallback
void GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapEventCallback(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapEventCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: BeatmapObjectSpawnController.HandleCallbacksForThisFrameWereProcessed
void GlobalNamespace::BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCallbacksForThisFrameWereProcessed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.StopSpawning
void GlobalNamespace::BeatmapObjectSpawnController::StopSpawning() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::StopSpawning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSpawning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnController.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnController.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnController/InitData
#include "GlobalNamespace/BeatmapObjectSpawnController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectSpawnMovementData.get_spawnAheadTime
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_spawnAheadTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_spawnAheadTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spawnAheadTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_moveDuration
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_jumpDuration
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_noteLinesDistance
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_verticalLayersDistance
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_verticalLayersDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_verticalLayersDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayersDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_jumpDistance
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.get_noteJumpMovementSpeed
float GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.Init
void GlobalNamespace::BeatmapObjectSpawnMovementData::Init(int noteLinesCount, float startNoteJumpMovementSpeed, float startBpm, float noteJumpStartBeatOffset, float jumpOffsetY, UnityEngine::Vector3 rightVec, UnityEngine::Vector3 forwardVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLinesCount), ::il2cpp_utils::ExtractType(startNoteJumpMovementSpeed), ::il2cpp_utils::ExtractType(startBpm), ::il2cpp_utils::ExtractType(noteJumpStartBeatOffset), ::il2cpp_utils::ExtractType(jumpOffsetY), ::il2cpp_utils::ExtractType(rightVec), ::il2cpp_utils::ExtractType(forwardVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteLinesCount, startNoteJumpMovementSpeed, startBpm, noteJumpStartBeatOffset, jumpOffsetY, rightVec, forwardVec);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.Update
void GlobalNamespace::BeatmapObjectSpawnMovementData::Update(float bpm, float jumpOffsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bpm), ::il2cpp_utils::ExtractType(jumpOffsetY)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bpm, jumpOffsetY);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.GetObstacleSpawnData
GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleSpawnData(GlobalNamespace::ObstacleData* obstacleData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleSpawnData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObstacleSpawnData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, false>(this, ___internal__method, obstacleData);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.GetJumpingNoteSpawnData
GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData GlobalNamespace::BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData(GlobalNamespace::NoteData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetJumpingNoteSpawnData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.GetNoteOffset
UnityEngine::Vector3 GlobalNamespace::BeatmapObjectSpawnMovementData::GetNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::GetNoteOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::BeatmapObjectSpawnMovementData::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::Get2DNoteOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.HighestJumpPosYForLineLayer
float GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighestJumpPosYForLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.HighestJumpPosYForLineLayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighestJumpPosYForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.LineYPosForLineLayer
float GlobalNamespace::BeatmapObjectSpawnMovementData::LineYPosForLineLayer(GlobalNamespace::NoteLineLayer lineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::LineYPosForLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LineYPosForLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.NoteJumpGravityForLineLayer
float GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer(GlobalNamespace::NoteLineLayer lineLayer, GlobalNamespace::NoteLineLayer startLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteJumpGravityForLineLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(startLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, startLineLayer);
}
// Autogenerated method: BeatmapObjectSpawnMovementData.NoteJumpGravityForLineLayerWithoutJumpOffset
float GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, GlobalNamespace::NoteLineLayer startLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteJumpGravityForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(startLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, startLineLayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapObjectCallback.Invoke
void GlobalNamespace::BeatmapObjectCallback::Invoke(GlobalNamespace::BeatmapObjectData* noteData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData);
}
// Autogenerated method: BeatmapObjectCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapObjectCallback::BeginInvoke(GlobalNamespace::BeatmapObjectData* noteData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, noteData, callback, object);
}
// Autogenerated method: BeatmapObjectCallback.EndInvoke
void GlobalNamespace::BeatmapObjectCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapEventCallback.Invoke
void GlobalNamespace::BeatmapEventCallback::Invoke(GlobalNamespace::BeatmapEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventCallback::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: BeatmapEventCallback.BeginInvoke
System::IAsyncResult* GlobalNamespace::BeatmapEventCallback::BeginInvoke(GlobalNamespace::BeatmapEventData* eventData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventCallback::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eventData, callback, object);
}
// Autogenerated method: BeatmapEventCallback.EndInvoke
void GlobalNamespace::BeatmapEventCallback::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventCallback::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapObjectCallback
#include "GlobalNamespace/BeatmapObjectCallback.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapEventCallback
#include "GlobalNamespace/BeatmapEventCallback.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapObjectCallbackController.add_beatmapEventDidTriggerEvent
void GlobalNamespace::IBeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.remove_beatmapEventDidTriggerEvent
void GlobalNamespace::IBeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.add_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::IBeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.remove_callbacksForThisFrameWereProcessedEvent
void GlobalNamespace::IBeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectCallbackController.AddBeatmapObjectCallback
GlobalNamespace::BeatmapObjectCallbackData* GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: IBeatmapObjectCallbackController.RemoveBeatmapObjectCallback
void GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapObjectCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: IBeatmapObjectCallbackController.AddBeatmapEventCallback
GlobalNamespace::BeatmapEventCallbackData* GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapEventCallback(GlobalNamespace::BeatmapEventCallback* callback, float aheadTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::AddBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(aheadTime)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapEventCallbackData*, false>(this, ___internal__method, callback, aheadTime);
}
// Autogenerated method: IBeatmapObjectCallbackController.RemoveBeatmapEventCallback
void GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapEventCallback(GlobalNamespace::BeatmapEventCallbackData* callbackData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::RemoveBeatmapEventCallback");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callbackData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callbackData);
}
// Autogenerated method: IBeatmapObjectCallbackController.SendBeatmapEventDidTriggerEvent
void GlobalNamespace::IBeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBeatmapEventDidTriggerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: IBeatmapObjectCallbackController.SetNewBeatmapData
void GlobalNamespace::IBeatmapObjectCallbackController::SetNewBeatmapData(GlobalNamespace::IReadonlyBeatmapData* beatmapData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::SetNewBeatmapData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNewBeatmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapData);
}
// Autogenerated method: IBeatmapObjectCallbackController.Pause
void GlobalNamespace::IBeatmapObjectCallbackController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectCallbackController.Resume
void GlobalNamespace::IBeatmapObjectCallbackController::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectCallbackController.get_isPaused
bool GlobalNamespace::IBeatmapObjectCallbackController::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectCallbackController::get_isPaused");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapObjectSpawnController.get_jumpOffsetY
float GlobalNamespace::IBeatmapObjectSpawnController::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.set_jumpOffsetY
void GlobalNamespace::IBeatmapObjectSpawnController::set_jumpOffsetY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::set_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_currentBpm
float GlobalNamespace::IBeatmapObjectSpawnController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_moveDuration
float GlobalNamespace::IBeatmapObjectSpawnController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_moveDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_jumpDuration
float GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_jumpDistance
float GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_jumpDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_verticalLayerDistance
float GlobalNamespace::IBeatmapObjectSpawnController::get_verticalLayerDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_verticalLayerDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayerDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_noteJumpMovementSpeed
float GlobalNamespace::IBeatmapObjectSpawnController::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_noteLinesDistance
float GlobalNamespace::IBeatmapObjectSpawnController::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_noteLinesDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_beatmapObjectSpawnMovementData
GlobalNamespace::BeatmapObjectSpawnMovementData* GlobalNamespace::IBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData*, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.get_isInitialized
bool GlobalNamespace::IBeatmapObjectSpawnController::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IBeatmapObjectSpawnController.add_didInitEvent
void GlobalNamespace::IBeatmapObjectSpawnController::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectSpawnController.remove_didInitEvent
void GlobalNamespace::IBeatmapObjectSpawnController::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IBeatmapObjectSpawnController.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::IBeatmapObjectSpawnController::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::Get2DNoteOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: IBeatmapObjectSpawnController.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::IBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatmapObjectSpawner.SpawnObstacle
GlobalNamespace::ObstacleController* GlobalNamespace::IBeatmapObjectSpawner::SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawner::SpawnObstacle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: IBeatmapObjectSpawner.SpawnBombNote
GlobalNamespace::NoteController* GlobalNamespace::IBeatmapObjectSpawner::SpawnBombNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawner::SpawnBombNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: IBeatmapObjectSpawner.SpawnBasicNote
GlobalNamespace::NoteController* GlobalNamespace::IBeatmapObjectSpawner::SpawnBasicNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatmapObjectSpawner::SpawnBasicNote");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredBeatmapObjectManager
#include "GlobalNamespace/MirroredBeatmapObjectManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: MirroredBombNoteController/Pool
#include "GlobalNamespace/MirroredBombNoteController_Pool.hpp"
// Including type: MirroredCubeNoteController/Pool
#include "GlobalNamespace/MirroredCubeNoteController_Pool.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: ICubeNoteMirrorable
#include "GlobalNamespace/ICubeNoteMirrorable.hpp"
// Including type: INoteMirrorable
#include "GlobalNamespace/INoteMirrorable.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: MirroredObstacleController/Pool
#include "GlobalNamespace/MirroredObstacleController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MirroredBeatmapObjectManager.HandleNoteWasSpawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasSpawned(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleNoteWasDespawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasDespawned(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleObstacleWasSpawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasSpawned(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleObstacleWasDespawned
void GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasDespawned(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasDespawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleWasDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: MirroredBeatmapObjectManager.HandleDidHideAllBeatmapObjects
void GlobalNamespace::MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidHideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: MirroredBeatmapObjectManager.Finalize
void GlobalNamespace::MirroredBeatmapObjectManager::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredBeatmapObjectManager::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockBeatmapObjectSpawnController
#include "GlobalNamespace/MockBeatmapObjectSpawnController.hpp"
// Including type: BeatmapObjectSpawnMovementData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockBeatmapObjectSpawnController.get_jumpOffsetY
float GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.set_jumpOffsetY
void GlobalNamespace::MockBeatmapObjectSpawnController::set_jumpOffsetY(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::set_jumpOffsetY");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpOffsetY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_currentBpm
float GlobalNamespace::MockBeatmapObjectSpawnController::get_currentBpm() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_currentBpm");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentBpm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_moveDuration
float GlobalNamespace::MockBeatmapObjectSpawnController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_moveDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_jumpDuration
float GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDuration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_jumpDistance
float GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_verticalLayerDistance
float GlobalNamespace::MockBeatmapObjectSpawnController::get_verticalLayerDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_verticalLayerDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalLayerDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_noteJumpMovementSpeed
float GlobalNamespace::MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_noteLinesDistance
float GlobalNamespace::MockBeatmapObjectSpawnController::get_noteLinesDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_noteLinesDistance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteLinesDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_beatmapObjectSpawnMovementData
GlobalNamespace::BeatmapObjectSpawnMovementData* GlobalNamespace::MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapObjectSpawnMovementData*, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.get_isInitialized
bool GlobalNamespace::MockBeatmapObjectSpawnController::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::get_isInitialized");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MockBeatmapObjectSpawnController.add_didInitEvent
void GlobalNamespace::MockBeatmapObjectSpawnController::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::add_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockBeatmapObjectSpawnController.remove_didInitEvent
void GlobalNamespace::MockBeatmapObjectSpawnController::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::remove_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockBeatmapObjectSpawnController.Get2DNoteOffset
UnityEngine::Vector2 GlobalNamespace::MockBeatmapObjectSpawnController::Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::Get2DNoteOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get2DNoteOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(noteLineLayer)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, noteLineIndex, noteLineLayer);
}
// Autogenerated method: MockBeatmapObjectSpawnController.JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
float GlobalNamespace::MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineLayer), ::il2cpp_utils::ExtractType(distanceFromPlayer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lineLayer, distanceFromPlayer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BaseNoteVisuals
#include "GlobalNamespace/BaseNoteVisuals.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BaseNoteVisuals.Awake
void GlobalNamespace::BaseNoteVisuals::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNoteVisuals.OnDestroy
void GlobalNamespace::BaseNoteVisuals::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BaseNoteVisuals.HandleNoteControllerDidInit
void GlobalNamespace::BaseNoteVisuals::HandleNoteControllerDidInit(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BaseNoteVisuals.HandleNoteControllerNoteDidStartDissolving
void GlobalNamespace::BaseNoteVisuals::HandleNoteControllerNoteDidStartDissolving(GlobalNamespace::NoteControllerBase* noteController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::HandleNoteControllerNoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, duration);
}
// Autogenerated method: BaseNoteVisuals.AnimateCutout
void GlobalNamespace::BaseNoteVisuals::AnimateCutout(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseNoteVisuals::AnimateCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombNoteController
#include "GlobalNamespace/BombNoteController.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BombNoteController.Init
void GlobalNamespace::BombNoteController::Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity);
}
// Autogenerated method: BombNoteController.HandleDidPassHalfJump
void GlobalNamespace::BombNoteController::HandleDidPassHalfJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::HandleDidPassHalfJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidPassHalfJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.HandleWasCutBySaber
void GlobalNamespace::BombNoteController::HandleWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::HandleWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: BombNoteController.set_hide
void GlobalNamespace::BombNoteController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::set_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BombNoteController.get_hide
bool GlobalNamespace::BombNoteController::get_hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::get_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.set_pause
void GlobalNamespace::BombNoteController::set_pause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::set_pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BombNoteController.Awake
void GlobalNamespace::BombNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.OnDestroy
void GlobalNamespace::BombNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.NoteDidPassMissedMarker
void GlobalNamespace::BombNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombNoteController.NoteDidStartDissolving
void GlobalNamespace::BombNoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombNoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorNoteVisuals
#include "GlobalNamespace/ColorNoteVisuals.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1925C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorId
int GlobalNamespace::ColorNoteVisuals::_get__colorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::_get__colorId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ColorNoteVisuals", "_colorId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorId
void GlobalNamespace::ColorNoteVisuals::_set__colorId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::_set__colorId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ColorNoteVisuals", "_colorId", value));
}
// Autogenerated method: ColorNoteVisuals.add_didInitEvent
void GlobalNamespace::ColorNoteVisuals::add_didInitEvent(System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.remove_didInitEvent
void GlobalNamespace::ColorNoteVisuals::remove_didInitEvent(System::Action_2<GlobalNamespace::ColorNoteVisuals*, GlobalNamespace::NoteControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.set_showArrow
void GlobalNamespace::ColorNoteVisuals::set_showArrow(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::set_showArrow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showArrow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.set_showCircle
void GlobalNamespace::ColorNoteVisuals::set_showCircle(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::set_showCircle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_showCircle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ColorNoteVisuals.Awake
void GlobalNamespace::ColorNoteVisuals::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorNoteVisuals.OnDestroy
void GlobalNamespace::ColorNoteVisuals::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerDidInit
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerDidInit(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerNoteDidPassJumpThreeQuarters
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidPassJumpThreeQuarters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: ColorNoteVisuals.HandleNoteControllerNoteDidStartDissolving
void GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving(GlobalNamespace::NoteControllerBase* noteController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::HandleNoteControllerNoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, duration);
}
// Autogenerated method: ColorNoteVisuals..cctor
void GlobalNamespace::ColorNoteVisuals::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorNoteVisuals::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorNoteVisuals", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisappearingArrowController
#include "GlobalNamespace/DisappearingArrowController.hpp"
// Including type: GameNoteController
#include "GlobalNamespace/GameNoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisappearingArrowController.get_gameNoteController
GlobalNamespace::GameNoteController* GlobalNamespace::DisappearingArrowController::get_gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisappearingArrowController::get_gameNoteController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameNoteController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameNoteController
#include "GlobalNamespace/GameNoteController.hpp"
// Including type: GameNoteController/Pool
#include "GlobalNamespace/GameNoteController_Pool.hpp"
// Including type: SaberSwingRatingCounter/Pool
#include "GlobalNamespace/SaberSwingRatingCounter_Pool.hpp"
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameNoteController.add_cubeNoteControllerDidInitEvent
void GlobalNamespace::GameNoteController::add_cubeNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::GameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::add_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameNoteController.remove_cubeNoteControllerDidInitEvent
void GlobalNamespace::GameNoteController::remove_cubeNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::GameNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::remove_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameNoteController.get_noteMovement
GlobalNamespace::NoteMovement* GlobalNamespace::GameNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.get_gameNoteType
GlobalNamespace::GameNoteController_GameNoteType GlobalNamespace::GameNoteController::get_gameNoteType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::get_gameNoteType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameNoteController_GameNoteType, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.Init
void GlobalNamespace::GameNoteController::Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, GlobalNamespace::GameNoteController_GameNoteType gameNoteType, float cutDirectionAngleOffset, float cutAngleTolerance, float uniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(gameNoteType), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset), ::il2cpp_utils::ExtractType(cutAngleTolerance), ::il2cpp_utils::ExtractType(uniformScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, gameNoteType, cutDirectionAngleOffset, cutAngleTolerance, uniformScale);
}
// Autogenerated method: GameNoteController.HandleBigWasCutBySaber
void GlobalNamespace::GameNoteController::HandleBigWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::HandleBigWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBigWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: GameNoteController.HandleSmallWasCutBySaber
void GlobalNamespace::GameNoteController::HandleSmallWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::HandleSmallWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSmallWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: GameNoteController.HandleCut
void GlobalNamespace::GameNoteController::HandleCut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec, bool allowBadCut) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::HandleCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec), ::il2cpp_utils::ExtractType(allowBadCut)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec, allowBadCut);
}
// Autogenerated method: GameNoteController.HandleSaberSwingRatingCounterDidFinish
void GlobalNamespace::GameNoteController::HandleSaberSwingRatingCounterDidFinish(GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::HandleSaberSwingRatingCounterDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberSwingRatingCounter);
}
// Autogenerated method: GameNoteController.INoteMirrorable.get_transform
UnityEngine::Transform* GlobalNamespace::GameNoteController::INoteMirrorable_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::INoteMirrorable.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INoteMirrorable.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.set_hide
void GlobalNamespace::GameNoteController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::set_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameNoteController.get_hide
bool GlobalNamespace::GameNoteController::get_hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::get_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.set_pause
void GlobalNamespace::GameNoteController::set_pause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::set_pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameNoteController.Awake
void GlobalNamespace::GameNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.OnDestroy
void GlobalNamespace::GameNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.NoteDidPassMissedMarker
void GlobalNamespace::GameNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.NoteDidStartDissolving
void GlobalNamespace::GameNoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameNoteController.NoteDidStartJump
void GlobalNamespace::GameNoteController::NoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::NoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameNoteController/Pool
#include "GlobalNamespace/GameNoteController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ICubeNoteMirrorable
#include "GlobalNamespace/ICubeNoteMirrorable.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: GameNoteController/GameNoteType
#include "GlobalNamespace/GameNoteController_GameNoteType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICubeNoteMirrorable.get_noteMovement
GlobalNamespace::NoteMovement* GlobalNamespace::ICubeNoteMirrorable::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICubeNoteMirrorable::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: ICubeNoteMirrorable.get_gameNoteType
GlobalNamespace::GameNoteController_GameNoteType GlobalNamespace::ICubeNoteMirrorable::get_gameNoteType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICubeNoteMirrorable::get_gameNoteType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameNoteController_GameNoteType, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ICubeNoteTypeProvider
#include "GlobalNamespace/ICubeNoteTypeProvider.hpp"
// Including type: GameNoteController/GameNoteType
#include "GlobalNamespace/GameNoteController_GameNoteType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ICubeNoteTypeProvider.get_gameNoteType
GlobalNamespace::GameNoteController_GameNoteType GlobalNamespace::ICubeNoteTypeProvider::get_gameNoteType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ICubeNoteTypeProvider::get_gameNoteType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameNoteController_GameNoteType, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteMirrorable
#include "GlobalNamespace/INoteMirrorable.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteMirrorable.get_transform
UnityEngine::Transform* GlobalNamespace::INoteMirrorable::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteMirrorable::get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: INoteMirrorable.get_noteTransform
UnityEngine::Transform* GlobalNamespace::INoteMirrorable::get_noteTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteMirrorable::get_noteTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: INoteMirrorable.get_noteData
GlobalNamespace::NoteData* GlobalNamespace::INoteMirrorable::get_noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteMirrorable::get_noteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(this, ___internal__method);
}
// Autogenerated method: INoteMirrorable.get_noteDidStartDissolvingEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* GlobalNamespace::INoteMirrorable::get_noteDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteMirrorable::get_noteDidStartDissolvingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteMovementProvider
#include "GlobalNamespace/INoteMovementProvider.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteMovementProvider.get_noteMovement
GlobalNamespace::NoteMovement* GlobalNamespace::INoteMovementProvider::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteMovementProvider::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredBombNoteController
#include "GlobalNamespace/MirroredBombNoteController.hpp"
// Including type: MirroredBombNoteController/Pool
#include "GlobalNamespace/MirroredBombNoteController_Pool.hpp"
// Including type: INoteMirrorable
#include "GlobalNamespace/INoteMirrorable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredBombNoteController/Pool
#include "GlobalNamespace/MirroredBombNoteController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredCubeNoteController
#include "GlobalNamespace/MirroredCubeNoteController.hpp"
// Including type: MirroredCubeNoteController/Pool
#include "GlobalNamespace/MirroredCubeNoteController_Pool.hpp"
// Including type: ICubeNoteMirrorable
#include "GlobalNamespace/ICubeNoteMirrorable.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: GameNoteController/GameNoteType
#include "GlobalNamespace/GameNoteController_GameNoteType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE193B4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorId
int GlobalNamespace::MirroredCubeNoteController::_get__colorId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::_get__colorId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MirroredCubeNoteController", "_colorId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorId
void GlobalNamespace::MirroredCubeNoteController::_set__colorId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::_set__colorId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MirroredCubeNoteController", "_colorId", value));
}
// Autogenerated method: MirroredCubeNoteController.add_cubeNoteControllerDidInitEvent
void GlobalNamespace::MirroredCubeNoteController::add_cubeNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::MirroredCubeNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::add_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MirroredCubeNoteController.remove_cubeNoteControllerDidInitEvent
void GlobalNamespace::MirroredCubeNoteController::remove_cubeNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::MirroredCubeNoteController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::remove_cubeNoteControllerDidInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_cubeNoteControllerDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MirroredCubeNoteController.get_noteMovement
GlobalNamespace::NoteMovement* GlobalNamespace::MirroredCubeNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: MirroredCubeNoteController.get_gameNoteType
GlobalNamespace::GameNoteController_GameNoteType GlobalNamespace::MirroredCubeNoteController::get_gameNoteType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::get_gameNoteType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameNoteController_GameNoteType, false>(this, ___internal__method);
}
// Autogenerated method: MirroredCubeNoteController.Mirror
void GlobalNamespace::MirroredCubeNoteController::Mirror(GlobalNamespace::ICubeNoteMirrorable* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::Mirror");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Mirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: MirroredCubeNoteController..cctor
void GlobalNamespace::MirroredCubeNoteController::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredCubeNoteController::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MirroredCubeNoteController", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredCubeNoteController/Pool
#include "GlobalNamespace/MirroredCubeNoteController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredDisappearingArrowController
#include "GlobalNamespace/MirroredDisappearingArrowController.hpp"
// Including type: MirroredCubeNoteController
#include "GlobalNamespace/MirroredCubeNoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MirroredDisappearingArrowController.get_gameNoteController
GlobalNamespace::MirroredCubeNoteController* GlobalNamespace::MirroredDisappearingArrowController::get_gameNoteController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredDisappearingArrowController::get_gameNoteController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MirroredCubeNoteController*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteController/<DissolveCoroutine>d__74
#include "GlobalNamespace/NoteController_-DissolveCoroutine-d__74.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: INoteControllerDidInitEvent
#include "GlobalNamespace/INoteControllerDidInitEvent.hpp"
// Including type: INoteControllerNoteDidStartJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidStartJumpEvent.hpp"
// Including type: INoteControllerNoteDidFinishJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidFinishJumpEvent.hpp"
// Including type: INoteControllerNoteDidPassJumpThreeQuartersEvent
#include "GlobalNamespace/INoteControllerNoteDidPassJumpThreeQuartersEvent.hpp"
// Including type: INoteControllerNoteWasCutEvent
#include "GlobalNamespace/INoteControllerNoteWasCutEvent.hpp"
// Including type: INoteControllerNoteWasMissedEvent
#include "GlobalNamespace/INoteControllerNoteWasMissedEvent.hpp"
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
// Including type: INoteControllerNoteDidDissolveEvent
#include "GlobalNamespace/INoteControllerNoteDidDissolveEvent.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteController.get_noteDidStartJumpEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* GlobalNamespace::NoteController::get_noteDidStartJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidFinishJumpEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* GlobalNamespace::NoteController::get_noteDidFinishJumpEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteWasCutEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasCutEvent*>* GlobalNamespace::NoteController::get_noteWasCutEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasCutEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteWasMissedEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasMissedEvent*>* GlobalNamespace::NoteController::get_noteWasMissedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasMissedEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidDissolveEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* GlobalNamespace::NoteController::get_noteDidDissolveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteDidDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteTransform
UnityEngine::Transform* GlobalNamespace::NoteController::get_noteTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_worldRotation
UnityEngine::Quaternion GlobalNamespace::NoteController::get_worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_worldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_inverseWorldRotation
UnityEngine::Quaternion GlobalNamespace::NoteController::get_inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_inverseWorldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inverseWorldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_moveStartTime
float GlobalNamespace::NoteController::get_moveStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_moveStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_moveDuration
float GlobalNamespace::NoteController::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_jumpDuration
float GlobalNamespace::NoteController::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_jumpMoveVec
UnityEngine::Vector3 GlobalNamespace::NoteController::get_jumpMoveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_jumpMoveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpMoveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_beatPos
UnityEngine::Vector3 GlobalNamespace::NoteController::get_beatPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_beatPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_jumpStartPos
UnityEngine::Vector3 GlobalNamespace::NoteController::get_jumpStartPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_jumpStartPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpStartPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_moveVec
UnityEngine::Vector3 GlobalNamespace::NoteController::get_moveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_moveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_uniformScale
float GlobalNamespace::NoteController::get_uniformScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_uniformScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_uniformScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.set_hide
void GlobalNamespace::NoteController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::set_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteController.get_hide
bool GlobalNamespace::NoteController::get_hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.set_pause
void GlobalNamespace::NoteController::set_pause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::set_pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteController.Awake
void GlobalNamespace::NoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.OnDestroy
void GlobalNamespace::NoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.Update
void GlobalNamespace::NoteController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.ManualUpdate
void GlobalNamespace::NoteController::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.HandleNoteDidStartJump
void GlobalNamespace::NoteController::HandleNoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::HandleNoteDidStartJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.HandleNoteDidFinishJump
void GlobalNamespace::NoteController::HandleNoteDidFinishJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::HandleNoteDidFinishJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.HandleNoteDidPassJumpThreeQuarters
void GlobalNamespace::NoteController::HandleNoteDidPassJumpThreeQuarters(GlobalNamespace::NoteMovement* noteMovement) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::HandleNoteDidPassJumpThreeQuarters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteMovement)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteMovement);
}
// Autogenerated method: NoteController.HandleNoteDidPassMissedMarkerEvent
void GlobalNamespace::NoteController::HandleNoteDidPassMissedMarkerEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::HandleNoteDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidStartJump
void GlobalNamespace::NoteController::NoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::NoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidFinishJump
void GlobalNamespace::NoteController::NoteDidFinishJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::NoteDidFinishJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidPassJumpThreeQuarters
void GlobalNamespace::NoteController::NoteDidPassJumpThreeQuarters(GlobalNamespace::NoteMovement* noteMovement) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::NoteDidPassJumpThreeQuarters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteMovement)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteMovement);
}
// Autogenerated method: NoteController.NoteDidPassMissedMarker
void GlobalNamespace::NoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.NoteDidStartDissolving
void GlobalNamespace::NoteController::NoteDidStartDissolving() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::NoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.SendNoteWasMissedEvent
void GlobalNamespace::NoteController::SendNoteWasMissedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::SendNoteWasMissedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNoteWasMissedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.SendNoteWasCutEvent
void GlobalNamespace::NoteController::SendNoteWasCutEvent(GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::SendNoteWasCutEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNoteWasCutEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo);
}
// Autogenerated method: NoteController.Init
void GlobalNamespace::NoteController::Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float endRotation, float uniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(endRotation), ::il2cpp_utils::ExtractType(uniformScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, endRotation, uniformScale);
}
// Autogenerated method: NoteController.DissolveCoroutine
System::Collections::IEnumerator* GlobalNamespace::NoteController::DissolveCoroutine(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::DissolveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, duration);
}
// Autogenerated method: NoteController.Dissolve
void GlobalNamespace::NoteController::Dissolve(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::Dissolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: NoteController.INoteMirrorable.get_transform
UnityEngine::Transform* GlobalNamespace::NoteController::INoteMirrorable_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::INoteMirrorable.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INoteMirrorable.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_didInitEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>* GlobalNamespace::NoteController::get_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidPassJumpThreeQuartersEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* GlobalNamespace::NoteController::get_noteDidPassJumpThreeQuartersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteDidPassJumpThreeQuartersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteDidStartDissolvingEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* GlobalNamespace::NoteController::get_noteDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteDidStartDissolvingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController.get_noteData
GlobalNamespace::NoteData* GlobalNamespace::NoteController::get_noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::get_noteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteController/<DissolveCoroutine>d__74
#include "GlobalNamespace/NoteController_-DissolveCoroutine-d__74.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteController/<DissolveCoroutine>d__74.System.IDisposable.Dispose
void GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__74.MoveNext
bool GlobalNamespace::NoteController::$DissolveCoroutine$d__74::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::$DissolveCoroutine$d__74::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__74.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__74.System.Collections.IEnumerator.Reset
void GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteController/<DissolveCoroutine>d__74.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::$DissolveCoroutine$d__74::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerDidInitEvent
#include "GlobalNamespace/INoteControllerDidInitEvent.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerDidInitEvent.HandleNoteControllerDidInit
void GlobalNamespace::INoteControllerDidInitEvent::HandleNoteControllerDidInit(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerDidInitEvent::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidStartJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidStartJumpEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidStartJumpEvent.HandleNoteControllerNoteDidStartJump
void GlobalNamespace::INoteControllerNoteDidStartJumpEvent::HandleNoteControllerNoteDidStartJump(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerNoteDidStartJumpEvent::HandleNoteControllerNoteDidStartJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidFinishJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidFinishJumpEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidFinishJumpEvent.HandleNoteControllerNoteDidFinishJump
void GlobalNamespace::INoteControllerNoteDidFinishJumpEvent::HandleNoteControllerNoteDidFinishJump(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerNoteDidFinishJumpEvent::HandleNoteControllerNoteDidFinishJump");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidFinishJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidPassJumpThreeQuartersEvent
#include "GlobalNamespace/INoteControllerNoteDidPassJumpThreeQuartersEvent.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidPassJumpThreeQuartersEvent.HandleNoteControllerNoteDidPassJumpThreeQuarters
void GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent::HandleNoteControllerNoteDidPassJumpThreeQuarters(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent::HandleNoteControllerNoteDidPassJumpThreeQuarters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteWasCutEvent
#include "GlobalNamespace/INoteControllerNoteWasCutEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
void GlobalNamespace::INoteControllerNoteWasCutEvent::HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerNoteWasCutEvent::HandleNoteControllerNoteWasCut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteWasMissedEvent
#include "GlobalNamespace/INoteControllerNoteWasMissedEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteWasMissedEvent.HandleNoteControllerNoteWasMissed
void GlobalNamespace::INoteControllerNoteWasMissedEvent::HandleNoteControllerNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerNoteWasMissedEvent::HandleNoteControllerNoteWasMissed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidStartDissolvingEvent.HandleNoteControllerNoteDidStartDissolving
void GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent::HandleNoteControllerNoteDidStartDissolving(GlobalNamespace::NoteControllerBase* noteController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent::HandleNoteControllerNoteDidStartDissolving");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteControllerNoteDidDissolveEvent
#include "GlobalNamespace/INoteControllerNoteDidDissolveEvent.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteControllerNoteDidDissolveEvent.HandleNoteControllerNoteDidDissolve
void GlobalNamespace::INoteControllerNoteDidDissolveEvent::HandleNoteControllerNoteDidDissolve(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteControllerNoteDidDissolveEvent::HandleNoteControllerNoteDidDissolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerNoteDidDissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: INoteControllerDidInitEvent
#include "GlobalNamespace/INoteControllerDidInitEvent.hpp"
// Including type: INoteControllerNoteDidPassJumpThreeQuartersEvent
#include "GlobalNamespace/INoteControllerNoteDidPassJumpThreeQuartersEvent.hpp"
// Including type: INoteControllerNoteDidStartDissolvingEvent
#include "GlobalNamespace/INoteControllerNoteDidStartDissolvingEvent.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteControllerBase.get_didInitEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>* GlobalNamespace::NoteControllerBase::get_didInitEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteControllerBase::get_didInitEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteControllerBase.get_noteDidPassJumpThreeQuartersEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* GlobalNamespace::NoteControllerBase::get_noteDidPassJumpThreeQuartersEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteControllerBase::get_noteDidPassJumpThreeQuartersEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteControllerBase.get_noteDidStartDissolvingEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* GlobalNamespace::NoteControllerBase::get_noteDidStartDissolvingEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteControllerBase::get_noteDidStartDissolvingEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteControllerBase.get_noteData
GlobalNamespace::NoteData* GlobalNamespace::NoteControllerBase::get_noteData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteControllerBase::get_noteData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteData*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteDebrisDidFinishEvent
#include "GlobalNamespace/INoteDebrisDidFinishEvent.hpp"
// Including type: NoteDebris
#include "GlobalNamespace/NoteDebris.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteDebrisDidFinishEvent.HandleNoteDebrisDidFinish
void GlobalNamespace::INoteDebrisDidFinishEvent::HandleNoteDebrisDidFinish(GlobalNamespace::NoteDebris* noteDebris) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteDebrisDidFinishEvent::HandleNoteDebrisDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDebrisDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteDebris)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteDebris);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteDebris
#include "GlobalNamespace/NoteDebris.hpp"
// Including type: NoteDebris/Pool
#include "GlobalNamespace/NoteDebris_Pool.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: NoteDebrisPhysics
#include "GlobalNamespace/NoteDebrisPhysics.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: INoteDebrisDidFinishEvent
#include "GlobalNamespace/INoteDebrisDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE194C4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutPropertyID
int GlobalNamespace::NoteDebris::_get__cutoutPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_get__cutoutPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_cutoutPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutPropertyID
void GlobalNamespace::NoteDebris::_set__cutoutPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_set__cutoutPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_cutoutPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE194D4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::NoteDebris::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::NoteDebris::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE194E4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutPlaneID
int GlobalNamespace::NoteDebris::_get__cutPlaneID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_get__cutPlaneID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_cutPlaneID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutPlaneID
void GlobalNamespace::NoteDebris::_set__cutPlaneID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_set__cutPlaneID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_cutPlaneID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE194F4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutTexOffsetID
int GlobalNamespace::NoteDebris::_get__cutoutTexOffsetID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_get__cutoutTexOffsetID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteDebris", "_cutoutTexOffsetID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutTexOffsetID
void GlobalNamespace::NoteDebris::_set__cutoutTexOffsetID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_set__cutoutTexOffsetID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_cutoutTexOffsetID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19504
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3[] _meshVertices
::Array<UnityEngine::Vector3>* GlobalNamespace::NoteDebris::_get__meshVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_get__meshVertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("", "NoteDebris", "_meshVertices"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3[] _meshVertices
void GlobalNamespace::NoteDebris::_set__meshVertices(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::_set__meshVertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebris", "_meshVertices", value));
}
// Autogenerated method: NoteDebris.get_didFinishEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteDebrisDidFinishEvent*>* GlobalNamespace::NoteDebris::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteDebrisDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebris.Awake
void GlobalNamespace::NoteDebris::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebris.Update
void GlobalNamespace::NoteDebris::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebris.Init
void GlobalNamespace::NoteDebris::Init(GlobalNamespace::ColorType colorType, UnityEngine::Vector3 notePos, UnityEngine::Quaternion noteRot, UnityEngine::Vector3 noteMoveVec, UnityEngine::Vector3 noteScale, UnityEngine::Vector3 positionOffset, UnityEngine::Quaternion rotationOffset, UnityEngine::Vector3 cutPoint, UnityEngine::Vector3 cutNormal, UnityEngine::Vector3 force, UnityEngine::Vector3 torque, float lifeTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(notePos), ::il2cpp_utils::ExtractType(noteRot), ::il2cpp_utils::ExtractType(noteMoveVec), ::il2cpp_utils::ExtractType(noteScale), ::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(cutNormal), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque), ::il2cpp_utils::ExtractType(lifeTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorType, notePos, noteRot, noteMoveVec, noteScale, positionOffset, rotationOffset, cutPoint, cutNormal, force, torque, lifeTime);
}
// Autogenerated method: NoteDebris..cctor
void GlobalNamespace::NoteDebris::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebris::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "NoteDebris", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebris/Pool
#include "GlobalNamespace/NoteDebris_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisPhysics
#include "GlobalNamespace/NoteDebrisPhysics.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteDebrisPhysics.get_position
UnityEngine::Vector3 GlobalNamespace::NoteDebrisPhysics::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisPhysics::get_position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisPhysics.Init
void GlobalNamespace::NoteDebrisPhysics::Init(UnityEngine::Vector3 force, UnityEngine::Vector3 torque) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisPhysics::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force, torque);
}
// Autogenerated method: NoteDebrisPhysics.AddVelocity
void GlobalNamespace::NoteDebrisPhysics::AddVelocity(UnityEngine::Vector3 force) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisPhysics::AddVelocity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisRigidbodyPhysics
#include "GlobalNamespace/NoteDebrisRigidbodyPhysics.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: NoteDebrisSimplePhysics
#include "GlobalNamespace/NoteDebrisSimplePhysics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteDebrisRigidbodyPhysics.FixedUpdate
void GlobalNamespace::NoteDebrisRigidbodyPhysics::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisRigidbodyPhysics::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisRigidbodyPhysics.get_position
UnityEngine::Vector3 GlobalNamespace::NoteDebrisRigidbodyPhysics::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisRigidbodyPhysics::get_position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisRigidbodyPhysics.Init
void GlobalNamespace::NoteDebrisRigidbodyPhysics::Init(UnityEngine::Vector3 force, UnityEngine::Vector3 torque) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisRigidbodyPhysics::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force, torque);
}
// Autogenerated method: NoteDebrisRigidbodyPhysics.AddVelocity
void GlobalNamespace::NoteDebrisRigidbodyPhysics::AddVelocity(UnityEngine::Vector3 force) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisRigidbodyPhysics::AddVelocity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisSimplePhysics
#include "GlobalNamespace/NoteDebrisSimplePhysics.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteDebrisSimplePhysics.Start
void GlobalNamespace::NoteDebrisSimplePhysics::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSimplePhysics::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisSimplePhysics.LateUpdate
void GlobalNamespace::NoteDebrisSimplePhysics::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSimplePhysics::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisSimplePhysics.get_position
UnityEngine::Vector3 GlobalNamespace::NoteDebrisSimplePhysics::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSimplePhysics::get_position");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteDebrisSimplePhysics.Init
void GlobalNamespace::NoteDebrisSimplePhysics::Init(UnityEngine::Vector3 force, UnityEngine::Vector3 torque) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSimplePhysics::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(torque)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force, torque);
}
// Autogenerated method: NoteDebrisSimplePhysics.AddVelocity
void GlobalNamespace::NoteDebrisSimplePhysics::AddVelocity(UnityEngine::Vector3 force) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSimplePhysics::AddVelocity");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteFloorMovement
#include "GlobalNamespace/NoteFloorMovement.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteFloorMovement.add_floorMovementDidFinishEvent
void GlobalNamespace::NoteFloorMovement::add_floorMovementDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::add_floorMovementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_floorMovementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteFloorMovement.remove_floorMovementDidFinishEvent
void GlobalNamespace::NoteFloorMovement::remove_floorMovementDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::remove_floorMovementDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_floorMovementDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteFloorMovement.get_distanceToPlayer
float GlobalNamespace::NoteFloorMovement::get_distanceToPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_distanceToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distanceToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_startPos
UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::get_startPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_startPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_endPos
UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::get_endPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_endPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_endPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_startTime
float GlobalNamespace::NoteFloorMovement::get_startTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_startTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_startTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_moveDuration
float GlobalNamespace::NoteFloorMovement::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_worldRotation
UnityEngine::Quaternion GlobalNamespace::NoteFloorMovement::get_worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_worldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_inverseWorldRotation
UnityEngine::Quaternion GlobalNamespace::NoteFloorMovement::get_inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_inverseWorldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inverseWorldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.get_localPosition
UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::get_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::get_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.Init
void GlobalNamespace::NoteFloorMovement::Init(float worldRotation, UnityEngine::Vector3 startPos, UnityEngine::Vector3 endPos, float moveDuration, float startTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(startTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldRotation, startPos, endPos, moveDuration, startTime);
}
// Autogenerated method: NoteFloorMovement.SetToStart
UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::SetToStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::SetToStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteFloorMovement.ManualUpdate
UnityEngine::Vector3 GlobalNamespace::NoteFloorMovement::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteFloorMovement::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteJump
#include "GlobalNamespace/NoteJump.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: PlayerSpaceConvertor
#include "GlobalNamespace/PlayerSpaceConvertor.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMissedTimeOffset
float GlobalNamespace::NoteJump::_get_kMissedTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::_get_kMissedTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteJump", "kMissedTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMissedTimeOffset
void GlobalNamespace::NoteJump::_set_kMissedTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::_set_kMissedTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteJump", "kMissedTimeOffset", value));
}
// Autogenerated method: NoteJump.add_noteJumpDidFinishEvent
void GlobalNamespace::NoteJump::add_noteJumpDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::add_noteJumpDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidFinishEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::remove_noteJumpDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidPassMissedMarkerEvent
void GlobalNamespace::NoteJump::add_noteJumpDidPassMissedMarkerEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::add_noteJumpDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidPassMissedMarkerEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidPassMissedMarkerEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::remove_noteJumpDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidPassThreeQuartersEvent
void GlobalNamespace::NoteJump::add_noteJumpDidPassThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteJump*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::add_noteJumpDidPassThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidPassThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidPassThreeQuartersEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidPassThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteJump*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::remove_noteJumpDidPassThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidPassThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidPassHalfEvent
void GlobalNamespace::NoteJump::add_noteJumpDidPassHalfEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::add_noteJumpDidPassHalfEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidPassHalfEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidPassHalfEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidPassHalfEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::remove_noteJumpDidPassHalfEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidPassHalfEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.add_noteJumpDidUpdateProgressEvent
void GlobalNamespace::NoteJump::add_noteJumpDidUpdateProgressEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::add_noteJumpDidUpdateProgressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteJumpDidUpdateProgressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.remove_noteJumpDidUpdateProgressEvent
void GlobalNamespace::NoteJump::remove_noteJumpDidUpdateProgressEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::remove_noteJumpDidUpdateProgressEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteJumpDidUpdateProgressEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteJump.get_distanceToPlayer
float GlobalNamespace::NoteJump::get_distanceToPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::get_distanceToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distanceToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_beatPos
UnityEngine::Vector3 GlobalNamespace::NoteJump::get_beatPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::get_beatPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_jumpDuration
float GlobalNamespace::NoteJump::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_moveVec
UnityEngine::Vector3 GlobalNamespace::NoteJump::get_moveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::get_moveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.get_localPosition
UnityEngine::Vector3 GlobalNamespace::NoteJump::get_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::get_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteJump.Init
void GlobalNamespace::NoteJump::Init(float beatTime, float worldRotation, UnityEngine::Vector3 startPos, UnityEngine::Vector3 endPos, float jumpDuration, float gravity, float flipYSide, float endRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatTime), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(gravity), ::il2cpp_utils::ExtractType(flipYSide), ::il2cpp_utils::ExtractType(endRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatTime, worldRotation, startPos, endPos, jumpDuration, gravity, flipYSide, endRotation);
}
// Autogenerated method: NoteJump.ManualUpdate
UnityEngine::Vector3 GlobalNamespace::NoteJump::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJump::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteJumpStartScaleUp
#include "GlobalNamespace/NoteJumpStartScaleUp.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteJump
#include "GlobalNamespace/NoteJump.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteJumpStartScaleUp.Awake
void GlobalNamespace::NoteJumpStartScaleUp::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJumpStartScaleUp::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteJumpStartScaleUp.OnDestroy
void GlobalNamespace::NoteJumpStartScaleUp::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJumpStartScaleUp::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteJumpStartScaleUp.UpdateScale
void GlobalNamespace::NoteJumpStartScaleUp::UpdateScale(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJumpStartScaleUp::UpdateScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, progress);
}
// Autogenerated method: NoteJumpStartScaleUp.HandleNoteJumpDidUpdateProgress
void GlobalNamespace::NoteJumpStartScaleUp::HandleNoteJumpDidUpdateProgress(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJumpStartScaleUp::HandleNoteJumpDidUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, progress);
}
// Autogenerated method: NoteJumpStartScaleUp.HandleNoteControllerDidInit
void GlobalNamespace::NoteJumpStartScaleUp::HandleNoteControllerDidInit(GlobalNamespace::NoteControllerBase* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteJumpStartScaleUp::HandleNoteControllerDidInit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteLineConnectionController
#include "GlobalNamespace/NoteLineConnectionController.hpp"
// Including type: NoteLineConnectionController/Pool
#include "GlobalNamespace/NoteLineConnectionController_Pool.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteLineConnectionController.add_didFinishEvent
void GlobalNamespace::NoteLineConnectionController::add_didFinishEvent(System::Action_1<GlobalNamespace::NoteLineConnectionController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineConnectionController::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteLineConnectionController.remove_didFinishEvent
void GlobalNamespace::NoteLineConnectionController::remove_didFinishEvent(System::Action_1<GlobalNamespace::NoteLineConnectionController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineConnectionController::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteLineConnectionController.Setup
void GlobalNamespace::NoteLineConnectionController::Setup(GlobalNamespace::NoteController* noteController0, GlobalNamespace::NoteController* noteController1, float fadeOutStartDistance, float fadeOutEndDistance, float noteTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineConnectionController::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController0), ::il2cpp_utils::ExtractType(noteController1), ::il2cpp_utils::ExtractType(fadeOutStartDistance), ::il2cpp_utils::ExtractType(fadeOutEndDistance), ::il2cpp_utils::ExtractType(noteTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController0, noteController1, fadeOutStartDistance, fadeOutEndDistance, noteTime);
}
// Autogenerated method: NoteLineConnectionController.Update
void GlobalNamespace::NoteLineConnectionController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineConnectionController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteLineConnectionController.UpdatePositionsAndColors
void GlobalNamespace::NoteLineConnectionController::UpdatePositionsAndColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteLineConnectionController::UpdatePositionsAndColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePositionsAndColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteLineConnectionController/Pool
#include "GlobalNamespace/NoteLineConnectionController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteFloorMovement
#include "GlobalNamespace/NoteFloorMovement.hpp"
// Including type: NoteJump
#include "GlobalNamespace/NoteJump.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteMovement.add_didInitEvent
void GlobalNamespace::NoteMovement::add_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_didInitEvent
void GlobalNamespace::NoteMovement::remove_didInitEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidStartJumpEvent
void GlobalNamespace::NoteMovement::add_noteDidStartJumpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::add_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidStartJumpEvent
void GlobalNamespace::NoteMovement::remove_noteDidStartJumpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::remove_noteDidStartJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidFinishJumpEvent
void GlobalNamespace::NoteMovement::add_noteDidFinishJumpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::add_noteDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidFinishJumpEvent
void GlobalNamespace::NoteMovement::remove_noteDidFinishJumpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::remove_noteDidFinishJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidFinishJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidPassMissedMarkerEvent
void GlobalNamespace::NoteMovement::add_noteDidPassMissedMarkerEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::add_noteDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidPassMissedMarkerEvent
void GlobalNamespace::NoteMovement::remove_noteDidPassMissedMarkerEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::remove_noteDidPassMissedMarkerEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidPassHalfJumpEvent
void GlobalNamespace::NoteMovement::add_noteDidPassHalfJumpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::add_noteDidPassHalfJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidPassHalfJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidPassHalfJumpEvent
void GlobalNamespace::NoteMovement::remove_noteDidPassHalfJumpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::remove_noteDidPassHalfJumpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidPassHalfJumpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidPassJumpThreeQuartersEvent
void GlobalNamespace::NoteMovement::add_noteDidPassJumpThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteMovement*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::add_noteDidPassJumpThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidPassJumpThreeQuartersEvent
void GlobalNamespace::NoteMovement::remove_noteDidPassJumpThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteMovement*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::remove_noteDidPassJumpThreeQuartersEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.add_noteDidMoveInJumpPhaseEvent
void GlobalNamespace::NoteMovement::add_noteDidMoveInJumpPhaseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::add_noteDidMoveInJumpPhaseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_noteDidMoveInJumpPhaseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.remove_noteDidMoveInJumpPhaseEvent
void GlobalNamespace::NoteMovement::remove_noteDidMoveInJumpPhaseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::remove_noteDidMoveInJumpPhaseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_noteDidMoveInJumpPhaseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.get_movementPhase
GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::get_movementPhase() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_movementPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_movementPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteMovement::MovementPhase, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.set_movementPhase
void GlobalNamespace::NoteMovement::set_movementPhase(GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::set_movementPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_movementPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteMovement.get_position
UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_prevPosition
UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_prevPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_prevPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_localPosition
UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_localPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_localPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_prevLocalPosition
UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_prevLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_prevLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_prevLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_worldRotation
UnityEngine::Quaternion GlobalNamespace::NoteMovement::get_worldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_worldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_worldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_inverseWorldRotation
UnityEngine::Quaternion GlobalNamespace::NoteMovement::get_inverseWorldRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_inverseWorldRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inverseWorldRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_moveEndPos
UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_moveEndPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_moveEndPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveEndPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_moveStartTime
float GlobalNamespace::NoteMovement::get_moveStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_moveStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_moveDuration
float GlobalNamespace::NoteMovement::get_moveDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_moveDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_moveDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_beatPos
UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_beatPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_beatPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_jumpDuration
float GlobalNamespace::NoteMovement::get_jumpDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_jumpDuration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDuration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_jumpMoveVec
UnityEngine::Vector3 GlobalNamespace::NoteMovement::get_jumpMoveVec() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_jumpMoveVec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpMoveVec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.get_distanceToPlayer
float GlobalNamespace::NoteMovement::get_distanceToPlayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::get_distanceToPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distanceToPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.Init
void GlobalNamespace::NoteMovement::Init(float beatTime, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float flipYSide, float endRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatTime), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(flipYSide), ::il2cpp_utils::ExtractType(endRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatTime, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, flipYSide, endRotation);
}
// Autogenerated method: NoteMovement.Awake
void GlobalNamespace::NoteMovement::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.OnDestroy
void GlobalNamespace::NoteMovement::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleFloorMovementDidFinish
void GlobalNamespace::NoteMovement::HandleFloorMovementDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::HandleFloorMovementDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFloorMovementDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleNoteJumpDidFinish
void GlobalNamespace::NoteMovement::HandleNoteJumpDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::HandleNoteJumpDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleNoteJumpDidPassMissedMark
void GlobalNamespace::NoteMovement::HandleNoteJumpDidPassMissedMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::HandleNoteJumpDidPassMissedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidPassMissedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.HandleNoteJumpDidPassThreeQuarters
void GlobalNamespace::NoteMovement::HandleNoteJumpDidPassThreeQuarters(GlobalNamespace::NoteJump* noteJump) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::HandleNoteJumpDidPassThreeQuarters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpDidPassThreeQuarters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteJump)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteJump);
}
// Autogenerated method: NoteMovement.HandleNoteJumpNoteJumpDidPassHalf
void GlobalNamespace::NoteMovement::HandleNoteJumpNoteJumpDidPassHalf() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::HandleNoteJumpNoteJumpDidPassHalf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteJumpNoteJumpDidPassHalf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteMovement.ManualUpdate
void GlobalNamespace::NoteMovement::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteMovement/MovementPhase
#include "GlobalNamespace/NoteMovement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NoteMovement/MovementPhase None
GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::MovementPhase::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::MovementPhase::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteMovement::MovementPhase>("", "NoteMovement/MovementPhase", "None"));
}
// Autogenerated static field setter
// Set static field: static public NoteMovement/MovementPhase None
void GlobalNamespace::NoteMovement::MovementPhase::_set_None(GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::MovementPhase::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteMovement/MovementPhase", "None", value));
}
// Autogenerated static field getter
// Get static field: static public NoteMovement/MovementPhase MovingOnTheFloor
GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::MovementPhase::_get_MovingOnTheFloor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::MovementPhase::_get_MovingOnTheFloor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteMovement::MovementPhase>("", "NoteMovement/MovementPhase", "MovingOnTheFloor"));
}
// Autogenerated static field setter
// Set static field: static public NoteMovement/MovementPhase MovingOnTheFloor
void GlobalNamespace::NoteMovement::MovementPhase::_set_MovingOnTheFloor(GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::MovementPhase::_set_MovingOnTheFloor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteMovement/MovementPhase", "MovingOnTheFloor", value));
}
// Autogenerated static field getter
// Get static field: static public NoteMovement/MovementPhase Jumping
GlobalNamespace::NoteMovement::MovementPhase GlobalNamespace::NoteMovement::MovementPhase::_get_Jumping() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::MovementPhase::_get_Jumping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::NoteMovement::MovementPhase>("", "NoteMovement/MovementPhase", "Jumping"));
}
// Autogenerated static field setter
// Set static field: static public NoteMovement/MovementPhase Jumping
void GlobalNamespace::NoteMovement::MovementPhase::_set_Jumping(GlobalNamespace::NoteMovement::MovementPhase value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteMovement::MovementPhase::_set_Jumping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteMovement/MovementPhase", "Jumping", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ProModeTrailingCollidersController
#include "GlobalNamespace/ProModeTrailingCollidersController.hpp"
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ProModeTrailingCollidersController.Start
void GlobalNamespace::ProModeTrailingCollidersController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProModeTrailingCollidersController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ProModeTrailingCollidersController.OnDestroy
void GlobalNamespace::ProModeTrailingCollidersController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProModeTrailingCollidersController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ProModeTrailingCollidersController.HandleNoteDidMoveInJumpPhase
void GlobalNamespace::ProModeTrailingCollidersController::HandleNoteDidMoveInJumpPhase() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ProModeTrailingCollidersController::HandleNoteDidMoveInJumpPhase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidMoveInJumpPhase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialNoteController
#include "GlobalNamespace/TutorialNoteController.hpp"
// Including type: TutorialNoteController/Pool
#include "GlobalNamespace/TutorialNoteController_Pool.hpp"
// Including type: BoxCuttableBySaber
#include "GlobalNamespace/BoxCuttableBySaber.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: GameNoteController/GameNoteType
#include "GlobalNamespace/GameNoteController_GameNoteType.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialNoteController.get_noteMovement
GlobalNamespace::NoteMovement* GlobalNamespace::TutorialNoteController::get_noteMovement() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::get_noteMovement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noteMovement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteMovement*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.get_gameNoteType
GlobalNamespace::GameNoteController_GameNoteType GlobalNamespace::TutorialNoteController::get_gameNoteType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::get_gameNoteType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameNoteType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameNoteController_GameNoteType, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.Init
void GlobalNamespace::TutorialNoteController::Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float cutDirectionAngleOffset, float cutAngleTolerance, float uniformScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(moveStartPos), ::il2cpp_utils::ExtractType(moveEndPos), ::il2cpp_utils::ExtractType(jumpEndPos), ::il2cpp_utils::ExtractType(moveDuration), ::il2cpp_utils::ExtractType(jumpDuration), ::il2cpp_utils::ExtractType(jumpGravity), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset), ::il2cpp_utils::ExtractType(cutAngleTolerance), ::il2cpp_utils::ExtractType(uniformScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, cutDirectionAngleOffset, cutAngleTolerance, uniformScale);
}
// Autogenerated method: TutorialNoteController.HandleBeforeNoteWasCutBySaber
void GlobalNamespace::TutorialNoteController::HandleBeforeNoteWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::HandleBeforeNoteWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeforeNoteWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: TutorialNoteController.HandleCoreWasCutBySaber
void GlobalNamespace::TutorialNoteController::HandleCoreWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::HandleCoreWasCutBySaber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCoreWasCutBySaber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(orientation), ::il2cpp_utils::ExtractType(cutDirVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saber, cutPoint, orientation, cutDirVec);
}
// Autogenerated method: TutorialNoteController.INoteMirrorable.get_transform
UnityEngine::Transform* GlobalNamespace::TutorialNoteController::INoteMirrorable_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::INoteMirrorable.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "INoteMirrorable.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.set_hide
void GlobalNamespace::TutorialNoteController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::set_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialNoteController.get_hide
bool GlobalNamespace::TutorialNoteController::get_hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::get_hide");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.set_pause
void GlobalNamespace::TutorialNoteController::set_pause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::set_pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TutorialNoteController.Awake
void GlobalNamespace::TutorialNoteController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::Awake");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.OnDestroy
void GlobalNamespace::TutorialNoteController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialNoteController.NoteDidPassMissedMarker
void GlobalNamespace::TutorialNoteController::NoteDidPassMissedMarker() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialNoteController::NoteDidPassMissedMarker");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteDidPassMissedMarker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialNoteController/Pool
#include "GlobalNamespace/TutorialNoteController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredObstacleController
#include "GlobalNamespace/MirroredObstacleController.hpp"
// Including type: MirroredObstacleController/Pool
#include "GlobalNamespace/MirroredObstacleController_Pool.hpp"
// Including type: StretchableObstacle
#include "GlobalNamespace/StretchableObstacle.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MirroredObstacleController.set_hide
void GlobalNamespace::MirroredObstacleController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MirroredObstacleController.Awake
void GlobalNamespace::MirroredObstacleController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.OnDestroy
void GlobalNamespace::MirroredObstacleController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.Update
void GlobalNamespace::MirroredObstacleController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.RemoveListeners
void GlobalNamespace::MirroredObstacleController::RemoveListeners() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::RemoveListeners");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.UpdatePositionAndRotation
void GlobalNamespace::MirroredObstacleController::UpdatePositionAndRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::UpdatePositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MirroredObstacleController.Mirror
void GlobalNamespace::MirroredObstacleController::Mirror(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::Mirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Mirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: MirroredObstacleController.HandleDidStartDissolving
void GlobalNamespace::MirroredObstacleController::HandleDidStartDissolving(GlobalNamespace::ObstacleControllerBase* obstacleController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirroredObstacleController::HandleDidStartDissolving");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidStartDissolving", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MirroredObstacleController/Pool
#include "GlobalNamespace/MirroredObstacleController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
// Including type: ObstacleController/<DissolveCoroutine>d__69
#include "GlobalNamespace/ObstacleController_-DissolveCoroutine-d__69.hpp"
// Including type: StretchableObstacle
#include "GlobalNamespace/StretchableObstacle.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kAvoidMarkTimeOffset
float GlobalNamespace::ObstacleController::_get_kAvoidMarkTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::_get_kAvoidMarkTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ObstacleController", "kAvoidMarkTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kAvoidMarkTimeOffset
void GlobalNamespace::ObstacleController::_set_kAvoidMarkTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::_set_kAvoidMarkTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleController", "kAvoidMarkTimeOffset", value));
}
// Autogenerated method: ObstacleController.add_finishedMovementEvent
void GlobalNamespace::ObstacleController::add_finishedMovementEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::add_finishedMovementEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_finishedMovementEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_finishedMovementEvent
void GlobalNamespace::ObstacleController::remove_finishedMovementEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::remove_finishedMovementEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_finishedMovementEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_passedThreeQuartersOfMove2Event
void GlobalNamespace::ObstacleController::add_passedThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::add_passedThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_passedThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_passedThreeQuartersOfMove2Event
void GlobalNamespace::ObstacleController::remove_passedThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::remove_passedThreeQuartersOfMove2Event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_passedThreeQuartersOfMove2Event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_passedAvoidedMarkEvent
void GlobalNamespace::ObstacleController::add_passedAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::add_passedAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_passedAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_passedAvoidedMarkEvent
void GlobalNamespace::ObstacleController::remove_passedAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::remove_passedAvoidedMarkEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_passedAvoidedMarkEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_didDissolveEvent
void GlobalNamespace::ObstacleController::add_didDissolveEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::add_didDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_didDissolveEvent
void GlobalNamespace::ObstacleController::remove_didDissolveEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::remove_didDissolveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didDissolveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.add_didUpdateProgress
void GlobalNamespace::ObstacleController::add_didUpdateProgress(System::Action_2<GlobalNamespace::ObstacleController*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::add_didUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.remove_didUpdateProgress
void GlobalNamespace::ObstacleController::remove_didUpdateProgress(System::Action_2<GlobalNamespace::ObstacleController*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::remove_didUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.set_hide
void GlobalNamespace::ObstacleController::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.set_pause
void GlobalNamespace::ObstacleController::set_pause(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::set_pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleController.get_bounds
UnityEngine::Bounds GlobalNamespace::ObstacleController::get_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_bounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_obstacleData
GlobalNamespace::ObstacleData* GlobalNamespace::ObstacleController::get_obstacleData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_obstacleData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_obstacleData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleData*, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_hasPassedAvoidedMark
bool GlobalNamespace::ObstacleController::get_hasPassedAvoidedMark() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_hasPassedAvoidedMark");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasPassedAvoidedMark", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_move1Duration
float GlobalNamespace::ObstacleController::get_move1Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_move1Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_move1Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_move2Duration
float GlobalNamespace::ObstacleController::get_move2Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_move2Duration");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_move2Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_width
float GlobalNamespace::ObstacleController::get_width() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_width");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_width", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_height
float GlobalNamespace::ObstacleController::get_height() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_height");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_height", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_length
float GlobalNamespace::ObstacleController::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.get_color
UnityEngine::Color GlobalNamespace::ObstacleController::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.Init
void GlobalNamespace::ObstacleController::Init(GlobalNamespace::ObstacleData* obstacleData, float worldRotation, UnityEngine::Vector3 startPos, UnityEngine::Vector3 midPos, UnityEngine::Vector3 endPos, float move1Duration, float move2Duration, float singleLineWidth, float height) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(worldRotation), ::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(midPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(move1Duration), ::il2cpp_utils::ExtractType(move2Duration), ::il2cpp_utils::ExtractType(singleLineWidth), ::il2cpp_utils::ExtractType(height)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleData, worldRotation, startPos, midPos, endPos, move1Duration, move2Duration, singleLineWidth, height);
}
// Autogenerated method: ObstacleController.Update
void GlobalNamespace::ObstacleController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.ManualUpdate
void GlobalNamespace::ObstacleController::ManualUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController.GetPosForTime
UnityEngine::Vector3 GlobalNamespace::ObstacleController::GetPosForTime(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::GetPosForTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosForTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, time);
}
// Autogenerated method: ObstacleController.DissolveCoroutine
System::Collections::IEnumerator* GlobalNamespace::ObstacleController::DissolveCoroutine(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::DissolveCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, duration);
}
// Autogenerated method: ObstacleController.Dissolve
void GlobalNamespace::ObstacleController::Dissolve(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::Dissolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dissolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ObstacleController/<DissolveCoroutine>d__69
#include "GlobalNamespace/ObstacleController_-DissolveCoroutine-d__69.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__69.System.IDisposable.Dispose
void GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__69.MoveNext
bool GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__69.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__69.System.Collections.IEnumerator.Reset
void GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleController/<DissolveCoroutine>d__69.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleController::$DissolveCoroutine$d__69::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleControllerBase
#include "GlobalNamespace/ObstacleControllerBase.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleControllerBase.add_didInitEvent
void GlobalNamespace::ObstacleControllerBase::add_didInitEvent(System::Action_1<GlobalNamespace::ObstacleControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleControllerBase::add_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.remove_didInitEvent
void GlobalNamespace::ObstacleControllerBase::remove_didInitEvent(System::Action_1<GlobalNamespace::ObstacleControllerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleControllerBase::remove_didInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.add_didStartDissolvingEvent
void GlobalNamespace::ObstacleControllerBase::add_didStartDissolvingEvent(System::Action_2<GlobalNamespace::ObstacleControllerBase*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleControllerBase::add_didStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.remove_didStartDissolvingEvent
void GlobalNamespace::ObstacleControllerBase::remove_didStartDissolvingEvent(System::Action_2<GlobalNamespace::ObstacleControllerBase*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleControllerBase::remove_didStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleControllerBase.InvokeDidInitEvent
void GlobalNamespace::ObstacleControllerBase::InvokeDidInitEvent(GlobalNamespace::ObstacleControllerBase* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleControllerBase::InvokeDidInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: ObstacleControllerBase.InvokeDidStartDissolvingEvent
void GlobalNamespace::ObstacleControllerBase::InvokeDidStartDissolvingEvent(GlobalNamespace::ObstacleControllerBase* obstacleController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleControllerBase::InvokeDidStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleDissolve
#include "GlobalNamespace/ObstacleDissolve.hpp"
// Including type: ObstacleControllerBase
#include "GlobalNamespace/ObstacleControllerBase.hpp"
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleDissolve.Awake
void GlobalNamespace::ObstacleDissolve::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleDissolve::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleDissolve.OnDestroy
void GlobalNamespace::ObstacleDissolve::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleDissolve::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleDissolve.HandleObstacleDidInitEvent
void GlobalNamespace::ObstacleDissolve::HandleObstacleDidInitEvent(GlobalNamespace::ObstacleControllerBase* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleDissolve::HandleObstacleDidInitEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleDidInitEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: ObstacleDissolve.HandleObcstacleDidStartDissolvingEvent
void GlobalNamespace::ObstacleDissolve::HandleObcstacleDidStartDissolvingEvent(GlobalNamespace::ObstacleControllerBase* obstacleController, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleDissolve::HandleObcstacleDidStartDissolvingEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObcstacleDidStartDissolvingEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleScaleUp
#include "GlobalNamespace/ObstacleScaleUp.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: ObstacleController
#include "GlobalNamespace/ObstacleController.hpp"
// Including type: ObstacleControllerBase
#include "GlobalNamespace/ObstacleControllerBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleScaleUp.Awake
void GlobalNamespace::ObstacleScaleUp::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleScaleUp::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleScaleUp.OnDestroy
void GlobalNamespace::ObstacleScaleUp::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleScaleUp::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleScaleUp.UpdateScale
void GlobalNamespace::ObstacleScaleUp::UpdateScale(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleScaleUp::UpdateScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, progress);
}
// Autogenerated method: ObstacleScaleUp.HandleObstacleControllerDidUpdateProgress
void GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidUpdateProgress(GlobalNamespace::ObstacleController* obstacleController, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidUpdateProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleControllerDidUpdateProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController, time);
}
// Autogenerated method: ObstacleScaleUp.HandleObstacleControllerDidInit
void GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidInit(GlobalNamespace::ObstacleControllerBase* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleScaleUp::HandleObstacleControllerDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleObstacleControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StretchableCube
#include "GlobalNamespace/StretchableCube.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kLength
float GlobalNamespace::StretchableCube::_get_kLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_kLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "StretchableCube", "kLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLength
void GlobalNamespace::StretchableCube::_set_kLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_kLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "kLength", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kWidth
float GlobalNamespace::StretchableCube::_get_kWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_kWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "StretchableCube", "kWidth"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kWidth
void GlobalNamespace::StretchableCube::_set_kWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_kWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "kWidth", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHeight
float GlobalNamespace::StretchableCube::_get_kHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_kHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "StretchableCube", "kHeight"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHeight
void GlobalNamespace::StretchableCube::_set_kHeight(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_kHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "kHeight", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE199F4
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p0
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p0"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p0
void GlobalNamespace::StretchableCube::_set_p0(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p0", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A04
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p1
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p1"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p1
void GlobalNamespace::StretchableCube::_set_p1(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p1", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A14
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p2
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p2"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p2
void GlobalNamespace::StretchableCube::_set_p2(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p2", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A24
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p3
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p3"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p3
void GlobalNamespace::StretchableCube::_set_p3(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p3", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A34
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p4
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p4"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p4
void GlobalNamespace::StretchableCube::_set_p4(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p4", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A44
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p5
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p5() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p5");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p5"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p5
void GlobalNamespace::StretchableCube::_set_p5(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p5");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p5", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A54
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p6
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p6() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p6"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p6
void GlobalNamespace::StretchableCube::_set_p6(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p6", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A64
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 p7
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_p7() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_p7");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "p7"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 p7
void GlobalNamespace::StretchableCube::_set_p7(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_p7");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "p7", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A74
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] vertices
::Array<UnityEngine::Vector3>* GlobalNamespace::StretchableCube::_get_vertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_vertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("", "StretchableCube", "vertices"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] vertices
void GlobalNamespace::StretchableCube::_set_vertices(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_vertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "vertices", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A84
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 up
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "up"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 up
void GlobalNamespace::StretchableCube::_set_up(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "up", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19A94
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 down
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_down() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "down"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 down
void GlobalNamespace::StretchableCube::_set_down(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "down", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19AA4
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 front
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_front() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_front");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "front"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 front
void GlobalNamespace::StretchableCube::_set_front(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_front");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "front", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19AB4
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 back
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_back() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_back");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "back"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 back
void GlobalNamespace::StretchableCube::_set_back(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_back");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "back", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19AC4
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 left
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "left"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 left
void GlobalNamespace::StretchableCube::_set_left(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "left", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19AD4
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 right
UnityEngine::Vector3 GlobalNamespace::StretchableCube::_get_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("", "StretchableCube", "right"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 right
void GlobalNamespace::StretchableCube::_set_right(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "right", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19AE4
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3[] normals
::Array<UnityEngine::Vector3>* GlobalNamespace::StretchableCube::_get_normals() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_normals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("", "StretchableCube", "normals"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3[] normals
void GlobalNamespace::StretchableCube::_set_normals(::Array<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_normals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "normals", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19AF4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] triangles
::Array<int>* GlobalNamespace::StretchableCube::_get_triangles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_get_triangles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<int>*>("", "StretchableCube", "triangles"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] triangles
void GlobalNamespace::StretchableCube::_set_triangles(::Array<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::_set_triangles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableCube", "triangles", value));
}
// Autogenerated method: StretchableCube.Awake
void GlobalNamespace::StretchableCube::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StretchableCube.OnDestroy
void GlobalNamespace::StretchableCube::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StretchableCube.CreateBox
UnityEngine::Mesh* GlobalNamespace::StretchableCube::CreateBox() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::CreateBox");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateBox", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: StretchableCube.RecalculateUVs
void GlobalNamespace::StretchableCube::RecalculateUVs(::Array<UnityEngine::Vector2>* uvs) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::RecalculateUVs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateUVs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, uvs);
}
// Autogenerated method: StretchableCube.RefreshUVs
void GlobalNamespace::StretchableCube::RefreshUVs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::RefreshUVs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshUVs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StretchableCube..cctor
void GlobalNamespace::StretchableCube::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableCube::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StretchableCube", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StretchableObstacle
#include "GlobalNamespace/StretchableObstacle.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: ParametricBoxFrameController
#include "GlobalNamespace/ParametricBoxFrameController.hpp"
// Including type: ParametricBoxFakeGlowController
#include "GlobalNamespace/ParametricBoxFakeGlowController.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19BE4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _uvScaleID
int GlobalNamespace::StretchableObstacle::_get__uvScaleID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::_get__uvScaleID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "StretchableObstacle", "_uvScaleID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _uvScaleID
void GlobalNamespace::StretchableObstacle::_set__uvScaleID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::_set__uvScaleID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableObstacle", "_uvScaleID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19BF4
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _tintColorID
int GlobalNamespace::StretchableObstacle::_get__tintColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::_get__tintColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "StretchableObstacle", "_tintColorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _tintColorID
void GlobalNamespace::StretchableObstacle::_set__tintColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::_set__tintColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableObstacle", "_tintColorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE19C04
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _addColorID
int GlobalNamespace::StretchableObstacle::_get__addColorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::_get__addColorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "StretchableObstacle", "_addColorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _addColorID
void GlobalNamespace::StretchableObstacle::_set__addColorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::_set__addColorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StretchableObstacle", "_addColorID", value));
}
// Autogenerated method: StretchableObstacle.get_bounds
UnityEngine::Bounds GlobalNamespace::StretchableObstacle::get_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::get_bounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: StretchableObstacle.SetSizeAndColor
void GlobalNamespace::StretchableObstacle::SetSizeAndColor(float width, float height, float length, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::SetSizeAndColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSizeAndColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, width, height, length, color);
}
// Autogenerated method: StretchableObstacle.OnValidate
void GlobalNamespace::StretchableObstacle::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StretchableObstacle..cctor
void GlobalNamespace::StretchableObstacle::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StretchableObstacle::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StretchableObstacle", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialBeatmapObjectManager
#include "GlobalNamespace/TutorialBeatmapObjectManager.hpp"
// Including type: TutorialBeatmapObjectManager/InitData
#include "GlobalNamespace/TutorialBeatmapObjectManager_InitData.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: ObstacleData
#include "GlobalNamespace/ObstacleData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NoteData
#include "GlobalNamespace/NoteData.hpp"
// Including type: TutorialNoteController/Pool
#include "GlobalNamespace/TutorialNoteController_Pool.hpp"
// Including type: BombNoteController/Pool
#include "GlobalNamespace/BombNoteController_Pool.hpp"
// Including type: ObstacleController/Pool
#include "GlobalNamespace/ObstacleController_Pool.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TutorialBeatmapObjectManager.get_activeObstacleControllers
System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* GlobalNamespace::TutorialBeatmapObjectManager::get_activeObstacleControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::get_activeObstacleControllers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeObstacleControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>*, false>(this, ___internal__method);
}
// Autogenerated method: TutorialBeatmapObjectManager.SpawnObstacleInternal
GlobalNamespace::ObstacleController* GlobalNamespace::TutorialBeatmapObjectManager::SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::SpawnObstacleInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnObstacleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleData), ::il2cpp_utils::ExtractType(obstacleSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ObstacleController*, false>(this, ___internal__method, obstacleData, obstacleSpawnData, rotation);
}
// Autogenerated method: TutorialBeatmapObjectManager.SpawnBombNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::TutorialBeatmapObjectManager::SpawnBombNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::SpawnBombNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation);
}
// Autogenerated method: TutorialBeatmapObjectManager.SpawnBasicNoteInternal
GlobalNamespace::NoteController* GlobalNamespace::TutorialBeatmapObjectManager::SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::SpawnBasicNoteInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBasicNoteInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteData), ::il2cpp_utils::ExtractType(noteSpawnData), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(cutDirectionAngleOffset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::NoteController*, false>(this, ___internal__method, noteData, noteSpawnData, rotation, cutDirectionAngleOffset);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: TutorialBeatmapObjectManager.DespawnInternal
void GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal(GlobalNamespace::ObstacleController* obstacleController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::DespawnInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obstacleController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obstacleController);
}
// Autogenerated method: TutorialBeatmapObjectManager.DissolveAllObjects
void GlobalNamespace::TutorialBeatmapObjectManager::DissolveAllObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::DissolveAllObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DissolveAllObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TutorialBeatmapObjectManager.HideAllBeatmapObjects
void GlobalNamespace::TutorialBeatmapObjectManager::HideAllBeatmapObjects(bool hide) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::HideAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hide)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hide);
}
// Autogenerated method: TutorialBeatmapObjectManager.PauseAllBeatmapObjects
void GlobalNamespace::TutorialBeatmapObjectManager::PauseAllBeatmapObjects(bool pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialBeatmapObjectManager::PauseAllBeatmapObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAllBeatmapObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pause);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TutorialBeatmapObjectManager/InitData
#include "GlobalNamespace/TutorialBeatmapObjectManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BadNoteCutEffectSpawner
#include "GlobalNamespace/BadNoteCutEffectSpawner.hpp"
// Including type: FlyingSpriteSpawner
#include "GlobalNamespace/FlyingSpriteSpawner.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BadNoteCutEffectSpawner.Start
void GlobalNamespace::BadNoteCutEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BadNoteCutEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BadNoteCutEffectSpawner.OnDestroy
void GlobalNamespace::BadNoteCutEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BadNoteCutEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BadNoteCutEffectSpawner.HandleNoteWasCut
void GlobalNamespace::BadNoteCutEffectSpawner::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BadNoteCutEffectSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffectSpawner
#include "GlobalNamespace/BeatEffectSpawner.hpp"
// Including type: BeatEffectSpawner/InitData
#include "GlobalNamespace/BeatEffectSpawner_InitData.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: BeatEffect/Pool
#include "GlobalNamespace/BeatEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatEffectSpawner.Init
void GlobalNamespace::BeatEffectSpawner::Init(GlobalNamespace::BeatEffect::Pool* beatEffectPool) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffectSpawner::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatEffectPool)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatEffectPool);
}
// Autogenerated method: BeatEffectSpawner.Start
void GlobalNamespace::BeatEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffectSpawner.OnDestroy
void GlobalNamespace::BeatEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffectSpawner.Update
void GlobalNamespace::BeatEffectSpawner::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffectSpawner::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffectSpawner.HandleNoteDidStartJump
void GlobalNamespace::BeatEffectSpawner::HandleNoteDidStartJump(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffectSpawner::HandleNoteDidStartJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: BeatEffectSpawner.HandleBeatEffectDidFinish
void GlobalNamespace::BeatEffectSpawner::HandleBeatEffectDidFinish(GlobalNamespace::BeatEffect* beatEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffectSpawner::HandleBeatEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffectSpawner/InitData
#include "GlobalNamespace/BeatEffectSpawner_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreSpawner
#include "GlobalNamespace/FlyingScoreSpawner.hpp"
// Including type: FlyingScoreSpawner/SpawnPosition
#include "GlobalNamespace/FlyingScoreSpawner_SpawnPosition.hpp"
// Including type: FlyingScoreSpawner/InitData
#include "GlobalNamespace/FlyingScoreSpawner_InitData.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: FlyingScoreEffect/Pool
#include "GlobalNamespace/FlyingScoreEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingScoreSpawner.SpawnFlyingScore
void GlobalNamespace::FlyingScoreSpawner::SpawnFlyingScore(GlobalNamespace::NoteCutInfo& noteCutInfo, int noteLineIndex, int multiplier, UnityEngine::Vector3 pos, UnityEngine::Quaternion rotation, UnityEngine::Quaternion inverseRotation, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreSpawner::SpawnFlyingScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnFlyingScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(noteLineIndex), ::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inverseRotation), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, noteLineIndex, multiplier, pos, rotation, inverseRotation, color);
}
// Autogenerated method: FlyingScoreSpawner.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::FlyingScoreSpawner::HandleFlyingObjectEffectDidFinish(GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreSpawner::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreSpawner/SpawnPosition
#include "GlobalNamespace/FlyingScoreSpawner_SpawnPosition.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FlyingScoreSpawner/SpawnPosition Underground
GlobalNamespace::FlyingScoreSpawner::SpawnPosition GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_Underground() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_Underground");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::FlyingScoreSpawner::SpawnPosition>("", "FlyingScoreSpawner/SpawnPosition", "Underground"));
}
// Autogenerated static field setter
// Set static field: static public FlyingScoreSpawner/SpawnPosition Underground
void GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_Underground(GlobalNamespace::FlyingScoreSpawner::SpawnPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_Underground");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlyingScoreSpawner/SpawnPosition", "Underground", value));
}
// Autogenerated static field getter
// Get static field: static public FlyingScoreSpawner/SpawnPosition AboveGround
GlobalNamespace::FlyingScoreSpawner::SpawnPosition GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_AboveGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_get_AboveGround");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::FlyingScoreSpawner::SpawnPosition>("", "FlyingScoreSpawner/SpawnPosition", "AboveGround"));
}
// Autogenerated static field setter
// Set static field: static public FlyingScoreSpawner/SpawnPosition AboveGround
void GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_AboveGround(GlobalNamespace::FlyingScoreSpawner::SpawnPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreSpawner::SpawnPosition::_set_AboveGround");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FlyingScoreSpawner/SpawnPosition", "AboveGround", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreSpawner/InitData
#include "GlobalNamespace/FlyingScoreSpawner_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingSpriteSpawner
#include "GlobalNamespace/FlyingSpriteSpawner.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: FlyingObjectEffect
#include "GlobalNamespace/FlyingObjectEffect.hpp"
// Including type: FlyingSpriteEffect/Pool
#include "GlobalNamespace/FlyingSpriteEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingSpriteSpawner.SpawnFlyingSprite
void GlobalNamespace::FlyingSpriteSpawner::SpawnFlyingSprite(UnityEngine::Vector3 pos, UnityEngine::Quaternion rotation, UnityEngine::Quaternion inverseRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingSpriteSpawner::SpawnFlyingSprite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnFlyingSprite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inverseRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos, rotation, inverseRotation);
}
// Autogenerated method: FlyingSpriteSpawner.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::FlyingSpriteSpawner::HandleFlyingObjectEffectDidFinish(GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingSpriteSpawner::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FlyingTextSpawner
#include "GlobalNamespace/FlyingTextSpawner.hpp"
// Including type: FlyingTextEffect/Pool
#include "GlobalNamespace/FlyingTextEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingTextSpawner.SpawnText
void GlobalNamespace::FlyingTextSpawner::SpawnText(UnityEngine::Vector3 pos, UnityEngine::Quaternion rotation, UnityEngine::Quaternion inverseRotation, ::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingTextSpawner::SpawnText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(inverseRotation), ::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos, rotation, inverseRotation, text);
}
// Autogenerated method: FlyingTextSpawner.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::FlyingTextSpawner::HandleFlyingObjectEffectDidFinish(GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingTextSpawner::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissedNoteEffectSpawner
#include "GlobalNamespace/MissedNoteEffectSpawner.hpp"
// Including type: FlyingSpriteSpawner
#include "GlobalNamespace/FlyingSpriteSpawner.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissedNoteEffectSpawner.Start
void GlobalNamespace::MissedNoteEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissedNoteEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissedNoteEffectSpawner.OnDestroy
void GlobalNamespace::MissedNoteEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissedNoteEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissedNoteEffectSpawner.HandleNoteWasMissed
void GlobalNamespace::MissedNoteEffectSpawner::HandleNoteWasMissed(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissedNoteEffectSpawner::HandleNoteWasMissed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasMissed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutCoreEffectsSpawner
#include "GlobalNamespace/NoteCutCoreEffectsSpawner.hpp"
// Including type: NoteCutParticlesEffect
#include "GlobalNamespace/NoteCutParticlesEffect.hpp"
// Including type: NoteDebrisSpawner
#include "GlobalNamespace/NoteDebrisSpawner.hpp"
// Including type: NoteCutHapticEffect
#include "GlobalNamespace/NoteCutHapticEffect.hpp"
// Including type: ShockwaveEffect
#include "GlobalNamespace/ShockwaveEffect.hpp"
// Including type: BombExplosionEffect
#include "GlobalNamespace/BombExplosionEffect.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutCoreEffectsSpawner.Start
void GlobalNamespace::NoteCutCoreEffectsSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutCoreEffectsSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.OnDestroy
void GlobalNamespace::NoteCutCoreEffectsSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutCoreEffectsSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.HandleNoteWasCut
void GlobalNamespace::NoteCutCoreEffectsSpawner::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutCoreEffectsSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.SpawnNoteCutEffect
void GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnNoteCutEffect(GlobalNamespace::NoteCutInfo& noteCutInfo, GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnNoteCutEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnNoteCutEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, noteController);
}
// Autogenerated method: NoteCutCoreEffectsSpawner.SpawnBombCutEffect
void GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnBombCutEffect(GlobalNamespace::NoteCutInfo& noteCutInfo, GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutCoreEffectsSpawner::SpawnBombCutEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnBombCutEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, noteController);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutScoreSpawner
#include "GlobalNamespace/NoteCutScoreSpawner.hpp"
// Including type: FlyingScoreSpawner
#include "GlobalNamespace/FlyingScoreSpawner.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutScoreSpawner.Start
void GlobalNamespace::NoteCutScoreSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutScoreSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutScoreSpawner.OnDestroy
void GlobalNamespace::NoteCutScoreSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutScoreSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutScoreSpawner.HandleNoteWasCut
void GlobalNamespace::NoteCutScoreSpawner::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutScoreSpawner::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteDebrisSpawner
#include "GlobalNamespace/NoteDebrisSpawner.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteDebris/Pool
#include "GlobalNamespace/NoteDebris_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kMinLifeTime
float GlobalNamespace::NoteDebrisSpawner::_get_kMinLifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::_get_kMinLifeTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kMinLifeTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinLifeTime
void GlobalNamespace::NoteDebrisSpawner::_set_kMinLifeTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::_set_kMinLifeTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kMinLifeTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMaxLifeTime
float GlobalNamespace::NoteDebrisSpawner::_get_kMaxLifeTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::_get_kMaxLifeTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kMaxLifeTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMaxLifeTime
void GlobalNamespace::NoteDebrisSpawner::_set_kMaxLifeTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::_set_kMaxLifeTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kMaxLifeTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kLifeTimeOffset
float GlobalNamespace::NoteDebrisSpawner::_get_kLifeTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::_get_kLifeTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteDebrisSpawner", "kLifeTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kLifeTimeOffset
void GlobalNamespace::NoteDebrisSpawner::_set_kLifeTimeOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::_set_kLifeTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteDebrisSpawner", "kLifeTimeOffset", value));
}
// Autogenerated method: NoteDebrisSpawner.SpawnDebris
void GlobalNamespace::NoteDebrisSpawner::SpawnDebris(UnityEngine::Vector3 cutPoint, UnityEngine::Vector3 cutNormal, float saberSpeed, UnityEngine::Vector3 saberDir, UnityEngine::Vector3 notePos, UnityEngine::Quaternion noteRotation, UnityEngine::Vector3 noteScale, GlobalNamespace::ColorType colorType, float timeToNextColorNote, UnityEngine::Vector3 moveVec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::SpawnDebris");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnDebris", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(cutNormal), ::il2cpp_utils::ExtractType(saberSpeed), ::il2cpp_utils::ExtractType(saberDir), ::il2cpp_utils::ExtractType(notePos), ::il2cpp_utils::ExtractType(noteRotation), ::il2cpp_utils::ExtractType(noteScale), ::il2cpp_utils::ExtractType(colorType), ::il2cpp_utils::ExtractType(timeToNextColorNote), ::il2cpp_utils::ExtractType(moveVec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutPoint, cutNormal, saberSpeed, saberDir, notePos, noteRotation, noteScale, colorType, timeToNextColorNote, moveVec);
}
// Autogenerated method: NoteDebrisSpawner.HandleNoteDebrisDidFinish
void GlobalNamespace::NoteDebrisSpawner::HandleNoteDebrisDidFinish(GlobalNamespace::NoteDebris* noteDebris) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSpawner::HandleNoteDebrisDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDebrisDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteDebris)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteDebris);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ObstacleSaberSparkleEffectManager
#include "GlobalNamespace/ObstacleSaberSparkleEffectManager.hpp"
// Including type: ObstacleSaberSparkleEffect
#include "GlobalNamespace/ObstacleSaberSparkleEffect.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleSaberSparkleEffectManager.add_sparkleEffectDidStartEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidStartEvent(System::Action_1<GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sparkleEffectDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.remove_sparkleEffectDidStartEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidStartEvent(System::Action_1<GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sparkleEffectDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.add_sparkleEffectDidEndEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidEndEvent(System::Action_1<GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::add_sparkleEffectDidEndEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_sparkleEffectDidEndEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.remove_sparkleEffectDidEndEvent
void GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidEndEvent(System::Action_1<GlobalNamespace::SaberType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::remove_sparkleEffectDidEndEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_sparkleEffectDidEndEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.Start
void GlobalNamespace::ObstacleSaberSparkleEffectManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.OnDisable
void GlobalNamespace::ObstacleSaberSparkleEffectManager::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.Update
void GlobalNamespace::ObstacleSaberSparkleEffectManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.GetEffectRotation
UnityEngine::Quaternion GlobalNamespace::ObstacleSaberSparkleEffectManager::GetEffectRotation(UnityEngine::Vector3 pos, UnityEngine::Transform* transform, UnityEngine::Bounds bounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::GetEffectRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEffectRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(bounds)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, pos, transform, bounds);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.BurnMarkPosForSaberType
UnityEngine::Vector3 GlobalNamespace::ObstacleSaberSparkleEffectManager::BurnMarkPosForSaberType(GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::BurnMarkPosForSaberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BurnMarkPosForSaberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, saberType);
}
// Autogenerated method: ObstacleSaberSparkleEffectManager.GetBurnMarkPos
bool GlobalNamespace::ObstacleSaberSparkleEffectManager::GetBurnMarkPos(UnityEngine::Bounds bounds, UnityEngine::Transform* transform, UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bounds), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bounds, transform, bladeBottomPos, bladeTopPos, burnMarkPos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IBeatEffectDidFinishEvent
#include "GlobalNamespace/IBeatEffectDidFinishEvent.hpp"
// Including type: BeatEffect
#include "GlobalNamespace/BeatEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IBeatEffectDidFinishEvent.HandleBeatEffectDidFinish
void GlobalNamespace::IBeatEffectDidFinishEvent::HandleBeatEffectDidFinish(GlobalNamespace::BeatEffect* beatEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IBeatEffectDidFinishEvent::HandleBeatEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffect
#include "GlobalNamespace/BeatEffect.hpp"
// Including type: BeatEffect/Pool
#include "GlobalNamespace/BeatEffect_Pool.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: IBeatEffectDidFinishEvent
#include "GlobalNamespace/IBeatEffectDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatEffect.get_didFinishEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::IBeatEffectDidFinishEvent*>* GlobalNamespace::BeatEffect::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffect::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::IBeatEffectDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatEffect.Init
void GlobalNamespace::BeatEffect::Init(UnityEngine::Color color, float animationDuration, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(animationDuration), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color, animationDuration, rotation);
}
// Autogenerated method: BeatEffect.ManualUpdate
void GlobalNamespace::BeatEffect::ManualUpdate(float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffect::ManualUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatEffect/Pool
#include "GlobalNamespace/BeatEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombExplosionEffect
#include "GlobalNamespace/BombExplosionEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BombExplosionEffect.Awake
void GlobalNamespace::BombExplosionEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombExplosionEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombExplosionEffect.SpawnExplosion
void GlobalNamespace::BombExplosionEffect::SpawnExplosion(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombExplosionEffect::SpawnExplosion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnExplosion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CutoutAnimateEffect
#include "GlobalNamespace/CutoutAnimateEffect.hpp"
// Including type: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7
#include "GlobalNamespace/CutoutAnimateEffect_-AnimateToCutoutCoroutine-d__7.hpp"
// Including type: CutoutEffect
#include "GlobalNamespace/CutoutEffect.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CutoutAnimateEffect.get_animating
bool GlobalNamespace::CutoutAnimateEffect::get_animating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::get_animating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect.set_animating
void GlobalNamespace::CutoutAnimateEffect::set_animating(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::set_animating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_animating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CutoutAnimateEffect.Start
void GlobalNamespace::CutoutAnimateEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect.AnimateToCutoutCoroutine
System::Collections::IEnumerator* GlobalNamespace::CutoutAnimateEffect::AnimateToCutoutCoroutine(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::AnimateToCutoutCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateToCutoutCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Autogenerated method: CutoutAnimateEffect.SetCutout
void GlobalNamespace::CutoutAnimateEffect::SetCutout(float cutout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::SetCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutout)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutout);
}
// Autogenerated method: CutoutAnimateEffect.ResetEffect
void GlobalNamespace::CutoutAnimateEffect::ResetEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::ResetEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect.AnimateCutout
void GlobalNamespace::CutoutAnimateEffect::AnimateCutout(float cutoutStart, float cutoutEnd, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::AnimateCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutoutStart), ::il2cpp_utils::ExtractType(cutoutEnd), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutoutStart, cutoutEnd, duration);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7
#include "GlobalNamespace/CutoutAnimateEffect_-AnimateToCutoutCoroutine-d__7.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.IDisposable.Dispose
void GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.MoveNext
bool GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.Collections.IEnumerator.Reset
void GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutAnimateEffect/<AnimateToCutoutCoroutine>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutAnimateEffect::$AnimateToCutoutCoroutine$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CutoutEffect
#include "GlobalNamespace/CutoutEffect.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1A13C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutPropertyID
int GlobalNamespace::CutoutEffect::_get__cutoutPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::_get__cutoutPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CutoutEffect", "_cutoutPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutPropertyID
void GlobalNamespace::CutoutEffect::_set__cutoutPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::_set__cutoutPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CutoutEffect", "_cutoutPropertyID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1A14C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cutoutTexOffsetPropertyID
int GlobalNamespace::CutoutEffect::_get__cutoutTexOffsetPropertyID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::_get__cutoutTexOffsetPropertyID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CutoutEffect", "_cutoutTexOffsetPropertyID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cutoutTexOffsetPropertyID
void GlobalNamespace::CutoutEffect::_set__cutoutTexOffsetPropertyID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::_set__cutoutTexOffsetPropertyID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CutoutEffect", "_cutoutTexOffsetPropertyID", value));
}
// Autogenerated method: CutoutEffect.get_useRandomCutoutOffset
bool GlobalNamespace::CutoutEffect::get_useRandomCutoutOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::get_useRandomCutoutOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useRandomCutoutOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CutoutEffect.Start
void GlobalNamespace::CutoutEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CutoutEffect.SetCutout
void GlobalNamespace::CutoutEffect::SetCutout(float cutout) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::SetCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutout)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutout);
}
// Autogenerated method: CutoutEffect.SetCutout
void GlobalNamespace::CutoutEffect::SetCutout(float cutout, UnityEngine::Vector3 cutoutOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::SetCutout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCutout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutout), ::il2cpp_utils::ExtractType(cutoutOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutout, cutoutOffset);
}
// Autogenerated method: CutoutEffect..cctor
void GlobalNamespace::CutoutEffect::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CutoutEffect::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CutoutEffect", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EmitParticles
#include "GlobalNamespace/EmitParticles.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EmitParticles.Emit
void GlobalNamespace::EmitParticles::Emit(int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmitParticles::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, count);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FireworkItemController
#include "GlobalNamespace/FireworkItemController.hpp"
// Including type: FireworkItemController/FireworkItemParticleSystem
#include "GlobalNamespace/FireworkItemController_FireworkItemParticleSystem.hpp"
// Including type: FireworkItemController/Pool
#include "GlobalNamespace/FireworkItemController_Pool.hpp"
// Including type: FireworkItemController/<FireCoroutine>d__29
#include "GlobalNamespace/FireworkItemController_-FireCoroutine-d__29.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FireworkItemController.set_directionalLight
void GlobalNamespace::FireworkItemController::set_directionalLight(GlobalNamespace::DirectionalLight* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::set_directionalLight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_directionalLight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.set_directionalLightIntensity
void GlobalNamespace::FireworkItemController::set_directionalLightIntensity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::set_directionalLightIntensity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_directionalLightIntensity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.add_didFinishEvent
void GlobalNamespace::FireworkItemController::add_didFinishEvent(System::Action_1<GlobalNamespace::FireworkItemController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.remove_didFinishEvent
void GlobalNamespace::FireworkItemController::remove_didFinishEvent(System::Action_1<GlobalNamespace::FireworkItemController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FireworkItemController.Awake
void GlobalNamespace::FireworkItemController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.OnDisable
void GlobalNamespace::FireworkItemController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.Fire
void GlobalNamespace::FireworkItemController::Fire() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::Fire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.FireCoroutine
System::Collections::IEnumerator* GlobalNamespace::FireworkItemController::FireCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::FireCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FireCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.SetLightsColor
void GlobalNamespace::FireworkItemController::SetLightsColor(float intensity) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::SetLightsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(intensity)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, intensity);
}
// Autogenerated method: FireworkItemController.PlayExplosionSound
void GlobalNamespace::FireworkItemController::PlayExplosionSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::PlayExplosionSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayExplosionSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController.InitializeParticleSystem
void GlobalNamespace::FireworkItemController::InitializeParticleSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::InitializeParticleSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeParticleSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworkItemController/FireworkItemParticleSystem
#include "GlobalNamespace/FireworkItemController_FireworkItemParticleSystem.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworkItemController/Pool
#include "GlobalNamespace/FireworkItemController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FireworkItemController/<FireCoroutine>d__29
#include "GlobalNamespace/FireworkItemController_-FireCoroutine-d__29.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.IDisposable.Dispose
void GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.MoveNext
bool GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.Collections.IEnumerator.Reset
void GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworkItemController/<FireCoroutine>d__29.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::$FireCoroutine$d__29::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FireworksController
#include "GlobalNamespace/FireworksController.hpp"
// Including type: FireworksController/<SpawningCoroutine>d__8
#include "GlobalNamespace/FireworksController_-SpawningCoroutine-d__8.hpp"
// Including type: DirectionalLight
#include "GlobalNamespace/DirectionalLight.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: FireworkItemController/Pool
#include "GlobalNamespace/FireworkItemController_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FireworksController.OnEnable
void GlobalNamespace::FireworksController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.SpawningCoroutine
System::Collections::IEnumerator* GlobalNamespace::FireworksController::SpawningCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::SpawningCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawningCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController.HandleFireworkItemControllerDidFinish
void GlobalNamespace::FireworksController::HandleFireworkItemControllerDidFinish(GlobalNamespace::FireworkItemController* fireworkItemController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::HandleFireworkItemControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFireworkItemControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fireworkItemController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fireworkItemController);
}
// Autogenerated method: FireworksController.OnDrawGizmosSelected
void GlobalNamespace::FireworksController::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FireworksController/<SpawningCoroutine>d__8
#include "GlobalNamespace/FireworksController_-SpawningCoroutine-d__8.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.MoveNext
bool GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FireworksController/<SpawningCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksController::$SpawningCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FireworksItemPoolInstaller
#include "GlobalNamespace/FireworksItemPoolInstaller.hpp"
// Including type: FireworksController
#include "GlobalNamespace/FireworksController.hpp"
// Including type: FireworkItemController
#include "GlobalNamespace/FireworkItemController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FireworksItemPoolInstaller.InstallBindings
void GlobalNamespace::FireworksItemPoolInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworksItemPoolInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IFlyingObjectEffectDidFinishEvent
#include "GlobalNamespace/IFlyingObjectEffectDidFinishEvent.hpp"
// Including type: FlyingObjectEffect
#include "GlobalNamespace/FlyingObjectEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IFlyingObjectEffectDidFinishEvent.HandleFlyingObjectEffectDidFinish
void GlobalNamespace::IFlyingObjectEffectDidFinishEvent::HandleFlyingObjectEffectDidFinish(GlobalNamespace::FlyingObjectEffect* flyingObjectEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IFlyingObjectEffectDidFinishEvent::HandleFlyingObjectEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFlyingObjectEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flyingObjectEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flyingObjectEffect);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingObjectEffect
#include "GlobalNamespace/FlyingObjectEffect.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: IFlyingObjectEffectDidFinishEvent
#include "GlobalNamespace/IFlyingObjectEffectDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingObjectEffect.get_didFinishEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>* GlobalNamespace::FlyingObjectEffect::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingObjectEffect::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::IFlyingObjectEffectDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: FlyingObjectEffect.InitAndPresent
void GlobalNamespace::FlyingObjectEffect::InitAndPresent(float duration, UnityEngine::Vector3 targetPos, UnityEngine::Quaternion rotation, bool shake) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingObjectEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(shake)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration, targetPos, rotation, shake);
}
// Autogenerated method: FlyingObjectEffect.Update
void GlobalNamespace::FlyingObjectEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingObjectEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingObjectEffect.ManualUpdate
void GlobalNamespace::FlyingObjectEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingObjectEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FlyingScoreEffect
#include "GlobalNamespace/FlyingScoreEffect.hpp"
// Including type: FlyingScoreEffect/Pool
#include "GlobalNamespace/FlyingScoreEffect_Pool.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingScoreEffect.InitAndPresent
void GlobalNamespace::FlyingScoreEffect::InitAndPresent(GlobalNamespace::NoteCutInfo& noteCutInfo, int multiplier, float duration, UnityEngine::Vector3 targetPos, UnityEngine::Quaternion rotation, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutInfo), ::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutInfo, multiplier, duration, targetPos, rotation, color);
}
// Autogenerated method: FlyingScoreEffect.HandleSaberSwingRatingCounterDidChange
void GlobalNamespace::FlyingScoreEffect::HandleSaberSwingRatingCounterDidChange(GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter, float rating) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreEffect::HandleSaberSwingRatingCounterDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter), ::il2cpp_utils::ExtractType(rating)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberSwingRatingCounter, rating);
}
// Autogenerated method: FlyingScoreEffect.GetScoreText
::Il2CppString* GlobalNamespace::FlyingScoreEffect::GetScoreText(int score) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreEffect::GetScoreText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScoreText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(score)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, score);
}
// Autogenerated method: FlyingScoreEffect.HandleSaberSwingRatingCounterDidFinish
void GlobalNamespace::FlyingScoreEffect::HandleSaberSwingRatingCounterDidFinish(GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreEffect::HandleSaberSwingRatingCounterDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSaberSwingRatingCounterDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberSwingRatingCounter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberSwingRatingCounter);
}
// Autogenerated method: FlyingScoreEffect.UnregisterCallbacksIfNeeded
void GlobalNamespace::FlyingScoreEffect::UnregisterCallbacksIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreEffect::UnregisterCallbacksIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterCallbacksIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingScoreEffect.ManualUpdate
void GlobalNamespace::FlyingScoreEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingScoreEffect/Pool
#include "GlobalNamespace/FlyingScoreEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingScoreEffect/Pool.OnDespawned
void GlobalNamespace::FlyingScoreEffect::Pool::OnDespawned(GlobalNamespace::FlyingScoreEffect* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingScoreEffect::Pool::OnDespawned");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDespawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingSpriteEffect
#include "GlobalNamespace/FlyingSpriteEffect.hpp"
// Including type: FlyingSpriteEffect/Pool
#include "GlobalNamespace/FlyingSpriteEffect_Pool.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingSpriteEffect.InitAndPresent
void GlobalNamespace::FlyingSpriteEffect::InitAndPresent(float duration, UnityEngine::Vector3 targetPos, UnityEngine::Quaternion rotation, UnityEngine::Sprite* sprite, UnityEngine::Material* material, UnityEngine::Color color, bool shake) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingSpriteEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(sprite), ::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(shake)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration, targetPos, rotation, sprite, material, color, shake);
}
// Autogenerated method: FlyingSpriteEffect.ManualUpdate
void GlobalNamespace::FlyingSpriteEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingSpriteEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingSpriteEffect/Pool
#include "GlobalNamespace/FlyingSpriteEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FlyingTextEffect
#include "GlobalNamespace/FlyingTextEffect.hpp"
// Including type: FlyingTextEffect/Pool
#include "GlobalNamespace/FlyingTextEffect_Pool.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingTextEffect.InitAndPresent
void GlobalNamespace::FlyingTextEffect::InitAndPresent(::Il2CppString* text, float duration, UnityEngine::Vector3 targetPos, UnityEngine::Quaternion rotation, UnityEngine::Color color, float fontSize, bool shake) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingTextEffect::InitAndPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAndPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(fontSize), ::il2cpp_utils::ExtractType(shake)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, duration, targetPos, rotation, color, fontSize, shake);
}
// Autogenerated method: FlyingTextEffect.ManualUpdate
void GlobalNamespace::FlyingTextEffect::ManualUpdate(float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingTextEffect::ManualUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ManualUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingTextEffect/Pool
#include "GlobalNamespace/FlyingTextEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GhostDuplicationEffect
#include "GlobalNamespace/GhostDuplicationEffect.hpp"
// Including type: GhostDuplicationEffect/GhostEffectParams
#include "GlobalNamespace/GhostDuplicationEffect_GhostEffectParams.hpp"
// Including type: GhostDuplicationEffect/<>c__DisplayClass7_0
#include "GlobalNamespace/GhostDuplicationEffect_--c__DisplayClass7_0.hpp"
// Including type: GhostDuplicationEffect/<HideRedundantWithDelay>d__8
#include "GlobalNamespace/GhostDuplicationEffect_-HideRedundantWithDelay-d__8.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GhostDuplicationEffect.OnDestroy
void GlobalNamespace::GhostDuplicationEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.Awake
void GlobalNamespace::GhostDuplicationEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.Init
void GlobalNamespace::GhostDuplicationEffect::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.Animate
void GlobalNamespace::GhostDuplicationEffect::Animate(GlobalNamespace::GhostDuplicationEffect::GhostEffectParams ghostEffectParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::Animate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Animate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ghostEffectParams)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ghostEffectParams);
}
// Autogenerated method: GhostDuplicationEffect.HideRedundantWithDelay
System::Collections::IEnumerator* GlobalNamespace::GhostDuplicationEffect::HideRedundantWithDelay(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::HideRedundantWithDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideRedundantWithDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: GhostDuplicationEffect.SetDistances
void GlobalNamespace::GhostDuplicationEffect::SetDistances(float distance, UnityEngine::Vector3 direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::SetDistances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDistances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(distance), ::il2cpp_utils::ExtractType(direction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, distance, direction);
}
// Autogenerated method: GhostDuplicationEffect.set_hide
void GlobalNamespace::GhostDuplicationEffect::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GhostDuplicationEffect.set_size
void GlobalNamespace::GhostDuplicationEffect::set_size(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::set_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GhostDuplicationEffect.get_size
float GlobalNamespace::GhostDuplicationEffect::get_size() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::get_size");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect.set_alpha
void GlobalNamespace::GhostDuplicationEffect::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GhostDuplicationEffect.get_alpha
float GlobalNamespace::GhostDuplicationEffect::get_alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::get_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GhostDuplicationEffect/<>c__DisplayClass7_0
#include "GlobalNamespace/GhostDuplicationEffect_--c__DisplayClass7_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__0
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__1
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__2
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__2(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: GhostDuplicationEffect/<>c__DisplayClass7_0.<Animate>b__3
void GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::$Animate$b__3(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$$c__DisplayClass7_0::<Animate>b__3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Animate>b__3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GhostDuplicationEffect/<HideRedundantWithDelay>d__8
#include "GlobalNamespace/GhostDuplicationEffect_-HideRedundantWithDelay-d__8.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.IDisposable.Dispose
void GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.MoveNext
bool GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GhostDuplicationEffect/<HideRedundantWithDelay>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GhostDuplicationEffect::$HideRedundantWithDelay$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelFailedTextEffect
#include "GlobalNamespace/LevelFailedTextEffect.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelFailedTextEffect.ShowEffect
void GlobalNamespace::LevelFailedTextEffect::ShowEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelFailedTextEffect::ShowEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentLightSimpleController
#include "GlobalNamespace/EnvironmentLightSimpleController.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnvironmentLightSimpleController.LateUpdate
void GlobalNamespace::EnvironmentLightSimpleController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentLightSimpleController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: MenuLightsManager/<Start>d__4
#include "GlobalNamespace/MenuLightsManager_-Start-d__4.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuLightsManager.Start
System::Collections::IEnumerator* GlobalNamespace::MenuLightsManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager.Update
void GlobalNamespace::MenuLightsManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager.IsColorVeryCloseToColor
bool GlobalNamespace::MenuLightsManager::IsColorVeryCloseToColor(UnityEngine::Color color0, UnityEngine::Color color1) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::IsColorVeryCloseToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsColorVeryCloseToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color0), ::il2cpp_utils::ExtractType(color1)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, color0, color1);
}
// Autogenerated method: MenuLightsManager.SetColor
void GlobalNamespace::MenuLightsManager::SetColor(int lightId, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lightId, color);
}
// Autogenerated method: MenuLightsManager.CurrentColorForID
UnityEngine::Color GlobalNamespace::MenuLightsManager::CurrentColorForID(int lightId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::CurrentColorForID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CurrentColorForID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lightId)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, lightId);
}
// Autogenerated method: MenuLightsManager.SetColorsFromPreset
bool GlobalNamespace::MenuLightsManager::SetColorsFromPreset(GlobalNamespace::MenuLightsPresetSO* preset, float interpolationFactor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::SetColorsFromPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorsFromPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset), ::il2cpp_utils::ExtractType(interpolationFactor)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, preset, interpolationFactor);
}
// Autogenerated method: MenuLightsManager.RefreshLightsDictForPreset
void GlobalNamespace::MenuLightsManager::RefreshLightsDictForPreset(GlobalNamespace::MenuLightsPresetSO* preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::RefreshLightsDictForPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshLightsDictForPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, preset);
}
// Autogenerated method: MenuLightsManager.SetColorPreset
void GlobalNamespace::MenuLightsManager::SetColorPreset(GlobalNamespace::MenuLightsPresetSO* preset, bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::SetColorPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColorPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(preset), ::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, preset, animated);
}
// Autogenerated method: MenuLightsManager.RefreshColors
void GlobalNamespace::MenuLightsManager::RefreshColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::RefreshColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuLightsManager/<Start>d__4
#include "GlobalNamespace/MenuLightsManager_-Start-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuLightsManager/<Start>d__4.System.IDisposable.Dispose
void GlobalNamespace::MenuLightsManager::$Start$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::$Start$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.MoveNext
bool GlobalNamespace::MenuLightsManager::$Start$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::$Start$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MenuLightsManager::$Start$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::$Start$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::MenuLightsManager::$Start$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::$Start$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MenuLightsManager/<Start>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MenuLightsManager::$Start$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::$Start$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutHapticEffect
#include "GlobalNamespace/NoteCutHapticEffect.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutHapticEffect.HitNote
void GlobalNamespace::NoteCutHapticEffect::HitNote(GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutHapticEffect::HitNote");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HitNote", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutParticlesEffect
#include "GlobalNamespace/NoteCutParticlesEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteCutParticlesEffect.Awake
void GlobalNamespace::NoteCutParticlesEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutParticlesEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutParticlesEffect.SpawnParticles
void GlobalNamespace::NoteCutParticlesEffect::SpawnParticles(UnityEngine::Vector3 cutPoint, UnityEngine::Vector3 cutNormal, UnityEngine::Vector3 saberDir, float saberSpeed, UnityEngine::Vector3 noteMovementVec, UnityEngine::Color32 color, int sparkleParticlesCount, int explosionParticlesCount, float lifetimeMultiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutParticlesEffect::SpawnParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cutPoint), ::il2cpp_utils::ExtractType(cutNormal), ::il2cpp_utils::ExtractType(saberDir), ::il2cpp_utils::ExtractType(saberSpeed), ::il2cpp_utils::ExtractType(noteMovementVec), ::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(sparkleParticlesCount), ::il2cpp_utils::ExtractType(explosionParticlesCount), ::il2cpp_utils::ExtractType(lifetimeMultiplier)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cutPoint, cutNormal, saberDir, saberSpeed, noteMovementVec, color, sparkleParticlesCount, explosionParticlesCount, lifetimeMultiplier);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteTrailParticleSystem
#include "GlobalNamespace/NoteTrailParticleSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteTrailParticleSystem.Awake
void GlobalNamespace::NoteTrailParticleSystem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailParticleSystem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailParticleSystem.Emit
void GlobalNamespace::NoteTrailParticleSystem::Emit(UnityEngine::Vector3 startPos, UnityEngine::Vector3 endPos, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailParticleSystem::Emit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Emit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startPos), ::il2cpp_utils::ExtractType(endPos), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startPos, endPos, count);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OneTimeLightColorEffect
#include "GlobalNamespace/OneTimeLightColorEffect.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OneTimeLightColorEffect.Update
void GlobalNamespace::OneTimeLightColorEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OneTimeLightColorEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SaberBurnMarkArea
#include "GlobalNamespace/SaberBurnMarkArea.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberBurnMarkArea.Start
void GlobalNamespace::SaberBurnMarkArea::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnDestroy
void GlobalNamespace::SaberBurnMarkArea::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnEnable
void GlobalNamespace::SaberBurnMarkArea::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnDisable
void GlobalNamespace::SaberBurnMarkArea::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.GetBurnMarkPos
bool GlobalNamespace::SaberBurnMarkArea::GetBurnMarkPos(UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bladeBottomPos, bladeTopPos, burnMarkPos);
}
// Autogenerated method: SaberBurnMarkArea.WorldToCameraBurnMarkPos
UnityEngine::Vector3 GlobalNamespace::SaberBurnMarkArea::WorldToCameraBurnMarkPos(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::WorldToCameraBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WorldToCameraBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: SaberBurnMarkArea.LateUpdate
void GlobalNamespace::SaberBurnMarkArea::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SaberBurnMarkSparkles
#include "GlobalNamespace/SaberBurnMarkSparkles.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberBurnMarkSparkles.Start
void GlobalNamespace::SaberBurnMarkSparkles::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnDestroy
void GlobalNamespace::SaberBurnMarkSparkles::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnEnable
void GlobalNamespace::SaberBurnMarkSparkles::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnDisable
void GlobalNamespace::SaberBurnMarkSparkles::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.GetBurnMarkPos
bool GlobalNamespace::SaberBurnMarkSparkles::GetBurnMarkPos(UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bladeBottomPos, bladeTopPos, burnMarkPos);
}
// Autogenerated method: SaberBurnMarkSparkles.LateUpdate
void GlobalNamespace::SaberBurnMarkSparkles::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
