// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRResources
#include "Valve/VR/CVRResources.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRResources FnTable
Valve::VR::IVRResources& Valve::VR::CVRResources::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRResources::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<Valve::VR::IVRResources*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRResources.LoadSharedResource
uint Valve::VR::CVRResources::LoadSharedResource(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRResources::LoadSharedResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSharedResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen)));
}
// Autogenerated method: Valve.VR.CVRResources.GetResourceFullPath
uint Valve::VR::CVRResources::GetResourceFullPath(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRResources::GetResourceFullPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResourceFullPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen)));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRDriverManager
#include "Valve/VR/CVRDriverManager.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private Valve.VR.IVRDriverManager FnTable
Valve::VR::IVRDriverManager& Valve::VR::CVRDriverManager::dyn_FnTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRDriverManager::dyn_FnTable");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "FnTable"))->offset;
  return *reinterpret_cast<Valve::VR::IVRDriverManager*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: Valve.VR.CVRDriverManager.GetDriverCount
uint Valve::VR::CVRDriverManager::GetDriverCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRDriverManager::GetDriverCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<uint, false>(this, ___internal__method)));
}
// Autogenerated method: Valve.VR.CVRDriverManager.GetDriverName
uint Valve::VR::CVRDriverManager::GetDriverName(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRDriverManager::GetDriverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize)));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.OpenVRInterop
#include "Valve/VR/OpenVRInterop.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.OpenVRInterop.InitInternal
uint Valve::VR::OpenVRInterop::InitInternal(ByRef<Valve::VR::EVRInitError> peError, Valve::VR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(peError), eApplicationType)));
}
// Autogenerated method: Valve.VR.OpenVRInterop.ShutdownInternal
void Valve::VR::OpenVRInterop::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  THROW_UNLESS((::il2cpp_utils::RunMethod<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method)));
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsHmdPresent
bool Valve::VR::OpenVRInterop::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method)));
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsRuntimeInstalled
bool Valve::VR::OpenVRInterop::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method)));
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetStringForHmdError
System::IntPtr Valve::VR::OpenVRInterop::GetStringForHmdError(Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, error)));
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetGenericInterface
System::IntPtr Valve::VR::OpenVRInterop::GetGenericInterface(ByRef<::Il2CppString*> pchInterfaceVersion, ByRef<Valve::VR::EVRInitError> peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion), ::il2cpp_utils::ExtractType(peError)})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<System::IntPtr, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(pchInterfaceVersion), byref(peError))));
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsInterfaceVersionValid
bool Valve::VR::OpenVRInterop::IsInterfaceVersionValid(ByRef<::Il2CppString*> pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion)})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, byref(pchInterfaceVersion))));
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetInitToken
uint Valve::VR::OpenVRInterop::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVRInterop::GetInitToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", "GetInitToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return THROW_UNLESS((::il2cpp_utils::RunMethod<uint, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method)));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREye Eye_Left
Valve::VR::EVREye Valve::VR::EVREye::_get_Eye_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_get_Eye_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("Valve.VR", "EVREye", "Eye_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREye Eye_Left
void Valve::VR::EVREye::_set_Eye_Left(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_set_Eye_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREye", "Eye_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREye Eye_Right
Valve::VR::EVREye Valve::VR::EVREye::_get_Eye_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_get_Eye_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREye>("Valve.VR", "EVREye", "Eye_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREye Eye_Right
void Valve::VR::EVREye::_set_Eye_Right(Valve::VR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::_set_Eye_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREye", "Eye_Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVREye::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREye::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType DirectX
Valve::VR::ETextureType Valve::VR::ETextureType::_get_DirectX() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_DirectX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "DirectX"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType DirectX
void Valve::VR::ETextureType::_set_DirectX(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_DirectX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "DirectX", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType OpenGL
Valve::VR::ETextureType Valve::VR::ETextureType::_get_OpenGL() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_OpenGL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "OpenGL"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType OpenGL
void Valve::VR::ETextureType::_set_OpenGL(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_OpenGL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "OpenGL", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType Vulkan
Valve::VR::ETextureType Valve::VR::ETextureType::_get_Vulkan() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_Vulkan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "Vulkan"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType Vulkan
void Valve::VR::ETextureType::_set_Vulkan(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_Vulkan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "Vulkan", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType IOSurface
Valve::VR::ETextureType Valve::VR::ETextureType::_get_IOSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_IOSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "IOSurface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType IOSurface
void Valve::VR::ETextureType::_set_IOSurface(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_IOSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "IOSurface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETextureType DirectX12
Valve::VR::ETextureType Valve::VR::ETextureType::_get_DirectX12() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_get_DirectX12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETextureType>("Valve.VR", "ETextureType", "DirectX12"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETextureType DirectX12
void Valve::VR::ETextureType::_set_DirectX12(Valve::VR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::_set_DirectX12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETextureType", "DirectX12", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ETextureType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETextureType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Auto
Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Auto
void Valve::VR::EColorSpace::_set_Auto(Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Gamma
Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Gamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_get_Gamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Gamma"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Gamma
void Valve::VR::EColorSpace::_set_Gamma(Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_set_Gamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Gamma", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EColorSpace Linear
Valve::VR::EColorSpace Valve::VR::EColorSpace::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EColorSpace>("Valve.VR", "EColorSpace", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EColorSpace Linear
void Valve::VR::EColorSpace::_set_Linear(Valve::VR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EColorSpace", "Linear", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EColorSpace::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EColorSpace::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackingResult
#include "Valve/VR/ETrackingResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Uninitialized
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Uninitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Uninitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Uninitialized
void Valve::VR::ETrackingResult::_set_Uninitialized(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Uninitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Uninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_InProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Calibrating_InProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_InProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
void Valve::VR::ETrackingResult::_set_Calibrating_InProgress(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Calibrating_InProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_InProgress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Calibrating_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
void Valve::VR::ETrackingResult::_set_Calibrating_OutOfRange(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Calibrating_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OK
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Running_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OK
void Valve::VR::ETrackingResult::_set_Running_OK(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Running_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OutOfRange
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_get_Running_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OutOfRange
void Valve::VR::ETrackingResult::_set_Running_OutOfRange(Valve::VR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::_set_Running_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OutOfRange", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ETrackingResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass Invalid
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass Invalid
void Valve::VR::ETrackedDeviceClass::_set_Invalid(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass HMD
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_HMD() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_HMD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "HMD"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass HMD
void Valve::VR::ETrackedDeviceClass::_set_HMD(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_HMD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "HMD", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass Controller
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_Controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_Controller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "Controller"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass Controller
void Valve::VR::ETrackedDeviceClass::_set_Controller(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_Controller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "Controller", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass GenericTracker
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_GenericTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_GenericTracker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "GenericTracker"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass GenericTracker
void Valve::VR::ETrackedDeviceClass::_set_GenericTracker(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_GenericTracker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "GenericTracker", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass TrackingReference
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_TrackingReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_TrackingReference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "TrackingReference"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass TrackingReference
void Valve::VR::ETrackedDeviceClass::_set_TrackingReference(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_TrackingReference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "TrackingReference", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceClass DisplayRedirect
Valve::VR::ETrackedDeviceClass Valve::VR::ETrackedDeviceClass::_get_DisplayRedirect() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_get_DisplayRedirect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceClass>("Valve.VR", "ETrackedDeviceClass", "DisplayRedirect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceClass DisplayRedirect
void Valve::VR::ETrackedDeviceClass::_set_DisplayRedirect(Valve::VR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::_set_DisplayRedirect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceClass", "DisplayRedirect", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ETrackedDeviceClass::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceClass::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole Invalid
Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole Invalid
void Valve::VR::ETrackedControllerRole::_set_Invalid(Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole LeftHand
Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole LeftHand
void Valve::VR::ETrackedControllerRole::_set_LeftHand(Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedControllerRole RightHand
Valve::VR::ETrackedControllerRole Valve::VR::ETrackedControllerRole::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedControllerRole>("Valve.VR", "ETrackedControllerRole", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedControllerRole RightHand
void Valve::VR::ETrackedControllerRole::_set_RightHand(Valve::VR::ETrackedControllerRole value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedControllerRole", "RightHand", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ETrackedControllerRole::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedControllerRole::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseSeated
Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseSeated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseSeated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseSeated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseSeated
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseSeated(Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseSeated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseSeated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseStanding
Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseStanding() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseStanding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseStanding"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseStanding
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseStanding(Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseStanding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseStanding", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseRawAndUncalibrated
Valve::VR::ETrackingUniverseOrigin Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseRawAndUncalibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_get_TrackingUniverseRawAndUncalibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingUniverseOrigin>("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseRawAndUncalibrated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingUniverseOrigin TrackingUniverseRawAndUncalibrated
void Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseRawAndUncalibrated(Valve::VR::ETrackingUniverseOrigin value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::_set_TrackingUniverseRawAndUncalibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingUniverseOrigin", "TrackingUniverseRawAndUncalibrated", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ETrackingUniverseOrigin::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackingUniverseOrigin::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Invalid
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Invalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Invalid
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Invalid(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingSystemName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingSystemName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingSystemName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingSystemName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingSystemName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingSystemName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingSystemName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingSystemName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModelNumber_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ModelNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ModelNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ModelNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModelNumber_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ModelNumber_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ModelNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ModelNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SerialNumber_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SerialNumber_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SerialNumber_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SerialNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SerialNumber_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SerialNumber_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SerialNumber_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SerialNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RenderModelName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RenderModelName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_RenderModelName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RenderModelName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RenderModelName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RenderModelName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_RenderModelName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RenderModelName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_WillDriftInYaw_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_WillDriftInYaw_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_WillDriftInYaw_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_WillDriftInYaw_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_WillDriftInYaw_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_WillDriftInYaw_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_WillDriftInYaw_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_WillDriftInYaw_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ManufacturerName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ManufacturerName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ManufacturerName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ManufacturerName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ManufacturerName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ManufacturerName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ManufacturerName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ManufacturerName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingFirmwareVersion_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingFirmwareVersion_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingFirmwareVersion_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingFirmwareVersion_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingFirmwareVersion_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingFirmwareVersion_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingFirmwareVersion_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingFirmwareVersion_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AllWirelessDongleDescriptions_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AllWirelessDongleDescriptions_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_AllWirelessDongleDescriptions_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AllWirelessDongleDescriptions_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AllWirelessDongleDescriptions_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AllWirelessDongleDescriptions_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_AllWirelessDongleDescriptions_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AllWirelessDongleDescriptions_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConnectedWirelessDongle_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ConnectedWirelessDongle_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ConnectedWirelessDongle_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ConnectedWirelessDongle_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ConnectedWirelessDongle_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ConnectedWirelessDongle_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ConnectedWirelessDongle_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ConnectedWirelessDongle_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsWireless_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsWireless_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsWireless_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsWireless_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsWireless_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsWireless_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsWireless_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsWireless_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsCharging_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsCharging_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceIsCharging_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsCharging_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceIsCharging_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsCharging_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceIsCharging_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceIsCharging_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceBatteryPercentage_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceBatteryPercentage_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceBatteryPercentage_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceBatteryPercentage_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceBatteryPercentage_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceBatteryPercentage_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceBatteryPercentage_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceBatteryPercentage_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_StatusDisplayTransform_Matrix34
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_StatusDisplayTransform_Matrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_StatusDisplayTransform_Matrix34");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_StatusDisplayTransform_Matrix34"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_StatusDisplayTransform_Matrix34
void Valve::VR::ETrackedDeviceProperty::_set_Prop_StatusDisplayTransform_Matrix34(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_StatusDisplayTransform_Matrix34");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_StatusDisplayTransform_Matrix34", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_UpdateAvailable_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_UpdateAvailable_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_UpdateAvailable_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_UpdateAvailable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_UpdateAvailable_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_UpdateAvailable_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_UpdateAvailable_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_UpdateAvailable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdate_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdate_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdate_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdate_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdate_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdate_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdate_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdate_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdateURL_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdateURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ManualUpdateURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdateURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ManualUpdateURL_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdateURL_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ManualUpdateURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ManualUpdateURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HardwareRevision_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HardwareRevision_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HardwareRevision_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HardwareRevision_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FPGAVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FPGAVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FPGAVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FPGAVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FPGAVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FPGAVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FPGAVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FPGAVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VRCVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VRCVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_VRCVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VRCVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VRCVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VRCVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_VRCVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VRCVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RadioVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RadioVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_RadioVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RadioVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RadioVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RadioVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_RadioVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RadioVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DongleVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DongleVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DongleVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DongleVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DongleVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DongleVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DongleVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DongleVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_BlockServerShutdown_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_BlockServerShutdown_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_BlockServerShutdown_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_BlockServerShutdown_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_BlockServerShutdown_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_BlockServerShutdown_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_BlockServerShutdown_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_BlockServerShutdown_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CanUnifyCoordinateSystemWithHmd_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CanUnifyCoordinateSystemWithHmd_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CanUnifyCoordinateSystemWithHmd_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CanUnifyCoordinateSystemWithHmd_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CanUnifyCoordinateSystemWithHmd_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CanUnifyCoordinateSystemWithHmd_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CanUnifyCoordinateSystemWithHmd_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CanUnifyCoordinateSystemWithHmd_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ContainsProximitySensor_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ContainsProximitySensor_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ContainsProximitySensor_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ContainsProximitySensor_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ContainsProximitySensor_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ContainsProximitySensor_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ContainsProximitySensor_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ContainsProximitySensor_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceProvidesBatteryStatus_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceProvidesBatteryStatus_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceProvidesBatteryStatus_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceProvidesBatteryStatus_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceProvidesBatteryStatus_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceProvidesBatteryStatus_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceProvidesBatteryStatus_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceProvidesBatteryStatus_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceCanPowerOff_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceCanPowerOff_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceCanPowerOff_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceCanPowerOff_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceCanPowerOff_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceCanPowerOff_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceCanPowerOff_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceCanPowerOff_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ProgrammingTarget_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ProgrammingTarget_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ProgrammingTarget_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ProgrammingTarget_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ProgrammingTarget_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ProgrammingTarget_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ProgrammingTarget_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ProgrammingTarget_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceClass_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceClass_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DeviceClass_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceClass_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DeviceClass_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceClass_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DeviceClass_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DeviceClass_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCamera_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCamera_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCamera_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCamera_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCamera_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCamera_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCamera_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCamera_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverVersion_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverVersion_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverVersion_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverVersion_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverVersion_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverVersion_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverVersion_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverVersion_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ForceUpdateRequired_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ForceUpdateRequired_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Firmware_ForceUpdateRequired_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ForceUpdateRequired_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Firmware_ForceUpdateRequired_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ForceUpdateRequired_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Firmware_ForceUpdateRequired_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Firmware_ForceUpdateRequired_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ViveSystemButtonFixRequired_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ViveSystemButtonFixRequired_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ViveSystemButtonFixRequired_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ViveSystemButtonFixRequired_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ViveSystemButtonFixRequired_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ViveSystemButtonFixRequired_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ViveSystemButtonFixRequired_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ViveSystemButtonFixRequired_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentDriver_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentDriver_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentDriver_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentDriver_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentDriver_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentDriver_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentDriver_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentDriver_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ResourceRoot_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ResourceRoot_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ResourceRoot_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ResourceRoot_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ResourceRoot_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ResourceRoot_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ResourceRoot_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ResourceRoot_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_RegisteredDeviceType_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_RegisteredDeviceType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_RegisteredDeviceType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_RegisteredDeviceType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_RegisteredDeviceType_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_RegisteredDeviceType_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_RegisteredDeviceType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_RegisteredDeviceType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_InputProfilePath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_InputProfilePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_InputProfilePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_InputProfilePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_InputProfilePath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_InputProfilePath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_InputProfilePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_InputProfilePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ReportsTimeSinceVSync_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ReportsTimeSinceVSync_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ReportsTimeSinceVSync_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ReportsTimeSinceVSync_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ReportsTimeSinceVSync_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ReportsTimeSinceVSync_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ReportsTimeSinceVSync_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ReportsTimeSinceVSync_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromVsyncToPhotons_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromVsyncToPhotons_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromVsyncToPhotons_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromVsyncToPhotons_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromVsyncToPhotons_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromVsyncToPhotons_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromVsyncToPhotons_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromVsyncToPhotons_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFrequency_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFrequency_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFrequency_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFrequency_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFrequency_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFrequency_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFrequency_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFrequency_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserIpdMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserIpdMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_UserIpdMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserIpdMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserIpdMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserIpdMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_UserIpdMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserIpdMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CurrentUniverseId_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CurrentUniverseId_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CurrentUniverseId_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CurrentUniverseId_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CurrentUniverseId_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CurrentUniverseId_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CurrentUniverseId_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CurrentUniverseId_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_PreviousUniverseId_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_PreviousUniverseId_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_PreviousUniverseId_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_PreviousUniverseId_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_PreviousUniverseId_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_PreviousUniverseId_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_PreviousUniverseId_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_PreviousUniverseId_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_IsOnDesktop_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_IsOnDesktop_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_IsOnDesktop_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_IsOnDesktop_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_IsOnDesktop_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_IsOnDesktop_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_IsOnDesktop_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_IsOnDesktop_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCType_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCType_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCType_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCType_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCType_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCType_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCType_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCType_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCOffset_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCOffset_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCOffset_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCScale_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCScale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCScale_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidVendorID_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidVendorID_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidVendorID_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidVendorID_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidVendorID_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidVendorID_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidVendorID_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidVendorID_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageLeft_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageLeft_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageLeft_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageLeft_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageLeft_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageLeft_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageLeft_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageLeft_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageRight_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageRight_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageRight_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageRight_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageRight_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageRight_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageRight_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageRight_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCBlackClamp_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCBlackClamp_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCBlackClamp_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCBlackClamp_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCBlackClamp_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCBlackClamp_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCBlackClamp_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCBlackClamp_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidProductID_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidProductID_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_EdidProductID_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidProductID_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_EdidProductID_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidProductID_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_EdidProductID_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_EdidProductID_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransform_Matrix34
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransform_Matrix34() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransform_Matrix34");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransform_Matrix34"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransform_Matrix34
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransform_Matrix34(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransform_Matrix34");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransform_Matrix34", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCType_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCType_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCType_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCType_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCType_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCType_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCType_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCType_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCOffset_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCOffset_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCOffset_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCOffset_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCOffset_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCOffset_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCScale_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCScale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCScale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCScale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCScale_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCScale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCPrescale_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCPrescale_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCPrescale_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCPrescale_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCPrescale_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCPrescale_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCPrescale_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCPrescale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCImage_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCImage_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayGCImage_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCImage_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayGCImage_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCImage_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayGCImage_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayGCImage_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftU_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftU_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftU_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftU_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftU_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftU_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftU_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftU_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftV_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftV_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterLeftV_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftV_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterLeftV_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftV_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterLeftV_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterLeftV_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightU_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightU_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightU_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightU_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightU_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightU_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightU_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightU_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightV_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightV_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LensCenterRightV_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightV_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LensCenterRightV_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightV_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LensCenterRightV_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LensCenterRightV_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserHeadToEyeDepthMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserHeadToEyeDepthMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_UserHeadToEyeDepthMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserHeadToEyeDepthMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserHeadToEyeDepthMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserHeadToEyeDepthMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_UserHeadToEyeDepthMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserHeadToEyeDepthMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareDescription_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareDescription_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraFirmwareDescription_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareDescription_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraFirmwareDescription_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareDescription_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraFirmwareDescription_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraFirmwareDescription_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFPGAVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFPGAVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayFPGAVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFPGAVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayFPGAVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFPGAVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayFPGAVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayFPGAVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayBootloaderVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayBootloaderVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayBootloaderVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayBootloaderVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayBootloaderVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayBootloaderVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayBootloaderVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayBootloaderVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHardwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHardwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHardwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHardwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHardwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHardwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHardwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHardwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioFirmwareVersion_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioFirmwareVersion_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_AudioFirmwareVersion_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioFirmwareVersion_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AudioFirmwareVersion_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioFirmwareVersion_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_AudioFirmwareVersion_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AudioFirmwareVersion_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraCompatibilityMode_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraCompatibilityMode_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraCompatibilityMode_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraCompatibilityMode_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraCompatibilityMode_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraCompatibilityMode_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraCompatibilityMode_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraCompatibilityMode_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotHorizontalFieldOfViewDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotHorizontalFieldOfViewDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotHorizontalFieldOfViewDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotHorizontalFieldOfViewDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotVerticalFieldOfViewDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotVerticalFieldOfViewDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ScreenshotVerticalFieldOfViewDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotVerticalFieldOfViewDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ScreenshotVerticalFieldOfViewDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotVerticalFieldOfViewDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ScreenshotVerticalFieldOfViewDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ScreenshotVerticalFieldOfViewDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplaySuppressed_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplaySuppressed_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplaySuppressed_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplaySuppressed_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplaySuppressed_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplaySuppressed_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplaySuppressed_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplaySuppressed_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayAllowNightMode_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayAllowNightMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayAllowNightMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayAllowNightMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayAllowNightMode_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayAllowNightMode_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayAllowNightMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayAllowNightMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageWidth_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageWidth_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageWidth_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageWidth_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageWidth_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageWidth_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageHeight_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageHeight_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageHeight_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageHeight_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageHeight_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageHeight_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageNumChannels_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageNumChannels_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageNumChannels_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageNumChannels_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageNumChannels_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageNumChannels_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageNumChannels_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageNumChannels_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageData_Binary
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageData_Binary() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayMCImageData_Binary");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageData_Binary"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayMCImageData_Binary
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageData_Binary(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayMCImageData_Binary");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayMCImageData_Binary", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromPhotonsToVblank_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromPhotonsToVblank_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SecondsFromPhotonsToVblank_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromPhotonsToVblank_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SecondsFromPhotonsToVblank_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromPhotonsToVblank_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SecondsFromPhotonsToVblank_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SecondsFromPhotonsToVblank_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverDirectModeSendsVsyncEvents_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverDirectModeSendsVsyncEvents_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverDirectModeSendsVsyncEvents_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverDirectModeSendsVsyncEvents_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverDirectModeSendsVsyncEvents_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverDirectModeSendsVsyncEvents_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverDirectModeSendsVsyncEvents_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverDirectModeSendsVsyncEvents_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayDebugMode_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayDebugMode_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayDebugMode_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayDebugMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayDebugMode_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayDebugMode_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayDebugMode_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayDebugMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_GraphicsAdapterLuid_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_GraphicsAdapterLuid_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_GraphicsAdapterLuid_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_GraphicsAdapterLuid_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_GraphicsAdapterLuid_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_GraphicsAdapterLuid_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_GraphicsAdapterLuid_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_GraphicsAdapterLuid_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverProvidedChaperonePath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverProvidedChaperonePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverProvidedChaperonePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverProvidedChaperonePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverProvidedChaperonePath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverProvidedChaperonePath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverProvidedChaperonePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverProvidedChaperonePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedTrackingReferenceCount_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedTrackingReferenceCount_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedTrackingReferenceCount_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedTrackingReferenceCount_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedTrackingReferenceCount_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedTrackingReferenceCount_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedTrackingReferenceCount_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedTrackingReferenceCount_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedControllerCount_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedControllerCount_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ExpectedControllerCount_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedControllerCount_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ExpectedControllerCount_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedControllerCount_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ExpectedControllerCount_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ExpectedControllerCount_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerLeftDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerLeftDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerLeftDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerLeftDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerLeftDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerLeftDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerLeftDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerLeftDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerRightDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerRightDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathControllerRightDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerRightDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathControllerRightDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerRightDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathControllerRightDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathControllerRightDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathTrackingReferenceDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathTrackingReferenceDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathTrackingReferenceDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathTrackingReferenceDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathTrackingReferenceDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathTrackingReferenceDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathTrackingReferenceDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathTrackingReferenceDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DoNotApplyPrediction_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DoNotApplyPrediction_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DoNotApplyPrediction_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DoNotApplyPrediction_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DoNotApplyPrediction_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DoNotApplyPrediction_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DoNotApplyPrediction_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DoNotApplyPrediction_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransforms_Matrix34_Array
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransforms_Matrix34_Array() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_CameraToHeadTransforms_Matrix34_Array");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransforms_Matrix34_Array"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_CameraToHeadTransforms_Matrix34_Array
void Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransforms_Matrix34_Array(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_CameraToHeadTransforms_Matrix34_Array");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_CameraToHeadTransforms_Matrix34_Array", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverIsDrawingControllers_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverIsDrawingControllers_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverIsDrawingControllers_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverIsDrawingControllers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverIsDrawingControllers_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverIsDrawingControllers_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverIsDrawingControllers_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverIsDrawingControllers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsApplicationPause_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsApplicationPause_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsApplicationPause_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsApplicationPause_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsApplicationPause_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsApplicationPause_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsApplicationPause_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsApplicationPause_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsReducedRendering_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsReducedRendering_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DriverRequestsReducedRendering_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsReducedRendering_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DriverRequestsReducedRendering_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsReducedRendering_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DriverRequestsReducedRendering_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DriverRequestsReducedRendering_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_AttachedDeviceId_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_AttachedDeviceId_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_AttachedDeviceId_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_AttachedDeviceId_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_AttachedDeviceId_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_AttachedDeviceId_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_AttachedDeviceId_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_AttachedDeviceId_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_SupportedButtons_Uint64
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_SupportedButtons_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_SupportedButtons_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_SupportedButtons_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_SupportedButtons_Uint64
void Valve::VR::ETrackedDeviceProperty::_set_Prop_SupportedButtons_Uint64(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_SupportedButtons_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_SupportedButtons_Uint64", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis0Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis0Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis0Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis0Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis0Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis0Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis0Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis0Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis1Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis1Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis1Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis1Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis1Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis1Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis1Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis1Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis2Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis2Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis2Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis2Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis2Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis2Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis2Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis2Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis3Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis3Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis3Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis3Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis3Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis3Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis3Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis3Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis4Type_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis4Type_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_Axis4Type_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis4Type_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_Axis4Type_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis4Type_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_Axis4Type_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_Axis4Type_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerRoleHint_Int32
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerRoleHint_Int32() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerRoleHint_Int32");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerRoleHint_Int32"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerRoleHint_Int32
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerRoleHint_Int32(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerRoleHint_Int32");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerRoleHint_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewLeftDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewLeftDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewLeftDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewLeftDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewLeftDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewLeftDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewLeftDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewLeftDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewRightDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewRightDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewRightDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewRightDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewRightDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewRightDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewRightDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewRightDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewTopDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewTopDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewTopDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewTopDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewTopDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewTopDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewTopDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewTopDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewBottomDegrees_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewBottomDegrees_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_FieldOfViewBottomDegrees_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewBottomDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_FieldOfViewBottomDegrees_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewBottomDegrees_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_FieldOfViewBottomDegrees_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_FieldOfViewBottomDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMinimumMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMinimumMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMinimumMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMinimumMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMinimumMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMinimumMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMinimumMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMinimumMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMaximumMeters_Float
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMaximumMeters_Float() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackingRangeMaximumMeters_Float");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMaximumMeters_Float"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackingRangeMaximumMeters_Float
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMaximumMeters_Float(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackingRangeMaximumMeters_Float");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackingRangeMaximumMeters_Float", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModeLabel_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ModeLabel_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ModeLabel_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ModeLabel_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ModeLabel_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ModeLabel_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ModeLabel_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ModeLabel_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_IconPathName_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_IconPathName_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_IconPathName_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_IconPathName_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_IconPathName_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_IconPathName_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_IconPathName_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_IconPathName_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceOff_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceOff_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceOff_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceOff_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceOff_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceOff_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceOff_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceOff_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearching_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearching_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearching_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearching_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearching_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearching_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearching_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearching_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearchingAlert_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearchingAlert_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceSearchingAlert_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearchingAlert_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceSearchingAlert_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearchingAlert_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceSearchingAlert_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceSearchingAlert_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReady_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReady_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReady_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReady_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReady_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReady_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReady_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReady_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReadyAlert_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReadyAlert_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceReadyAlert_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReadyAlert_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceReadyAlert_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReadyAlert_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceReadyAlert_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceReadyAlert_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceNotReady_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceNotReady_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceNotReady_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceNotReady_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceNotReady_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceNotReady_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceNotReady_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceNotReady_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceStandby_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceStandby_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceStandby_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceStandby_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceStandby_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceStandby_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceStandby_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceStandby_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceAlertLow_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceAlertLow_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_NamedIconPathDeviceAlertLow_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceAlertLow_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_NamedIconPathDeviceAlertLow_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceAlertLow_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_NamedIconPathDeviceAlertLow_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_NamedIconPathDeviceAlertLow_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_Start
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_Start
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_Start(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_End
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_DisplayHiddenArea_Binary_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_DisplayHiddenArea_Binary_End
void Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_End(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_DisplayHiddenArea_Binary_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_DisplayHiddenArea_Binary_End", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentContainer
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ParentContainer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentContainer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ParentContainer
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentContainer(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ParentContainer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ParentContainer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserConfigPath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_UserConfigPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_UserConfigPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_UserConfigPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_UserConfigPath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_UserConfigPath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_UserConfigPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_UserConfigPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_InstallPath_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_InstallPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_InstallPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_InstallPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_InstallPath_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_InstallPath_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_InstallPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_InstallPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDisplayComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDisplayComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDisplayComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDisplayComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDisplayComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDisplayComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDisplayComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDisplayComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasControllerComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasControllerComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasControllerComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasControllerComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasControllerComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasControllerComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasControllerComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasControllerComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCameraComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCameraComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasCameraComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCameraComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasCameraComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCameraComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasCameraComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasCameraComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDriverDirectModeComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDriverDirectModeComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasDriverDirectModeComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDriverDirectModeComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasDriverDirectModeComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDriverDirectModeComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasDriverDirectModeComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasDriverDirectModeComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasVirtualDisplayComponent_Bool
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_HasVirtualDisplayComponent_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_HasVirtualDisplayComponent_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_HasVirtualDisplayComponent_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_HasVirtualDisplayComponent_Bool
void Valve::VR::ETrackedDeviceProperty::_set_Prop_HasVirtualDisplayComponent_Bool(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_HasVirtualDisplayComponent_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_HasVirtualDisplayComponent_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerType_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_ControllerType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_ControllerType_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerType_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_ControllerType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_ControllerType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_LegacyInputProfile_String
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_LegacyInputProfile_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_LegacyInputProfile_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_LegacyInputProfile_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_LegacyInputProfile_String
void Valve::VR::ETrackedDeviceProperty::_set_Prop_LegacyInputProfile_String(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_LegacyInputProfile_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_LegacyInputProfile_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_Start
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_Start
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_Start(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_End
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_VendorSpecific_Reserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_VendorSpecific_Reserved_End
void Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_End(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_VendorSpecific_Reserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_VendorSpecific_Reserved_End", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackedDeviceProperty_Max
Valve::VR::ETrackedDeviceProperty Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackedDeviceProperty_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_get_Prop_TrackedDeviceProperty_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedDeviceProperty>("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackedDeviceProperty_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedDeviceProperty Prop_TrackedDeviceProperty_Max
void Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackedDeviceProperty_Max(Valve::VR::ETrackedDeviceProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::_set_Prop_TrackedDeviceProperty_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedDeviceProperty", "Prop_TrackedDeviceProperty_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ETrackedDeviceProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedDeviceProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_Success(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDataType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDataType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDataType(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDataType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDeviceClass() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDeviceClass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDeviceClass(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDeviceClass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_BufferTooSmall(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_UnknownProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_UnknownProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_UnknownProperty(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_UnknownProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidDevice(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CouldNotContactServer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_CouldNotContactServer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CouldNotContactServer(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_CouldNotContactServer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_ValueNotProvidedByDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_ValueNotProvidedByDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_ValueNotProvidedByDevice(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_ValueNotProvidedByDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_StringExceedsMaximumLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_StringExceedsMaximumLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_StringExceedsMaximumLength(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_StringExceedsMaximumLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_NotYetAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_NotYetAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_NotYetAvailable(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_NotYetAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_PermissionDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_PermissionDenied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_PermissionDenied(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_PermissionDenied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidOperation() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidOperation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidOperation(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidOperation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CannotWriteToWildcards() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_get_TrackedProp_CannotWriteToWildcards");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CannotWriteToWildcards(Valve::VR::ETrackedPropertyError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::_set_TrackedProp_CannotWriteToWildcards");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ETrackedPropertyError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ETrackedPropertyError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_Default
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_Default"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_Default
void Valve::VR::EVRSubmitFlags::_set_Submit_Default(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_Default", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_LensDistortionAlreadyApplied
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_LensDistortionAlreadyApplied() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_LensDistortionAlreadyApplied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_LensDistortionAlreadyApplied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_LensDistortionAlreadyApplied
void Valve::VR::EVRSubmitFlags::_set_Submit_LensDistortionAlreadyApplied(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_LensDistortionAlreadyApplied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_LensDistortionAlreadyApplied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_GlRenderBuffer
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_GlRenderBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_GlRenderBuffer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_GlRenderBuffer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_GlRenderBuffer
void Valve::VR::EVRSubmitFlags::_set_Submit_GlRenderBuffer(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_GlRenderBuffer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_GlRenderBuffer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_Reserved
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_Reserved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_Reserved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_Reserved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_Reserved
void Valve::VR::EVRSubmitFlags::_set_Submit_Reserved(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_Reserved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_Reserved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithPose
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithPose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithPose"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithPose
void Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithPose(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithPose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithPose", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithDepth
Valve::VR::EVRSubmitFlags Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_get_Submit_TextureWithDepth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSubmitFlags>("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithDepth"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSubmitFlags Submit_TextureWithDepth
void Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithDepth(Valve::VR::EVRSubmitFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::_set_Submit_TextureWithDepth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSubmitFlags", "Submit_TextureWithDepth", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRSubmitFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSubmitFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRState
#include "Valve/VR/EVRState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Undefined
Valve::VR::EVRState Valve::VR::EVRState::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Undefined
void Valve::VR::EVRState::_set_Undefined(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Undefined", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Off
Valve::VR::EVRState Valve::VR::EVRState::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Off"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Off
void Valve::VR::EVRState::_set_Off(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Off", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Searching
Valve::VR::EVRState Valve::VR::EVRState::_get_Searching() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Searching");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Searching"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Searching
void Valve::VR::EVRState::_set_Searching(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Searching");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Searching", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Searching_Alert
Valve::VR::EVRState Valve::VR::EVRState::_get_Searching_Alert() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Searching_Alert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Searching_Alert"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Searching_Alert
void Valve::VR::EVRState::_set_Searching_Alert(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Searching_Alert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Searching_Alert", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready
Valve::VR::EVRState Valve::VR::EVRState::_get_Ready() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Ready");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready
void Valve::VR::EVRState::_set_Ready(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Ready");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready_Alert
Valve::VR::EVRState Valve::VR::EVRState::_get_Ready_Alert() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Ready_Alert");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready_Alert"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready_Alert
void Valve::VR::EVRState::_set_Ready_Alert(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Ready_Alert");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready_Alert", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState NotReady
Valve::VR::EVRState Valve::VR::EVRState::_get_NotReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_NotReady");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "NotReady"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState NotReady
void Valve::VR::EVRState::_set_NotReady(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_NotReady");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "NotReady", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Standby
Valve::VR::EVRState Valve::VR::EVRState::_get_Standby() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Standby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Standby"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Standby
void Valve::VR::EVRState::_set_Standby(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Standby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Standby", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRState Ready_Alert_Low
Valve::VR::EVRState Valve::VR::EVRState::_get_Ready_Alert_Low() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_get_Ready_Alert_Low");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRState>("Valve.VR", "EVRState", "Ready_Alert_Low"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRState Ready_Alert_Low
void Valve::VR::EVRState::_set_Ready_Alert_Low(Valve::VR::EVRState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::_set_Ready_Alert_Low");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRState", "Ready_Alert_Low", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_None
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_None
void Valve::VR::EVREventType::_set_VREvent_None(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceActivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceActivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceActivated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceActivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceActivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceDeactivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceDeactivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceDeactivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceDeactivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceDeactivated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceDeactivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceDeactivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceDeactivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUpdated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUpdated
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUpdated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionStarted
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionEnded
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionEnded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceUserInteractionEnded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionEnded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceUserInteractionEnded
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionEnded(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceUserInteractionEnded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceUserInteractionEnded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_IpdChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_IpdChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_IpdChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_IpdChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_IpdChanged
void Valve::VR::EVREventType::_set_VREvent_IpdChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_IpdChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_IpdChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnterStandbyMode
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnterStandbyMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_EnterStandbyMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnterStandbyMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnterStandbyMode
void Valve::VR::EVREventType::_set_VREvent_EnterStandbyMode(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_EnterStandbyMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnterStandbyMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LeaveStandbyMode
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LeaveStandbyMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_LeaveStandbyMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LeaveStandbyMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LeaveStandbyMode
void Valve::VR::EVREventType::_set_VREvent_LeaveStandbyMode(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_LeaveStandbyMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LeaveStandbyMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceRoleChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedDeviceRoleChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedDeviceRoleChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedDeviceRoleChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedDeviceRoleChanged
void Valve::VR::EVREventType::_set_VREvent_TrackedDeviceRoleChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedDeviceRoleChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedDeviceRoleChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WatchdogWakeUpRequested
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WatchdogWakeUpRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WatchdogWakeUpRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WatchdogWakeUpRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WatchdogWakeUpRequested
void Valve::VR::EVREventType::_set_VREvent_WatchdogWakeUpRequested(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WatchdogWakeUpRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WatchdogWakeUpRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LensDistortionChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LensDistortionChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_LensDistortionChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LensDistortionChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LensDistortionChanged
void Valve::VR::EVREventType::_set_VREvent_LensDistortionChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_LensDistortionChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LensDistortionChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PropertyChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PropertyChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PropertyChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PropertyChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PropertyChanged
void Valve::VR::EVREventType::_set_VREvent_PropertyChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PropertyChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PropertyChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WirelessDisconnect
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WirelessDisconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WirelessDisconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WirelessDisconnect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WirelessDisconnect
void Valve::VR::EVREventType::_set_VREvent_WirelessDisconnect(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WirelessDisconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WirelessDisconnect", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WirelessReconnect
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WirelessReconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WirelessReconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WirelessReconnect"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WirelessReconnect
void Valve::VR::EVREventType::_set_VREvent_WirelessReconnect(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WirelessReconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WirelessReconnect", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonPress
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonPress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonPress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonPress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonPress
void Valve::VR::EVREventType::_set_VREvent_ButtonPress(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonPress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonPress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonUnpress
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonUnpress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonUnpress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonUnpress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonUnpress
void Valve::VR::EVREventType::_set_VREvent_ButtonUnpress(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonUnpress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonUnpress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonTouch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonTouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonTouch
void Valve::VR::EVREventType::_set_VREvent_ButtonTouch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonTouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ButtonUntouch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ButtonUntouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ButtonUntouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ButtonUntouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ButtonUntouch
void Valve::VR::EVREventType::_set_VREvent_ButtonUntouch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ButtonUntouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ButtonUntouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Press
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Press() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Press");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Press"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Press
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Press(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Press");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Press", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Unpress
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Unpress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Unpress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Unpress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Unpress
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Unpress(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Unpress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Unpress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Touch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Touch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Touch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Touch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Touch
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Touch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Touch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Touch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Untouch
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Untouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Untouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Untouch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Untouch
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Untouch(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Untouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Untouch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Move
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Move() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Move");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Move"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Move
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Move(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Move");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Move", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch1
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch1
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch1(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch2
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_ModeSwitch2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_ModeSwitch2
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch2(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_ModeSwitch2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_ModeSwitch2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Cancel
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DualAnalog_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DualAnalog_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DualAnalog_Cancel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DualAnalog_Cancel
void Valve::VR::EVREventType::_set_VREvent_DualAnalog_Cancel(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DualAnalog_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DualAnalog_Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseMove
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MouseMove");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseMove"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseMove
void Valve::VR::EVREventType::_set_VREvent_MouseMove(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MouseMove");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseMove", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseButtonDown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MouseButtonDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseButtonDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseButtonDown
void Valve::VR::EVREventType::_set_VREvent_MouseButtonDown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MouseButtonDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseButtonDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MouseButtonUp
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MouseButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MouseButtonUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MouseButtonUp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MouseButtonUp
void Valve::VR::EVREventType::_set_VREvent_MouseButtonUp(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MouseButtonUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MouseButtonUp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FocusEnter
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FocusEnter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FocusEnter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FocusEnter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FocusEnter
void Valve::VR::EVREventType::_set_VREvent_FocusEnter(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FocusEnter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FocusEnter", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FocusLeave
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FocusLeave() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FocusLeave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FocusLeave"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FocusLeave
void Valve::VR::EVREventType::_set_VREvent_FocusLeave(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FocusLeave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FocusLeave", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Scroll
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Scroll() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Scroll");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Scroll"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Scroll
void Valve::VR::EVREventType::_set_VREvent_Scroll(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Scroll");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Scroll", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TouchPadMove
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TouchPadMove() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TouchPadMove");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TouchPadMove"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TouchPadMove
void Valve::VR::EVREventType::_set_VREvent_TouchPadMove(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TouchPadMove");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TouchPadMove", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayFocusChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayFocusChanged
void Valve::VR::EVREventType::_set_VREvent_OverlayFocusChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusCaptured
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_InputFocusCaptured");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusCaptured"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusCaptured
void Valve::VR::EVREventType::_set_VREvent_InputFocusCaptured(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_InputFocusCaptured");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusCaptured", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusReleased
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_InputFocusReleased");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusReleased"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusReleased
void Valve::VR::EVREventType::_set_VREvent_InputFocusReleased(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_InputFocusReleased");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusReleased", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusLost
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneFocusLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusLost"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusLost
void Valve::VR::EVREventType::_set_VREvent_SceneFocusLost(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneFocusLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusLost", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusGained
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusGained() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneFocusGained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusGained"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusGained
void Valve::VR::EVREventType::_set_VREvent_SceneFocusGained(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneFocusGained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusGained", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneApplicationChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneApplicationChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneApplicationChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneApplicationChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneApplicationChanged
void Valve::VR::EVREventType::_set_VREvent_SceneApplicationChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneApplicationChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneApplicationChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneFocusChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneFocusChanged
void Valve::VR::EVREventType::_set_VREvent_SceneFocusChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_InputFocusChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_InputFocusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_InputFocusChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_InputFocusChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_InputFocusChanged
void Valve::VR::EVREventType::_set_VREvent_InputFocusChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_InputFocusChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_InputFocusChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SceneApplicationSecondaryRenderingStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SceneApplicationSecondaryRenderingStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SceneApplicationSecondaryRenderingStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SceneApplicationSecondaryRenderingStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SceneApplicationSecondaryRenderingStarted
void Valve::VR::EVREventType::_set_VREvent_SceneApplicationSecondaryRenderingStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SceneApplicationSecondaryRenderingStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SceneApplicationSecondaryRenderingStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_HideRenderModels
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_HideRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_HideRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_HideRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_HideRenderModels
void Valve::VR::EVREventType::_set_VREvent_HideRenderModels(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_HideRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_HideRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ShowRenderModels
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ShowRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ShowRenderModels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ShowRenderModels"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ShowRenderModels
void Valve::VR::EVREventType::_set_VREvent_ShowRenderModels(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ShowRenderModels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ShowRenderModels", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ConsoleOpened
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ConsoleOpened() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ConsoleOpened");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ConsoleOpened"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ConsoleOpened
void Valve::VR::EVREventType::_set_VREvent_ConsoleOpened(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ConsoleOpened");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ConsoleOpened", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ConsoleClosed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ConsoleClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ConsoleClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ConsoleClosed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ConsoleClosed
void Valve::VR::EVREventType::_set_VREvent_ConsoleClosed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ConsoleClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ConsoleClosed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayShown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayShown
void Valve::VR::EVREventType::_set_VREvent_OverlayShown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayHidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayHidden
void Valve::VR::EVREventType::_set_VREvent_OverlayHidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardActivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardActivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardActivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardActivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardActivated
void Valve::VR::EVREventType::_set_VREvent_DashboardActivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardActivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardActivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardDeactivated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardDeactivated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardDeactivated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardDeactivated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardDeactivated
void Valve::VR::EVREventType::_set_VREvent_DashboardDeactivated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardDeactivated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardDeactivated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardThumbSelected
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardThumbSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardThumbSelected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardThumbSelected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardThumbSelected
void Valve::VR::EVREventType::_set_VREvent_DashboardThumbSelected(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardThumbSelected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardThumbSelected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardRequested
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardRequested
void Valve::VR::EVREventType::_set_VREvent_DashboardRequested(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ResetDashboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ResetDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ResetDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ResetDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ResetDashboard
void Valve::VR::EVREventType::_set_VREvent_ResetDashboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ResetDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ResetDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RenderToast
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RenderToast() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_RenderToast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RenderToast"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RenderToast
void Valve::VR::EVREventType::_set_VREvent_RenderToast(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_RenderToast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RenderToast", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ImageLoaded
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ImageLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ImageLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ImageLoaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ImageLoaded
void Valve::VR::EVREventType::_set_VREvent_ImageLoaded(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ImageLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ImageLoaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ShowKeyboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ShowKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ShowKeyboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ShowKeyboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ShowKeyboard
void Valve::VR::EVREventType::_set_VREvent_ShowKeyboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ShowKeyboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ShowKeyboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_HideKeyboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_HideKeyboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_HideKeyboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_HideKeyboard
void Valve::VR::EVREventType::_set_VREvent_HideKeyboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_HideKeyboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_HideKeyboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusGained
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusGained() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusGained");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusGained"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusGained
void Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusGained(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusGained");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusGained", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusLost
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlayGamepadFocusLost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusLost"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlayGamepadFocusLost
void Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusLost(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlayGamepadFocusLost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlayGamepadFocusLost", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_OverlaySharedTextureChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_OverlaySharedTextureChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_OverlaySharedTextureChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_OverlaySharedTextureChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_OverlaySharedTextureChanged
void Valve::VR::EVREventType::_set_VREvent_OverlaySharedTextureChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_OverlaySharedTextureChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_OverlaySharedTextureChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonDown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonDown
void Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonDown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonUp
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardGuideButtonUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonUp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardGuideButtonUp
void Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonUp(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardGuideButtonUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardGuideButtonUp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotTriggered
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotTriggered() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotTriggered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotTriggered"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotTriggered
void Valve::VR::EVREventType::_set_VREvent_ScreenshotTriggered(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotTriggered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotTriggered", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ImageFailed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ImageFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ImageFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ImageFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ImageFailed
void Valve::VR::EVREventType::_set_VREvent_ImageFailed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ImageFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ImageFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardOverlayCreated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardOverlayCreated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardOverlayCreated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardOverlayCreated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardOverlayCreated
void Valve::VR::EVREventType::_set_VREvent_DashboardOverlayCreated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardOverlayCreated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardOverlayCreated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_RequestScreenshot
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_RequestScreenshot() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_RequestScreenshot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_RequestScreenshot"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_RequestScreenshot
void Valve::VR::EVREventType::_set_VREvent_RequestScreenshot(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_RequestScreenshot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_RequestScreenshot", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotTaken
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotTaken() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotTaken");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotTaken"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotTaken
void Valve::VR::EVREventType::_set_VREvent_ScreenshotTaken(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotTaken");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotTaken", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotFailed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotFailed
void Valve::VR::EVREventType::_set_VREvent_ScreenshotFailed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SubmitScreenshotToDashboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SubmitScreenshotToDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SubmitScreenshotToDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SubmitScreenshotToDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SubmitScreenshotToDashboard
void Valve::VR::EVREventType::_set_VREvent_SubmitScreenshotToDashboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SubmitScreenshotToDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SubmitScreenshotToDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ScreenshotProgressToDashboard
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ScreenshotProgressToDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ScreenshotProgressToDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ScreenshotProgressToDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ScreenshotProgressToDashboard
void Valve::VR::EVREventType::_set_VREvent_ScreenshotProgressToDashboard(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ScreenshotProgressToDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ScreenshotProgressToDashboard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PrimaryDashboardDeviceChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PrimaryDashboardDeviceChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PrimaryDashboardDeviceChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PrimaryDashboardDeviceChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PrimaryDashboardDeviceChanged
void Valve::VR::EVREventType::_set_VREvent_PrimaryDashboardDeviceChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PrimaryDashboardDeviceChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PrimaryDashboardDeviceChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Shown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Shown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_Shown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Shown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Shown
void Valve::VR::EVREventType::_set_VREvent_Notification_Shown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_Shown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Shown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Hidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Hidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_Hidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Hidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Hidden
void Valve::VR::EVREventType::_set_VREvent_Notification_Hidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_Hidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Hidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_BeginInteraction
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_BeginInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_BeginInteraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_BeginInteraction"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_BeginInteraction
void Valve::VR::EVREventType::_set_VREvent_Notification_BeginInteraction(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_BeginInteraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_BeginInteraction", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Notification_Destroyed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Notification_Destroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Notification_Destroyed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Notification_Destroyed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Notification_Destroyed
void Valve::VR::EVREventType::_set_VREvent_Notification_Destroyed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Notification_Destroyed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Notification_Destroyed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Quit
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Quit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Quit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Quit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Quit
void Valve::VR::EVREventType::_set_VREvent_Quit(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Quit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Quit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessQuit
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ProcessQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessQuit
void Valve::VR::EVREventType::_set_VREvent_ProcessQuit(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ProcessQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessQuit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_QuitAborted_UserPrompt
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_QuitAborted_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_QuitAborted_UserPrompt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_QuitAborted_UserPrompt"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_QuitAborted_UserPrompt
void Valve::VR::EVREventType::_set_VREvent_QuitAborted_UserPrompt(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_QuitAborted_UserPrompt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_QuitAborted_UserPrompt", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_QuitAcknowledged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_QuitAcknowledged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_QuitAcknowledged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_QuitAcknowledged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_QuitAcknowledged
void Valve::VR::EVREventType::_set_VREvent_QuitAcknowledged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_QuitAcknowledged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_QuitAcknowledged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DriverRequestedQuit
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DriverRequestedQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DriverRequestedQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DriverRequestedQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DriverRequestedQuit
void Valve::VR::EVREventType::_set_VREvent_DriverRequestedQuit(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DriverRequestedQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DriverRequestedQuit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneDataHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneDataHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneDataHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneDataHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneDataHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneDataHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneDataHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneDataHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneUniverseHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneUniverseHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneUniverseHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneUniverseHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneUniverseHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneUniverseHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneUniverseHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneUniverseHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneTempDataHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneTempDataHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneTempDataHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneTempDataHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneTempDataHasChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneTempDataHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneTempDataHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneTempDataHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ChaperoneSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ChaperoneSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ChaperoneSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ChaperoneSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ChaperoneSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_ChaperoneSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ChaperoneSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ChaperoneSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SeatedZeroPoseReset
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SeatedZeroPoseReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SeatedZeroPoseReset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SeatedZeroPoseReset"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SeatedZeroPoseReset
void Valve::VR::EVREventType::_set_VREvent_SeatedZeroPoseReset(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SeatedZeroPoseReset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SeatedZeroPoseReset", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_AudioSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_AudioSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_AudioSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_AudioSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_AudioSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_AudioSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_AudioSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_AudioSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_BackgroundSettingHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_BackgroundSettingHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_BackgroundSettingHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_BackgroundSettingHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_BackgroundSettingHasChanged
void Valve::VR::EVREventType::_set_VREvent_BackgroundSettingHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_BackgroundSettingHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_BackgroundSettingHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_CameraSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_CameraSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_CameraSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_CameraSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_CameraSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_CameraSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_CameraSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_CameraSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ReprojectionSettingHasChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ReprojectionSettingHasChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ReprojectionSettingHasChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ReprojectionSettingHasChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ReprojectionSettingHasChanged
void Valve::VR::EVREventType::_set_VREvent_ReprojectionSettingHasChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ReprojectionSettingHasChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ReprojectionSettingHasChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ModelSkinSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ModelSkinSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ModelSkinSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ModelSkinSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ModelSkinSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_ModelSkinSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ModelSkinSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ModelSkinSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnvironmentSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnvironmentSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_EnvironmentSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnvironmentSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnvironmentSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_EnvironmentSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_EnvironmentSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnvironmentSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PowerSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PowerSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PowerSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PowerSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PowerSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_PowerSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PowerSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PowerSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_EnableHomeAppSettingsHaveChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_EnableHomeAppSettingsHaveChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_EnableHomeAppSettingsHaveChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_EnableHomeAppSettingsHaveChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_EnableHomeAppSettingsHaveChanged
void Valve::VR::EVREventType::_set_VREvent_EnableHomeAppSettingsHaveChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_EnableHomeAppSettingsHaveChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_EnableHomeAppSettingsHaveChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_SteamVRSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_SteamVRSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_SteamVRSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_SteamVRSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_SteamVRSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_SteamVRSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_SteamVRSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_SteamVRSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_LighthouseSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_LighthouseSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_LighthouseSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_LighthouseSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_LighthouseSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_LighthouseSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_LighthouseSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_LighthouseSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_NullSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_NullSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_NullSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_NullSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_NullSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_NullSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_NullSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_NullSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_UserInterfaceSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_UserInterfaceSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_UserInterfaceSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_UserInterfaceSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_UserInterfaceSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_UserInterfaceSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_UserInterfaceSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_UserInterfaceSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_NotificationsSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_NotificationsSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_NotificationsSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_NotificationsSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_NotificationsSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_NotificationsSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_NotificationsSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_NotificationsSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_KeyboardSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerfSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerfSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerfSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerfSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerfSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_PerfSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerfSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerfSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_DashboardSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_DashboardSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_DashboardSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_DashboardSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_DashboardSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_DashboardSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_DashboardSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_DashboardSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WebInterfaceSectionSettingChanged
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WebInterfaceSectionSettingChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WebInterfaceSectionSettingChanged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WebInterfaceSectionSettingChanged"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WebInterfaceSectionSettingChanged
void Valve::VR::EVREventType::_set_VREvent_WebInterfaceSectionSettingChanged(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WebInterfaceSectionSettingChanged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WebInterfaceSectionSettingChanged", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_StatusUpdate
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_StatusUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_StatusUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_StatusUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_StatusUpdate
void Valve::VR::EVREventType::_set_VREvent_StatusUpdate(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_StatusUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_StatusUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_WebInterface_InstallDriverCompleted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_WebInterface_InstallDriverCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_WebInterface_InstallDriverCompleted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_WebInterface_InstallDriverCompleted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_WebInterface_InstallDriverCompleted
void Valve::VR::EVREventType::_set_VREvent_WebInterface_InstallDriverCompleted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_WebInterface_InstallDriverCompleted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_WebInterface_InstallDriverCompleted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MCImageUpdated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MCImageUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MCImageUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MCImageUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MCImageUpdated
void Valve::VR::EVREventType::_set_VREvent_MCImageUpdated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MCImageUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MCImageUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateStarted
void Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateFinished
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_FirmwareUpdateFinished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateFinished"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_FirmwareUpdateFinished
void Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateFinished(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_FirmwareUpdateFinished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_FirmwareUpdateFinished", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardClosed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardClosed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardClosed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardClosed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardClosed
void Valve::VR::EVREventType::_set_VREvent_KeyboardClosed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardClosed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardClosed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardCharInput
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardCharInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardCharInput");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardCharInput"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardCharInput
void Valve::VR::EVREventType::_set_VREvent_KeyboardCharInput(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardCharInput");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardCharInput", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_KeyboardDone
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_KeyboardDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_KeyboardDone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_KeyboardDone"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_KeyboardDone
void Valve::VR::EVREventType::_set_VREvent_KeyboardDone(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_KeyboardDone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_KeyboardDone", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionStarted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionAborted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionAborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionAborted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionAborted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionAborted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionAborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionAborted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppStarted
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppStarted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppStarted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppStarted
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppStarted(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppStarted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppStarted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationListUpdated
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationListUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationListUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationListUpdated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationListUpdated
void Valve::VR::EVREventType::_set_VREvent_ApplicationListUpdated(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationListUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationListUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationMimeTypeLoad
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationMimeTypeLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationMimeTypeLoad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationMimeTypeLoad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationMimeTypeLoad
void Valve::VR::EVREventType::_set_VREvent_ApplicationMimeTypeLoad(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationMimeTypeLoad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationMimeTypeLoad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppLaunchComplete
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppLaunchComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ApplicationTransitionNewAppLaunchComplete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppLaunchComplete"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ApplicationTransitionNewAppLaunchComplete
void Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppLaunchComplete(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ApplicationTransitionNewAppLaunchComplete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ApplicationTransitionNewAppLaunchComplete", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessConnected
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ProcessConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessConnected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessConnected
void Valve::VR::EVREventType::_set_VREvent_ProcessConnected(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ProcessConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessConnected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_ProcessDisconnected
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_ProcessDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_ProcessDisconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_ProcessDisconnected"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_ProcessDisconnected
void Valve::VR::EVREventType::_set_VREvent_ProcessDisconnected(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_ProcessDisconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_ProcessDisconnected", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowShown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowShown
void Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowShown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowHidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_MirrorWindowHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_MirrorWindowHidden
void Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowHidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_MirrorWindowHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_MirrorWindowHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsShown
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsShown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsShown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsShown
void Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsShown(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsShown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsShown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsHidden
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsHidden() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Compositor_ChaperoneBoundsHidden");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsHidden"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Compositor_ChaperoneBoundsHidden
void Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsHidden(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Compositor_ChaperoneBoundsHidden");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Compositor_ChaperoneBoundsHidden", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StartVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StartVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StartVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StartVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StartVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StartVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StartVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StartVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StopVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StopVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_StopVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StopVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_StopVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StopVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_StopVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_StopVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_PauseVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_PauseVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_PauseVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_PauseVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_PauseVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_PauseVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_PauseVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_PauseVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_ResumeVideoStream
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_ResumeVideoStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_ResumeVideoStream");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_ResumeVideoStream"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_ResumeVideoStream
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_ResumeVideoStream(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_ResumeVideoStream");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_ResumeVideoStream", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_EditingSurface
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_TrackedCamera_EditingSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_TrackedCamera_EditingSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_TrackedCamera_EditingSurface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_TrackedCamera_EditingSurface
void Valve::VR::EVREventType::_set_VREvent_TrackedCamera_EditingSurface(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_TrackedCamera_EditingSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_TrackedCamera_EditingSurface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_EnableCapture
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_EnableCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerformanceTest_EnableCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_EnableCapture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_EnableCapture
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_EnableCapture(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerformanceTest_EnableCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_EnableCapture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_DisableCapture
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_DisableCapture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerformanceTest_DisableCapture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_DisableCapture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_DisableCapture
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_DisableCapture(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerformanceTest_DisableCapture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_DisableCapture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_FidelityLevel
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_PerformanceTest_FidelityLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_PerformanceTest_FidelityLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_PerformanceTest_FidelityLevel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_PerformanceTest_FidelityLevel
void Valve::VR::EVREventType::_set_VREvent_PerformanceTest_FidelityLevel(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_PerformanceTest_FidelityLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_PerformanceTest_FidelityLevel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MessageOverlay_Closed
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MessageOverlay_Closed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MessageOverlay_Closed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MessageOverlay_Closed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MessageOverlay_Closed
void Valve::VR::EVREventType::_set_VREvent_MessageOverlay_Closed(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MessageOverlay_Closed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MessageOverlay_Closed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_MessageOverlayCloseRequested
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_MessageOverlayCloseRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_MessageOverlayCloseRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_MessageOverlayCloseRequested"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_MessageOverlayCloseRequested
void Valve::VR::EVREventType::_set_VREvent_MessageOverlayCloseRequested(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_MessageOverlayCloseRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_MessageOverlayCloseRequested", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_Input_HapticVibration
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_Input_HapticVibration() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_Input_HapticVibration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_Input_HapticVibration"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_Input_HapticVibration
void Valve::VR::EVREventType::_set_VREvent_Input_HapticVibration(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_Input_HapticVibration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_Input_HapticVibration", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_Start
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_Start
void Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_Start(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_End
Valve::VR::EVREventType Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_get_VREvent_VendorSpecific_Reserved_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVREventType>("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_End"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVREventType VREvent_VendorSpecific_Reserved_End
void Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_End(Valve::VR::EVREventType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::_set_VREvent_VendorSpecific_Reserved_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVREventType", "VREvent_VendorSpecific_Reserved_End", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVREventType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVREventType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Unknown
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Unknown
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Unknown(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Idle
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Idle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Idle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Idle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Idle
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Idle(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Idle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Idle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction_Timeout
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_UserInteraction_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction_Timeout"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_UserInteraction_Timeout
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction_Timeout(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_UserInteraction_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_UserInteraction_Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Standby
Valve::VR::EDeviceActivityLevel Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Standby() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_get_k_EDeviceActivityLevel_Standby");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDeviceActivityLevel>("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Standby"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDeviceActivityLevel k_EDeviceActivityLevel_Standby
void Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Standby(Valve::VR::EDeviceActivityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::_set_k_EDeviceActivityLevel_Standby");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDeviceActivityLevel", "k_EDeviceActivityLevel_Standby", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EDeviceActivityLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDeviceActivityLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_System
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_System() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_System");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_System"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_System
void Valve::VR::EVRButtonId::_set_k_EButton_System(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_System");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_System", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_ApplicationMenu
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_ApplicationMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_ApplicationMenu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_ApplicationMenu"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_ApplicationMenu
void Valve::VR::EVRButtonId::_set_k_EButton_ApplicationMenu(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_ApplicationMenu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_ApplicationMenu", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Grip
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Grip() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Grip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Grip"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Grip
void Valve::VR::EVRButtonId::_set_k_EButton_Grip(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Grip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Grip", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Left
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Left
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Left(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Up
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Up"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Up
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Up(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Up", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Right
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Right
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Right(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Down
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_DPad_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_DPad_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_DPad_Down"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_DPad_Down
void Valve::VR::EVRButtonId::_set_k_EButton_DPad_Down(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_DPad_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_DPad_Down", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_A
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_A"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_A
void Valve::VR::EVRButtonId::_set_k_EButton_A(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_A", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_ProximitySensor
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_ProximitySensor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_ProximitySensor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_ProximitySensor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_ProximitySensor
void Valve::VR::EVRButtonId::_set_k_EButton_ProximitySensor(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_ProximitySensor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_ProximitySensor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis0
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis0"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis0
void Valve::VR::EVRButtonId::_set_k_EButton_Axis0(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis0", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis1
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis1
void Valve::VR::EVRButtonId::_set_k_EButton_Axis1(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis2
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis2
void Valve::VR::EVRButtonId::_set_k_EButton_Axis2(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis3
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis3
void Valve::VR::EVRButtonId::_set_k_EButton_Axis3(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Axis4
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Axis4() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Axis4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Axis4"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Axis4
void Valve::VR::EVRButtonId::_set_k_EButton_Axis4(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Axis4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Axis4", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Touchpad
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Touchpad() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Touchpad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Touchpad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Touchpad
void Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Touchpad(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Touchpad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Touchpad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Trigger
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_SteamVR_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Trigger"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_SteamVR_Trigger
void Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Trigger(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_SteamVR_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_SteamVR_Trigger", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Dashboard_Back
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Dashboard_Back() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Dashboard_Back");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Dashboard_Back"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Dashboard_Back
void Valve::VR::EVRButtonId::_set_k_EButton_Dashboard_Back(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Dashboard_Back");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Dashboard_Back", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRButtonId k_EButton_Max
Valve::VR::EVRButtonId Valve::VR::EVRButtonId::_get_k_EButton_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_get_k_EButton_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRButtonId>("Valve.VR", "EVRButtonId", "k_EButton_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRButtonId k_EButton_Max
void Valve::VR::EVRButtonId::_set_k_EButton_Max(Valve::VR::EVRButtonId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::_set_k_EButton_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRButtonId", "k_EButton_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRButtonId::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRButtonId::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRMouseButton
#include "Valve/VR/EVRMouseButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Left
Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Left
void Valve::VR::EVRMouseButton::_set_Left(Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Right
Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Right
void Valve::VR::EVRMouseButton::_set_Right(Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRMouseButton Middle
Valve::VR::EVRMouseButton Valve::VR::EVRMouseButton::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRMouseButton>("Valve.VR", "EVRMouseButton", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRMouseButton Middle
void Valve::VR::EVRMouseButton::_set_Middle(Valve::VR::EVRMouseButton value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRMouseButton", "Middle", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRMouseButton::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRMouseButton::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Left
Valve::VR::EDualAnalogWhich Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDualAnalogWhich>("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Left
void Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Left(Valve::VR::EDualAnalogWhich value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Right
Valve::VR::EDualAnalogWhich Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_get_k_EDualAnalog_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EDualAnalogWhich>("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EDualAnalogWhich k_EDualAnalog_Right
void Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Right(Valve::VR::EDualAnalogWhich value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::_set_k_EDualAnalog_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EDualAnalogWhich", "k_EDualAnalog_Right", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EDualAnalogWhich::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EDualAnalogWhich::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInputError
#include "Valve/VR/EVRInputError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError None
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError None
void Valve::VR::EVRInputError::_set_None(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NameNotFound
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NameNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_NameNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NameNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NameNotFound
void Valve::VR::EVRInputError::_set_NameNotFound(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_NameNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NameNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError WrongType
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_WrongType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_WrongType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "WrongType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError WrongType
void Valve::VR::EVRInputError::_set_WrongType(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_WrongType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "WrongType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidHandle
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidHandle
void Valve::VR::EVRInputError::_set_InvalidHandle(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidParam
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidParam() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_InvalidParam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidParam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidParam
void Valve::VR::EVRInputError::_set_InvalidParam(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_InvalidParam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidParam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoSteam
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoSteam() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_NoSteam");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoSteam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoSteam
void Valve::VR::EVRInputError::_set_NoSteam(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_NoSteam");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoSteam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError MaxCapacityReached
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_MaxCapacityReached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_MaxCapacityReached");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "MaxCapacityReached"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError MaxCapacityReached
void Valve::VR::EVRInputError::_set_MaxCapacityReached(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_MaxCapacityReached");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "MaxCapacityReached", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError IPCError
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_IPCError() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_IPCError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "IPCError"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError IPCError
void Valve::VR::EVRInputError::_set_IPCError(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_IPCError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "IPCError", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoActiveActionSet
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoActiveActionSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_NoActiveActionSet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoActiveActionSet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoActiveActionSet
void Valve::VR::EVRInputError::_set_NoActiveActionSet(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_NoActiveActionSet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoActiveActionSet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidDevice
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_get_InvalidDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidDevice
void Valve::VR::EVRInputError::_set_InvalidDevice(Valve::VR::EVRInputError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::_set_InvalidDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidDevice", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRInputError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInputError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Standard
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Standard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Standard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Standard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Standard
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Standard(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Standard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Standard", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Inverse
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Inverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Inverse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Inverse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Inverse
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Inverse(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Inverse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Inverse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_LineLoop
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_LineLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_LineLoop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_LineLoop"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_LineLoop
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_LineLoop(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_LineLoop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_LineLoop", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Max
Valve::VR::EHiddenAreaMeshType Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_get_k_eHiddenAreaMesh_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EHiddenAreaMeshType>("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EHiddenAreaMeshType k_eHiddenAreaMesh_Max
void Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Max(Valve::VR::EHiddenAreaMeshType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::_set_k_eHiddenAreaMesh_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EHiddenAreaMeshType", "k_eHiddenAreaMesh_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EHiddenAreaMeshType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EHiddenAreaMeshType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_None
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_None
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_None(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_TrackPad
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_TrackPad() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_TrackPad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_TrackPad"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_TrackPad
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_TrackPad(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_TrackPad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_TrackPad", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Joystick
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Joystick() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Joystick");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Joystick"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Joystick
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Joystick(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Joystick");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Joystick", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Trigger
Valve::VR::EVRControllerAxisType Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Trigger() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_get_k_eControllerAxis_Trigger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerAxisType>("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Trigger"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerAxisType k_eControllerAxis_Trigger
void Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Trigger(Valve::VR::EVRControllerAxisType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::_set_k_eControllerAxis_Trigger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerAxisType", "k_eControllerAxis_Trigger", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRControllerAxisType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerAxisType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRControllerEventOutputType
#include "Valve/VR/EVRControllerEventOutputType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_OSEvents
Valve::VR::EVRControllerEventOutputType Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_OSEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_OSEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerEventOutputType>("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_OSEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_OSEvents
void Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_OSEvents(Valve::VR::EVRControllerEventOutputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_OSEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_OSEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_VREvents
Valve::VR::EVRControllerEventOutputType Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_VREvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_get_ControllerEventOutput_VREvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRControllerEventOutputType>("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_VREvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRControllerEventOutputType ControllerEventOutput_VREvents
void Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_VREvents(Valve::VR::EVRControllerEventOutputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::_set_ControllerEventOutput_VREvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRControllerEventOutputType", "ControllerEventOutput_VREvents", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRControllerEventOutputType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRControllerEventOutputType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ECollisionBoundsStyle
#include "Valve/VR/ECollisionBoundsStyle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_BEGINNER
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_BEGINNER() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_BEGINNER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_BEGINNER"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_BEGINNER
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_BEGINNER(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_BEGINNER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_BEGINNER", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_INTERMEDIATE
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_INTERMEDIATE() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_INTERMEDIATE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_INTERMEDIATE"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_INTERMEDIATE
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_INTERMEDIATE(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_INTERMEDIATE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_INTERMEDIATE", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_SQUARES
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_SQUARES() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_SQUARES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_SQUARES"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_SQUARES
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_SQUARES(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_SQUARES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_SQUARES", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_ADVANCED
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_ADVANCED() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_ADVANCED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_ADVANCED"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_ADVANCED
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_ADVANCED(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_ADVANCED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_ADVANCED", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_NONE
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_NONE() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_NONE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_NONE"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_NONE
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_NONE(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_NONE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_NONE", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_COUNT
Valve::VR::ECollisionBoundsStyle Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_COUNT() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_get_COLLISION_BOUNDS_STYLE_COUNT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ECollisionBoundsStyle>("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_COUNT"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ECollisionBoundsStyle COLLISION_BOUNDS_STYLE_COUNT
void Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_COUNT(Valve::VR::ECollisionBoundsStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::_set_COLLISION_BOUNDS_STYLE_COUNT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ECollisionBoundsStyle", "COLLISION_BOUNDS_STYLE_COUNT", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ECollisionBoundsStyle::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ECollisionBoundsStyle::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError None
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError None
void Valve::VR::EVROverlayError::_set_None(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError UnknownOverlay
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_UnknownOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_UnknownOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "UnknownOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError UnknownOverlay
void Valve::VR::EVROverlayError::_set_UnknownOverlay(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_UnknownOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "UnknownOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidHandle
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidHandle
void Valve::VR::EVROverlayError::_set_InvalidHandle(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError PermissionDenied
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_PermissionDenied() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_PermissionDenied");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "PermissionDenied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError PermissionDenied
void Valve::VR::EVROverlayError::_set_PermissionDenied(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_PermissionDenied");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "PermissionDenied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError OverlayLimitExceeded
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_OverlayLimitExceeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_OverlayLimitExceeded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "OverlayLimitExceeded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError OverlayLimitExceeded
void Valve::VR::EVROverlayError::_set_OverlayLimitExceeded(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_OverlayLimitExceeded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "OverlayLimitExceeded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError WrongVisibilityType
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_WrongVisibilityType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_WrongVisibilityType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "WrongVisibilityType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError WrongVisibilityType
void Valve::VR::EVROverlayError::_set_WrongVisibilityType(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_WrongVisibilityType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "WrongVisibilityType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyTooLong
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyTooLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_KeyTooLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyTooLong"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyTooLong
void Valve::VR::EVROverlayError::_set_KeyTooLong(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_KeyTooLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyTooLong", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError NameTooLong
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_NameTooLong() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_NameTooLong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "NameTooLong"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError NameTooLong
void Valve::VR::EVROverlayError::_set_NameTooLong(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_NameTooLong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "NameTooLong", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyInUse
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_KeyInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyInUse
void Valve::VR::EVROverlayError::_set_KeyInUse(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_KeyInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError WrongTransformType
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_WrongTransformType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_WrongTransformType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "WrongTransformType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError WrongTransformType
void Valve::VR::EVROverlayError::_set_WrongTransformType(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_WrongTransformType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "WrongTransformType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidTrackedDevice
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidTrackedDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidTrackedDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidTrackedDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidTrackedDevice
void Valve::VR::EVROverlayError::_set_InvalidTrackedDevice(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidTrackedDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidTrackedDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidParameter
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidParameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidParameter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidParameter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidParameter
void Valve::VR::EVROverlayError::_set_InvalidParameter(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidParameter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidParameter", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError ThumbnailCantBeDestroyed
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_ThumbnailCantBeDestroyed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_ThumbnailCantBeDestroyed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "ThumbnailCantBeDestroyed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError ThumbnailCantBeDestroyed
void Valve::VR::EVROverlayError::_set_ThumbnailCantBeDestroyed(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_ThumbnailCantBeDestroyed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "ThumbnailCantBeDestroyed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError ArrayTooSmall
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_ArrayTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_ArrayTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "ArrayTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError ArrayTooSmall
void Valve::VR::EVROverlayError::_set_ArrayTooSmall(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_ArrayTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "ArrayTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError RequestFailed
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError RequestFailed
void Valve::VR::EVROverlayError::_set_RequestFailed(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError InvalidTexture
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError InvalidTexture
void Valve::VR::EVROverlayError::_set_InvalidTexture(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "InvalidTexture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError UnableToLoadFile
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_UnableToLoadFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_UnableToLoadFile");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "UnableToLoadFile"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError UnableToLoadFile
void Valve::VR::EVROverlayError::_set_UnableToLoadFile(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_UnableToLoadFile");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "UnableToLoadFile", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError KeyboardAlreadyInUse
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_KeyboardAlreadyInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_KeyboardAlreadyInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "KeyboardAlreadyInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError KeyboardAlreadyInUse
void Valve::VR::EVROverlayError::_set_KeyboardAlreadyInUse(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_KeyboardAlreadyInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "KeyboardAlreadyInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError NoNeighbor
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_NoNeighbor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_NoNeighbor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "NoNeighbor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError NoNeighbor
void Valve::VR::EVROverlayError::_set_NoNeighbor(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_NoNeighbor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "NoNeighbor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TooManyMaskPrimitives
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TooManyMaskPrimitives() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TooManyMaskPrimitives");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TooManyMaskPrimitives"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TooManyMaskPrimitives
void Valve::VR::EVROverlayError::_set_TooManyMaskPrimitives(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TooManyMaskPrimitives");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TooManyMaskPrimitives", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError BadMaskPrimitive
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_BadMaskPrimitive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_BadMaskPrimitive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "BadMaskPrimitive"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError BadMaskPrimitive
void Valve::VR::EVROverlayError::_set_BadMaskPrimitive(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_BadMaskPrimitive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "BadMaskPrimitive", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureAlreadyLocked
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureAlreadyLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TextureAlreadyLocked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureAlreadyLocked"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureAlreadyLocked
void Valve::VR::EVROverlayError::_set_TextureAlreadyLocked(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TextureAlreadyLocked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureAlreadyLocked", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureLockCapacityReached
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureLockCapacityReached() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TextureLockCapacityReached");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureLockCapacityReached"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureLockCapacityReached
void Valve::VR::EVROverlayError::_set_TextureLockCapacityReached(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TextureLockCapacityReached");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureLockCapacityReached", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayError TextureNotLocked
Valve::VR::EVROverlayError Valve::VR::EVROverlayError::_get_TextureNotLocked() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_get_TextureNotLocked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayError>("Valve.VR", "EVROverlayError", "TextureNotLocked"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayError TextureNotLocked
void Valve::VR::EVROverlayError::_set_TextureNotLocked(Valve::VR::EVROverlayError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::_set_TextureNotLocked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayError", "TextureNotLocked", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVROverlayError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Other
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Other"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Other
void Valve::VR::EVRApplicationType::_set_VRApplication_Other(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Other", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Scene
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Scene() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Scene");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Scene"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Scene
void Valve::VR::EVRApplicationType::_set_VRApplication_Scene(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Scene");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Scene", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Overlay
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Overlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Overlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Overlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Overlay
void Valve::VR::EVRApplicationType::_set_VRApplication_Overlay(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Overlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Overlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Background
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Background() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Background");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Background"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Background
void Valve::VR::EVRApplicationType::_set_VRApplication_Background(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Background");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Background", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Utility
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Utility() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Utility");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Utility"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Utility
void Valve::VR::EVRApplicationType::_set_VRApplication_Utility(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Utility");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Utility", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_VRMonitor
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_VRMonitor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_VRMonitor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_VRMonitor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_VRMonitor
void Valve::VR::EVRApplicationType::_set_VRApplication_VRMonitor(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_VRMonitor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_VRMonitor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_SteamWatchdog
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_SteamWatchdog() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_SteamWatchdog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_SteamWatchdog"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_SteamWatchdog
void Valve::VR::EVRApplicationType::_set_VRApplication_SteamWatchdog(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_SteamWatchdog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_SteamWatchdog", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Bootstrapper
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Bootstrapper() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Bootstrapper");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Bootstrapper"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Bootstrapper
void Valve::VR::EVRApplicationType::_set_VRApplication_Bootstrapper(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Bootstrapper");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Bootstrapper", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationType VRApplication_Max
Valve::VR::EVRApplicationType Valve::VR::EVRApplicationType::_get_VRApplication_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_get_VRApplication_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationType>("Valve.VR", "EVRApplicationType", "VRApplication_Max"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationType VRApplication_Max
void Valve::VR::EVRApplicationType::_set_VRApplication_Max(Valve::VR::EVRApplicationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::_set_VRApplication_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationType", "VRApplication_Max", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRApplicationType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError None
Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError None
void Valve::VR::EVRFirmwareError::_set_None(Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError Success
Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError Success
void Valve::VR::EVRFirmwareError::_set_Success(Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRFirmwareError Fail
Valve::VR::EVRFirmwareError Valve::VR::EVRFirmwareError::_get_Fail() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_get_Fail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRFirmwareError>("Valve.VR", "EVRFirmwareError", "Fail"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRFirmwareError Fail
void Valve::VR::EVRFirmwareError::_set_Fail(Valve::VR::EVRFirmwareError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::_set_Fail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRFirmwareError", "Fail", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRFirmwareError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRFirmwareError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationError
#include "Valve/VR/EVRNotificationError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError OK
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError OK
void Valve::VR::EVRNotificationError::_set_OK(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError InvalidNotificationId
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_InvalidNotificationId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_InvalidNotificationId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "InvalidNotificationId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError InvalidNotificationId
void Valve::VR::EVRNotificationError::_set_InvalidNotificationId(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_InvalidNotificationId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "InvalidNotificationId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError NotificationQueueFull
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_NotificationQueueFull() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_NotificationQueueFull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "NotificationQueueFull"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError NotificationQueueFull
void Valve::VR::EVRNotificationError::_set_NotificationQueueFull(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_NotificationQueueFull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "NotificationQueueFull", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError InvalidOverlayHandle
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_InvalidOverlayHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_InvalidOverlayHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "InvalidOverlayHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError InvalidOverlayHandle
void Valve::VR::EVRNotificationError::_set_InvalidOverlayHandle(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_InvalidOverlayHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "InvalidOverlayHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationError SystemWithUserValueAlreadyExists
Valve::VR::EVRNotificationError Valve::VR::EVRNotificationError::_get_SystemWithUserValueAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_get_SystemWithUserValueAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationError>("Valve.VR", "EVRNotificationError", "SystemWithUserValueAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationError SystemWithUserValueAlreadyExists
void Valve::VR::EVRNotificationError::_set_SystemWithUserValueAlreadyExists(Valve::VR::EVRNotificationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::_set_SystemWithUserValueAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationError", "SystemWithUserValueAlreadyExists", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRNotificationError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError None
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError None
void Valve::VR::EVRInitError::_set_None(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Unknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Unknown
void Valve::VR::EVRInitError::_set_Unknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InstallationNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InstallationNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InstallationNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InstallationNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InstallationNotFound
void Valve::VR::EVRInitError::_set_Init_InstallationNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InstallationNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InstallationNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InstallationCorrupt
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InstallationCorrupt() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InstallationCorrupt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InstallationCorrupt"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InstallationCorrupt
void Valve::VR::EVRInitError::_set_Init_InstallationCorrupt(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InstallationCorrupt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InstallationCorrupt", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRClientDLLNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRClientDLLNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRClientDLLNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRClientDLLNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRClientDLLNotFound
void Valve::VR::EVRInitError::_set_Init_VRClientDLLNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRClientDLLNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRClientDLLNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FileNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FileNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FileNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FileNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FileNotFound
void Valve::VR::EVRInitError::_set_Init_FileNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FileNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FileNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FactoryNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FactoryNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FactoryNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FactoryNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FactoryNotFound
void Valve::VR::EVRInitError::_set_Init_FactoryNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FactoryNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FactoryNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InterfaceNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InterfaceNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InterfaceNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InterfaceNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InterfaceNotFound
void Valve::VR::EVRInitError::_set_Init_InterfaceNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InterfaceNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InterfaceNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InvalidInterface
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InvalidInterface() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InvalidInterface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InvalidInterface"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InvalidInterface
void Valve::VR::EVRInitError::_set_Init_InvalidInterface(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InvalidInterface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InvalidInterface", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_UserConfigDirectoryInvalid
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_UserConfigDirectoryInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_UserConfigDirectoryInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_UserConfigDirectoryInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_UserConfigDirectoryInvalid
void Valve::VR::EVRInitError::_set_Init_UserConfigDirectoryInvalid(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_UserConfigDirectoryInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_UserConfigDirectoryInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_HmdNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdNotFound
void Valve::VR::EVRInitError::_set_Init_HmdNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_HmdNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotInitialized
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotInitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotInitialized
void Valve::VR::EVRInitError::_set_Init_NotInitialized(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotInitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_PathRegistryNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_PathRegistryNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_PathRegistryNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_PathRegistryNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_PathRegistryNotFound
void Valve::VR::EVRInitError::_set_Init_PathRegistryNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_PathRegistryNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_PathRegistryNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoConfigPath
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoConfigPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NoConfigPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoConfigPath"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoConfigPath
void Valve::VR::EVRInitError::_set_Init_NoConfigPath(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NoConfigPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoConfigPath", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoLogPath
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoLogPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NoLogPath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoLogPath"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoLogPath
void Valve::VR::EVRInitError::_set_Init_NoLogPath(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NoLogPath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoLogPath", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_PathRegistryNotWritable
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_PathRegistryNotWritable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_PathRegistryNotWritable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_PathRegistryNotWritable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_PathRegistryNotWritable
void Valve::VR::EVRInitError::_set_Init_PathRegistryNotWritable(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_PathRegistryNotWritable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_PathRegistryNotWritable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_AppInfoInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_AppInfoInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_AppInfoInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_AppInfoInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_AppInfoInitFailed
void Valve::VR::EVRInitError::_set_Init_AppInfoInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_AppInfoInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_AppInfoInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_Retry
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_Retry() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_Retry");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_Retry"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_Retry
void Valve::VR::EVRInitError::_set_Init_Retry(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_Retry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_Retry", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InitCanceledByUser
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InitCanceledByUser() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InitCanceledByUser");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InitCanceledByUser"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InitCanceledByUser
void Valve::VR::EVRInitError::_set_Init_InitCanceledByUser(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InitCanceledByUser");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InitCanceledByUser", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_AnotherAppLaunching
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_AnotherAppLaunching() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_AnotherAppLaunching");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_AnotherAppLaunching"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_AnotherAppLaunching
void Valve::VR::EVRInitError::_set_Init_AnotherAppLaunching(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_AnotherAppLaunching");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_AnotherAppLaunching", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_SettingsInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_SettingsInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_SettingsInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_SettingsInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_SettingsInitFailed
void Valve::VR::EVRInitError::_set_Init_SettingsInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_SettingsInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_SettingsInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_ShuttingDown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_ShuttingDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_ShuttingDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_ShuttingDown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_ShuttingDown
void Valve::VR::EVRInitError::_set_Init_ShuttingDown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_ShuttingDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_ShuttingDown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_TooManyObjects
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_TooManyObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_TooManyObjects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_TooManyObjects"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_TooManyObjects
void Valve::VR::EVRInitError::_set_Init_TooManyObjects(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_TooManyObjects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_TooManyObjects", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NoServerForBackgroundApp
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NoServerForBackgroundApp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NoServerForBackgroundApp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NoServerForBackgroundApp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NoServerForBackgroundApp
void Valve::VR::EVRInitError::_set_Init_NoServerForBackgroundApp(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NoServerForBackgroundApp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NoServerForBackgroundApp", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotSupportedWithCompositor
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotSupportedWithCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotSupportedWithCompositor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotSupportedWithCompositor"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotSupportedWithCompositor
void Valve::VR::EVRInitError::_set_Init_NotSupportedWithCompositor(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotSupportedWithCompositor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotSupportedWithCompositor", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotAvailableToUtilityApps
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotAvailableToUtilityApps() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotAvailableToUtilityApps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotAvailableToUtilityApps"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotAvailableToUtilityApps
void Valve::VR::EVRInitError::_set_Init_NotAvailableToUtilityApps(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotAvailableToUtilityApps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotAvailableToUtilityApps", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_Internal
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_Internal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_Internal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_Internal
void Valve::VR::EVRInitError::_set_Init_Internal(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_Internal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_Internal", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdDriverIdIsNone
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdDriverIdIsNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_HmdDriverIdIsNone");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdDriverIdIsNone"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdDriverIdIsNone
void Valve::VR::EVRInitError::_set_Init_HmdDriverIdIsNone(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_HmdDriverIdIsNone");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdDriverIdIsNone", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_HmdNotFoundPresenceFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_HmdNotFoundPresenceFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_HmdNotFoundPresenceFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_HmdNotFoundPresenceFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_HmdNotFoundPresenceFailed
void Valve::VR::EVRInitError::_set_Init_HmdNotFoundPresenceFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_HmdNotFoundPresenceFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_HmdNotFoundPresenceFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRMonitorNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRMonitorNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRMonitorNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRMonitorNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRMonitorNotFound
void Valve::VR::EVRInitError::_set_Init_VRMonitorNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRMonitorNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRMonitorNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRMonitorStartupFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRMonitorStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRMonitorStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRMonitorStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRMonitorStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRMonitorStartupFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRMonitorStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRMonitorStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_LowPowerWatchdogNotSupported
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_LowPowerWatchdogNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_LowPowerWatchdogNotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_LowPowerWatchdogNotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_LowPowerWatchdogNotSupported
void Valve::VR::EVRInitError::_set_Init_LowPowerWatchdogNotSupported(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_LowPowerWatchdogNotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_LowPowerWatchdogNotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_InvalidApplicationType
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_InvalidApplicationType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_InvalidApplicationType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_InvalidApplicationType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_InvalidApplicationType
void Valve::VR::EVRInitError::_set_Init_InvalidApplicationType(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_InvalidApplicationType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_InvalidApplicationType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_NotAvailableToWatchdogApps
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_NotAvailableToWatchdogApps() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_NotAvailableToWatchdogApps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_NotAvailableToWatchdogApps"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_NotAvailableToWatchdogApps
void Valve::VR::EVRInitError::_set_Init_NotAvailableToWatchdogApps(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_NotAvailableToWatchdogApps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_NotAvailableToWatchdogApps", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_WatchdogDisabledInSettings
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_WatchdogDisabledInSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_WatchdogDisabledInSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_WatchdogDisabledInSettings"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_WatchdogDisabledInSettings
void Valve::VR::EVRInitError::_set_Init_WatchdogDisabledInSettings(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_WatchdogDisabledInSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_WatchdogDisabledInSettings", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRDashboardNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRDashboardNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRDashboardNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRDashboardNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRDashboardNotFound
void Valve::VR::EVRInitError::_set_Init_VRDashboardNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRDashboardNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRDashboardNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRDashboardStartupFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRDashboardStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRDashboardStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRDashboardStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRDashboardStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRDashboardStartupFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRDashboardStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRDashboardStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRHomeNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRHomeNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRHomeNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRHomeNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRHomeNotFound
void Valve::VR::EVRInitError::_set_Init_VRHomeNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRHomeNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRHomeNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_VRHomeStartupFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_VRHomeStartupFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_VRHomeStartupFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_VRHomeStartupFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_VRHomeStartupFailed
void Valve::VR::EVRInitError::_set_Init_VRHomeStartupFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_VRHomeStartupFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_VRHomeStartupFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_RebootingBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_RebootingBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_RebootingBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_RebootingBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_RebootingBusy
void Valve::VR::EVRInitError::_set_Init_RebootingBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_RebootingBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_RebootingBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FirmwareUpdateBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FirmwareUpdateBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FirmwareUpdateBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FirmwareUpdateBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FirmwareUpdateBusy
void Valve::VR::EVRInitError::_set_Init_FirmwareUpdateBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FirmwareUpdateBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FirmwareUpdateBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_FirmwareRecoveryBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_FirmwareRecoveryBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_FirmwareRecoveryBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_FirmwareRecoveryBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_FirmwareRecoveryBusy
void Valve::VR::EVRInitError::_set_Init_FirmwareRecoveryBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_FirmwareRecoveryBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_FirmwareRecoveryBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Init_USBServiceBusy
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Init_USBServiceBusy() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Init_USBServiceBusy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Init_USBServiceBusy"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Init_USBServiceBusy
void Valve::VR::EVRInitError::_set_Init_USBServiceBusy(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Init_USBServiceBusy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Init_USBServiceBusy", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_Failed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_Failed
void Valve::VR::EVRInitError::_set_Driver_Failed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_Unknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_Unknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_Unknown
void Valve::VR::EVRInitError::_set_Driver_Unknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdUnknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdUnknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdUnknown
void Valve::VR::EVRInitError::_set_Driver_HmdUnknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_NotLoaded
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_NotLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_NotLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_NotLoaded"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_NotLoaded
void Valve::VR::EVRInitError::_set_Driver_NotLoaded(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_NotLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_NotLoaded", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_RuntimeOutOfDate
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_RuntimeOutOfDate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_RuntimeOutOfDate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_RuntimeOutOfDate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_RuntimeOutOfDate
void Valve::VR::EVRInitError::_set_Driver_RuntimeOutOfDate(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_RuntimeOutOfDate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_RuntimeOutOfDate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdInUse
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdInUse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdInUse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdInUse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdInUse
void Valve::VR::EVRInitError::_set_Driver_HmdInUse(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdInUse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdInUse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_NotCalibrated
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_NotCalibrated() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_NotCalibrated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_NotCalibrated"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_NotCalibrated
void Valve::VR::EVRInitError::_set_Driver_NotCalibrated(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_NotCalibrated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_NotCalibrated", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_CalibrationInvalid
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_CalibrationInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_CalibrationInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_CalibrationInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_CalibrationInvalid
void Valve::VR::EVRInitError::_set_Driver_CalibrationInvalid(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_CalibrationInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_CalibrationInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDisplayNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDisplayNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdDisplayNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDisplayNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDisplayNotFound
void Valve::VR::EVRInitError::_set_Driver_HmdDisplayNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdDisplayNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDisplayNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_TrackedDeviceInterfaceUnknown
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_TrackedDeviceInterfaceUnknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_TrackedDeviceInterfaceUnknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_TrackedDeviceInterfaceUnknown"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_TrackedDeviceInterfaceUnknown
void Valve::VR::EVRInitError::_set_Driver_TrackedDeviceInterfaceUnknown(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_TrackedDeviceInterfaceUnknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_TrackedDeviceInterfaceUnknown", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDriverIdOutOfBounds
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDriverIdOutOfBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdDriverIdOutOfBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDriverIdOutOfBounds"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDriverIdOutOfBounds
void Valve::VR::EVRInitError::_set_Driver_HmdDriverIdOutOfBounds(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdDriverIdOutOfBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDriverIdOutOfBounds", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Driver_HmdDisplayMirrored
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Driver_HmdDisplayMirrored() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Driver_HmdDisplayMirrored");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Driver_HmdDisplayMirrored"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Driver_HmdDisplayMirrored
void Valve::VR::EVRInitError::_set_Driver_HmdDisplayMirrored(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Driver_HmdDisplayMirrored");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Driver_HmdDisplayMirrored", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ServerInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ServerInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_ServerInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ServerInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ServerInitFailed
void Valve::VR::EVRInitError::_set_IPC_ServerInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_ServerInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ServerInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ConnectFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ConnectFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_ConnectFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ConnectFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ConnectFailed
void Valve::VR::EVRInitError::_set_IPC_ConnectFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_ConnectFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ConnectFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_SharedStateInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_SharedStateInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_SharedStateInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_SharedStateInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_SharedStateInitFailed
void Valve::VR::EVRInitError::_set_IPC_SharedStateInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_SharedStateInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_SharedStateInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_CompositorInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorInitFailed
void Valve::VR::EVRInitError::_set_IPC_CompositorInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_CompositorInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_MutexInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_MutexInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_MutexInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_MutexInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_MutexInitFailed
void Valve::VR::EVRInitError::_set_IPC_MutexInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_MutexInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_MutexInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_Failed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_Failed
void Valve::VR::EVRInitError::_set_IPC_Failed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorConnectFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorConnectFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_CompositorConnectFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorConnectFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorConnectFailed
void Valve::VR::EVRInitError::_set_IPC_CompositorConnectFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_CompositorConnectFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorConnectFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_CompositorInvalidConnectResponse
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_CompositorInvalidConnectResponse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_CompositorInvalidConnectResponse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_CompositorInvalidConnectResponse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_CompositorInvalidConnectResponse
void Valve::VR::EVRInitError::_set_IPC_CompositorInvalidConnectResponse(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_CompositorInvalidConnectResponse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_CompositorInvalidConnectResponse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError IPC_ConnectFailedAfterMultipleAttempts
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_IPC_ConnectFailedAfterMultipleAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_IPC_ConnectFailedAfterMultipleAttempts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "IPC_ConnectFailedAfterMultipleAttempts"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError IPC_ConnectFailedAfterMultipleAttempts
void Valve::VR::EVRInitError::_set_IPC_ConnectFailedAfterMultipleAttempts(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_IPC_ConnectFailedAfterMultipleAttempts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "IPC_ConnectFailedAfterMultipleAttempts", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_Failed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_Failed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_Failed
void Valve::VR::EVRInitError::_set_Compositor_Failed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_Failed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_D3D11HardwareRequired
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_D3D11HardwareRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_D3D11HardwareRequired");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_D3D11HardwareRequired"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_D3D11HardwareRequired
void Valve::VR::EVRInitError::_set_Compositor_D3D11HardwareRequired(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_D3D11HardwareRequired");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_D3D11HardwareRequired", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_FirmwareRequiresUpdate
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_FirmwareRequiresUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_FirmwareRequiresUpdate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_FirmwareRequiresUpdate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_FirmwareRequiresUpdate
void Valve::VR::EVRInitError::_set_Compositor_FirmwareRequiresUpdate(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_FirmwareRequiresUpdate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_FirmwareRequiresUpdate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_OverlayInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_OverlayInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_OverlayInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_OverlayInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_OverlayInitFailed
void Valve::VR::EVRInitError::_set_Compositor_OverlayInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_OverlayInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_OverlayInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_ScreenshotsInitFailed
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_ScreenshotsInitFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_ScreenshotsInitFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_ScreenshotsInitFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_ScreenshotsInitFailed
void Valve::VR::EVRInitError::_set_Compositor_ScreenshotsInitFailed(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_ScreenshotsInitFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_ScreenshotsInitFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Compositor_UnableToCreateDevice
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Compositor_UnableToCreateDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Compositor_UnableToCreateDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Compositor_UnableToCreateDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Compositor_UnableToCreateDevice
void Valve::VR::EVRInitError::_set_Compositor_UnableToCreateDevice(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Compositor_UnableToCreateDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Compositor_UnableToCreateDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_UnableToConnectToOculusRuntime
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_UnableToConnectToOculusRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_UnableToConnectToOculusRuntime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_UnableToConnectToOculusRuntime"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_UnableToConnectToOculusRuntime
void Valve::VR::EVRInitError::_set_VendorSpecific_UnableToConnectToOculusRuntime(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_UnableToConnectToOculusRuntime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_UnableToConnectToOculusRuntime", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_WindowsNotInDevMode
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_WindowsNotInDevMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_WindowsNotInDevMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_WindowsNotInDevMode"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_WindowsNotInDevMode
void Valve::VR::EVRInitError::_set_VendorSpecific_WindowsNotInDevMode(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_WindowsNotInDevMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_WindowsNotInDevMode", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantOpenDevice
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantOpenDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantOpenDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantOpenDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantOpenDevice
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantOpenDevice(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantOpenDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantOpenDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToRequestConfigStart
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToRequestConfigStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToRequestConfigStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToRequestConfigStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToRequestConfigStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToRequestConfigStart(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToRequestConfigStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToRequestConfigStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_NoStoredConfig
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_NoStoredConfig() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_NoStoredConfig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_NoStoredConfig"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_NoStoredConfig
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_NoStoredConfig(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_NoStoredConfig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_NoStoredConfig", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooBig
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooBig() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooBig");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooBig"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooBig
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooBig(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooBig");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooBig", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooSmall
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigTooSmall
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooSmall(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToInitZLib
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToInitZLib() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToInitZLib");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToInitZLib"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToInitZLib
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToInitZLib(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToInitZLib");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToInitZLib", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantReadFirmwareVersion
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantReadFirmwareVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_CantReadFirmwareVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantReadFirmwareVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_CantReadFirmwareVersion
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantReadFirmwareVersion(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_CantReadFirmwareVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_CantReadFirmwareVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToSendUserDataStart
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToSendUserDataStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToSendUserDataStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToSendUserDataStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToSendUserDataStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToSendUserDataStart(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToSendUserDataStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToSendUserDataStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataStart
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataStart");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataStart"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataStart
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataStart(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataStart");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataStart", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataNext
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UnableToGetUserDataNext");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataNext"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UnableToGetUserDataNext
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataNext(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UnableToGetUserDataNext");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UnableToGetUserDataNext", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataAddressRange
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataAddressRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataAddressRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataAddressRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataAddressRange
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataAddressRange(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataAddressRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataAddressRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataError
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataError() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_UserDataError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataError"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_UserDataError
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataError(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_UserDataError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_UserDataError", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigFailedSanityCheck
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigFailedSanityCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_VendorSpecific_HmdFound_ConfigFailedSanityCheck");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigFailedSanityCheck"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError VendorSpecific_HmdFound_ConfigFailedSanityCheck
void Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigFailedSanityCheck(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_VendorSpecific_HmdFound_ConfigFailedSanityCheck");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "VendorSpecific_HmdFound_ConfigFailedSanityCheck", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInitError Steam_SteamInstallationNotFound
Valve::VR::EVRInitError Valve::VR::EVRInitError::_get_Steam_SteamInstallationNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_get_Steam_SteamInstallationNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInitError>("Valve.VR", "EVRInitError", "Steam_SteamInstallationNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInitError Steam_SteamInstallationNotFound
void Valve::VR::EVRInitError::_set_Steam_SteamInstallationNotFound(Valve::VR::EVRInitError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::_set_Steam_SteamInstallationNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInitError", "Steam_SteamInstallationNotFound", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRInitError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRInitError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotType
#include "Valve/VR/EVRScreenshotType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType None
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType None
void Valve::VR::EVRScreenshotType::_set_None(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Mono
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Mono() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_Mono");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Mono"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Mono
void Valve::VR::EVRScreenshotType::_set_Mono(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_Mono");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Mono", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Stereo
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Stereo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_Stereo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Stereo"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Stereo
void Valve::VR::EVRScreenshotType::_set_Stereo(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_Stereo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Stereo", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType Cubemap
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_Cubemap() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_Cubemap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "Cubemap"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType Cubemap
void Valve::VR::EVRScreenshotType::_set_Cubemap(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_Cubemap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "Cubemap", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType MonoPanorama
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_MonoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_MonoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "MonoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType MonoPanorama
void Valve::VR::EVRScreenshotType::_set_MonoPanorama(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_MonoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "MonoPanorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotType StereoPanorama
Valve::VR::EVRScreenshotType Valve::VR::EVRScreenshotType::_get_StereoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_get_StereoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotType>("Valve.VR", "EVRScreenshotType", "StereoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotType StereoPanorama
void Valve::VR::EVRScreenshotType::_set_StereoPanorama(Valve::VR::EVRScreenshotType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::_set_StereoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotType", "StereoPanorama", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRScreenshotType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotPropertyFilenames
#include "Valve/VR/EVRScreenshotPropertyFilenames.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotPropertyFilenames Preview
Valve::VR::EVRScreenshotPropertyFilenames Valve::VR::EVRScreenshotPropertyFilenames::_get_Preview() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_get_Preview");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotPropertyFilenames>("Valve.VR", "EVRScreenshotPropertyFilenames", "Preview"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotPropertyFilenames Preview
void Valve::VR::EVRScreenshotPropertyFilenames::_set_Preview(Valve::VR::EVRScreenshotPropertyFilenames value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_set_Preview");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotPropertyFilenames", "Preview", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotPropertyFilenames VR
Valve::VR::EVRScreenshotPropertyFilenames Valve::VR::EVRScreenshotPropertyFilenames::_get_VR() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_get_VR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotPropertyFilenames>("Valve.VR", "EVRScreenshotPropertyFilenames", "VR"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotPropertyFilenames VR
void Valve::VR::EVRScreenshotPropertyFilenames::_set_VR(Valve::VR::EVRScreenshotPropertyFilenames value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::_set_VR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotPropertyFilenames", "VR", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRScreenshotPropertyFilenames::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotPropertyFilenames::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError None
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError None
void Valve::VR::EVRTrackedCameraError::_set_None(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OperationFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_OperationFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OperationFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
void Valve::VR::EVRTrackedCameraError::_set_OperationFailed(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_OperationFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OperationFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidHandle(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameHeaderVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidFrameHeaderVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameHeaderVersion(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidFrameHeaderVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OutOfHandles() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_OutOfHandles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OutOfHandles"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
void Valve::VR::EVRTrackedCameraError::_set_OutOfHandles(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_OutOfHandles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OutOfHandles", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_IPCFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_IPCFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "IPCFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
void Valve::VR::EVRTrackedCameraError::_set_IPCFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_IPCFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "IPCFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NotSupportedForThisDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_NotSupportedForThisDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
void Valve::VR::EVRTrackedCameraError::_set_NotSupportedForThisDevice(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_NotSupportedForThisDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedMemoryFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_SharedMemoryFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedMemoryFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_SharedMemoryFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FrameBufferingFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_FrameBufferingFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
void Valve::VR::EVRTrackedCameraError::_set_FrameBufferingFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_FrameBufferingFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_StreamSetupFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_StreamSetupFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
void Valve::VR::EVRTrackedCameraError::_set_StreamSetupFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_StreamSetupFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidGLTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidGLTextureId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_InvalidGLTextureId(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidGLTextureId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidSharedTextureHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidSharedTextureHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidSharedTextureHandle(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidSharedTextureHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FailedToGetGLTextureId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_FailedToGetGLTextureId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_FailedToGetGLTextureId(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_FailedToGetGLTextureId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedTextureFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_SharedTextureFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedTextureFailure(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_SharedTextureFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NoFrameAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_NoFrameAvailable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
void Valve::VR::EVRTrackedCameraError::_set_NoFrameAvailable(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_NoFrameAvailable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidArgument() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidArgument");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidArgument"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
void Valve::VR::EVRTrackedCameraError::_set_InvalidArgument(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidArgument");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidArgument", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_get_InvalidFrameBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameBufferSize(Valve::VR::EVRTrackedCameraError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::_set_InvalidFrameBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRTrackedCameraError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRTrackedCameraFrameType
#include "Valve/VR/EVRTrackedCameraFrameType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType Distorted
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_Distorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_Distorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "Distorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType Distorted
void Valve::VR::EVRTrackedCameraFrameType::_set_Distorted(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_Distorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "Distorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType Undistorted
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_Undistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_Undistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "Undistorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType Undistorted
void Valve::VR::EVRTrackedCameraFrameType::_set_Undistorted(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_Undistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "Undistorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType MaximumUndistorted
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_MaximumUndistorted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_MaximumUndistorted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "MaximumUndistorted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType MaximumUndistorted
void Valve::VR::EVRTrackedCameraFrameType::_set_MaximumUndistorted(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_MaximumUndistorted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "MaximumUndistorted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraFrameType MAX_CAMERA_FRAME_TYPES
Valve::VR::EVRTrackedCameraFrameType Valve::VR::EVRTrackedCameraFrameType::_get_MAX_CAMERA_FRAME_TYPES() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_get_MAX_CAMERA_FRAME_TYPES");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraFrameType>("Valve.VR", "EVRTrackedCameraFrameType", "MAX_CAMERA_FRAME_TYPES"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraFrameType MAX_CAMERA_FRAME_TYPES
void Valve::VR::EVRTrackedCameraFrameType::_set_MAX_CAMERA_FRAME_TYPES(Valve::VR::EVRTrackedCameraFrameType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::_set_MAX_CAMERA_FRAME_TYPES");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraFrameType", "MAX_CAMERA_FRAME_TYPES", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRTrackedCameraFrameType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRTrackedCameraFrameType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationError
#include "Valve/VR/EVRApplicationError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError None
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError None
void Valve::VR::EVRApplicationError::_set_None(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError AppKeyAlreadyExists
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_AppKeyAlreadyExists() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_AppKeyAlreadyExists");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "AppKeyAlreadyExists"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError AppKeyAlreadyExists
void Valve::VR::EVRApplicationError::_set_AppKeyAlreadyExists(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_AppKeyAlreadyExists");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "AppKeyAlreadyExists", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError NoManifest
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_NoManifest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_NoManifest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "NoManifest"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError NoManifest
void Valve::VR::EVRApplicationError::_set_NoManifest(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_NoManifest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "NoManifest", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError NoApplication
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_NoApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_NoApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "NoApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError NoApplication
void Valve::VR::EVRApplicationError::_set_NoApplication(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_NoApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "NoApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidIndex
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidIndex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidIndex"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidIndex
void Valve::VR::EVRApplicationError::_set_InvalidIndex(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidIndex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidIndex", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError UnknownApplication
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_UnknownApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_UnknownApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "UnknownApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError UnknownApplication
void Valve::VR::EVRApplicationError::_set_UnknownApplication(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_UnknownApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "UnknownApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError IPCFailed
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_IPCFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_IPCFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "IPCFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError IPCFailed
void Valve::VR::EVRApplicationError::_set_IPCFailed(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_IPCFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "IPCFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyRunning
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_ApplicationAlreadyRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_ApplicationAlreadyRunning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "ApplicationAlreadyRunning"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyRunning
void Valve::VR::EVRApplicationError::_set_ApplicationAlreadyRunning(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_ApplicationAlreadyRunning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "ApplicationAlreadyRunning", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidManifest
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidManifest() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidManifest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidManifest"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidManifest
void Valve::VR::EVRApplicationError::_set_InvalidManifest(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidManifest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidManifest", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidApplication
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidApplication
void Valve::VR::EVRApplicationError::_set_InvalidApplication(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError LaunchFailed
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_LaunchFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_LaunchFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "LaunchFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError LaunchFailed
void Valve::VR::EVRApplicationError::_set_LaunchFailed(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_LaunchFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "LaunchFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyStarting
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_ApplicationAlreadyStarting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_ApplicationAlreadyStarting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "ApplicationAlreadyStarting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError ApplicationAlreadyStarting
void Valve::VR::EVRApplicationError::_set_ApplicationAlreadyStarting(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_ApplicationAlreadyStarting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "ApplicationAlreadyStarting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError LaunchInProgress
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_LaunchInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_LaunchInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "LaunchInProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError LaunchInProgress
void Valve::VR::EVRApplicationError::_set_LaunchInProgress(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_LaunchInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "LaunchInProgress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError OldApplicationQuitting
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_OldApplicationQuitting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_OldApplicationQuitting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "OldApplicationQuitting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError OldApplicationQuitting
void Valve::VR::EVRApplicationError::_set_OldApplicationQuitting(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_OldApplicationQuitting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "OldApplicationQuitting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError TransitionAborted
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_TransitionAborted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_TransitionAborted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "TransitionAborted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError TransitionAborted
void Valve::VR::EVRApplicationError::_set_TransitionAborted(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_TransitionAborted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "TransitionAborted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError IsTemplate
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_IsTemplate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_IsTemplate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "IsTemplate"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError IsTemplate
void Valve::VR::EVRApplicationError::_set_IsTemplate(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_IsTemplate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "IsTemplate", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError SteamVRIsExiting
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_SteamVRIsExiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_SteamVRIsExiting");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "SteamVRIsExiting"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError SteamVRIsExiting
void Valve::VR::EVRApplicationError::_set_SteamVRIsExiting(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_SteamVRIsExiting");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "SteamVRIsExiting", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError BufferTooSmall
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError BufferTooSmall
void Valve::VR::EVRApplicationError::_set_BufferTooSmall(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError PropertyNotSet
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_PropertyNotSet() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_PropertyNotSet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "PropertyNotSet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError PropertyNotSet
void Valve::VR::EVRApplicationError::_set_PropertyNotSet(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_PropertyNotSet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "PropertyNotSet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError UnknownProperty
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_UnknownProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_UnknownProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "UnknownProperty"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError UnknownProperty
void Valve::VR::EVRApplicationError::_set_UnknownProperty(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_UnknownProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "UnknownProperty", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationError InvalidParameter
Valve::VR::EVRApplicationError Valve::VR::EVRApplicationError::_get_InvalidParameter() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_get_InvalidParameter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationError>("Valve.VR", "EVRApplicationError", "InvalidParameter"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationError InvalidParameter
void Valve::VR::EVRApplicationError::_set_InvalidParameter(Valve::VR::EVRApplicationError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::_set_InvalidParameter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationError", "InvalidParameter", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRApplicationError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationProperty
#include "Valve/VR/EVRApplicationProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Name_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Name_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Name_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Name_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Name_String
void Valve::VR::EVRApplicationProperty::_set_Name_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Name_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Name_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty LaunchType_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_LaunchType_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_LaunchType_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "LaunchType_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty LaunchType_String
void Valve::VR::EVRApplicationProperty::_set_LaunchType_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_LaunchType_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "LaunchType_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty WorkingDirectory_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_WorkingDirectory_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_WorkingDirectory_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "WorkingDirectory_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty WorkingDirectory_String
void Valve::VR::EVRApplicationProperty::_set_WorkingDirectory_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_WorkingDirectory_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "WorkingDirectory_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty BinaryPath_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_BinaryPath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_BinaryPath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "BinaryPath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty BinaryPath_String
void Valve::VR::EVRApplicationProperty::_set_BinaryPath_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_BinaryPath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "BinaryPath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Arguments_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Arguments_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Arguments_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Arguments_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Arguments_String
void Valve::VR::EVRApplicationProperty::_set_Arguments_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Arguments_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Arguments_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty URL_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_URL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_URL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "URL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty URL_String
void Valve::VR::EVRApplicationProperty::_set_URL_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_URL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "URL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Description_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Description_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Description_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Description_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Description_String
void Valve::VR::EVRApplicationProperty::_set_Description_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Description_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Description_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty NewsURL_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_NewsURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_NewsURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "NewsURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty NewsURL_String
void Valve::VR::EVRApplicationProperty::_set_NewsURL_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_NewsURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "NewsURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty ImagePath_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_ImagePath_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_ImagePath_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "ImagePath_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty ImagePath_String
void Valve::VR::EVRApplicationProperty::_set_ImagePath_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_ImagePath_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "ImagePath_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty Source_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_Source_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_Source_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "Source_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty Source_String
void Valve::VR::EVRApplicationProperty::_set_Source_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_Source_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "Source_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty ActionManifestURL_String
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_ActionManifestURL_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_ActionManifestURL_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "ActionManifestURL_String"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty ActionManifestURL_String
void Valve::VR::EVRApplicationProperty::_set_ActionManifestURL_String(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_ActionManifestURL_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "ActionManifestURL_String", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsDashboardOverlay_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsDashboardOverlay_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsDashboardOverlay_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsDashboardOverlay_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsDashboardOverlay_Bool
void Valve::VR::EVRApplicationProperty::_set_IsDashboardOverlay_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsDashboardOverlay_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsDashboardOverlay_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsTemplate_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsTemplate_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsTemplate_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsTemplate_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsTemplate_Bool
void Valve::VR::EVRApplicationProperty::_set_IsTemplate_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsTemplate_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsTemplate_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsInstanced_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsInstanced_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsInstanced_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsInstanced_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsInstanced_Bool
void Valve::VR::EVRApplicationProperty::_set_IsInstanced_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsInstanced_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsInstanced_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty IsInternal_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_IsInternal_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_IsInternal_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "IsInternal_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty IsInternal_Bool
void Valve::VR::EVRApplicationProperty::_set_IsInternal_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_IsInternal_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "IsInternal_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty WantsCompositorPauseInStandby_Bool
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_WantsCompositorPauseInStandby_Bool() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_WantsCompositorPauseInStandby_Bool");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "WantsCompositorPauseInStandby_Bool"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty WantsCompositorPauseInStandby_Bool
void Valve::VR::EVRApplicationProperty::_set_WantsCompositorPauseInStandby_Bool(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_WantsCompositorPauseInStandby_Bool");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "WantsCompositorPauseInStandby_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationProperty LastLaunchTime_Uint64
Valve::VR::EVRApplicationProperty Valve::VR::EVRApplicationProperty::_get_LastLaunchTime_Uint64() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_get_LastLaunchTime_Uint64");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationProperty>("Valve.VR", "EVRApplicationProperty", "LastLaunchTime_Uint64"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationProperty LastLaunchTime_Uint64
void Valve::VR::EVRApplicationProperty::_set_LastLaunchTime_Uint64(Valve::VR::EVRApplicationProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::_set_LastLaunchTime_Uint64");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationProperty", "LastLaunchTime_Uint64", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRApplicationProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRApplicationTransitionState
#include "Valve/VR/EVRApplicationTransitionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_None
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_None
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_None(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_OldAppQuitSent
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_OldAppQuitSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_OldAppQuitSent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_OldAppQuitSent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_OldAppQuitSent
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_OldAppQuitSent(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_OldAppQuitSent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_OldAppQuitSent", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_WaitingForExternalLaunch
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_WaitingForExternalLaunch() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_WaitingForExternalLaunch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_WaitingForExternalLaunch"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_WaitingForExternalLaunch
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_WaitingForExternalLaunch(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_WaitingForExternalLaunch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_WaitingForExternalLaunch", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_NewAppLaunched
Valve::VR::EVRApplicationTransitionState Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_NewAppLaunched() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_get_VRApplicationTransition_NewAppLaunched");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRApplicationTransitionState>("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_NewAppLaunched"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRApplicationTransitionState VRApplicationTransition_NewAppLaunched
void Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_NewAppLaunched(Valve::VR::EVRApplicationTransitionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::_set_VRApplicationTransition_NewAppLaunched");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRApplicationTransitionState", "VRApplicationTransition_NewAppLaunched", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRApplicationTransitionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRApplicationTransitionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState OK
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState OK
void Valve::VR::ChaperoneCalibrationState::_set_OK(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning
void Valve::VR::ChaperoneCalibrationState::_set_Warning(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationMayHaveMoved
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationMayHaveMoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationMayHaveMoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationMayHaveMoved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationMayHaveMoved
void Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationMayHaveMoved(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationMayHaveMoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationMayHaveMoved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationRemoved
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationRemoved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning_BaseStationRemoved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationRemoved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_BaseStationRemoved
void Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationRemoved(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning_BaseStationRemoved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_BaseStationRemoved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Warning_SeatedBoundsInvalid
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Warning_SeatedBoundsInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Warning_SeatedBoundsInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Warning_SeatedBoundsInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Warning_SeatedBoundsInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Warning_SeatedBoundsInvalid(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Warning_SeatedBoundsInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Warning_SeatedBoundsInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error
void Valve::VR::ChaperoneCalibrationState::_set_Error(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationUninitialized
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationUninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationUninitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationUninitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationUninitialized
void Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationUninitialized(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationUninitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationUninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationConflict
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationConflict() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_BaseStationConflict");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationConflict"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_BaseStationConflict
void Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationConflict(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_BaseStationConflict");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_BaseStationConflict", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_PlayAreaInvalid
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_PlayAreaInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_PlayAreaInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_PlayAreaInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_PlayAreaInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Error_PlayAreaInvalid(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_PlayAreaInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_PlayAreaInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ChaperoneCalibrationState Error_CollisionBoundsInvalid
Valve::VR::ChaperoneCalibrationState Valve::VR::ChaperoneCalibrationState::_get_Error_CollisionBoundsInvalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_get_Error_CollisionBoundsInvalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ChaperoneCalibrationState>("Valve.VR", "ChaperoneCalibrationState", "Error_CollisionBoundsInvalid"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ChaperoneCalibrationState Error_CollisionBoundsInvalid
void Valve::VR::ChaperoneCalibrationState::_set_Error_CollisionBoundsInvalid(Valve::VR::ChaperoneCalibrationState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::_set_Error_CollisionBoundsInvalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ChaperoneCalibrationState", "Error_CollisionBoundsInvalid", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::ChaperoneCalibrationState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::ChaperoneCalibrationState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneConfigFile Live
Valve::VR::EChaperoneConfigFile Valve::VR::EChaperoneConfigFile::_get_Live() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_get_Live");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EChaperoneConfigFile>("Valve.VR", "EChaperoneConfigFile", "Live"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneConfigFile Live
void Valve::VR::EChaperoneConfigFile::_set_Live(Valve::VR::EChaperoneConfigFile value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_set_Live");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneConfigFile", "Live", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneConfigFile Temp
Valve::VR::EChaperoneConfigFile Valve::VR::EChaperoneConfigFile::_get_Temp() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_get_Temp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EChaperoneConfigFile>("Valve.VR", "EChaperoneConfigFile", "Temp"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneConfigFile Temp
void Valve::VR::EChaperoneConfigFile::_set_Temp(Valve::VR::EChaperoneConfigFile value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::_set_Temp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneConfigFile", "Temp", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EChaperoneConfigFile::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneConfigFile::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EChaperoneImportFlags
#include "Valve/VR/EChaperoneImportFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EChaperoneImportFlags EChaperoneImport_BoundsOnly
Valve::VR::EChaperoneImportFlags Valve::VR::EChaperoneImportFlags::_get_EChaperoneImport_BoundsOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneImportFlags::_get_EChaperoneImport_BoundsOnly");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EChaperoneImportFlags>("Valve.VR", "EChaperoneImportFlags", "EChaperoneImport_BoundsOnly"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EChaperoneImportFlags EChaperoneImport_BoundsOnly
void Valve::VR::EChaperoneImportFlags::_set_EChaperoneImport_BoundsOnly(Valve::VR::EChaperoneImportFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneImportFlags::_set_EChaperoneImport_BoundsOnly");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EChaperoneImportFlags", "EChaperoneImport_BoundsOnly", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EChaperoneImportFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EChaperoneImportFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError None
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError None
void Valve::VR::EVRCompositorError::_set_None(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError RequestFailed
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError RequestFailed
void Valve::VR::EVRCompositorError::_set_RequestFailed(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IncompatibleVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_IncompatibleVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IncompatibleVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IncompatibleVersion
void Valve::VR::EVRCompositorError::_set_IncompatibleVersion(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_IncompatibleVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IncompatibleVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_DoNotHaveFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_DoNotHaveFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "DoNotHaveFocus"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError DoNotHaveFocus
void Valve::VR::EVRCompositorError::_set_DoNotHaveFocus(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_DoNotHaveFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "DoNotHaveFocus", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError InvalidTexture
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError InvalidTexture
void Valve::VR::EVRCompositorError::_set_InvalidTexture(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "InvalidTexture", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IsNotSceneApplication() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_IsNotSceneApplication");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IsNotSceneApplication"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IsNotSceneApplication
void Valve::VR::EVRCompositorError::_set_IsNotSceneApplication(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_IsNotSceneApplication");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IsNotSceneApplication", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_TextureIsOnWrongDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_TextureIsOnWrongDevice");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "TextureIsOnWrongDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError TextureIsOnWrongDevice
void Valve::VR::EVRCompositorError::_set_TextureIsOnWrongDevice(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_TextureIsOnWrongDevice");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "TextureIsOnWrongDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_TextureUsesUnsupportedFormat() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_TextureUsesUnsupportedFormat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "TextureUsesUnsupportedFormat"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError TextureUsesUnsupportedFormat
void Valve::VR::EVRCompositorError::_set_TextureUsesUnsupportedFormat(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_TextureUsesUnsupportedFormat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "TextureUsesUnsupportedFormat", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_SharedTexturesNotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_SharedTexturesNotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "SharedTexturesNotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError SharedTexturesNotSupported
void Valve::VR::EVRCompositorError::_set_SharedTexturesNotSupported(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_SharedTexturesNotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "SharedTexturesNotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_IndexOutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_IndexOutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "IndexOutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError IndexOutOfRange
void Valve::VR::EVRCompositorError::_set_IndexOutOfRange(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_IndexOutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "IndexOutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_AlreadySubmitted() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_AlreadySubmitted");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "AlreadySubmitted"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError AlreadySubmitted
void Valve::VR::EVRCompositorError::_set_AlreadySubmitted(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_AlreadySubmitted");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "AlreadySubmitted", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorError InvalidBounds
Valve::VR::EVRCompositorError Valve::VR::EVRCompositorError::_get_InvalidBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_get_InvalidBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorError>("Valve.VR", "EVRCompositorError", "InvalidBounds"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorError InvalidBounds
void Valve::VR::EVRCompositorError::_set_InvalidBounds(Valve::VR::EVRCompositorError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::_set_InvalidBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorError", "InvalidBounds", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRCompositorError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Implicit
Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Implicit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_get_Implicit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Implicit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Implicit
void Valve::VR::EVRCompositorTimingMode::_set_Implicit(Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_set_Implicit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Implicit", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Explicit_RuntimePerformsPostPresentHandoff
Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Explicit_RuntimePerformsPostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_get_Explicit_RuntimePerformsPostPresentHandoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Explicit_RuntimePerformsPostPresentHandoff"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Explicit_RuntimePerformsPostPresentHandoff
void Valve::VR::EVRCompositorTimingMode::_set_Explicit_RuntimePerformsPostPresentHandoff(Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_set_Explicit_RuntimePerformsPostPresentHandoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Explicit_RuntimePerformsPostPresentHandoff", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRCompositorTimingMode Explicit_ApplicationPerformsPostPresentHandoff
Valve::VR::EVRCompositorTimingMode Valve::VR::EVRCompositorTimingMode::_get_Explicit_ApplicationPerformsPostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_get_Explicit_ApplicationPerformsPostPresentHandoff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRCompositorTimingMode>("Valve.VR", "EVRCompositorTimingMode", "Explicit_ApplicationPerformsPostPresentHandoff"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRCompositorTimingMode Explicit_ApplicationPerformsPostPresentHandoff
void Valve::VR::EVRCompositorTimingMode::_set_Explicit_ApplicationPerformsPostPresentHandoff(Valve::VR::EVRCompositorTimingMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::_set_Explicit_ApplicationPerformsPostPresentHandoff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRCompositorTimingMode", "Explicit_ApplicationPerformsPostPresentHandoff", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRCompositorTimingMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRCompositorTimingMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod None
Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod None
void Valve::VR::VROverlayInputMethod::_set_None(Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod Mouse
Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_Mouse() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_get_Mouse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "Mouse"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod Mouse
void Valve::VR::VROverlayInputMethod::_set_Mouse(Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_set_Mouse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "Mouse", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayInputMethod DualAnalog
Valve::VR::VROverlayInputMethod Valve::VR::VROverlayInputMethod::_get_DualAnalog() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_get_DualAnalog");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayInputMethod>("Valve.VR", "VROverlayInputMethod", "DualAnalog"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayInputMethod DualAnalog
void Valve::VR::VROverlayInputMethod::_set_DualAnalog(Valve::VR::VROverlayInputMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::_set_DualAnalog");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayInputMethod", "DualAnalog", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::VROverlayInputMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayInputMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_Absolute
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_Absolute() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_Absolute");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_Absolute"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_Absolute
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_Absolute(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_Absolute");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_Absolute", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedDeviceRelative
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedDeviceRelative() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedDeviceRelative");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedDeviceRelative"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedDeviceRelative
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedDeviceRelative(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedDeviceRelative");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedDeviceRelative", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_SystemOverlay
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_SystemOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_SystemOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_SystemOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_SystemOverlay
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_SystemOverlay(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_SystemOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_SystemOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedComponent
Valve::VR::VROverlayTransformType Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_get_VROverlayTransform_TrackedComponent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayTransformType>("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedComponent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayTransformType VROverlayTransform_TrackedComponent
void Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedComponent(Valve::VR::VROverlayTransformType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::_set_VROverlayTransform_TrackedComponent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayTransformType", "VROverlayTransform_TrackedComponent", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::VROverlayTransformType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayTransformType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags None
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags None
void Valve::VR::VROverlayFlags::_set_None(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags Curved
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_Curved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_Curved");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "Curved"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags Curved
void Valve::VR::VROverlayFlags::_set_Curved(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_Curved");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "Curved", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags RGSS4X
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_RGSS4X() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_RGSS4X");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "RGSS4X"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags RGSS4X
void Valve::VR::VROverlayFlags::_set_RGSS4X(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_RGSS4X");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "RGSS4X", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags NoDashboardTab
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_NoDashboardTab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_NoDashboardTab");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "NoDashboardTab"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags NoDashboardTab
void Valve::VR::VROverlayFlags::_set_NoDashboardTab(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_NoDashboardTab");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "NoDashboardTab", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags AcceptsGamepadEvents
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_AcceptsGamepadEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_AcceptsGamepadEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "AcceptsGamepadEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags AcceptsGamepadEvents
void Valve::VR::VROverlayFlags::_set_AcceptsGamepadEvents(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_AcceptsGamepadEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "AcceptsGamepadEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags ShowGamepadFocus
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_ShowGamepadFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_ShowGamepadFocus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "ShowGamepadFocus"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags ShowGamepadFocus
void Valve::VR::VROverlayFlags::_set_ShowGamepadFocus(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_ShowGamepadFocus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "ShowGamepadFocus", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SendVRScrollEvents
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SendVRScrollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SendVRScrollEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SendVRScrollEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SendVRScrollEvents
void Valve::VR::VROverlayFlags::_set_SendVRScrollEvents(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SendVRScrollEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SendVRScrollEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SendVRTouchpadEvents
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SendVRTouchpadEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SendVRTouchpadEvents");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SendVRTouchpadEvents"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SendVRTouchpadEvents
void Valve::VR::VROverlayFlags::_set_SendVRTouchpadEvents(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SendVRTouchpadEvents");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SendVRTouchpadEvents", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags ShowTouchPadScrollWheel
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_ShowTouchPadScrollWheel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_ShowTouchPadScrollWheel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "ShowTouchPadScrollWheel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags ShowTouchPadScrollWheel
void Valve::VR::VROverlayFlags::_set_ShowTouchPadScrollWheel(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_ShowTouchPadScrollWheel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "ShowTouchPadScrollWheel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags TransferOwnershipToInternalProcess
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_TransferOwnershipToInternalProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_TransferOwnershipToInternalProcess");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "TransferOwnershipToInternalProcess"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags TransferOwnershipToInternalProcess
void Valve::VR::VROverlayFlags::_set_TransferOwnershipToInternalProcess(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_TransferOwnershipToInternalProcess");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "TransferOwnershipToInternalProcess", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SideBySide_Parallel
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SideBySide_Parallel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SideBySide_Parallel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SideBySide_Parallel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SideBySide_Parallel
void Valve::VR::VROverlayFlags::_set_SideBySide_Parallel(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SideBySide_Parallel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SideBySide_Parallel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SideBySide_Crossed
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SideBySide_Crossed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SideBySide_Crossed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SideBySide_Crossed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SideBySide_Crossed
void Valve::VR::VROverlayFlags::_set_SideBySide_Crossed(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SideBySide_Crossed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SideBySide_Crossed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags Panorama
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_Panorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_Panorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "Panorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags Panorama
void Valve::VR::VROverlayFlags::_set_Panorama(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_Panorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "Panorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags StereoPanorama
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_StereoPanorama() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_StereoPanorama");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "StereoPanorama"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags StereoPanorama
void Valve::VR::VROverlayFlags::_set_StereoPanorama(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_StereoPanorama");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "StereoPanorama", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags SortWithNonSceneOverlays
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_SortWithNonSceneOverlays() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_SortWithNonSceneOverlays");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "SortWithNonSceneOverlays"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags SortWithNonSceneOverlays
void Valve::VR::VROverlayFlags::_set_SortWithNonSceneOverlays(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_SortWithNonSceneOverlays");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "SortWithNonSceneOverlays", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VROverlayFlags VisibleInDashboard
Valve::VR::VROverlayFlags Valve::VR::VROverlayFlags::_get_VisibleInDashboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_get_VisibleInDashboard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VROverlayFlags>("Valve.VR", "VROverlayFlags", "VisibleInDashboard"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VROverlayFlags VisibleInDashboard
void Valve::VR::VROverlayFlags::_set_VisibleInDashboard(Valve::VR::VROverlayFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::_set_VisibleInDashboard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VROverlayFlags", "VisibleInDashboard", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::VROverlayFlags::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VROverlayFlags::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_0
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_0"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_0
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_0(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_0", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_1
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_1"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_1
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_1(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_1", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_2
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_2"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_2
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_2(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_2", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_3
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ButtonPress_3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_3"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ButtonPress_3
void Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_3(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ButtonPress_3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ButtonPress_3", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindSystemOverlay
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_CouldntFindSystemOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_CouldntFindSystemOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "CouldntFindSystemOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindSystemOverlay
void Valve::VR::VRMessageOverlayResponse::_set_CouldntFindSystemOverlay(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_CouldntFindSystemOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "CouldntFindSystemOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindOrCreateClientOverlay
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_CouldntFindOrCreateClientOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_CouldntFindOrCreateClientOverlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "CouldntFindOrCreateClientOverlay"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse CouldntFindOrCreateClientOverlay
void Valve::VR::VRMessageOverlayResponse::_set_CouldntFindOrCreateClientOverlay(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_CouldntFindOrCreateClientOverlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "CouldntFindOrCreateClientOverlay", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.VRMessageOverlayResponse ApplicationQuit
Valve::VR::VRMessageOverlayResponse Valve::VR::VRMessageOverlayResponse::_get_ApplicationQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_get_ApplicationQuit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::VRMessageOverlayResponse>("Valve.VR", "VRMessageOverlayResponse", "ApplicationQuit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.VRMessageOverlayResponse ApplicationQuit
void Valve::VR::VRMessageOverlayResponse::_set_ApplicationQuit(Valve::VR::VRMessageOverlayResponse value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::_set_ApplicationQuit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "VRMessageOverlayResponse", "ApplicationQuit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::VRMessageOverlayResponse::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::VRMessageOverlayResponse::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EGamepadTextInputMode
#include "Valve/VR/EGamepadTextInputMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeNormal
Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeNormal"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeNormal
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeNormal(Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeNormal", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModePassword
Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModePassword() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModePassword");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModePassword"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModePassword
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModePassword(Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModePassword");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModePassword", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeSubmit
Valve::VR::EGamepadTextInputMode Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_get_k_EGamepadTextInputModeSubmit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputMode>("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeSubmit"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputMode k_EGamepadTextInputModeSubmit
void Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeSubmit(Valve::VR::EGamepadTextInputMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::_set_k_EGamepadTextInputModeSubmit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputMode", "k_EGamepadTextInputModeSubmit", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EGamepadTextInputMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EGamepadTextInputLineMode
#include "Valve/VR/EGamepadTextInputLineMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeSingleLine
Valve::VR::EGamepadTextInputLineMode Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeSingleLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeSingleLine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputLineMode>("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeSingleLine"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeSingleLine
void Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeSingleLine(Valve::VR::EGamepadTextInputLineMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeSingleLine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeSingleLine", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeMultipleLines
Valve::VR::EGamepadTextInputLineMode Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeMultipleLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_get_k_EGamepadTextInputLineModeMultipleLines");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EGamepadTextInputLineMode>("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeMultipleLines"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EGamepadTextInputLineMode k_EGamepadTextInputLineModeMultipleLines
void Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeMultipleLines(Valve::VR::EGamepadTextInputLineMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::_set_k_EGamepadTextInputLineModeMultipleLines");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EGamepadTextInputLineMode", "k_EGamepadTextInputLineModeMultipleLines", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EGamepadTextInputLineMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EGamepadTextInputLineMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Up
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Up"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Up
void Valve::VR::EOverlayDirection::_set_Up(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Up", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Down
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Down"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Down
void Valve::VR::EOverlayDirection::_set_Down(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Down", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Left
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Left"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Left
void Valve::VR::EOverlayDirection::_set_Left(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Right
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Right"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Right
void Valve::VR::EOverlayDirection::_set_Right(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EOverlayDirection Count
Valve::VR::EOverlayDirection Valve::VR::EOverlayDirection::_get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_get_Count");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EOverlayDirection>("Valve.VR", "EOverlayDirection", "Count"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EOverlayDirection Count
void Valve::VR::EOverlayDirection::_set_Count(Valve::VR::EOverlayDirection value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::_set_Count");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EOverlayDirection", "Count", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EOverlayDirection::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EOverlayDirection::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVROverlayIntersectionMaskPrimitiveType
#include "Valve/VR/EVROverlayIntersectionMaskPrimitiveType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Rectangle
Valve::VR::EVROverlayIntersectionMaskPrimitiveType Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Rectangle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Rectangle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayIntersectionMaskPrimitiveType>("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Rectangle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Rectangle
void Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Rectangle(Valve::VR::EVROverlayIntersectionMaskPrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Rectangle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Rectangle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Circle
Valve::VR::EVROverlayIntersectionMaskPrimitiveType Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Circle() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_get_OverlayIntersectionPrimitiveType_Circle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVROverlayIntersectionMaskPrimitiveType>("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Circle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVROverlayIntersectionMaskPrimitiveType OverlayIntersectionPrimitiveType_Circle
void Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Circle(Valve::VR::EVROverlayIntersectionMaskPrimitiveType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::_set_OverlayIntersectionPrimitiveType_Circle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVROverlayIntersectionMaskPrimitiveType", "OverlayIntersectionPrimitiveType_Circle", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVROverlayIntersectionMaskPrimitiveType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVROverlayIntersectionMaskPrimitiveType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError None
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError None
void Valve::VR::EVRRenderModelError::_set_None(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError Loading
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_Loading() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_Loading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "Loading"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError Loading
void Valve::VR::EVRRenderModelError::_set_Loading(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_Loading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "Loading", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotSupported
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotSupported() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NotSupported");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotSupported"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotSupported
void Valve::VR::EVRRenderModelError::_set_NotSupported(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NotSupported");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotSupported", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidArg
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidArg() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_InvalidArg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidArg"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidArg
void Valve::VR::EVRRenderModelError::_set_InvalidArg(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_InvalidArg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidArg", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidModel
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_InvalidModel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidModel"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidModel
void Valve::VR::EVRRenderModelError::_set_InvalidModel(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_InvalidModel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidModel", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NoShapes
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NoShapes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NoShapes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NoShapes"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NoShapes
void Valve::VR::EVRRenderModelError::_set_NoShapes(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NoShapes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NoShapes", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError MultipleShapes
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_MultipleShapes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_MultipleShapes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "MultipleShapes"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError MultipleShapes
void Valve::VR::EVRRenderModelError::_set_MultipleShapes(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_MultipleShapes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "MultipleShapes", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError TooManyVertices
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_TooManyVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_TooManyVertices");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "TooManyVertices"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError TooManyVertices
void Valve::VR::EVRRenderModelError::_set_TooManyVertices(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_TooManyVertices");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "TooManyVertices", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError MultipleTextures
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_MultipleTextures() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_MultipleTextures");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "MultipleTextures"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError MultipleTextures
void Valve::VR::EVRRenderModelError::_set_MultipleTextures(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_MultipleTextures");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "MultipleTextures", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError BufferTooSmall
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError BufferTooSmall
void Valve::VR::EVRRenderModelError::_set_BufferTooSmall(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotEnoughNormals
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotEnoughNormals() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NotEnoughNormals");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotEnoughNormals"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotEnoughNormals
void Valve::VR::EVRRenderModelError::_set_NotEnoughNormals(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NotEnoughNormals");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotEnoughNormals", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError NotEnoughTexCoords
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_NotEnoughTexCoords() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_NotEnoughTexCoords");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "NotEnoughTexCoords"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError NotEnoughTexCoords
void Valve::VR::EVRRenderModelError::_set_NotEnoughTexCoords(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_NotEnoughTexCoords");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "NotEnoughTexCoords", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRRenderModelError InvalidTexture
Valve::VR::EVRRenderModelError Valve::VR::EVRRenderModelError::_get_InvalidTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_get_InvalidTexture");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRRenderModelError>("Valve.VR", "EVRRenderModelError", "InvalidTexture"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRRenderModelError InvalidTexture
void Valve::VR::EVRRenderModelError::_set_InvalidTexture(Valve::VR::EVRRenderModelError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::_set_InvalidTexture");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRRenderModelError", "InvalidTexture", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRRenderModelError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRRenderModelError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRComponentProperty
#include "Valve/VR/EVRComponentProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsStatic
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsStatic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsStatic"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsStatic
void Valve::VR::EVRComponentProperty::_set_IsStatic(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsStatic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsStatic", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsVisible
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsVisible");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsVisible"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsVisible
void Valve::VR::EVRComponentProperty::_set_IsVisible(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsVisible");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsVisible", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsTouched
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsTouched() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsTouched");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsTouched"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsTouched
void Valve::VR::EVRComponentProperty::_set_IsTouched(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsTouched");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsTouched", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsPressed
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsPressed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsPressed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsPressed
void Valve::VR::EVRComponentProperty::_set_IsPressed(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsPressed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsPressed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRComponentProperty IsScrolled
Valve::VR::EVRComponentProperty Valve::VR::EVRComponentProperty::_get_IsScrolled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_get_IsScrolled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRComponentProperty>("Valve.VR", "EVRComponentProperty", "IsScrolled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRComponentProperty IsScrolled
void Valve::VR::EVRComponentProperty::_set_IsScrolled(Valve::VR::EVRComponentProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::_set_IsScrolled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRComponentProperty", "IsScrolled", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRComponentProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRComponentProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationType
#include "Valve/VR/EVRNotificationType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Transient
Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Transient() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_get_Transient");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Transient"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Transient
void Valve::VR::EVRNotificationType::_set_Transient(Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_set_Transient");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Transient", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Persistent
Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Persistent() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_get_Persistent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Persistent"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Persistent
void Valve::VR::EVRNotificationType::_set_Persistent(Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_set_Persistent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Persistent", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationType Transient_SystemWithUserValue
Valve::VR::EVRNotificationType Valve::VR::EVRNotificationType::_get_Transient_SystemWithUserValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_get_Transient_SystemWithUserValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationType>("Valve.VR", "EVRNotificationType", "Transient_SystemWithUserValue"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationType Transient_SystemWithUserValue
void Valve::VR::EVRNotificationType::_set_Transient_SystemWithUserValue(Valve::VR::EVRNotificationType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::_set_Transient_SystemWithUserValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationType", "Transient_SystemWithUserValue", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRNotificationType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRNotificationStyle
#include "Valve/VR/EVRNotificationStyle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle None
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle None
void Valve::VR::EVRNotificationStyle::_set_None(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Application
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Application() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Application");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Application"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Application
void Valve::VR::EVRNotificationStyle::_set_Application(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Application");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Application", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Disabled
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Contact_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Disabled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Disabled
void Valve::VR::EVRNotificationStyle::_set_Contact_Disabled(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Contact_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Enabled
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Contact_Enabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Enabled"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Enabled
void Valve::VR::EVRNotificationStyle::_set_Contact_Enabled(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Contact_Enabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Enabled", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRNotificationStyle Contact_Active
Valve::VR::EVRNotificationStyle Valve::VR::EVRNotificationStyle::_get_Contact_Active() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_get_Contact_Active");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRNotificationStyle>("Valve.VR", "EVRNotificationStyle", "Contact_Active"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRNotificationStyle Contact_Active
void Valve::VR::EVRNotificationStyle::_set_Contact_Active(Valve::VR::EVRNotificationStyle value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::_set_Contact_Active");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRNotificationStyle", "Contact_Active", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRNotificationStyle::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRNotificationStyle::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRSettingsError
#include "Valve/VR/EVRSettingsError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError None
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError None
void Valve::VR::EVRSettingsError::_set_None(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError IPCFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_IPCFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_IPCFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "IPCFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError IPCFailed
void Valve::VR::EVRSettingsError::_set_IPCFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_IPCFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "IPCFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError WriteFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_WriteFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_WriteFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "WriteFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError WriteFailed
void Valve::VR::EVRSettingsError::_set_WriteFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_WriteFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "WriteFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError ReadFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_ReadFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_ReadFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "ReadFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError ReadFailed
void Valve::VR::EVRSettingsError::_set_ReadFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_ReadFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "ReadFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError JsonParseFailed
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_JsonParseFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_JsonParseFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "JsonParseFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError JsonParseFailed
void Valve::VR::EVRSettingsError::_set_JsonParseFailed(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_JsonParseFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "JsonParseFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRSettingsError UnsetSettingHasNoDefault
Valve::VR::EVRSettingsError Valve::VR::EVRSettingsError::_get_UnsetSettingHasNoDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_get_UnsetSettingHasNoDefault");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRSettingsError>("Valve.VR", "EVRSettingsError", "UnsetSettingHasNoDefault"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRSettingsError UnsetSettingHasNoDefault
void Valve::VR::EVRSettingsError::_set_UnsetSettingHasNoDefault(Valve::VR::EVRSettingsError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::_set_UnsetSettingHasNoDefault");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRSettingsError", "UnsetSettingHasNoDefault", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRSettingsError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRSettingsError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.EVRScreenshotError
#include "Valve/VR/EVRScreenshotError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError None
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError None
void Valve::VR::EVRScreenshotError::_set_None(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError RequestFailed
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_RequestFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_RequestFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "RequestFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError RequestFailed
void Valve::VR::EVRScreenshotError::_set_RequestFailed(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_RequestFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "RequestFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError IncompatibleVersion
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_IncompatibleVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_IncompatibleVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "IncompatibleVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError IncompatibleVersion
void Valve::VR::EVRScreenshotError::_set_IncompatibleVersion(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_IncompatibleVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "IncompatibleVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError NotFound
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_NotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_NotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "NotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError NotFound
void Valve::VR::EVRScreenshotError::_set_NotFound(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_NotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "NotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError BufferTooSmall
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_BufferTooSmall() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_BufferTooSmall");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError BufferTooSmall
void Valve::VR::EVRScreenshotError::_set_BufferTooSmall(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_BufferTooSmall");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRScreenshotError ScreenshotAlreadyInProgress
Valve::VR::EVRScreenshotError Valve::VR::EVRScreenshotError::_get_ScreenshotAlreadyInProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_get_ScreenshotAlreadyInProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRScreenshotError>("Valve.VR", "EVRScreenshotError", "ScreenshotAlreadyInProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRScreenshotError ScreenshotAlreadyInProgress
void Valve::VR::EVRScreenshotError::_set_ScreenshotAlreadyInProgress(Valve::VR::EVRScreenshotError value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::_set_ScreenshotAlreadyInProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRScreenshotError", "ScreenshotAlreadyInProgress", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& Valve::VR::EVRScreenshotError::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::EVRScreenshotError::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
