// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_MeshFilter_Extensions
#include "HoudiniEngineUnity/Test_MeshFilter_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_MeshFilter_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_MeshFilter_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_MeshFilter
#include "HoudiniEngineUnity/Test_MeshFilter.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_MeshFilter_Extensions.ToTestObject
HoudiniEngineUnity::Test_MeshFilter* HoudiniEngineUnity::Test_MeshFilter_Extensions::ToTestObject(UnityEngine::MeshFilter* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_MeshFilter_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_MeshFilter*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_MeshFilter_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_MeshFilter*> HoudiniEngineUnity::Test_MeshFilter_Extensions::ToTestObject(::ArrayW<UnityEngine::MeshFilter*> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_MeshFilter_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_MeshFilter*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_MeshFilter_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_MeshFilter*>* HoudiniEngineUnity::Test_MeshFilter_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::MeshFilter*>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_MeshFilter_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_MeshFilter*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_MeshFilter_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_MeshFilter_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: HoudiniEngineUnity.Test_MeshFilter
#include "HoudiniEngineUnity/Test_MeshFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_MeshFilter_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c* HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c*>("HoudiniEngineUnity", "Test_MeshFilter_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_MeshFilter_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_MeshFilter_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.MeshFilter,HoudiniEngineUnity.Test_MeshFilter> <>9__1_0
System::Converter_2<UnityEngine::MeshFilter*, HoudiniEngineUnity::Test_MeshFilter*>* HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::MeshFilter*, HoudiniEngineUnity::Test_MeshFilter*>*>("HoudiniEngineUnity", "Test_MeshFilter_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.MeshFilter,HoudiniEngineUnity.Test_MeshFilter> <>9__1_0
void HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::MeshFilter*, HoudiniEngineUnity::Test_MeshFilter*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_MeshFilter_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.MeshFilter,HoudiniEngineUnity.Test_MeshFilter> <>9__2_0
System::Converter_2<UnityEngine::MeshFilter*, HoudiniEngineUnity::Test_MeshFilter*>* HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::MeshFilter*, HoudiniEngineUnity::Test_MeshFilter*>*>("HoudiniEngineUnity", "Test_MeshFilter_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.MeshFilter,HoudiniEngineUnity.Test_MeshFilter> <>9__2_0
void HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::MeshFilter*, HoudiniEngineUnity::Test_MeshFilter*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_MeshFilter_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_MeshFilter_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_MeshFilter_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_MeshFilter_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_MeshFilter* HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::MeshFilter* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_MeshFilter*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_MeshFilter_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_MeshFilter* HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::MeshFilter* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_MeshFilter_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_MeshFilter*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_LayerMask
#include "HoudiniEngineUnity/Test_LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.LayerMask self
UnityEngine::LayerMask& HoudiniEngineUnity::Test_LayerMask::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_LayerMask::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::LayerMask*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_LayerMask.IsEquivalentTo
bool HoudiniEngineUnity::Test_LayerMask::IsEquivalentTo(HoudiniEngineUnity::Test_LayerMask* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_LayerMask::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_LayerMask_Extensions
#include "HoudiniEngineUnity/Test_LayerMask_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_LayerMask
#include "HoudiniEngineUnity/Test_LayerMask.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_LayerMask_Extensions.ToTestObject
HoudiniEngineUnity::Test_LayerMask* HoudiniEngineUnity::Test_LayerMask_Extensions::ToTestObject(UnityEngine::LayerMask self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_LayerMask_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_LayerMask_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_LayerMask*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Gradient
#include "HoudiniEngineUnity/Test_Gradient.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Gradient self
UnityEngine::Gradient*& HoudiniEngineUnity::Test_Gradient::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::Gradient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_Gradient.IsNull
bool HoudiniEngineUnity::Test_Gradient::IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient::IsNull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_Gradient.IsEquivalentTo
bool HoudiniEngineUnity::Test_Gradient::IsEquivalentTo(HoudiniEngineUnity::Test_Gradient* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Gradient_Extensions
#include "HoudiniEngineUnity/Test_Gradient_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_Gradient_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_Gradient_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_Gradient
#include "HoudiniEngineUnity/Test_Gradient.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_Gradient_Extensions.ToTestObject
HoudiniEngineUnity::Test_Gradient* HoudiniEngineUnity::Test_Gradient_Extensions::ToTestObject(UnityEngine::Gradient* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Gradient_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Gradient*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_Gradient_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_Gradient*> HoudiniEngineUnity::Test_Gradient_Extensions::ToTestObject(::ArrayW<UnityEngine::Gradient*> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Gradient_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_Gradient*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_Gradient_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_Gradient*>* HoudiniEngineUnity::Test_Gradient_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::Gradient*>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Gradient_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_Gradient*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Gradient_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_Gradient_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: HoudiniEngineUnity.Test_Gradient
#include "HoudiniEngineUnity/Test_Gradient.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_Gradient_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_Gradient_Extensions::$$c* HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_Gradient_Extensions::$$c*>("HoudiniEngineUnity", "Test_Gradient_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_Gradient_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_Gradient_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Gradient_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.Gradient,HoudiniEngineUnity.Test_Gradient> <>9__1_0
System::Converter_2<UnityEngine::Gradient*, HoudiniEngineUnity::Test_Gradient*>* HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::Gradient*, HoudiniEngineUnity::Test_Gradient*>*>("HoudiniEngineUnity", "Test_Gradient_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.Gradient,HoudiniEngineUnity.Test_Gradient> <>9__1_0
void HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::Gradient*, HoudiniEngineUnity::Test_Gradient*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Gradient_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.Gradient,HoudiniEngineUnity.Test_Gradient> <>9__2_0
System::Converter_2<UnityEngine::Gradient*, HoudiniEngineUnity::Test_Gradient*>* HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::Gradient*, HoudiniEngineUnity::Test_Gradient*>*>("HoudiniEngineUnity", "Test_Gradient_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.Gradient,HoudiniEngineUnity.Test_Gradient> <>9__2_0
void HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::Gradient*, HoudiniEngineUnity::Test_Gradient*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Gradient_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_Gradient_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_Gradient_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Gradient_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_Gradient_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_Gradient* HoudiniEngineUnity::Test_Gradient_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::Gradient* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Gradient*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_Gradient_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_Gradient* HoudiniEngineUnity::Test_Gradient_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::Gradient* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Gradient_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Gradient*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_AnimationCurve
#include "HoudiniEngineUnity/Test_AnimationCurve.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.AnimationCurve self
UnityEngine::AnimationCurve*& HoudiniEngineUnity::Test_AnimationCurve::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::AnimationCurve**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve.IsNull
bool HoudiniEngineUnity::Test_AnimationCurve::IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve::IsNull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve.IsEquivalentTo
bool HoudiniEngineUnity::Test_AnimationCurve::IsEquivalentTo(HoudiniEngineUnity::Test_AnimationCurve* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_AnimationCurve_Extensions
#include "HoudiniEngineUnity/Test_AnimationCurve_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_AnimationCurve_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_AnimationCurve_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_AnimationCurve
#include "HoudiniEngineUnity/Test_AnimationCurve.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve_Extensions.ToTestObject
HoudiniEngineUnity::Test_AnimationCurve* HoudiniEngineUnity::Test_AnimationCurve_Extensions::ToTestObject(UnityEngine::AnimationCurve* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_AnimationCurve_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_AnimationCurve*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_AnimationCurve*> HoudiniEngineUnity::Test_AnimationCurve_Extensions::ToTestObject(::ArrayW<UnityEngine::AnimationCurve*> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_AnimationCurve_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_AnimationCurve*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_AnimationCurve*>* HoudiniEngineUnity::Test_AnimationCurve_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::AnimationCurve*>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_AnimationCurve_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_AnimationCurve*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_AnimationCurve_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_AnimationCurve_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: HoudiniEngineUnity.Test_AnimationCurve
#include "HoudiniEngineUnity/Test_AnimationCurve.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_AnimationCurve_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c* HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c*>("HoudiniEngineUnity", "Test_AnimationCurve_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_AnimationCurve_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_AnimationCurve_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.AnimationCurve,HoudiniEngineUnity.Test_AnimationCurve> <>9__1_0
System::Converter_2<UnityEngine::AnimationCurve*, HoudiniEngineUnity::Test_AnimationCurve*>* HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::AnimationCurve*, HoudiniEngineUnity::Test_AnimationCurve*>*>("HoudiniEngineUnity", "Test_AnimationCurve_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.AnimationCurve,HoudiniEngineUnity.Test_AnimationCurve> <>9__1_0
void HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::AnimationCurve*, HoudiniEngineUnity::Test_AnimationCurve*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_AnimationCurve_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.AnimationCurve,HoudiniEngineUnity.Test_AnimationCurve> <>9__2_0
System::Converter_2<UnityEngine::AnimationCurve*, HoudiniEngineUnity::Test_AnimationCurve*>* HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::AnimationCurve*, HoudiniEngineUnity::Test_AnimationCurve*>*>("HoudiniEngineUnity", "Test_AnimationCurve_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.AnimationCurve,HoudiniEngineUnity.Test_AnimationCurve> <>9__2_0
void HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::AnimationCurve*, HoudiniEngineUnity::Test_AnimationCurve*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_AnimationCurve_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_AnimationCurve_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_AnimationCurve* HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::AnimationCurve* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_AnimationCurve*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_AnimationCurve_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_AnimationCurve* HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::AnimationCurve* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_AnimationCurve*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TerrainLayer
#include "HoudiniEngineUnity/Test_TerrainLayer.hpp"
// Including type: UnityEngine.TerrainLayer
#include "UnityEngine/TerrainLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TerrainLayer self
UnityEngine::TerrainLayer*& HoudiniEngineUnity::Test_TerrainLayer::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::TerrainLayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer.IsNull
bool HoudiniEngineUnity::Test_TerrainLayer::IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer::IsNull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer.IsEquivalentTo
bool HoudiniEngineUnity::Test_TerrainLayer::IsEquivalentTo(HoudiniEngineUnity::Test_TerrainLayer* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TerrainLayer_Extensions
#include "HoudiniEngineUnity/Test_TerrainLayer_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_TerrainLayer_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_TerrainLayer_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_TerrainLayer
#include "HoudiniEngineUnity/Test_TerrainLayer.hpp"
// Including type: UnityEngine.TerrainLayer
#include "UnityEngine/TerrainLayer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer_Extensions.ToTestObject
HoudiniEngineUnity::Test_TerrainLayer* HoudiniEngineUnity::Test_TerrainLayer_Extensions::ToTestObject(UnityEngine::TerrainLayer* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainLayer_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TerrainLayer*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_TerrainLayer*> HoudiniEngineUnity::Test_TerrainLayer_Extensions::ToTestObject(::ArrayW<UnityEngine::TerrainLayer*> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainLayer_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_TerrainLayer*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_TerrainLayer*>* HoudiniEngineUnity::Test_TerrainLayer_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::TerrainLayer*>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainLayer_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_TerrainLayer*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TerrainLayer_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_TerrainLayer_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: UnityEngine.TerrainLayer
#include "UnityEngine/TerrainLayer.hpp"
// Including type: HoudiniEngineUnity.Test_TerrainLayer
#include "HoudiniEngineUnity/Test_TerrainLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_TerrainLayer_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c* HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c*>("HoudiniEngineUnity", "Test_TerrainLayer_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_TerrainLayer_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TerrainLayer_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.TerrainLayer,HoudiniEngineUnity.Test_TerrainLayer> <>9__1_0
System::Converter_2<UnityEngine::TerrainLayer*, HoudiniEngineUnity::Test_TerrainLayer*>* HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::TerrainLayer*, HoudiniEngineUnity::Test_TerrainLayer*>*>("HoudiniEngineUnity", "Test_TerrainLayer_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.TerrainLayer,HoudiniEngineUnity.Test_TerrainLayer> <>9__1_0
void HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::TerrainLayer*, HoudiniEngineUnity::Test_TerrainLayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TerrainLayer_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.TerrainLayer,HoudiniEngineUnity.Test_TerrainLayer> <>9__2_0
System::Converter_2<UnityEngine::TerrainLayer*, HoudiniEngineUnity::Test_TerrainLayer*>* HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::TerrainLayer*, HoudiniEngineUnity::Test_TerrainLayer*>*>("HoudiniEngineUnity", "Test_TerrainLayer_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.TerrainLayer,HoudiniEngineUnity.Test_TerrainLayer> <>9__2_0
void HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::TerrainLayer*, HoudiniEngineUnity::Test_TerrainLayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TerrainLayer_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainLayer_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_TerrainLayer* HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::TerrainLayer* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TerrainLayer*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainLayer_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_TerrainLayer* HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::TerrainLayer* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainLayer_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TerrainLayer*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Texture2D
#include "HoudiniEngineUnity/Test_Texture2D.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Texture2D self
UnityEngine::Texture2D*& HoudiniEngineUnity::Test_Texture2D::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::Texture2D**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D.IsNull
bool HoudiniEngineUnity::Test_Texture2D::IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D::IsNull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D.IsEquivalentTo
bool HoudiniEngineUnity::Test_Texture2D::IsEquivalentTo(HoudiniEngineUnity::Test_Texture2D* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Texture2D_Extensions
#include "HoudiniEngineUnity/Test_Texture2D_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_Texture2D_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_Texture2D_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_Texture2D
#include "HoudiniEngineUnity/Test_Texture2D.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D_Extensions.ToTestObject
HoudiniEngineUnity::Test_Texture2D* HoudiniEngineUnity::Test_Texture2D_Extensions::ToTestObject(UnityEngine::Texture2D* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Texture2D_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_Texture2D*> HoudiniEngineUnity::Test_Texture2D_Extensions::ToTestObject(::ArrayW<UnityEngine::Texture2D*> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Texture2D_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_Texture2D*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_Texture2D*>* HoudiniEngineUnity::Test_Texture2D_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::Texture2D*>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Texture2D_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_Texture2D*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Texture2D_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_Texture2D_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: HoudiniEngineUnity.Test_Texture2D
#include "HoudiniEngineUnity/Test_Texture2D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_Texture2D_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_Texture2D_Extensions::$$c* HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_Texture2D_Extensions::$$c*>("HoudiniEngineUnity", "Test_Texture2D_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_Texture2D_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_Texture2D_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Texture2D_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.Texture2D,HoudiniEngineUnity.Test_Texture2D> <>9__1_0
System::Converter_2<UnityEngine::Texture2D*, HoudiniEngineUnity::Test_Texture2D*>* HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::Texture2D*, HoudiniEngineUnity::Test_Texture2D*>*>("HoudiniEngineUnity", "Test_Texture2D_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.Texture2D,HoudiniEngineUnity.Test_Texture2D> <>9__1_0
void HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::Texture2D*, HoudiniEngineUnity::Test_Texture2D*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Texture2D_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.Texture2D,HoudiniEngineUnity.Test_Texture2D> <>9__2_0
System::Converter_2<UnityEngine::Texture2D*, HoudiniEngineUnity::Test_Texture2D*>* HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::Texture2D*, HoudiniEngineUnity::Test_Texture2D*>*>("HoudiniEngineUnity", "Test_Texture2D_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.Texture2D,HoudiniEngineUnity.Test_Texture2D> <>9__2_0
void HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::Texture2D*, HoudiniEngineUnity::Test_Texture2D*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Texture2D_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Texture2D_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_Texture2D* HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::Texture2D* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Texture2D*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_Texture2D_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_Texture2D* HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::Texture2D* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Texture2D_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Texture2D*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TreeInstance
#include "HoudiniEngineUnity/Test_TreeInstance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TreeInstance self
UnityEngine::TreeInstance& HoudiniEngineUnity::Test_TreeInstance::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::TreeInstance*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_TreeInstance.IsEquivalentTo
bool HoudiniEngineUnity::Test_TreeInstance::IsEquivalentTo(HoudiniEngineUnity::Test_TreeInstance* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TreeInstance_Extensions
#include "HoudiniEngineUnity/Test_TreeInstance_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_TreeInstance_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_TreeInstance_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_TreeInstance
#include "HoudiniEngineUnity/Test_TreeInstance.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_TreeInstance_Extensions.ToTestObject
HoudiniEngineUnity::Test_TreeInstance* HoudiniEngineUnity::Test_TreeInstance_Extensions::ToTestObject(UnityEngine::TreeInstance self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TreeInstance_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TreeInstance*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_TreeInstance_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_TreeInstance*> HoudiniEngineUnity::Test_TreeInstance_Extensions::ToTestObject(::ArrayW<UnityEngine::TreeInstance> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TreeInstance_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_TreeInstance*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_TreeInstance_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_TreeInstance*>* HoudiniEngineUnity::Test_TreeInstance_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::TreeInstance>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TreeInstance_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_TreeInstance*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TreeInstance_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_TreeInstance_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: HoudiniEngineUnity.Test_TreeInstance
#include "HoudiniEngineUnity/Test_TreeInstance.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_TreeInstance_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c* HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c*>("HoudiniEngineUnity", "Test_TreeInstance_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_TreeInstance_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TreeInstance_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.TreeInstance,HoudiniEngineUnity.Test_TreeInstance> <>9__1_0
System::Converter_2<UnityEngine::TreeInstance, HoudiniEngineUnity::Test_TreeInstance*>* HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::TreeInstance, HoudiniEngineUnity::Test_TreeInstance*>*>("HoudiniEngineUnity", "Test_TreeInstance_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.TreeInstance,HoudiniEngineUnity.Test_TreeInstance> <>9__1_0
void HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::TreeInstance, HoudiniEngineUnity::Test_TreeInstance*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TreeInstance_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.TreeInstance,HoudiniEngineUnity.Test_TreeInstance> <>9__2_0
System::Converter_2<UnityEngine::TreeInstance, HoudiniEngineUnity::Test_TreeInstance*>* HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::TreeInstance, HoudiniEngineUnity::Test_TreeInstance*>*>("HoudiniEngineUnity", "Test_TreeInstance_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.TreeInstance,HoudiniEngineUnity.Test_TreeInstance> <>9__2_0
void HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::TreeInstance, HoudiniEngineUnity::Test_TreeInstance*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TreeInstance_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_TreeInstance_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TreeInstance_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_TreeInstance_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_TreeInstance* HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::TreeInstance lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TreeInstance*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_TreeInstance_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_TreeInstance* HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::TreeInstance lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TreeInstance*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TerrainData
#include "HoudiniEngineUnity/Test_TerrainData.hpp"
// Including type: UnityEngine.TerrainData
#include "UnityEngine/TerrainData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TerrainData self
UnityEngine::TerrainData*& HoudiniEngineUnity::Test_TerrainData::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::TerrainData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData.IsNull
bool HoudiniEngineUnity::Test_TerrainData::IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData::IsNull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData.IsEquivalentTo
bool HoudiniEngineUnity::Test_TerrainData::IsEquivalentTo(HoudiniEngineUnity::Test_TerrainData* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TerrainData_Extensions
#include "HoudiniEngineUnity/Test_TerrainData_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_TerrainData_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_TerrainData_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_TerrainData
#include "HoudiniEngineUnity/Test_TerrainData.hpp"
// Including type: UnityEngine.TerrainData
#include "UnityEngine/TerrainData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData_Extensions.ToTestObject
HoudiniEngineUnity::Test_TerrainData* HoudiniEngineUnity::Test_TerrainData_Extensions::ToTestObject(UnityEngine::TerrainData* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainData_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TerrainData*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_TerrainData*> HoudiniEngineUnity::Test_TerrainData_Extensions::ToTestObject(::ArrayW<UnityEngine::TerrainData*> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainData_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_TerrainData*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_TerrainData*>* HoudiniEngineUnity::Test_TerrainData_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::TerrainData*>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainData_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_TerrainData*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_TerrainData_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_TerrainData_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: UnityEngine.TerrainData
#include "UnityEngine/TerrainData.hpp"
// Including type: HoudiniEngineUnity.Test_TerrainData
#include "HoudiniEngineUnity/Test_TerrainData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_TerrainData_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_TerrainData_Extensions::$$c* HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_TerrainData_Extensions::$$c*>("HoudiniEngineUnity", "Test_TerrainData_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_TerrainData_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_TerrainData_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TerrainData_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.TerrainData,HoudiniEngineUnity.Test_TerrainData> <>9__1_0
System::Converter_2<UnityEngine::TerrainData*, HoudiniEngineUnity::Test_TerrainData*>* HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::TerrainData*, HoudiniEngineUnity::Test_TerrainData*>*>("HoudiniEngineUnity", "Test_TerrainData_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.TerrainData,HoudiniEngineUnity.Test_TerrainData> <>9__1_0
void HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::TerrainData*, HoudiniEngineUnity::Test_TerrainData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TerrainData_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.TerrainData,HoudiniEngineUnity.Test_TerrainData> <>9__2_0
System::Converter_2<UnityEngine::TerrainData*, HoudiniEngineUnity::Test_TerrainData*>* HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::TerrainData*, HoudiniEngineUnity::Test_TerrainData*>*>("HoudiniEngineUnity", "Test_TerrainData_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.TerrainData,HoudiniEngineUnity.Test_TerrainData> <>9__2_0
void HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::TerrainData*, HoudiniEngineUnity::Test_TerrainData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_TerrainData_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_TerrainData_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_TerrainData* HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::TerrainData* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TerrainData*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_TerrainData_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_TerrainData* HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::TerrainData* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TerrainData_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_TerrainData*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Terrain
#include "HoudiniEngineUnity/Test_Terrain.hpp"
// Including type: UnityEngine.Terrain
#include "UnityEngine/Terrain.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Terrain self
UnityEngine::Terrain*& HoudiniEngineUnity::Test_Terrain::dyn_self() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain::dyn_self");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "self"))->offset;
  return *reinterpret_cast<UnityEngine::Terrain**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.Test_Terrain.IsNull
bool HoudiniEngineUnity::Test_Terrain::IsNull() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain::IsNull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_Terrain.IsEquivalentTo
bool HoudiniEngineUnity::Test_Terrain::IsEquivalentTo(HoudiniEngineUnity::Test_Terrain* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Terrain_Extensions
#include "HoudiniEngineUnity/Test_Terrain_Extensions.hpp"
// Including type: HoudiniEngineUnity.Test_Terrain_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_Terrain_Extensions_--c.hpp"
// Including type: HoudiniEngineUnity.Test_Terrain
#include "HoudiniEngineUnity/Test_Terrain.hpp"
// Including type: UnityEngine.Terrain
#include "UnityEngine/Terrain.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HoudiniEngineUnity.Test_Terrain_Extensions.ToTestObject
HoudiniEngineUnity::Test_Terrain* HoudiniEngineUnity::Test_Terrain_Extensions::ToTestObject(UnityEngine::Terrain* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Terrain_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Terrain*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_Terrain_Extensions.ToTestObject
::ArrayW<HoudiniEngineUnity::Test_Terrain*> HoudiniEngineUnity::Test_Terrain_Extensions::ToTestObject(::ArrayW<UnityEngine::Terrain*> self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Terrain_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<HoudiniEngineUnity::Test_Terrain*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated method: HoudiniEngineUnity.Test_Terrain_Extensions.ToTestObject
System::Collections::Generic::List_1<HoudiniEngineUnity::Test_Terrain*>* HoudiniEngineUnity::Test_Terrain_Extensions::ToTestObject(System::Collections::Generic::List_1<UnityEngine::Terrain*>* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::ToTestObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Terrain_Extensions", "ToTestObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::Test_Terrain*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, self);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.Test_Terrain_Extensions/HoudiniEngineUnity.<>c
#include "HoudiniEngineUnity/Test_Terrain_Extensions_--c.hpp"
// Including type: System.Converter`2
#include "System/Converter_2.hpp"
// Including type: UnityEngine.Terrain
#include "UnityEngine/Terrain.hpp"
// Including type: HoudiniEngineUnity.Test_Terrain
#include "HoudiniEngineUnity/Test_Terrain.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HoudiniEngineUnity.Test_Terrain_Extensions/HoudiniEngineUnity.<>c <>9
HoudiniEngineUnity::Test_Terrain_Extensions::$$c* HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<HoudiniEngineUnity::Test_Terrain_Extensions::$$c*>("HoudiniEngineUnity", "Test_Terrain_Extensions/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HoudiniEngineUnity.Test_Terrain_Extensions/HoudiniEngineUnity.<>c <>9
void HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_set_$$9(HoudiniEngineUnity::Test_Terrain_Extensions::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Terrain_Extensions/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.Terrain,HoudiniEngineUnity.Test_Terrain> <>9__1_0
System::Converter_2<UnityEngine::Terrain*, HoudiniEngineUnity::Test_Terrain*>* HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_get_$$9__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_get_$$9__1_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::Terrain*, HoudiniEngineUnity::Test_Terrain*>*>("HoudiniEngineUnity", "Test_Terrain_Extensions/<>c", "<>9__1_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.Terrain,HoudiniEngineUnity.Test_Terrain> <>9__1_0
void HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_set_$$9__1_0(System::Converter_2<UnityEngine::Terrain*, HoudiniEngineUnity::Test_Terrain*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_set_$$9__1_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Terrain_Extensions/<>c", "<>9__1_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Converter`2<UnityEngine.Terrain,HoudiniEngineUnity.Test_Terrain> <>9__2_0
System::Converter_2<UnityEngine::Terrain*, HoudiniEngineUnity::Test_Terrain*>* HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Converter_2<UnityEngine::Terrain*, HoudiniEngineUnity::Test_Terrain*>*>("HoudiniEngineUnity", "Test_Terrain_Extensions/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Converter`2<UnityEngine.Terrain,HoudiniEngineUnity.Test_Terrain> <>9__2_0
void HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_set_$$9__2_0(System::Converter_2<UnityEngine::Terrain*, HoudiniEngineUnity::Test_Terrain*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "Test_Terrain_Extensions/<>c", "<>9__2_0", value)));
}
// Autogenerated method: HoudiniEngineUnity.Test_Terrain_Extensions/HoudiniEngineUnity.<>c..cctor
void HoudiniEngineUnity::Test_Terrain_Extensions::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "Test_Terrain_Extensions/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.Test_Terrain_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__1_0
HoudiniEngineUnity::Test_Terrain* HoudiniEngineUnity::Test_Terrain_Extensions::$$c::$ToTestObject$b__1_0(UnityEngine::Terrain* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::<ToTestObject>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Terrain*, false>(this, ___internal__method, lod);
}
// Autogenerated method: HoudiniEngineUnity.Test_Terrain_Extensions/HoudiniEngineUnity.<>c.<ToTestObject>b__2_0
HoudiniEngineUnity::Test_Terrain* HoudiniEngineUnity::Test_Terrain_Extensions::$$c::$ToTestObject$b__2_0(UnityEngine::Terrain* lod) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Terrain_Extensions::$$c::<ToTestObject>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToTestObject>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lod)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::Test_Terrain*, false>(this, ___internal__method, lod);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_ToolsInfo
#include "HoudiniEngineUnity/HEU_ToolsInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single _paintBrushSize
float& HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintBrushSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintBrushSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paintBrushSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _paintBrushOpacity
float& HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintBrushOpacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintBrushOpacity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paintBrushOpacity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] _paintIntValue
::ArrayW<int>& HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintIntValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintIntValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paintIntValue"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single[] _paintFloatValue
::ArrayW<float>& HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintFloatValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintFloatValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paintFloatValue"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String[] _paintStringValue
::ArrayW<::StringW>& HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintStringValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintStringValue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paintStringValue"))->offset;
  return *reinterpret_cast<::ArrayW<::StringW>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _lastAttributesGeoID
int& HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributesGeoID() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributesGeoID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastAttributesGeoID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _lastAttributesPartID
int& HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributesPartID() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributesPartID");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastAttributesPartID"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String _lastAttributeNodeName
::StringW& HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributeNodeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributeNodeName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastAttributeNodeName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String _lastAttributeName
::StringW& HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__lastAttributeName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastAttributeName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color _brushHandleColor
UnityEngine::Color& HoudiniEngineUnity::HEU_ToolsInfo::dyn__brushHandleColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__brushHandleColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_brushHandleColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color _affectedAreaPaintColor
UnityEngine::Color& HoudiniEngineUnity::HEU_ToolsInfo::dyn__affectedAreaPaintColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__affectedAreaPaintColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_affectedAreaPaintColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _liveUpdate
bool& HoudiniEngineUnity::HEU_ToolsInfo::dyn__liveUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__liveUpdate");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_liveUpdate"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _isPainting
bool& HoudiniEngineUnity::HEU_ToolsInfo::dyn__isPainting() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__isPainting");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isPainting"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _editPointBoxSize
float& HoudiniEngineUnity::HEU_ToolsInfo::dyn__editPointBoxSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__editPointBoxSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_editPointBoxSize"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color _editPointBoxUnselectedColor
UnityEngine::Color& HoudiniEngineUnity::HEU_ToolsInfo::dyn__editPointBoxUnselectedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__editPointBoxUnselectedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_editPointBoxUnselectedColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color _editPointBoxSelectedColor
UnityEngine::Color& HoudiniEngineUnity::HEU_ToolsInfo::dyn__editPointBoxSelectedColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__editPointBoxSelectedColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_editPointBoxSelectedColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _recacheRequired
bool& HoudiniEngineUnity::HEU_ToolsInfo::dyn__recacheRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__recacheRequired");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_recacheRequired"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode _paintMergeMode
HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode& HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintMergeMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintMergeMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paintMergeMode"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _showOnlyEditGeometry
bool& HoudiniEngineUnity::HEU_ToolsInfo::dyn__showOnlyEditGeometry() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__showOnlyEditGeometry");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_showOnlyEditGeometry"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _alwaysCookUpstream
bool& HoudiniEngineUnity::HEU_ToolsInfo::dyn__alwaysCookUpstream() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__alwaysCookUpstream");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_alwaysCookUpstream"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility _paintMeshVisiblity
HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility& HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintMeshVisiblity() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::dyn__paintMeshVisiblity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_paintMeshVisiblity"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_ToolsInfo.IsEquivalentTo
bool HoudiniEngineUnity::HEU_ToolsInfo::IsEquivalentTo(HoudiniEngineUnity::HEU_ToolsInfo* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode
#include "HoudiniEngineUnity/HEU_ToolsInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode REPLACE
HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_REPLACE() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_REPLACE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode>("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "REPLACE"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode REPLACE
void HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_REPLACE(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_REPLACE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "REPLACE", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode ADD
HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_ADD() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_ADD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode>("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "ADD"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode ADD
void HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_ADD(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_ADD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "ADD", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode SUBTRACT
HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_SUBTRACT() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_SUBTRACT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode>("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "SUBTRACT"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode SUBTRACT
void HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_SUBTRACT(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_SUBTRACT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "SUBTRACT", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode MULTIPLY
HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_MULTIPLY() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_get_MULTIPLY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode>("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "MULTIPLY"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode MULTIPLY
void HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_MULTIPLY(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::_set_MULTIPLY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode", "MULTIPLY", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility
#include "HoudiniEngineUnity/HEU_ToolsInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility AUTO
HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_get_AUTO() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_get_AUTO");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility>("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMeshVisibility", "AUTO"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility AUTO
void HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_set_AUTO(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_set_AUTO");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMeshVisibility", "AUTO", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility SHOW
HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_get_SHOW() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_get_SHOW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility>("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMeshVisibility", "SHOW"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility SHOW
void HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_set_SHOW(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_set_SHOW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMeshVisibility", "SHOW", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility HIDE
HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_get_HIDE() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_get_HIDE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility>("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMeshVisibility", "HIDE"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMeshVisibility HIDE
void HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_set_HIDE(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::_set_HIDE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMeshVisibility", "HIDE", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HFLayerType
#include "HoudiniEngineUnity/HFLayerType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HFLayerType DEFAULT
HoudiniEngineUnity::HFLayerType HoudiniEngineUnity::HFLayerType::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HFLayerType>("HoudiniEngineUnity", "HFLayerType", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HFLayerType DEFAULT
void HoudiniEngineUnity::HFLayerType::_set_DEFAULT(HoudiniEngineUnity::HFLayerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HFLayerType", "DEFAULT", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HFLayerType HEIGHT
HoudiniEngineUnity::HFLayerType HoudiniEngineUnity::HFLayerType::_get_HEIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_get_HEIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HFLayerType>("HoudiniEngineUnity", "HFLayerType", "HEIGHT"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HFLayerType HEIGHT
void HoudiniEngineUnity::HFLayerType::_set_HEIGHT(HoudiniEngineUnity::HFLayerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_set_HEIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HFLayerType", "HEIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HFLayerType MASK
HoudiniEngineUnity::HFLayerType HoudiniEngineUnity::HFLayerType::_get_MASK() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_get_MASK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HFLayerType>("HoudiniEngineUnity", "HFLayerType", "MASK"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HFLayerType MASK
void HoudiniEngineUnity::HFLayerType::_set_MASK(HoudiniEngineUnity::HFLayerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_set_MASK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HFLayerType", "MASK", value));
}
// Autogenerated static field getter
// Get static field: static public HoudiniEngineUnity.HFLayerType DETAIL
HoudiniEngineUnity::HFLayerType HoudiniEngineUnity::HFLayerType::_get_DETAIL() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_get_DETAIL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<HoudiniEngineUnity::HFLayerType>("HoudiniEngineUnity", "HFLayerType", "DETAIL"));
}
// Autogenerated static field setter
// Set static field: static public HoudiniEngineUnity.HFLayerType DETAIL
void HoudiniEngineUnity::HFLayerType::_set_DETAIL(HoudiniEngineUnity::HFLayerType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::_set_DETAIL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("HoudiniEngineUnity", "HFLayerType", "DETAIL", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& HoudiniEngineUnity::HFLayerType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HFLayerType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_VolumeLayer
#include "HoudiniEngineUnity/HEU_VolumeLayer.hpp"
// Including type: HoudiniEngineUnity.HEU_PartData
#include "HoudiniEngineUnity/HEU_PartData.hpp"
// Including type: UnityEngine.TerrainLayer
#include "UnityEngine/TerrainLayer.hpp"
// Including type: HoudiniEngineUnity.HEU_DetailPrototype
#include "HoudiniEngineUnity/HEU_DetailPrototype.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String _layerName
::StringW& HoudiniEngineUnity::HEU_VolumeLayer::dyn__layerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__layerName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layerName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HoudiniEngineUnity.HEU_PartData _part
HoudiniEngineUnity::HEU_PartData*& HoudiniEngineUnity::HEU_VolumeLayer::dyn__part() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__part");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_part"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HEU_PartData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _strength
float& HoudiniEngineUnity::HEU_VolumeLayer::dyn__strength() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__strength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_strength"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _uiExpanded
bool& HoudiniEngineUnity::HEU_VolumeLayer::dyn__uiExpanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__uiExpanded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uiExpanded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _tile
int& HoudiniEngineUnity::HEU_VolumeLayer::dyn__tile() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__tile");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tile"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _xLength
int& HoudiniEngineUnity::HEU_VolumeLayer::dyn__xLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__xLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_xLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _yLength
int& HoudiniEngineUnity::HEU_VolumeLayer::dyn__yLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__yLength");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_yLength"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _hasLayerAttributes
bool& HoudiniEngineUnity::HEU_VolumeLayer::dyn__hasLayerAttributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__hasLayerAttributes");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_hasLayerAttributes"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.TerrainLayer _terrainLayer
UnityEngine::TerrainLayer*& HoudiniEngineUnity::HEU_VolumeLayer::dyn__terrainLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__terrainLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_terrainLayer"))->offset;
  return *reinterpret_cast<UnityEngine::TerrainLayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HoudiniEngineUnity.HFLayerType _layerType
HoudiniEngineUnity::HFLayerType& HoudiniEngineUnity::HEU_VolumeLayer::dyn__layerType() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__layerType");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layerType"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HFLayerType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public HoudiniEngineUnity.HEU_DetailPrototype _detailPrototype
HoudiniEngineUnity::HEU_DetailPrototype*& HoudiniEngineUnity::HEU_VolumeLayer::dyn__detailPrototype() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::dyn__detailPrototype");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_detailPrototype"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HEU_DetailPrototype**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeLayer.IsEquivalentTo
bool HoudiniEngineUnity::HEU_VolumeLayer::IsEquivalentTo(HoudiniEngineUnity::HEU_VolumeLayer* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeLayer::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_VolumeScatterTrees
#include "HoudiniEngineUnity/HEU_VolumeScatterTrees.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HoudiniEngineUnity.HEU_TreePrototypeInfo
#include "HoudiniEngineUnity/HEU_TreePrototypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_TreePrototypeInfo> _treePrototypInfos
System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TreePrototypeInfo*>*& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__treePrototypInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__treePrototypInfos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_treePrototypInfos"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TreePrototypeInfo*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color32[] _colors
::ArrayW<UnityEngine::Color32>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__colors() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__colors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_colors"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Color32>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single[] _heightScales
::ArrayW<float>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__heightScales() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__heightScales");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_heightScales"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color32[] _lightmapColors
::ArrayW<UnityEngine::Color32>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__lightmapColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__lightmapColors");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lightmapColors"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Color32>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Vector3[] _positions
::ArrayW<UnityEngine::Vector3>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__positions() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__positions");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_positions"))->offset;
  return *reinterpret_cast<::ArrayW<UnityEngine::Vector3>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] _prototypeIndices
::ArrayW<int>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__prototypeIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__prototypeIndices");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prototypeIndices"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single[] _rotations
::ArrayW<float>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__rotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__rotations");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rotations"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single[] _widthScales
::ArrayW<float>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__widthScales() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__widthScales");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_widthScales"))->offset;
  return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32[] _terrainTiles
::ArrayW<int>& HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__terrainTiles() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::dyn__terrainTiles");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_terrainTiles"))->offset;
  return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeScatterTrees.IsEquivalentTo
bool HoudiniEngineUnity::HEU_VolumeScatterTrees::IsEquivalentTo(HoudiniEngineUnity::HEU_VolumeScatterTrees* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeScatterTrees::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_TreePrototypeInfo
#include "HoudiniEngineUnity/HEU_TreePrototypeInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String _prefabPath
::StringW& HoudiniEngineUnity::HEU_TreePrototypeInfo::dyn__prefabPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_TreePrototypeInfo::dyn__prefabPath");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prefabPath"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _bendfactor
float& HoudiniEngineUnity::HEU_TreePrototypeInfo::dyn__bendfactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_TreePrototypeInfo::dyn__bendfactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bendfactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_TreePrototypeInfo.IsEquivalentTo
bool HoudiniEngineUnity::HEU_TreePrototypeInfo::IsEquivalentTo(HoudiniEngineUnity::HEU_TreePrototypeInfo* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_TreePrototypeInfo::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_DetailProperties
#include "HoudiniEngineUnity/HEU_DetailProperties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.Single _detailDistance
float& HoudiniEngineUnity::HEU_DetailProperties::dyn__detailDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailProperties::dyn__detailDistance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_detailDistance"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _detailDensity
float& HoudiniEngineUnity::HEU_DetailProperties::dyn__detailDensity() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailProperties::dyn__detailDensity");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_detailDensity"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _detailResolution
int& HoudiniEngineUnity::HEU_DetailProperties::dyn__detailResolution() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailProperties::dyn__detailResolution");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_detailResolution"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _detailResolutionPerPatch
int& HoudiniEngineUnity::HEU_DetailProperties::dyn__detailResolutionPerPatch() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailProperties::dyn__detailResolutionPerPatch");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_detailResolutionPerPatch"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_DetailProperties.IsEquivalentTo
bool HoudiniEngineUnity::HEU_DetailProperties::IsEquivalentTo(HoudiniEngineUnity::HEU_DetailProperties* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailProperties::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_DetailPrototype
#include "HoudiniEngineUnity/HEU_DetailPrototype.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String _prototypePrefab
::StringW& HoudiniEngineUnity::HEU_DetailPrototype::dyn__prototypePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__prototypePrefab");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prototypePrefab"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String _prototypeTexture
::StringW& HoudiniEngineUnity::HEU_DetailPrototype::dyn__prototypeTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__prototypeTexture");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prototypeTexture"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _bendFactor
float& HoudiniEngineUnity::HEU_DetailPrototype::dyn__bendFactor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__bendFactor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bendFactor"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color _dryColor
UnityEngine::Color& HoudiniEngineUnity::HEU_DetailPrototype::dyn__dryColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__dryColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_dryColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public UnityEngine.Color _healthyColor
UnityEngine::Color& HoudiniEngineUnity::HEU_DetailPrototype::dyn__healthyColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__healthyColor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_healthyColor"))->offset;
  return *reinterpret_cast<UnityEngine::Color*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _maxHeight
float& HoudiniEngineUnity::HEU_DetailPrototype::dyn__maxHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__maxHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _maxWidth
float& HoudiniEngineUnity::HEU_DetailPrototype::dyn__maxWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__maxWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _minHeight
float& HoudiniEngineUnity::HEU_DetailPrototype::dyn__minHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__minHeight");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minHeight"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _minWidth
float& HoudiniEngineUnity::HEU_DetailPrototype::dyn__minWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__minWidth");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_minWidth"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Single _noiseSpread
float& HoudiniEngineUnity::HEU_DetailPrototype::dyn__noiseSpread() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__noiseSpread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_noiseSpread"))->offset;
  return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 _renderMode
int& HoudiniEngineUnity::HEU_DetailPrototype::dyn__renderMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::dyn__renderMode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_renderMode"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_DetailPrototype.IsEquivalentTo
bool HoudiniEngineUnity::HEU_DetailPrototype::IsEquivalentTo(HoudiniEngineUnity::HEU_DetailPrototype* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_DetailPrototype::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HoudiniEngineUnity.HEU_VolumeCache
#include "HoudiniEngineUnity/HEU_VolumeCache.hpp"
// Including type: HoudiniEngineUnity.HEU_GeoNode
#include "HoudiniEngineUnity/HEU_GeoNode.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HoudiniEngineUnity.HEU_VolumeLayer
#include "HoudiniEngineUnity/HEU_VolumeLayer.hpp"
// Including type: UnityEngine.TerrainData
#include "UnityEngine/TerrainData.hpp"
// Including type: HoudiniEngineUnity.HEU_VolumeScatterTrees
#include "HoudiniEngineUnity/HEU_VolumeScatterTrees.hpp"
// Including type: HoudiniEngineUnity.HEU_DetailProperties
#include "HoudiniEngineUnity/HEU_DetailProperties.hpp"
// Including type: HoudiniEngineUnity.HEU_SessionBase
#include "HoudiniEngineUnity/HEU_SessionBase.hpp"
// Including type: HoudiniEngineUnity.HEU_PartData
#include "HoudiniEngineUnity/HEU_PartData.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: HoudiniEngineUnity.HEU_HoudiniAsset
#include "HoudiniEngineUnity/HEU_HoudiniAsset.hpp"
// Including type: UnityEngine.TerrainLayer
#include "UnityEngine/TerrainLayer.hpp"
// Including type: HoudiniEngineUnity.HEU_VolumeCachePreset
#include "HoudiniEngineUnity/HEU_VolumeCachePreset.hpp"
// Including type: HoudiniEngineUnity.HEU_DetailPrototype
#include "HoudiniEngineUnity/HEU_DetailPrototype.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private HoudiniEngineUnity.HEU_GeoNode _ownerNode
HoudiniEngineUnity::HEU_GeoNode*& HoudiniEngineUnity::HEU_VolumeCache::dyn__ownerNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__ownerNode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ownerNode"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HEU_GeoNode**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeLayer> _layers
System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_VolumeLayer*>*& HoudiniEngineUnity::HEU_VolumeCache::dyn__layers() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__layers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_layers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_VolumeLayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeLayer> _updatedLayers
System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_VolumeLayer*>*& HoudiniEngineUnity::HEU_VolumeCache::dyn__updatedLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__updatedLayers");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updatedLayers"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_VolumeLayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _tileIndex
int& HoudiniEngineUnity::HEU_VolumeCache::dyn__tileIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__tileIndex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tileIndex"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _isDirty
bool& HoudiniEngineUnity::HEU_VolumeCache::dyn__isDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__isDirty");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_isDirty"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _geoName
::StringW& HoudiniEngineUnity::HEU_VolumeCache::dyn__geoName() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__geoName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_geoName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String _objName
::StringW& HoudiniEngineUnity::HEU_VolumeCache::dyn__objName() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__objName");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_objName"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean _uiExpanded
bool& HoudiniEngineUnity::HEU_VolumeCache::dyn__uiExpanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__uiExpanded");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_uiExpanded"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private UnityEngine.TerrainData _terrainData
UnityEngine::TerrainData*& HoudiniEngineUnity::HEU_VolumeCache::dyn__terrainData() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__terrainData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_terrainData"))->offset;
  return *reinterpret_cast<UnityEngine::TerrainData**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HoudiniEngineUnity.HEU_VolumeScatterTrees _scatterTrees
HoudiniEngineUnity::HEU_VolumeScatterTrees*& HoudiniEngineUnity::HEU_VolumeCache::dyn__scatterTrees() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__scatterTrees");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_scatterTrees"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HEU_VolumeScatterTrees**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private HoudiniEngineUnity.HEU_DetailProperties _detailProperties
HoudiniEngineUnity::HEU_DetailProperties*& HoudiniEngineUnity::HEU_VolumeCache::dyn__detailProperties() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::dyn__detailProperties");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_detailProperties"))->offset;
  return *reinterpret_cast<HoudiniEngineUnity::HEU_DetailProperties**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.get_IsDirty
bool HoudiniEngineUnity::HEU_VolumeCache::get_IsDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::get_IsDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.set_IsDirty
void HoudiniEngineUnity::HEU_VolumeCache::set_IsDirty(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::set_IsDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.get_TileIndex
int HoudiniEngineUnity::HEU_VolumeCache::get_TileIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::get_TileIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TileIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.get_ObjectName
::StringW HoudiniEngineUnity::HEU_VolumeCache::get_ObjectName() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::get_ObjectName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ObjectName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.get_GeoName
::StringW HoudiniEngineUnity::HEU_VolumeCache::get_GeoName() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::get_GeoName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GeoName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.get_UIExpanded
bool HoudiniEngineUnity::HEU_VolumeCache::get_UIExpanded() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::get_UIExpanded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UIExpanded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.set_UIExpanded
void HoudiniEngineUnity::HEU_VolumeCache::set_UIExpanded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::set_UIExpanded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_UIExpanded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.UpdateVolumeCachesFromParts
System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_VolumeCache*>* HoudiniEngineUnity::HEU_VolumeCache::UpdateVolumeCachesFromParts(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_GeoNode* ownerNode, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_PartData*>* volumeParts, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_VolumeCache*>* volumeCaches) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::UpdateVolumeCachesFromParts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_VolumeCache", "UpdateVolumeCachesFromParts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(ownerNode), ::il2cpp_utils::ExtractType(volumeParts), ::il2cpp_utils::ExtractType(volumeCaches)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_VolumeCache*>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, session, ownerNode, volumeParts, volumeCaches);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.Initialize
void HoudiniEngineUnity::HEU_VolumeCache::Initialize(HoudiniEngineUnity::HEU_GeoNode* ownerNode, int tileIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ownerNode), ::il2cpp_utils::ExtractType(tileIndex)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ownerNode, tileIndex);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.ResetParameters
void HoudiniEngineUnity::HEU_VolumeCache::ResetParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::ResetParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.GetLayer
HoudiniEngineUnity::HEU_VolumeLayer* HoudiniEngineUnity::HEU_VolumeCache::GetLayer(::StringW layerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::GetLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerName)})));
  return ::il2cpp_utils::RunMethodRethrow<HoudiniEngineUnity::HEU_VolumeLayer*, false>(this, ___internal__method, layerName);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.StartUpdateLayers
void HoudiniEngineUnity::HEU_VolumeCache::StartUpdateLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::StartUpdateLayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartUpdateLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.FinishUpdateLayers
void HoudiniEngineUnity::HEU_VolumeCache::FinishUpdateLayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::FinishUpdateLayers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinishUpdateLayers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.GetPartLayerAttributes
void HoudiniEngineUnity::HEU_VolumeCache::GetPartLayerAttributes(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, HoudiniEngineUnity::HEU_VolumeLayer* layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::GetPartLayerAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPartLayerAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(layer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, session, geoID, partID, layer);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.LoadLayerTextureFromAttribute
bool HoudiniEngineUnity::HEU_VolumeCache::LoadLayerTextureFromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<UnityEngine::Texture2D*> outTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::LoadLayerTextureFromAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadLayerTextureFromAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(attrName), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture2D*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, session, geoID, partID, attrName, byref(outTexture));
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.LoadLayerFloatFromAttribute
bool HoudiniEngineUnity::HEU_VolumeCache::LoadLayerFloatFromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<float> floatValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::LoadLayerFloatFromAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadLayerFloatFromAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(attrName), ::il2cpp_utils::ExtractType(floatValue)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, session, geoID, partID, attrName, byref(floatValue));
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.LoadLayerColorFromAttribute
bool HoudiniEngineUnity::HEU_VolumeCache::LoadLayerColorFromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<UnityEngine::Color> colorValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::LoadLayerColorFromAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadLayerColorFromAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(attrName), ::il2cpp_utils::ExtractType(colorValue)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, session, geoID, partID, attrName, byref(colorValue));
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.LoadLayerVector2FromAttribute
bool HoudiniEngineUnity::HEU_VolumeCache::LoadLayerVector2FromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<UnityEngine::Vector2> vectorValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::LoadLayerVector2FromAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadLayerVector2FromAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(attrName), ::il2cpp_utils::ExtractType(vectorValue)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, session, geoID, partID, attrName, byref(vectorValue));
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.UpdateLayerFromPart
void HoudiniEngineUnity::HEU_VolumeCache::UpdateLayerFromPart(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_PartData* part) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::UpdateLayerFromPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLayerFromPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(part)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, session, part);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.GenerateTerrainWithAlphamaps
void HoudiniEngineUnity::HEU_VolumeCache::GenerateTerrainWithAlphamaps(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_HoudiniAsset* houdiniAsset, bool bRebuild) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::GenerateTerrainWithAlphamaps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTerrainWithAlphamaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(houdiniAsset), ::il2cpp_utils::ExtractType(bRebuild)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, session, houdiniAsset, bRebuild);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.LoadLayerPropertiesFromAttributes
void HoudiniEngineUnity::HEU_VolumeCache::LoadLayerPropertiesFromAttributes(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, UnityEngine::TerrainLayer* terrainLayer, bool bNewTerrainLayer, UnityEngine::Texture2D* defaultTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::LoadLayerPropertiesFromAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadLayerPropertiesFromAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(terrainLayer), ::il2cpp_utils::ExtractType(bNewTerrainLayer), ::il2cpp_utils::ExtractType(defaultTexture)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, session, geoID, partID, terrainLayer, bNewTerrainLayer, defaultTexture);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.PopulateScatterTrees
void HoudiniEngineUnity::HEU_VolumeCache::PopulateScatterTrees(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, int pointCount, bool throwWarningIfNoTileAttribute) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::PopulateScatterTrees");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopulateScatterTrees", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(pointCount), ::il2cpp_utils::ExtractType(throwWarningIfNoTileAttribute)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, session, geoID, partID, pointCount, throwWarningIfNoTileAttribute);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.PopulateDetailPrototype
void HoudiniEngineUnity::HEU_VolumeCache::PopulateDetailPrototype(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, HoudiniEngineUnity::HEU_VolumeLayer* layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::PopulateDetailPrototype");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopulateDetailPrototype", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(session), ::il2cpp_utils::ExtractType(geoID), ::il2cpp_utils::ExtractType(partID), ::il2cpp_utils::ExtractType(layer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, session, geoID, partID, layer);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.PopulatePreset
void HoudiniEngineUnity::HEU_VolumeCache::PopulatePreset(HoudiniEngineUnity::HEU_VolumeCachePreset* cachePreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::PopulatePreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopulatePreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cachePreset)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, cachePreset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.ApplyPreset
bool HoudiniEngineUnity::HEU_VolumeCache::ApplyPreset(HoudiniEngineUnity::HEU_VolumeCachePreset* volumeCachePreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::ApplyPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volumeCachePreset)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, volumeCachePreset);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.CopyValuesTo
void HoudiniEngineUnity::HEU_VolumeCache::CopyValuesTo(HoudiniEngineUnity::HEU_VolumeCache* destCache) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::CopyValuesTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyValuesTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destCache)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, destCache);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.CopyDetailProperties
void HoudiniEngineUnity::HEU_VolumeCache::CopyDetailProperties(HoudiniEngineUnity::HEU_DetailProperties* srcProp, HoudiniEngineUnity::HEU_DetailProperties* destProp) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::CopyDetailProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_VolumeCache", "CopyDetailProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(srcProp), ::il2cpp_utils::ExtractType(destProp)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, srcProp, destProp);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.CopyLayer
void HoudiniEngineUnity::HEU_VolumeCache::CopyLayer(HoudiniEngineUnity::HEU_VolumeLayer* srcLayer, HoudiniEngineUnity::HEU_VolumeLayer* destLayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::CopyLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_VolumeCache", "CopyLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(srcLayer), ::il2cpp_utils::ExtractType(destLayer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, srcLayer, destLayer);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.CopyPrototype
void HoudiniEngineUnity::HEU_VolumeCache::CopyPrototype(HoudiniEngineUnity::HEU_DetailPrototype* srcProto, HoudiniEngineUnity::HEU_DetailPrototype* destProto) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::CopyPrototype");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_VolumeCache", "CopyPrototype", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(srcProto), ::il2cpp_utils::ExtractType(destProto)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, srcProto, destProto);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.LoadDefaultSplatTexture
UnityEngine::Texture2D* HoudiniEngineUnity::HEU_VolumeCache::LoadDefaultSplatTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::LoadDefaultSplatTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_VolumeCache", "LoadDefaultSplatTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.LoadAssetTexture
UnityEngine::Texture2D* HoudiniEngineUnity::HEU_VolumeCache::LoadAssetTexture(::StringW path) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::LoadAssetTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_VolumeCache", "LoadAssetTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodRethrow<UnityEngine::Texture2D*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, path);
}
// Autogenerated method: HoudiniEngineUnity.HEU_VolumeCache.IsEquivalentTo
bool HoudiniEngineUnity::HEU_VolumeCache::IsEquivalentTo(HoudiniEngineUnity::HEU_VolumeCache* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_VolumeCache::IsEquivalentTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsEquivalentTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Il2CppInspector.DLL.AddressAttribute
#include "Il2CppInspector/DLL/AddressAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String RVA
::StringW& Il2CppInspector::DLL::AddressAttribute::dyn_RVA() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::AddressAttribute::dyn_RVA");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RVA"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Offset
::StringW& Il2CppInspector::DLL::AddressAttribute::dyn_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::AddressAttribute::dyn_Offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Offset"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String VA
::StringW& Il2CppInspector::DLL::AddressAttribute::dyn_VA() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::AddressAttribute::dyn_VA");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "VA"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Slot
::StringW& Il2CppInspector::DLL::AddressAttribute::dyn_Slot() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::AddressAttribute::dyn_Slot");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Slot"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Il2CppInspector.DLL.FieldOffsetAttribute
#include "Il2CppInspector/DLL/FieldOffsetAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Offset
::StringW& Il2CppInspector::DLL::FieldOffsetAttribute::dyn_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::FieldOffsetAttribute::dyn_Offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Offset"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Il2CppInspector.DLL.StaticFieldOffsetAttribute
#include "Il2CppInspector/DLL/StaticFieldOffsetAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Offset
::StringW& Il2CppInspector::DLL::StaticFieldOffsetAttribute::dyn_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::StaticFieldOffsetAttribute::dyn_Offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Offset"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Il2CppInspector.DLL.AttributeAttribute
#include "Il2CppInspector/DLL/AttributeAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Name
::StringW& Il2CppInspector::DLL::AttributeAttribute::dyn_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::AttributeAttribute::dyn_Name");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Name"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String RVA
::StringW& Il2CppInspector::DLL::AttributeAttribute::dyn_RVA() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::AttributeAttribute::dyn_RVA");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RVA"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.String Offset
::StringW& Il2CppInspector::DLL::AttributeAttribute::dyn_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::AttributeAttribute::dyn_Offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Offset"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Il2CppInspector.DLL.MetadataOffsetAttribute
#include "Il2CppInspector/DLL/MetadataOffsetAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Offset
::StringW& Il2CppInspector::DLL::MetadataOffsetAttribute::dyn_Offset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::MetadataOffsetAttribute::dyn_Offset");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Offset"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Il2CppInspector.DLL.MetadataPreviewAttribute
#include "Il2CppInspector/DLL/MetadataPreviewAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Data
::StringW& Il2CppInspector::DLL::MetadataPreviewAttribute::dyn_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::MetadataPreviewAttribute::dyn_Data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Data"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Il2CppInspector.DLL.TokenAttribute
#include "Il2CppInspector/DLL/TokenAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public System.String Token
::StringW& Il2CppInspector::DLL::TokenAttribute::dyn_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("Il2CppInspector::DLL::TokenAttribute::dyn_Token");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Token"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.BaseChannel Next
LiteNetLib::BaseChannel*& LiteNetLib::BaseChannel::dyn_Next() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::dyn_Next");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Next"))->offset;
  return *reinterpret_cast<LiteNetLib::BaseChannel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly LiteNetLib.NetPeer Peer
LiteNetLib::NetPeer*& LiteNetLib::BaseChannel::dyn_Peer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::dyn_Peer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Peer"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: protected readonly System.Collections.Generic.Queue`1<LiteNetLib.NetPacket> OutgoingQueue
System::Collections::Generic::Queue_1<LiteNetLib::NetPacket*>*& LiteNetLib::BaseChannel::dyn_OutgoingQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::dyn_OutgoingQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "OutgoingQueue"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Queue_1<LiteNetLib::NetPacket*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.BaseChannel.get_PacketsInQueue
int LiteNetLib::BaseChannel::get_PacketsInQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::get_PacketsInQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsInQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.BaseChannel.AddToQueue
void LiteNetLib::BaseChannel::AddToQueue(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::AddToQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.BaseChannel.SendNextPackets
void LiteNetLib::BaseChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.BaseChannel.ProcessPacket
bool LiteNetLib::BaseChannel::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::BaseChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectionRequestResult
#include "LiteNetLib/ConnectionRequestResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult None
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult None
void LiteNetLib::ConnectionRequestResult::_set_None(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult Accept
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_Accept");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "Accept"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult Accept
void LiteNetLib::ConnectionRequestResult::_set_Accept(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_Accept");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "Accept", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult Reject
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_Reject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "Reject"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult Reject
void LiteNetLib::ConnectionRequestResult::_set_Reject(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_Reject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "Reject", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionRequestResult RejectForce
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequestResult::_get_RejectForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_get_RejectForce");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionRequestResult>("LiteNetLib", "ConnectionRequestResult", "RejectForce"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionRequestResult RejectForce
void LiteNetLib::ConnectionRequestResult::_set_RejectForce(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::_set_RejectForce");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionRequestResult", "RejectForce", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::ConnectionRequestResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequestResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetManager _listener
LiteNetLib::NetManager*& LiteNetLib::ConnectionRequest::dyn__listener() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::dyn__listener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listener"))->offset;
  return *reinterpret_cast<LiteNetLib::NetManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _used
int& LiteNetLib::ConnectionRequest::dyn__used() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::dyn__used");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_used"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.Utils.NetDataReader Data
LiteNetLib::Utils::NetDataReader*& LiteNetLib::ConnectionRequest::dyn_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::dyn_Data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Data"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetDataReader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.ConnectionRequestResult <Result>k__BackingField
LiteNetLib::ConnectionRequestResult& LiteNetLib::ConnectionRequest::dyn_$Result$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::dyn_$Result$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Result>k__BackingField"))->offset;
  return *reinterpret_cast<LiteNetLib::ConnectionRequestResult*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Int64 ConnectionTime
int64_t& LiteNetLib::ConnectionRequest::dyn_ConnectionTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::dyn_ConnectionTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: System.Byte ConnectionNumber
uint8_t& LiteNetLib::ConnectionRequest::dyn_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::dyn_ConnectionNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionNumber"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Net.IPEndPoint RemoteEndPoint
System::Net::IPEndPoint*& LiteNetLib::ConnectionRequest::dyn_RemoteEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::dyn_RemoteEndPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RemoteEndPoint"))->offset;
  return *reinterpret_cast<System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.get_Result
LiteNetLib::ConnectionRequestResult LiteNetLib::ConnectionRequest::get_Result() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::get_Result");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::ConnectionRequestResult, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.set_Result
void LiteNetLib::ConnectionRequest::set_Result(LiteNetLib::ConnectionRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::set_Result");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.TryActivate
bool LiteNetLib::ConnectionRequest::TryActivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::TryActivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.UpdateRequest
void LiteNetLib::ConnectionRequest::UpdateRequest(LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::UpdateRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connRequest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connRequest);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.AcceptIfKey
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::AcceptIfKey(::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::AcceptIfKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcceptIfKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, key);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Accept
LiteNetLib::NetPeer* LiteNetLib::ConnectionRequest::Accept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Accept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Accept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::ArrayW<uint8_t> rejectData, int start, int length, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(force)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rejectData, start, length, force);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::ArrayW<uint8_t> rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::ArrayW<uint8_t> rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(::ArrayW<uint8_t> rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.RejectForce
void LiteNetLib::ConnectionRequest::RejectForce(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::RejectForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RejectForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(::ArrayW<uint8_t> rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated method: LiteNetLib.ConnectionRequest.Reject
void LiteNetLib::ConnectionRequest::Reject(LiteNetLib::Utils::NetDataWriter* rejectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rejectData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rejectData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.UnconnectedMessageType BasicMessage
LiteNetLib::UnconnectedMessageType LiteNetLib::UnconnectedMessageType::_get_BasicMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_get_BasicMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::UnconnectedMessageType>("LiteNetLib", "UnconnectedMessageType", "BasicMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.UnconnectedMessageType BasicMessage
void LiteNetLib::UnconnectedMessageType::_set_BasicMessage(LiteNetLib::UnconnectedMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_set_BasicMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "UnconnectedMessageType", "BasicMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.UnconnectedMessageType Broadcast
LiteNetLib::UnconnectedMessageType LiteNetLib::UnconnectedMessageType::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::UnconnectedMessageType>("LiteNetLib", "UnconnectedMessageType", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.UnconnectedMessageType Broadcast
void LiteNetLib::UnconnectedMessageType::_set_Broadcast(LiteNetLib::UnconnectedMessageType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "UnconnectedMessageType", "Broadcast", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::UnconnectedMessageType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::UnconnectedMessageType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason ConnectionFailed
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_ConnectionFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_ConnectionFailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "ConnectionFailed"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason ConnectionFailed
void LiteNetLib::DisconnectReason::_set_ConnectionFailed(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_ConnectionFailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "ConnectionFailed", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason Timeout
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_Timeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_Timeout");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "Timeout"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason Timeout
void LiteNetLib::DisconnectReason::_set_Timeout(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_Timeout");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "Timeout", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason HostUnreachable
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_HostUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_HostUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "HostUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason HostUnreachable
void LiteNetLib::DisconnectReason::_set_HostUnreachable(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_HostUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "HostUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason NetworkUnreachable
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_NetworkUnreachable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_NetworkUnreachable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "NetworkUnreachable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason NetworkUnreachable
void LiteNetLib::DisconnectReason::_set_NetworkUnreachable(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_NetworkUnreachable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "NetworkUnreachable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason RemoteConnectionClose
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_RemoteConnectionClose() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_RemoteConnectionClose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "RemoteConnectionClose"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason RemoteConnectionClose
void LiteNetLib::DisconnectReason::_set_RemoteConnectionClose(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_RemoteConnectionClose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "RemoteConnectionClose", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason DisconnectPeerCalled
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_DisconnectPeerCalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_DisconnectPeerCalled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "DisconnectPeerCalled"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason DisconnectPeerCalled
void LiteNetLib::DisconnectReason::_set_DisconnectPeerCalled(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_DisconnectPeerCalled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "DisconnectPeerCalled", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason ConnectionRejected
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_ConnectionRejected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_ConnectionRejected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "ConnectionRejected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason ConnectionRejected
void LiteNetLib::DisconnectReason::_set_ConnectionRejected(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_ConnectionRejected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "ConnectionRejected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason InvalidProtocol
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_InvalidProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_InvalidProtocol");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "InvalidProtocol"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason InvalidProtocol
void LiteNetLib::DisconnectReason::_set_InvalidProtocol(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_InvalidProtocol");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "InvalidProtocol", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason UnknownHost
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_UnknownHost() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_UnknownHost");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "UnknownHost"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason UnknownHost
void LiteNetLib::DisconnectReason::_set_UnknownHost(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_UnknownHost");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "UnknownHost", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason Reconnect
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_Reconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_Reconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "Reconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason Reconnect
void LiteNetLib::DisconnectReason::_set_Reconnect(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_Reconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "Reconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectReason PeerToPeerConnection
LiteNetLib::DisconnectReason LiteNetLib::DisconnectReason::_get_PeerToPeerConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_get_PeerToPeerConnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectReason>("LiteNetLib", "DisconnectReason", "PeerToPeerConnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectReason PeerToPeerConnection
void LiteNetLib::DisconnectReason::_set_PeerToPeerConnection(LiteNetLib::DisconnectReason value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::_set_PeerToPeerConnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectReason", "PeerToPeerConnection", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::DisconnectReason::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectReason::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetEventListener.OnPeerConnected
void LiteNetLib::INetEventListener::OnPeerConnected(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnPeerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPeerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnPeerDisconnected
void LiteNetLib::INetEventListener::OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnPeerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPeerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkError
void LiteNetLib::INetEventListener::OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, endPoint, socketError);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkReceive
void LiteNetLib::INetEventListener::OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkReceive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
void LiteNetLib::INetEventListener::OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkReceiveUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
void LiteNetLib::INetEventListener::OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnNetworkLatencyUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, latency);
}
// Autogenerated method: LiteNetLib.INetEventListener.OnConnectionRequest
void LiteNetLib::INetEventListener::OnConnectionRequest(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetEventListener::OnConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, request);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.IDeliveryEventListener.OnMessageDelivered
void LiteNetLib::IDeliveryEventListener::OnMessageDelivered(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::IDeliveryEventListener::OnMessageDelivered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnMessageDelivered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, userData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener
#include "LiteNetLib/EventBasedNetListener.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected
#include "LiteNetLib/EventBasedNetListener_OnPeerConnected.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected
#include "LiteNetLib/EventBasedNetListener_OnPeerDisconnected.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError
#include "LiteNetLib/EventBasedNetListener_OnNetworkError.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceive.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceiveUnconnected.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate
#include "LiteNetLib/EventBasedNetListener_OnNetworkLatencyUpdate.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest
#include "LiteNetLib/EventBasedNetListener_OnConnectionRequest.hpp"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent
#include "LiteNetLib/EventBasedNetListener_OnDeliveryEvent.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected PeerConnectedEvent
LiteNetLib::EventBasedNetListener::OnPeerConnected*& LiteNetLib::EventBasedNetListener::dyn_PeerConnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_PeerConnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PeerConnectedEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnPeerConnected**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected PeerDisconnectedEvent
LiteNetLib::EventBasedNetListener::OnPeerDisconnected*& LiteNetLib::EventBasedNetListener::dyn_PeerDisconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_PeerDisconnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PeerDisconnectedEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnPeerDisconnected**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError NetworkErrorEvent
LiteNetLib::EventBasedNetListener::OnNetworkError*& LiteNetLib::EventBasedNetListener::dyn_NetworkErrorEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_NetworkErrorEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetworkErrorEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnNetworkError**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive NetworkReceiveEvent
LiteNetLib::EventBasedNetListener::OnNetworkReceive*& LiteNetLib::EventBasedNetListener::dyn_NetworkReceiveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_NetworkReceiveEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetworkReceiveEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnNetworkReceive**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected NetworkReceiveUnconnectedEvent
LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected*& LiteNetLib::EventBasedNetListener::dyn_NetworkReceiveUnconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_NetworkReceiveUnconnectedEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetworkReceiveUnconnectedEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate NetworkLatencyUpdateEvent
LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate*& LiteNetLib::EventBasedNetListener::dyn_NetworkLatencyUpdateEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_NetworkLatencyUpdateEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetworkLatencyUpdateEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest ConnectionRequestEvent
LiteNetLib::EventBasedNetListener::OnConnectionRequest*& LiteNetLib::EventBasedNetListener::dyn_ConnectionRequestEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_ConnectionRequestEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionRequestEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnConnectionRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent DeliveryEvent
LiteNetLib::EventBasedNetListener::OnDeliveryEvent*& LiteNetLib::EventBasedNetListener::dyn_DeliveryEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::dyn_DeliveryEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DeliveryEvent"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNetListener::OnDeliveryEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_PeerConnectedEvent
void LiteNetLib::EventBasedNetListener::add_PeerConnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerConnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_PeerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PeerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_PeerConnectedEvent
void LiteNetLib::EventBasedNetListener::remove_PeerConnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerConnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_PeerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PeerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_PeerDisconnectedEvent
void LiteNetLib::EventBasedNetListener::add_PeerDisconnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_PeerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PeerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_PeerDisconnectedEvent
void LiteNetLib::EventBasedNetListener::remove_PeerDisconnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_PeerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PeerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkErrorEvent
void LiteNetLib::EventBasedNetListener::add_NetworkErrorEvent(LiteNetLib::EventBasedNetListener::OnNetworkError* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkErrorEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkErrorEvent(LiteNetLib::EventBasedNetListener::OnNetworkError* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkReceiveEvent
void LiteNetLib::EventBasedNetListener::add_NetworkReceiveEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceive* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkReceiveEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkReceiveEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceive* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkReceiveUnconnectedEvent
void LiteNetLib::EventBasedNetListener::add_NetworkReceiveUnconnectedEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkReceiveUnconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkReceiveUnconnectedEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkReceiveUnconnectedEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkReceiveUnconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_NetworkLatencyUpdateEvent
void LiteNetLib::EventBasedNetListener::add_NetworkLatencyUpdateEvent(LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_NetworkLatencyUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NetworkLatencyUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_NetworkLatencyUpdateEvent
void LiteNetLib::EventBasedNetListener::remove_NetworkLatencyUpdateEvent(LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_NetworkLatencyUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NetworkLatencyUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_ConnectionRequestEvent
void LiteNetLib::EventBasedNetListener::add_ConnectionRequestEvent(LiteNetLib::EventBasedNetListener::OnConnectionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_ConnectionRequestEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_ConnectionRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_ConnectionRequestEvent
void LiteNetLib::EventBasedNetListener::remove_ConnectionRequestEvent(LiteNetLib::EventBasedNetListener::OnConnectionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_ConnectionRequestEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_ConnectionRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.add_DeliveryEvent
void LiteNetLib::EventBasedNetListener::add_DeliveryEvent(LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::add_DeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_DeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.remove_DeliveryEvent
void LiteNetLib::EventBasedNetListener::remove_DeliveryEvent(LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::remove_DeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_DeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearPeerConnectedEvent
void LiteNetLib::EventBasedNetListener::ClearPeerConnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearPeerConnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPeerConnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearPeerDisconnectedEvent
void LiteNetLib::EventBasedNetListener::ClearPeerDisconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearPeerDisconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearPeerDisconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkErrorEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkErrorEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkErrorEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkErrorEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkReceiveEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkReceiveEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkReceiveUnconnectedEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkReceiveUnconnectedEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkReceiveUnconnectedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearNetworkLatencyUpdateEvent
void LiteNetLib::EventBasedNetListener::ClearNetworkLatencyUpdateEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearNetworkLatencyUpdateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearNetworkLatencyUpdateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearConnectionRequestEvent
void LiteNetLib::EventBasedNetListener::ClearConnectionRequestEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearConnectionRequestEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearConnectionRequestEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.ClearDeliveryEvent
void LiteNetLib::EventBasedNetListener::ClearDeliveryEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::ClearDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnPeerConnected
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnPeerConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnPeerDisconnected
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnPeerDisconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkError
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketErrorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkError");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketErrorCode)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, endPoint, socketErrorCode);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkReceive
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkReceive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnNetworkLatencyUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, latency);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.INetEventListener.OnConnectionRequest
void LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.INetEventListener.OnConnectionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener.LiteNetLib.IDeliveryEventListener.OnMessageDelivered
void LiteNetLib::EventBasedNetListener::LiteNetLib_IDeliveryEventListener_OnMessageDelivered(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::LiteNetLib.IDeliveryEventListener.OnMessageDelivered");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.IDeliveryEventListener.OnMessageDelivered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, userData);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected
#include "LiteNetLib/EventBasedNetListener_OnPeerConnected.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected.Invoke
void LiteNetLib::EventBasedNetListener::OnPeerConnected::Invoke(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerConnected::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnPeerConnected::BeginInvoke(LiteNetLib::NetPeer* peer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerConnected::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, peer, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected.EndInvoke
void LiteNetLib::EventBasedNetListener::OnPeerConnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerConnected::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected
#include "LiteNetLib/EventBasedNetListener_OnPeerDisconnected.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.DisconnectInfo
#include "LiteNetLib/DisconnectInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected.Invoke
void LiteNetLib::EventBasedNetListener::OnPeerDisconnected::Invoke(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerDisconnected::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, disconnectInfo);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnPeerDisconnected::BeginInvoke(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerDisconnected::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(disconnectInfo), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, peer, disconnectInfo, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected.EndInvoke
void LiteNetLib::EventBasedNetListener::OnPeerDisconnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnPeerDisconnected::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError
#include "LiteNetLib/EventBasedNetListener_OnNetworkError.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkError::Invoke(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkError::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketError)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, endPoint, socketError);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkError::BeginInvoke(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkError::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractType(socketError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, endPoint, socketError, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkError::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkError::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceive.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceive::Invoke(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceive::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, reader, deliveryMethod);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkReceive::BeginInvoke(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceive::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, peer, reader, deliveryMethod, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceive::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceive::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected
#include "LiteNetLib/EventBasedNetListener_OnNetworkReceiveUnconnected.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.UnconnectedMessageType
#include "LiteNetLib/UnconnectedMessageType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::Invoke(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, reader, messageType);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::BeginInvoke(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(reader), ::il2cpp_utils::ExtractType(messageType), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, remoteEndPoint, reader, messageType, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate
#include "LiteNetLib/EventBasedNetListener_OnNetworkLatencyUpdate.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate.Invoke
void LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::Invoke(LiteNetLib::NetPeer* peer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, latency);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::BeginInvoke(LiteNetLib::NetPeer* peer, int latency, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(latency), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, peer, latency, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate.EndInvoke
void LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest
#include "LiteNetLib/EventBasedNetListener_OnConnectionRequest.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest.Invoke
void LiteNetLib::EventBasedNetListener::OnConnectionRequest::Invoke(LiteNetLib::ConnectionRequest* request) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnConnectionRequest::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, request);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnConnectionRequest::BeginInvoke(LiteNetLib::ConnectionRequest* request, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnConnectionRequest::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, request, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest.EndInvoke
void LiteNetLib::EventBasedNetListener::OnConnectionRequest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnConnectionRequest::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent
#include "LiteNetLib/EventBasedNetListener_OnDeliveryEvent.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent.Invoke
void LiteNetLib::EventBasedNetListener::OnDeliveryEvent::Invoke(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnDeliveryEvent::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, userData);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNetListener::OnDeliveryEvent::BeginInvoke(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnDeliveryEvent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(userData), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, peer, userData, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent.EndInvoke
void LiteNetLib::EventBasedNetListener::OnDeliveryEvent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::OnDeliveryEvent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NatAddressType Internal
LiteNetLib::NatAddressType LiteNetLib::NatAddressType::_get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_get_Internal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NatAddressType>("LiteNetLib", "NatAddressType", "Internal"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NatAddressType Internal
void LiteNetLib::NatAddressType::_set_Internal(LiteNetLib::NatAddressType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_set_Internal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NatAddressType", "Internal", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NatAddressType External
LiteNetLib::NatAddressType LiteNetLib::NatAddressType::_get_External() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_get_External");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NatAddressType>("LiteNetLib", "NatAddressType", "External"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NatAddressType External
void LiteNetLib::NatAddressType::_set_External(LiteNetLib::NatAddressType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::_set_External");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NatAddressType", "External", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::NatAddressType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatAddressType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.INatPunchListener
#include "LiteNetLib/INatPunchListener.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INatPunchListener.OnNatIntroductionRequest
void LiteNetLib::INatPunchListener::OnNatIntroductionRequest(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::StringW token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INatPunchListener::OnNatIntroductionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token);
}
// Autogenerated method: LiteNetLib.INatPunchListener.OnNatIntroductionSuccess
void LiteNetLib::INatPunchListener::OnNatIntroductionSuccess(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::StringW token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INatPunchListener::OnNatIntroductionSuccess");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetEndPoint, type, token);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.EventBasedNatPunchListener
#include "LiteNetLib/EventBasedNatPunchListener.hpp"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionRequest.hpp"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionSuccess.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest NatIntroductionRequest
LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest*& LiteNetLib::EventBasedNatPunchListener::dyn_NatIntroductionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::dyn_NatIntroductionRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NatIntroductionRequest"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess NatIntroductionSuccess
LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess*& LiteNetLib::EventBasedNatPunchListener::dyn_NatIntroductionSuccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::dyn_NatIntroductionSuccess");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NatIntroductionSuccess"))->offset;
  return *reinterpret_cast<LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.add_NatIntroductionRequest
void LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionRequest(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.remove_NatIntroductionRequest
void LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionRequest(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.add_NatIntroductionSuccess
void LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionSuccess(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::add_NatIntroductionSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_NatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.remove_NatIntroductionSuccess
void LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionSuccess(LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::remove_NatIntroductionSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_NatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.LiteNetLib.INatPunchListener.OnNatIntroductionRequest
void LiteNetLib::EventBasedNatPunchListener::LiteNetLib_INatPunchListener_OnNatIntroductionRequest(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::StringW token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::LiteNetLib.INatPunchListener.OnNatIntroductionRequest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INatPunchListener.OnNatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener.LiteNetLib.INatPunchListener.OnNatIntroductionSuccess
void LiteNetLib::EventBasedNatPunchListener::LiteNetLib_INatPunchListener_OnNatIntroductionSuccess(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::StringW token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::LiteNetLib.INatPunchListener.OnNatIntroductionSuccess");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INatPunchListener.OnNatIntroductionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetEndPoint, type, token);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionRequest.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest.Invoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::Invoke(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::StringW token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::BeginInvoke(System::Net::IPEndPoint* localEndPoint, System::Net::IPEndPoint* remoteEndPoint, ::StringW token, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localEndPoint), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, localEndPoint, remoteEndPoint, token, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionRequest.EndInvoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionRequest::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess
#include "LiteNetLib/EventBasedNatPunchListener_OnNatIntroductionSuccess.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NatAddressType
#include "LiteNetLib/NatAddressType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess.Invoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::Invoke(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::StringW token) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, targetEndPoint, type, token);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess.BeginInvoke
System::IAsyncResult* LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::BeginInvoke(System::Net::IPEndPoint* targetEndPoint, LiteNetLib::NatAddressType type, ::StringW token, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetEndPoint), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(token), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodRethrow<System::IAsyncResult*, false>(this, ___internal__method, targetEndPoint, type, token, callback, object);
}
// Autogenerated method: LiteNetLib.EventBasedNatPunchListener/LiteNetLib.OnNatIntroductionSuccess.EndInvoke
void LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNatPunchListener::OnNatIntroductionSuccess::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NatPunchModule
#include "LiteNetLib/NatPunchModule.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket
#include "LiteNetLib/NatPunchModule_NatIntroduceRequestPacket.hpp"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket
#include "LiteNetLib/NatPunchModule_NatIntroduceResponsePacket.hpp"
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket
#include "LiteNetLib/NatPunchModule_NatPunchPacket.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.Utils.NetPacketProcessor
#include "LiteNetLib/Utils/NetPacketProcessor.hpp"
// Including type: LiteNetLib.INatPunchListener
#include "LiteNetLib/INatPunchListener.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxTokenLength
int LiteNetLib::NatPunchModule::_get_MaxTokenLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::_get_MaxTokenLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NatPunchModule", "MaxTokenLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxTokenLength
void LiteNetLib::NatPunchModule::_set_MaxTokenLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::_set_MaxTokenLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NatPunchModule", "MaxTokenLength", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetSocket _socket
LiteNetLib::NetSocket*& LiteNetLib::NatPunchModule::dyn__socket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::dyn__socket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_socket"))->offset;
  return *reinterpret_cast<LiteNetLib::NetSocket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<LiteNetLib.NatPunchModule/LiteNetLib.RequestEventData> _requestEvents
System::Collections::Generic::Queue_1<LiteNetLib::NatPunchModule::RequestEventData>*& LiteNetLib::NatPunchModule::dyn__requestEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::dyn__requestEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requestEvents"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Queue_1<LiteNetLib::NatPunchModule::RequestEventData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<LiteNetLib.NatPunchModule/LiteNetLib.SuccessEventData> _successEvents
System::Collections::Generic::Queue_1<LiteNetLib::NatPunchModule::SuccessEventData>*& LiteNetLib::NatPunchModule::dyn__successEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::dyn__successEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_successEvents"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Queue_1<LiteNetLib::NatPunchModule::SuccessEventData>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetDataReader _cacheReader
LiteNetLib::Utils::NetDataReader*& LiteNetLib::NatPunchModule::dyn__cacheReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::dyn__cacheReader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cacheReader"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetDataReader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetDataWriter _cacheWriter
LiteNetLib::Utils::NetDataWriter*& LiteNetLib::NatPunchModule::dyn__cacheWriter() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::dyn__cacheWriter");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cacheWriter"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetDataWriter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.Utils.NetPacketProcessor _netPacketProcessor
LiteNetLib::Utils::NetPacketProcessor*& LiteNetLib::NatPunchModule::dyn__netPacketProcessor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::dyn__netPacketProcessor");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netPacketProcessor"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetPacketProcessor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.INatPunchListener _natPunchListener
LiteNetLib::INatPunchListener*& LiteNetLib::NatPunchModule::dyn__natPunchListener() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::dyn__natPunchListener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_natPunchListener"))->offset;
  return *reinterpret_cast<LiteNetLib::INatPunchListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NatPunchModule.ProcessMessage
void LiteNetLib::NatPunchModule::ProcessMessage(System::Net::IPEndPoint* senderEndPoint, LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::ProcessMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(senderEndPoint), ::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, senderEndPoint, packet);
}
// Autogenerated method: LiteNetLib.NatPunchModule.Init
void LiteNetLib::NatPunchModule::Init(LiteNetLib::INatPunchListener* listener) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, listener);
}
// Autogenerated method: LiteNetLib.NatPunchModule.NatIntroduce
void LiteNetLib::NatPunchModule::NatIntroduce(System::Net::IPEndPoint* hostInternal, System::Net::IPEndPoint* hostExternal, System::Net::IPEndPoint* clientInternal, System::Net::IPEndPoint* clientExternal, ::StringW additionalInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NatIntroduce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostInternal), ::il2cpp_utils::ExtractType(hostExternal), ::il2cpp_utils::ExtractType(clientInternal), ::il2cpp_utils::ExtractType(clientExternal), ::il2cpp_utils::ExtractType(additionalInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, hostInternal, hostExternal, clientInternal, clientExternal, additionalInfo);
}
// Autogenerated method: LiteNetLib.NatPunchModule.PollEvents
void LiteNetLib::NatPunchModule::PollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::PollEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule.SendNatIntroduceRequest
void LiteNetLib::NatPunchModule::SendNatIntroduceRequest(::StringW host, int port, ::StringW additionalInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::SendNatIntroduceRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNatIntroduceRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(host), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(additionalInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, host, port, additionalInfo);
}
// Autogenerated method: LiteNetLib.NatPunchModule.SendNatIntroduceRequest
void LiteNetLib::NatPunchModule::SendNatIntroduceRequest(System::Net::IPEndPoint* masterServerEndPoint, ::StringW additionalInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::SendNatIntroduceRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNatIntroduceRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(masterServerEndPoint), ::il2cpp_utils::ExtractType(additionalInfo)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, masterServerEndPoint, additionalInfo);
}
// Autogenerated method: LiteNetLib.NatPunchModule.OnNatIntroductionRequest
void LiteNetLib::NatPunchModule::OnNatIntroductionRequest(LiteNetLib::NatPunchModule::NatIntroduceRequestPacket* req, System::Net::IPEndPoint* senderEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::OnNatIntroductionRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(req), ::il2cpp_utils::ExtractType(senderEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, req, senderEndPoint);
}
// Autogenerated method: LiteNetLib.NatPunchModule.OnNatIntroductionResponse
void LiteNetLib::NatPunchModule::OnNatIntroductionResponse(LiteNetLib::NatPunchModule::NatIntroduceResponsePacket* req) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::OnNatIntroductionResponse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatIntroductionResponse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(req)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, req);
}
// Autogenerated method: LiteNetLib.NatPunchModule.OnNatPunch
void LiteNetLib::NatPunchModule::OnNatPunch(LiteNetLib::NatPunchModule::NatPunchPacket* req, System::Net::IPEndPoint* senderEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::OnNatPunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNatPunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(req), ::il2cpp_utils::ExtractType(senderEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, req, senderEndPoint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket
#include "LiteNetLib/NatPunchModule_NatIntroduceRequestPacket.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Net.IPEndPoint <Internal>k__BackingField
System::Net::IPEndPoint*& LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::dyn_$Internal$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::dyn_$Internal$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Internal>k__BackingField"))->offset;
  return *reinterpret_cast<System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <Token>k__BackingField
::StringW& LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::dyn_$Token$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::dyn_$Token$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Token>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.get_Internal
System::Net::IPEndPoint* LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.set_Internal
void LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Internal(System::Net::IPEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.get_Token
::StringW LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceRequestPacket.set_Token
void LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Token(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceRequestPacket::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket
#include "LiteNetLib/NatPunchModule_NatIntroduceResponsePacket.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Net.IPEndPoint <Internal>k__BackingField
System::Net::IPEndPoint*& LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::dyn_$Internal$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::dyn_$Internal$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Internal>k__BackingField"))->offset;
  return *reinterpret_cast<System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Net.IPEndPoint <External>k__BackingField
System::Net::IPEndPoint*& LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::dyn_$External$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::dyn_$External$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<External>k__BackingField"))->offset;
  return *reinterpret_cast<System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.String <Token>k__BackingField
::StringW& LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::dyn_$Token$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::dyn_$Token$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Token>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.get_Internal
System::Net::IPEndPoint* LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Internal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.set_Internal
void LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Internal(System::Net::IPEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.get_External
System::Net::IPEndPoint* LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_External() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_External");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_External", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Net::IPEndPoint*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.set_External
void LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_External(System::Net::IPEndPoint* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_External");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_External", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.get_Token
::StringW LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatIntroduceResponsePacket.set_Token
void LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Token(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatIntroduceResponsePacket::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket
#include "LiteNetLib/NatPunchModule_NatPunchPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.String <Token>k__BackingField
::StringW& LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$Token$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$Token$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Token>k__BackingField"))->offset;
  return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean <IsExternal>k__BackingField
bool& LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$IsExternal$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::dyn_$IsExternal$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsExternal>k__BackingField"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.get_Token
::StringW LiteNetLib::NatPunchModule::NatPunchPacket::get_Token() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::get_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.set_Token
void LiteNetLib::NatPunchModule::NatPunchPacket::set_Token(::StringW value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::set_Token");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Token", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.get_IsExternal
bool LiteNetLib::NatPunchModule::NatPunchPacket::get_IsExternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::get_IsExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NatPunchModule/LiteNetLib.NatPunchPacket.set_IsExternal
void LiteNetLib::NatPunchModule::NatPunchPacket::set_IsExternal(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NatPunchModule::NatPunchPacket::set_IsExternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsExternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod Unreliable
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_Unreliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_Unreliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "Unreliable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod Unreliable
void LiteNetLib::DeliveryMethod::_set_Unreliable(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_Unreliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "Unreliable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableUnordered
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableUnordered() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_ReliableUnordered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableUnordered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableUnordered
void LiteNetLib::DeliveryMethod::_set_ReliableUnordered(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_ReliableUnordered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableUnordered", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod Sequenced
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_Sequenced() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_Sequenced");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "Sequenced"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod Sequenced
void LiteNetLib::DeliveryMethod::_set_Sequenced(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_Sequenced");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "Sequenced", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableOrdered
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableOrdered() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_ReliableOrdered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableOrdered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableOrdered
void LiteNetLib::DeliveryMethod::_set_ReliableOrdered(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_ReliableOrdered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableOrdered", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DeliveryMethod ReliableSequenced
LiteNetLib::DeliveryMethod LiteNetLib::DeliveryMethod::_get_ReliableSequenced() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_get_ReliableSequenced");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DeliveryMethod>("LiteNetLib", "DeliveryMethod", "ReliableSequenced"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DeliveryMethod ReliableSequenced
void LiteNetLib::DeliveryMethod::_set_ReliableSequenced(LiteNetLib::DeliveryMethod value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::_set_ReliableSequenced");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DeliveryMethod", "ReliableSequenced", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t& LiteNetLib::DeliveryMethod::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DeliveryMethod::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetConstants
#include "LiteNetLib/NetConstants.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 DefaultWindowSize
int LiteNetLib::NetConstants::_get_DefaultWindowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_DefaultWindowSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "DefaultWindowSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 DefaultWindowSize
void LiteNetLib::NetConstants::_set_DefaultWindowSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_DefaultWindowSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "DefaultWindowSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SocketBufferSize
int LiteNetLib::NetConstants::_get_SocketBufferSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_SocketBufferSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "SocketBufferSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SocketBufferSize
void LiteNetLib::NetConstants::_set_SocketBufferSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_SocketBufferSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "SocketBufferSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 SocketTTL
int LiteNetLib::NetConstants::_get_SocketTTL() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_SocketTTL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "SocketTTL"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 SocketTTL
void LiteNetLib::NetConstants::_set_SocketTTL(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_SocketTTL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "SocketTTL", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 HeaderSize
int LiteNetLib::NetConstants::_get_HeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HeaderSize
void LiteNetLib::NetConstants::_set_HeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "HeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ChanneledHeaderSize
int LiteNetLib::NetConstants::_get_ChanneledHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_ChanneledHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "ChanneledHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ChanneledHeaderSize
void LiteNetLib::NetConstants::_set_ChanneledHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_ChanneledHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "ChanneledHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 FragmentHeaderSize
int LiteNetLib::NetConstants::_get_FragmentHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_FragmentHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "FragmentHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 FragmentHeaderSize
void LiteNetLib::NetConstants::_set_FragmentHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_FragmentHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "FragmentHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 FragmentedHeaderTotalSize
int LiteNetLib::NetConstants::_get_FragmentedHeaderTotalSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_FragmentedHeaderTotalSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "FragmentedHeaderTotalSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 FragmentedHeaderTotalSize
void LiteNetLib::NetConstants::_set_FragmentedHeaderTotalSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_FragmentedHeaderTotalSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "FragmentedHeaderTotalSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt16 MaxSequence
uint16_t LiteNetLib::NetConstants::_get_MaxSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxSequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint16_t>("LiteNetLib", "NetConstants", "MaxSequence"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt16 MaxSequence
void LiteNetLib::NetConstants::_set_MaxSequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxSequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxSequence", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt16 HalfMaxSequence
uint16_t LiteNetLib::NetConstants::_get_HalfMaxSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_HalfMaxSequence");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint16_t>("LiteNetLib", "NetConstants", "HalfMaxSequence"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt16 HalfMaxSequence
void LiteNetLib::NetConstants::_set_HalfMaxSequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_HalfMaxSequence");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "HalfMaxSequence", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 ProtocolId
int LiteNetLib::NetConstants::_get_ProtocolId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_ProtocolId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "ProtocolId"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 ProtocolId
void LiteNetLib::NetConstants::_set_ProtocolId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_ProtocolId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "ProtocolId", value));
}
// Autogenerated static field getter
// Get static field: static System.Int32 MaxUdpHeaderSize
int LiteNetLib::NetConstants::_get_MaxUdpHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxUdpHeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "MaxUdpHeaderSize"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 MaxUdpHeaderSize
void LiteNetLib::NetConstants::_set_MaxUdpHeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxUdpHeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxUdpHeaderSize", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32[] PossibleMtu
::ArrayW<int> LiteNetLib::NetConstants::_get_PossibleMtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_PossibleMtu");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::ArrayW<int>>("LiteNetLib", "NetConstants", "PossibleMtu"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32[] PossibleMtu
void LiteNetLib::NetConstants::_set_PossibleMtu(::ArrayW<int> value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_PossibleMtu");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "PossibleMtu", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Int32 MaxPacketSize
int LiteNetLib::NetConstants::_get_MaxPacketSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxPacketSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "MaxPacketSize"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Int32 MaxPacketSize
void LiteNetLib::NetConstants::_set_MaxPacketSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxPacketSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxPacketSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.Byte MaxConnectionNumber
uint8_t LiteNetLib::NetConstants::_get_MaxConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_MaxConnectionNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("LiteNetLib", "NetConstants", "MaxConnectionNumber"));
}
// Autogenerated static field setter
// Set static field: static public System.Byte MaxConnectionNumber
void LiteNetLib::NetConstants::_set_MaxConnectionNumber(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_MaxConnectionNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "MaxConnectionNumber", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 PacketPoolSize
int LiteNetLib::NetConstants::_get_PacketPoolSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_get_PacketPoolSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConstants", "PacketPoolSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 PacketPoolSize
void LiteNetLib::NetConstants::_set_PacketPoolSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::_set_PacketPoolSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConstants", "PacketPoolSize", value));
}
// Autogenerated method: LiteNetLib.NetConstants..cctor
void LiteNetLib::NetConstants::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConstants::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConstants", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetLogLevel
#include "LiteNetLib/NetLogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Warning
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Warning() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Warning");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Warning"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Warning
void LiteNetLib::NetLogLevel::_set_Warning(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Warning");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Warning", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Error
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Error"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Error
void LiteNetLib::NetLogLevel::_set_Error(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Trace
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Trace() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Trace");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Trace"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Trace
void LiteNetLib::NetLogLevel::_set_Trace(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Trace");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Trace", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetLogLevel Info
LiteNetLib::NetLogLevel LiteNetLib::NetLogLevel::_get_Info() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_get_Info");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetLogLevel>("LiteNetLib", "NetLogLevel", "Info"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetLogLevel Info
void LiteNetLib::NetLogLevel::_set_Info(LiteNetLib::NetLogLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::_set_Info");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetLogLevel", "Info", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::NetLogLevel::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetLogLevel::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.INetLogger
#include "LiteNetLib/INetLogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetLogger.WriteNet
void LiteNetLib::INetLogger::WriteNet(LiteNetLib::NetLogLevel level, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetLogger::WriteNet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteNet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, level, str, args);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetDebug
#include "LiteNetLib/NetDebug.hpp"
// Including type: LiteNetLib.INetLogger
#include "LiteNetLib/INetLogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.INetLogger Logger
LiteNetLib::INetLogger* LiteNetLib::NetDebug::_get_Logger() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_get_Logger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::INetLogger*>("LiteNetLib", "NetDebug", "Logger"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.INetLogger Logger
void LiteNetLib::NetDebug::_set_Logger(LiteNetLib::INetLogger* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_set_Logger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetDebug", "Logger", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Object DebugLogLock
::Il2CppObject* LiteNetLib::NetDebug::_get_DebugLogLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_get_DebugLogLock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppObject*>("LiteNetLib", "NetDebug", "DebugLogLock"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Object DebugLogLock
void LiteNetLib::NetDebug::_set_DebugLogLock(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::_set_DebugLogLock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetDebug", "DebugLogLock", value));
}
// Autogenerated method: LiteNetLib.NetDebug..cctor
void LiteNetLib::NetDebug::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteLogic
void LiteNetLib::NetDebug::WriteLogic(LiteNetLib::NetLogLevel logLevel, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logLevel), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, logLevel, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.Write
void LiteNetLib::NetDebug::Write(::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.Write
void LiteNetLib::NetDebug::Write(LiteNetLib::NetLogLevel level, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, level, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteForce
void LiteNetLib::NetDebug::WriteForce(::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteForce
void LiteNetLib::NetDebug::WriteForce(LiteNetLib::NetLogLevel level, ::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, level, str, args);
}
// Autogenerated method: LiteNetLib.NetDebug.WriteError
void LiteNetLib::NetDebug::WriteError(::StringW str, ::ArrayW<::Il2CppObject*> args) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetDebug::WriteError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetDebug", "WriteError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, str, args);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.InvalidPacketException
#include "LiteNetLib/InvalidPacketException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.TooBigPacketException
#include "LiteNetLib/TooBigPacketException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPacket _packet
LiteNetLib::NetPacket*& LiteNetLib::NetPacketReader::dyn__packet() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::dyn__packet");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packet"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetManager _manager
LiteNetLib::NetManager*& LiteNetLib::NetPacketReader::dyn__manager() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::dyn__manager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_manager"))->offset;
  return *reinterpret_cast<LiteNetLib::NetManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetEvent _evt
LiteNetLib::NetEvent*& LiteNetLib::NetPacketReader::dyn__evt() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::dyn__evt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_evt"))->offset;
  return *reinterpret_cast<LiteNetLib::NetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPacketReader.SetSource
void LiteNetLib::NetPacketReader::SetSource(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::SetSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPacketReader.RecycleInternal
void LiteNetLib::NetPacketReader::RecycleInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::RecycleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacketReader.Recycle
void LiteNetLib::NetPacketReader::Recycle() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketReader::Recycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Recycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: LiteNetLib.NetPacketReader
#include "LiteNetLib/NetPacketReader.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.NetEvent/LiteNetLib.EType Type
LiteNetLib::NetEvent::EType& LiteNetLib::NetEvent::dyn_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_Type");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Type"))->offset;
  return *reinterpret_cast<LiteNetLib::NetEvent::EType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.NetPeer Peer
LiteNetLib::NetPeer*& LiteNetLib::NetEvent::dyn_Peer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_Peer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Peer"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Net.IPEndPoint RemoteEndPoint
System::Net::IPEndPoint*& LiteNetLib::NetEvent::dyn_RemoteEndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_RemoteEndPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RemoteEndPoint"))->offset;
  return *reinterpret_cast<System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object UserData
::Il2CppObject*& LiteNetLib::NetEvent::dyn_UserData() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_UserData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UserData"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Latency
int& LiteNetLib::NetEvent::dyn_Latency() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_Latency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Latency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Net.Sockets.SocketError ErrorCode
System::Net::Sockets::SocketError& LiteNetLib::NetEvent::dyn_ErrorCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_ErrorCode");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ErrorCode"))->offset;
  return *reinterpret_cast<System::Net::Sockets::SocketError*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.DisconnectReason DisconnectReason
LiteNetLib::DisconnectReason& LiteNetLib::NetEvent::dyn_DisconnectReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_DisconnectReason");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DisconnectReason"))->offset;
  return *reinterpret_cast<LiteNetLib::DisconnectReason*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.ConnectionRequest ConnectionRequest
LiteNetLib::ConnectionRequest*& LiteNetLib::NetEvent::dyn_ConnectionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_ConnectionRequest");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionRequest"))->offset;
  return *reinterpret_cast<LiteNetLib::ConnectionRequest**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.DeliveryMethod DeliveryMethod
LiteNetLib::DeliveryMethod& LiteNetLib::NetEvent::dyn_DeliveryMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_DeliveryMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DeliveryMethod"))->offset;
  return *reinterpret_cast<LiteNetLib::DeliveryMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetPacketReader DataReader
LiteNetLib::NetPacketReader*& LiteNetLib::NetEvent::dyn_DataReader() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::dyn_DataReader");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DataReader"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacketReader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetEvent/LiteNetLib.EType
#include "LiteNetLib/NetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Connect
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Connect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Connect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Connect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Connect
void LiteNetLib::NetEvent::EType::_set_Connect(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Connect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Connect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Disconnect
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Disconnect
void LiteNetLib::NetEvent::EType::_set_Disconnect(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Disconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Receive
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Receive() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Receive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Receive"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Receive
void LiteNetLib::NetEvent::EType::_set_Receive(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Receive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Receive", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ReceiveUnconnected
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ReceiveUnconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_ReceiveUnconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ReceiveUnconnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ReceiveUnconnected
void LiteNetLib::NetEvent::EType::_set_ReceiveUnconnected(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_ReceiveUnconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ReceiveUnconnected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Error
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Error"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Error
void LiteNetLib::NetEvent::EType::_set_Error(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionLatencyUpdated
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ConnectionLatencyUpdated() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_ConnectionLatencyUpdated");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ConnectionLatencyUpdated"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionLatencyUpdated
void LiteNetLib::NetEvent::EType::_set_ConnectionLatencyUpdated(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_ConnectionLatencyUpdated");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ConnectionLatencyUpdated", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Broadcast
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType Broadcast
void LiteNetLib::NetEvent::EType::_set_Broadcast(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "Broadcast", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionRequest
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_ConnectionRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_ConnectionRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "ConnectionRequest"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType ConnectionRequest
void LiteNetLib::NetEvent::EType::_set_ConnectionRequest(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_ConnectionRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "ConnectionRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.NetEvent/LiteNetLib.EType MessageDelivered
LiteNetLib::NetEvent::EType LiteNetLib::NetEvent::EType::_get_MessageDelivered() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_get_MessageDelivered");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::NetEvent::EType>("LiteNetLib", "NetEvent/EType", "MessageDelivered"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.NetEvent/LiteNetLib.EType MessageDelivered
void LiteNetLib::NetEvent::EType::_set_MessageDelivered(LiteNetLib::NetEvent::EType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::_set_MessageDelivered");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetEvent/EType", "MessageDelivered", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::NetEvent::EType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetEvent::EType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
#include "LiteNetLib/NetManager_IPEndPointComparer.hpp"
// Including type: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator
#include "LiteNetLib/NetManager_NetPeerEnumerator.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.ConnectionRequest
#include "LiteNetLib/ConnectionRequest.hpp"
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: LiteNetLib.NatPunchModule
#include "LiteNetLib/NatPunchModule.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: LiteNetLib.NetEvent/LiteNetLib.EType
#include "LiteNetLib/NetEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetSocket _socket
LiteNetLib::NetSocket*& LiteNetLib::NetManager::dyn__socket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__socket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_socket"))->offset;
  return *reinterpret_cast<LiteNetLib::NetSocket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _logicThread
System::Threading::Thread*& LiteNetLib::NetManager::dyn__logicThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__logicThread");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_logicThread"))->offset;
  return *reinterpret_cast<System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetEvent> _netEventsQueue
System::Collections::Generic::Queue_1<LiteNetLib::NetEvent*>*& LiteNetLib::NetManager::dyn__netEventsQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__netEventsQueue");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netEventsQueue"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Queue_1<LiteNetLib::NetEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Stack`1<LiteNetLib.NetEvent> _netEventsPool
System::Collections::Generic::Stack_1<LiteNetLib::NetEvent*>*& LiteNetLib::NetManager::dyn__netEventsPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__netEventsPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netEventsPool"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Stack_1<LiteNetLib::NetEvent*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.INetEventListener _netEventListener
LiteNetLib::INetEventListener*& LiteNetLib::NetManager::dyn__netEventListener() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__netEventListener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_netEventListener"))->offset;
  return *reinterpret_cast<LiteNetLib::INetEventListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.IDeliveryEventListener _deliveryEventListener
LiteNetLib::IDeliveryEventListener*& LiteNetLib::NetManager::dyn__deliveryEventListener() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__deliveryEventListener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deliveryEventListener"))->offset;
  return *reinterpret_cast<LiteNetLib::IDeliveryEventListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.NetPeer> _peersDict
System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::NetPeer*>*& LiteNetLib::NetManager::dyn__peersDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__peersDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peersDict"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::NetPeer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.ConnectionRequest> _requestsDict
System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::ConnectionRequest*>*& LiteNetLib::NetManager::dyn__requestsDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__requestsDict");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requestsDict"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::ConnectionRequest*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.ReaderWriterLockSlim _peersLock
System::Threading::ReaderWriterLockSlim*& LiteNetLib::NetManager::dyn__peersLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__peersLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peersLock"))->offset;
  return *reinterpret_cast<System::Threading::ReaderWriterLockSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPeer _headPeer
LiteNetLib::NetPeer*& LiteNetLib::NetManager::dyn__headPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__headPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headPeer"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _connectedPeersCount
int& LiteNetLib::NetManager::dyn__connectedPeersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__connectedPeersCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPeersCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.List`1<LiteNetLib.NetPeer> _connectedPeerListCache
System::Collections::Generic::List_1<LiteNetLib::NetPeer*>*& LiteNetLib::NetManager::dyn__connectedPeerListCache() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__connectedPeerListCache");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectedPeerListCache"))->offset;
  return *reinterpret_cast<System::Collections::Generic::List_1<LiteNetLib::NetPeer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPeer[] _peersArray
::ArrayW<LiteNetLib::NetPeer*>& LiteNetLib::NetManager::dyn__peersArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__peersArray");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peersArray"))->offset;
  return *reinterpret_cast<::ArrayW<LiteNetLib::NetPeer*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly LiteNetLib.Layers.PacketLayerBase _extraPacketLayer
LiteNetLib::Layers::PacketLayerBase*& LiteNetLib::NetManager::dyn__extraPacketLayer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__extraPacketLayer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_extraPacketLayer"))->offset;
  return *reinterpret_cast<LiteNetLib::Layers::PacketLayerBase**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _lastPeerId
int& LiteNetLib::NetManager::dyn__lastPeerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__lastPeerId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lastPeerId"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<System.Int32> _peerIds
System::Collections::Generic::Queue_1<int>*& LiteNetLib::NetManager::dyn__peerIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__peerIds");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_peerIds"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Queue_1<int>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte _channelsCount
uint8_t& LiteNetLib::NetManager::dyn__channelsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn__channelsCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channelsCount"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: readonly LiteNetLib.NetPacketPool NetPacketPool
LiteNetLib::NetPacketPool*& LiteNetLib::NetManager::dyn_NetPacketPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_NetPacketPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetPacketPool"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacketPool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UnconnectedMessagesEnabled
bool& LiteNetLib::NetManager::dyn_UnconnectedMessagesEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_UnconnectedMessagesEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnconnectedMessagesEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean NatPunchEnabled
bool& LiteNetLib::NetManager::dyn_NatPunchEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_NatPunchEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NatPunchEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 UpdateTime
int& LiteNetLib::NetManager::dyn_UpdateTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_UpdateTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UpdateTime"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 PingInterval
int& LiteNetLib::NetManager::dyn_PingInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_PingInterval");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PingInterval"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 DisconnectTimeout
int& LiteNetLib::NetManager::dyn_DisconnectTimeout() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_DisconnectTimeout");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "DisconnectTimeout"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean SimulatePacketLoss
bool& LiteNetLib::NetManager::dyn_SimulatePacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_SimulatePacketLoss");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulatePacketLoss"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean SimulateLatency
bool& LiteNetLib::NetManager::dyn_SimulateLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_SimulateLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulateLatency"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SimulationPacketLossChance
int& LiteNetLib::NetManager::dyn_SimulationPacketLossChance() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_SimulationPacketLossChance");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulationPacketLossChance"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SimulationMinLatency
int& LiteNetLib::NetManager::dyn_SimulationMinLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_SimulationMinLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulationMinLatency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 SimulationMaxLatency
int& LiteNetLib::NetManager::dyn_SimulationMaxLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_SimulationMaxLatency");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "SimulationMaxLatency"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UnsyncedEvents
bool& LiteNetLib::NetManager::dyn_UnsyncedEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_UnsyncedEvents");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnsyncedEvents"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean UnsyncedDeliveryEvent
bool& LiteNetLib::NetManager::dyn_UnsyncedDeliveryEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_UnsyncedDeliveryEvent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UnsyncedDeliveryEvent"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean BroadcastReceiveEnabled
bool& LiteNetLib::NetManager::dyn_BroadcastReceiveEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_BroadcastReceiveEnabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BroadcastReceiveEnabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 ReconnectDelay
int& LiteNetLib::NetManager::dyn_ReconnectDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_ReconnectDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReconnectDelay"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 MaxConnectAttempts
int& LiteNetLib::NetManager::dyn_MaxConnectAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_MaxConnectAttempts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "MaxConnectAttempts"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean ReuseAddress
bool& LiteNetLib::NetManager::dyn_ReuseAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_ReuseAddress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReuseAddress"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetStatistics Statistics
LiteNetLib::NetStatistics*& LiteNetLib::NetManager::dyn_Statistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_Statistics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Statistics"))->offset;
  return *reinterpret_cast<LiteNetLib::NetStatistics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean EnableStatistics
bool& LiteNetLib::NetManager::dyn_EnableStatistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_EnableStatistics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EnableStatistics"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NatPunchModule NatPunchModule
LiteNetLib::NatPunchModule*& LiteNetLib::NetManager::dyn_NatPunchModule() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_NatPunchModule");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NatPunchModule"))->offset;
  return *reinterpret_cast<LiteNetLib::NatPunchModule**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean AutoRecycle
bool& LiteNetLib::NetManager::dyn_AutoRecycle() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_AutoRecycle");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AutoRecycle"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IPv6Enabled
bool& LiteNetLib::NetManager::dyn_IPv6Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_IPv6Enabled");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IPv6Enabled"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Threading.ThreadPriority ThreadPriority
System::Threading::ThreadPriority& LiteNetLib::NetManager::dyn_ThreadPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::dyn_ThreadPriority");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ThreadPriority"))->offset;
  return *reinterpret_cast<System::Threading::ThreadPriority*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetManager.get_IsRunning
bool LiteNetLib::NetManager::get_IsRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_IsRunning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRunning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_LocalPort
int LiteNetLib::NetManager::get_LocalPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_FirstPeer
LiteNetLib::NetPeer* LiteNetLib::NetManager::get_FirstPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_FirstPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FirstPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_ChannelsCount
uint8_t LiteNetLib::NetManager::get_ChannelsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_ChannelsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChannelsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.set_ChannelsCount
void LiteNetLib::NetManager::set_ChannelsCount(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::set_ChannelsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChannelsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeerList
System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* LiteNetLib::NetManager::get_ConnectedPeerList() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_ConnectedPeerList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectedPeerList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<LiteNetLib::NetPeer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.get_ConnectedPeersCount
int LiteNetLib::NetManager::get_ConnectedPeersCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::get_ConnectedPeersCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectedPeersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeerById
LiteNetLib::NetPeer* LiteNetLib::NetManager::GetPeerById(int id) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetPeerById");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeerById", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(id)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, id);
}
// Autogenerated method: LiteNetLib.NetManager.TryGetPeer
bool LiteNetLib::NetManager::TryGetPeer(System::Net::IPEndPoint* endPoint, ByRef<LiteNetLib::NetPeer*> peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::TryGetPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(endPoint), ::il2cpp_utils::ExtractIndependentType<LiteNetLib::NetPeer*&>()})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, endPoint, byref(peer));
}
// Autogenerated method: LiteNetLib.NetManager.AddPeer
void LiteNetLib::NetManager::AddPeer(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::AddPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeer
void LiteNetLib::NetManager::RemovePeer(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::RemovePeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.RemovePeerInternal
void LiteNetLib::NetManager::RemovePeerInternal(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::RemovePeerInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePeerInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.ConnectionLatencyUpdated
void LiteNetLib::NetManager::ConnectionLatencyUpdated(LiteNetLib::NetPeer* fromPeer, int latency) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::ConnectionLatencyUpdated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConnectionLatencyUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPeer), ::il2cpp_utils::ExtractType(latency)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromPeer, latency);
}
// Autogenerated method: LiteNetLib.NetManager.MessageDelivered
void LiteNetLib::NetManager::MessageDelivered(LiteNetLib::NetPeer* fromPeer, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::MessageDelivered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MessageDelivered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPeer), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, fromPeer, userData);
}
// Autogenerated method: LiteNetLib.NetManager.SendRawAndRecycle
int LiteNetLib::NetManager::SendRawAndRecycle(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendRawAndRecycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRawAndRecycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, packet, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendRaw
int LiteNetLib::NetManager::SendRaw(::ArrayW<uint8_t> message, int start, int length, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, message, start, length, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, LiteNetLib::NetPacket* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeerForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeerForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reason), ::il2cpp_utils::ExtractType(socketErrorCode), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, reason, socketErrorCode, eventData);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, bool force, ::ArrayW<uint8_t> data, int start, int count, LiteNetLib::NetPacket* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(reason), ::il2cpp_utils::ExtractType(socketErrorCode), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, reason, socketErrorCode, force, data, start, count, eventData);
}
// Autogenerated method: LiteNetLib.NetManager.CreateEvent
void LiteNetLib::NetManager::CreateEvent(LiteNetLib::NetEvent::EType type, LiteNetLib::NetPeer* peer, System::Net::IPEndPoint* remoteEndPoint, System::Net::Sockets::SocketError errorCode, int latency, LiteNetLib::DisconnectReason disconnectReason, LiteNetLib::ConnectionRequest* connectionRequest, LiteNetLib::DeliveryMethod deliveryMethod, LiteNetLib::NetPacket* readerSource, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::CreateEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(latency), ::il2cpp_utils::ExtractType(disconnectReason), ::il2cpp_utils::ExtractType(connectionRequest), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(readerSource), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, type, peer, remoteEndPoint, errorCode, latency, disconnectReason, connectionRequest, deliveryMethod, readerSource, userData);
}
// Autogenerated method: LiteNetLib.NetManager.ProcessEvent
void LiteNetLib::NetManager::ProcessEvent(LiteNetLib::NetEvent* evt) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::ProcessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
}
// Autogenerated method: LiteNetLib.NetManager.RecycleEvent
void LiteNetLib::NetManager::RecycleEvent(LiteNetLib::NetEvent* evt) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::RecycleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
}
// Autogenerated method: LiteNetLib.NetManager.UpdateLogic
void LiteNetLib::NetManager::UpdateLogic() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::UpdateLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::NetManager::LiteNetLib_INetSocketListener_OnMessageReceived(::ArrayW<uint8_t> data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::LiteNetLib.INetSocketListener.OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.INetSocketListener.OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.OnConnectionSolved
LiteNetLib::NetPeer* LiteNetLib::NetManager::OnConnectionSolved(LiteNetLib::ConnectionRequest* request, ::ArrayW<uint8_t> rejectData, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::OnConnectionSolved");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnConnectionSolved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(request), ::il2cpp_utils::ExtractType(rejectData), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, request, rejectData, start, length);
}
// Autogenerated method: LiteNetLib.NetManager.GetNextPeerId
int LiteNetLib::NetManager::GetNextPeerId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetNextPeerId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNextPeerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.ProcessConnectRequest
void LiteNetLib::NetManager::ProcessConnectRequest(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPeer* netPeer, LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::ProcessConnectRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(netPeer), ::il2cpp_utils::ExtractType(connRequest)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, remoteEndPoint, netPeer, connRequest);
}
// Autogenerated method: LiteNetLib.NetManager.DataReceived
void LiteNetLib::NetManager::DataReceived(::ArrayW<uint8_t> reusableBuffer, int count, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DataReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DataReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reusableBuffer), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, reusableBuffer, count, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.CreateReceiveEvent
void LiteNetLib::NetManager::CreateReceiveEvent(LiteNetLib::NetPacket* packet, LiteNetLib::DeliveryMethod method, LiteNetLib::NetPeer* fromPeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::CreateReceiveEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateReceiveEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet), ::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(fromPeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet, method, fromPeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, options);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.SendToAll
void LiteNetLib::NetManager::SendToAll(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendToAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendToAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(options), ::il2cpp_utils::ExtractType(excludePeer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, options, excludePeer);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(::StringW addressIPv4, ::StringW addressIPv6, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port);
}
// Autogenerated method: LiteNetLib.NetManager.Start
bool LiteNetLib::NetManager::Start(int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::ArrayW<uint8_t> message, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, message, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, writer, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendUnconnectedMessage
bool LiteNetLib::NetManager::SendUnconnectedMessage(::ArrayW<uint8_t> message, int start, int length, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendUnconnectedMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnconnectedMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, message, start, length, remoteEndPoint);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(LiteNetLib::Utils::NetDataWriter* writer, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, writer, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::ArrayW<uint8_t> data, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, port);
}
// Autogenerated method: LiteNetLib.NetManager.SendBroadcast
bool LiteNetLib::NetManager::SendBroadcast(::ArrayW<uint8_t> data, int start, int length, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, start, length, port);
}
// Autogenerated method: LiteNetLib.NetManager.Flush
void LiteNetLib::NetManager::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.PollEvents
void LiteNetLib::NetManager::PollEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::PollEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::StringW address, int port, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, address, port, key);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(::StringW address, int port, LiteNetLib::Utils::NetDataWriter* connectionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(address), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(connectionData)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, address, port, connectionData);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(System::Net::IPEndPoint* target, ::StringW key) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, target, key);
}
// Autogenerated method: LiteNetLib.NetManager.Connect
LiteNetLib::NetPeer* LiteNetLib::NetManager::Connect(System::Net::IPEndPoint* target, LiteNetLib::Utils::NetDataWriter* connectionData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Connect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Connect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(connectionData)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method, target, connectionData);
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.Stop
void LiteNetLib::NetManager::Stop(bool sendDisconnectMessages) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sendDisconnectMessages)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sendDisconnectMessages);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersCount
int LiteNetLib::NetManager::GetPeersCount(LiteNetLib::ConnectionState peerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetPeersCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeersCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peerState)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, peerState);
}
// Autogenerated method: LiteNetLib.NetManager.GetPeersNonAlloc
void LiteNetLib::NetManager::GetPeersNonAlloc(System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* peers, LiteNetLib::ConnectionState peerState) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetPeersNonAlloc");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPeersNonAlloc", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peers), ::il2cpp_utils::ExtractType(peerState)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peers, peerState);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectAll
void LiteNetLib::NetManager::DisconnectAll(::ArrayW<uint8_t> data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, count);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeerForce
void LiteNetLib::NetManager::DisconnectPeerForce(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeerForce");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeerForce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, ::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, data);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, writer);
}
// Autogenerated method: LiteNetLib.NetManager.DisconnectPeer
void LiteNetLib::NetManager::DisconnectPeer(LiteNetLib::NetPeer* peer, ::ArrayW<uint8_t> data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::DisconnectPeer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectPeer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peer), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, peer, data, start, count);
}
// Autogenerated method: LiteNetLib.NetManager.GetEnumerator
LiteNetLib::NetManager::NetPeerEnumerator LiteNetLib::NetManager::GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::GetEnumerator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetManager::NetPeerEnumerator, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator
System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>* LiteNetLib::NetManager::System_Collections_Generic_IEnumerable$LiteNetLib_NetPeer$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* LiteNetLib::NetManager::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
#include "LiteNetLib/NetManager_IPEndPointComparer.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer.Equals
bool LiteNetLib::NetManager::IPEndPointComparer::Equals(System::Net::IPEndPoint* x, System::Net::IPEndPoint* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::IPEndPointComparer::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x, y);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer.GetHashCode
int LiteNetLib::NetManager::IPEndPointComparer::GetHashCode(System::Net::IPEndPoint* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::IPEndPointComparer::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator
#include "LiteNetLib/NetManager_NetPeerEnumerator.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPeer _initialPeer
LiteNetLib::NetPeer*& LiteNetLib::NetManager::NetPeerEnumerator::dyn__initialPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::dyn__initialPeer");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_initialPeer"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPeer _p
LiteNetLib::NetPeer*& LiteNetLib::NetManager::NetPeerEnumerator::dyn__p() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::dyn__p");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_p"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.get_Current
LiteNetLib::NetPeer* LiteNetLib::NetManager::NetPeerEnumerator::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPeer*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.System.Collections.IEnumerator.get_Current
::Il2CppObject* LiteNetLib::NetManager::NetPeerEnumerator::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator..ctor
LiteNetLib::NetManager::NetPeerEnumerator::NetPeerEnumerator(LiteNetLib::NetPeer* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::.ctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, p);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.Dispose
void LiteNetLib::NetManager::NetPeerEnumerator::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.MoveNext
bool LiteNetLib::NetManager::NetPeerEnumerator::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetManager/LiteNetLib.NetPeerEnumerator.Reset
void LiteNetLib::NetManager::NetPeerEnumerator::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.PacketProperty
#include "LiteNetLib/PacketProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Unreliable
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Unreliable() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Unreliable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Unreliable"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Unreliable
void LiteNetLib::PacketProperty::_set_Unreliable(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Unreliable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Unreliable", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Channeled
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Channeled() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Channeled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Channeled"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Channeled
void LiteNetLib::PacketProperty::_set_Channeled(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Channeled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Channeled", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Ack
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Ack() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Ack");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Ack"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Ack
void LiteNetLib::PacketProperty::_set_Ack(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Ack");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Ack", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Ping
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Ping() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Ping");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Ping"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Ping
void LiteNetLib::PacketProperty::_set_Ping(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Ping");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Ping", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Pong
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Pong() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Pong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Pong"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Pong
void LiteNetLib::PacketProperty::_set_Pong(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Pong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Pong", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ConnectRequest
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ConnectRequest() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_ConnectRequest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ConnectRequest"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ConnectRequest
void LiteNetLib::PacketProperty::_set_ConnectRequest(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_ConnectRequest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ConnectRequest", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ConnectAccept
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ConnectAccept() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_ConnectAccept");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ConnectAccept"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ConnectAccept
void LiteNetLib::PacketProperty::_set_ConnectAccept(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_ConnectAccept");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ConnectAccept", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Disconnect
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Disconnect
void LiteNetLib::PacketProperty::_set_Disconnect(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Disconnect", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty UnconnectedMessage
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_UnconnectedMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_UnconnectedMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "UnconnectedMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty UnconnectedMessage
void LiteNetLib::PacketProperty::_set_UnconnectedMessage(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_UnconnectedMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "UnconnectedMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty MtuCheck
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_MtuCheck() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_MtuCheck");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "MtuCheck"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty MtuCheck
void LiteNetLib::PacketProperty::_set_MtuCheck(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_MtuCheck");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "MtuCheck", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty MtuOk
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_MtuOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_MtuOk");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "MtuOk"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty MtuOk
void LiteNetLib::PacketProperty::_set_MtuOk(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_MtuOk");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "MtuOk", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Broadcast
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Broadcast() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Broadcast");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Broadcast"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Broadcast
void LiteNetLib::PacketProperty::_set_Broadcast(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Broadcast");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Broadcast", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Merged
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Merged() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Merged");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Merged"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Merged
void LiteNetLib::PacketProperty::_set_Merged(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Merged");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Merged", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty ShutdownOk
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_ShutdownOk() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_ShutdownOk");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "ShutdownOk"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty ShutdownOk
void LiteNetLib::PacketProperty::_set_ShutdownOk(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_ShutdownOk");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "ShutdownOk", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty PeerNotFound
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_PeerNotFound() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_PeerNotFound");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "PeerNotFound"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty PeerNotFound
void LiteNetLib::PacketProperty::_set_PeerNotFound(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_PeerNotFound");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "PeerNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty InvalidProtocol
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_InvalidProtocol() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_InvalidProtocol");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "InvalidProtocol"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty InvalidProtocol
void LiteNetLib::PacketProperty::_set_InvalidProtocol(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_InvalidProtocol");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "InvalidProtocol", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty NatMessage
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_NatMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_NatMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "NatMessage"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty NatMessage
void LiteNetLib::PacketProperty::_set_NatMessage(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_NatMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "NatMessage", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.PacketProperty Empty
LiteNetLib::PacketProperty LiteNetLib::PacketProperty::_get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_get_Empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::PacketProperty>("LiteNetLib", "PacketProperty", "Empty"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.PacketProperty Empty
void LiteNetLib::PacketProperty::_set_Empty(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::_set_Empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "PacketProperty", "Empty", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t& LiteNetLib::PacketProperty::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::PacketProperty::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 LastProperty
int LiteNetLib::NetPacket::_get_LastProperty() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::_get_LastProperty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPacket", "LastProperty"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 LastProperty
void LiteNetLib::NetPacket::_set_LastProperty(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::_set_LastProperty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPacket", "LastProperty", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte[] RawData
::ArrayW<uint8_t>& LiteNetLib::NetPacket::dyn_RawData() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::dyn_RawData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "RawData"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 Size
int& LiteNetLib::NetPacket::dyn_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::dyn_Size");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Size"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object UserData
::Il2CppObject*& LiteNetLib::NetPacket::dyn_UserData() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::dyn_UserData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UserData"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPacket.get_Property
LiteNetLib::PacketProperty LiteNetLib::NetPacket::get_Property() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_Property");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Property", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::PacketProperty, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_Property
void LiteNetLib::NetPacket::set_Property(LiteNetLib::PacketProperty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_Property");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Property", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_ConnectionNumber
uint8_t LiteNetLib::NetPacket::get_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_ConnectionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_ConnectionNumber
void LiteNetLib::NetPacket::set_ConnectionNumber(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_ConnectionNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConnectionNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_Sequence
uint16_t LiteNetLib::NetPacket::get_Sequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_Sequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Sequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_Sequence
void LiteNetLib::NetPacket::set_Sequence(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_Sequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Sequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_IsFragmented
bool LiteNetLib::NetPacket::get_IsFragmented() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_IsFragmented");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFragmented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.get_ChannelId
uint8_t LiteNetLib::NetPacket::get_ChannelId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_ChannelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChannelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_ChannelId
void LiteNetLib::NetPacket::set_ChannelId(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_ChannelId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChannelId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentId
uint16_t LiteNetLib::NetPacket::get_FragmentId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_FragmentId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentId
void LiteNetLib::NetPacket::set_FragmentId(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_FragmentId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentPart
uint16_t LiteNetLib::NetPacket::get_FragmentPart() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_FragmentPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentPart
void LiteNetLib::NetPacket::set_FragmentPart(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_FragmentPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket.get_FragmentsTotal
uint16_t LiteNetLib::NetPacket::get_FragmentsTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::get_FragmentsTotal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FragmentsTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.set_FragmentsTotal
void LiteNetLib::NetPacket::set_FragmentsTotal(uint16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::set_FragmentsTotal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FragmentsTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPacket..cctor
void LiteNetLib::NetPacket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetPacket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.MarkFragmented
void LiteNetLib::NetPacket::MarkFragmented() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::MarkFragmented");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkFragmented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.GetHeaderSize
int LiteNetLib::NetPacket::GetHeaderSize(LiteNetLib::PacketProperty property) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::GetHeaderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetPacket", "GetHeaderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, property);
}
// Autogenerated method: LiteNetLib.NetPacket.GetHeaderSize
int LiteNetLib::NetPacket::GetHeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::GetHeaderSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeaderSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPacket.FromBytes
bool LiteNetLib::NetPacket::FromBytes(::ArrayW<uint8_t> data, int start, int packetSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacket::FromBytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FromBytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(packetSize)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, start, packetSize);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: System.Net.SocketAddress
#include "System/Net/SocketAddress.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 HeaderSize
int LiteNetLib::NetConnectRequestPacket::_get_HeaderSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::_get_HeaderSize");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConnectRequestPacket", "HeaderSize"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 HeaderSize
void LiteNetLib::NetConnectRequestPacket::_set_HeaderSize(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::_set_HeaderSize");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConnectRequestPacket", "HeaderSize", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int64 ConnectionTime
int64_t& LiteNetLib::NetConnectRequestPacket::dyn_ConnectionTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::dyn_ConnectionTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte ConnectionNumber
uint8_t& LiteNetLib::NetConnectRequestPacket::dyn_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::dyn_ConnectionNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionNumber"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte[] TargetAddress
::ArrayW<uint8_t>& LiteNetLib::NetConnectRequestPacket::dyn_TargetAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::dyn_TargetAddress");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TargetAddress"))->offset;
  return *reinterpret_cast<::ArrayW<uint8_t>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.Utils.NetDataReader Data
LiteNetLib::Utils::NetDataReader*& LiteNetLib::NetConnectRequestPacket::dyn_Data() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::dyn_Data");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Data"))->offset;
  return *reinterpret_cast<LiteNetLib::Utils::NetDataReader**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.GetProtocolId
int LiteNetLib::NetConnectRequestPacket::GetProtocolId(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::GetProtocolId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "GetProtocolId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.FromData
LiteNetLib::NetConnectRequestPacket* LiteNetLib::NetConnectRequestPacket::FromData(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::FromData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "FromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetConnectRequestPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectRequestPacket.Make
LiteNetLib::NetPacket* LiteNetLib::NetConnectRequestPacket::Make(LiteNetLib::Utils::NetDataWriter* connectData, System::Net::SocketAddress* addressBytes, int64_t connectId) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::Make");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectRequestPacket", "Make", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectData), ::il2cpp_utils::ExtractType(addressBytes), ::il2cpp_utils::ExtractType(connectId)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, connectData, addressBytes, connectId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetConnectAcceptPacket
#include "LiteNetLib/NetConnectAcceptPacket.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 Size
int LiteNetLib::NetConnectAcceptPacket::_get_Size() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::_get_Size");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetConnectAcceptPacket", "Size"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 Size
void LiteNetLib::NetConnectAcceptPacket::_set_Size(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::_set_Size");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetConnectAcceptPacket", "Size", value));
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int64 ConnectionId
int64_t& LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionId"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Byte ConnectionNumber
uint8_t& LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::dyn_ConnectionNumber");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ConnectionNumber"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Boolean IsReusedPeer
bool& LiteNetLib::NetConnectAcceptPacket::dyn_IsReusedPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::dyn_IsReusedPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsReusedPeer"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetConnectAcceptPacket.FromData
LiteNetLib::NetConnectAcceptPacket* LiteNetLib::NetConnectAcceptPacket::FromData(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::FromData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectAcceptPacket", "FromData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetConnectAcceptPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetConnectAcceptPacket.Make
LiteNetLib::NetPacket* LiteNetLib::NetConnectAcceptPacket::Make(int64_t connectId, uint8_t connectNum, bool reusedPeer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::Make");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetConnectAcceptPacket", "Make", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectId), ::il2cpp_utils::ExtractType(connectNum), ::il2cpp_utils::ExtractType(reusedPeer)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPacket*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, connectId, connectNum, reusedPeer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: System.Threading.ReaderWriterLockSlim
#include "System/Threading/ReaderWriterLockSlim.hpp"
// Including type: LiteNetLib.PacketProperty
#include "LiteNetLib/PacketProperty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket[] _pool
::ArrayW<LiteNetLib::NetPacket*>& LiteNetLib::NetPacketPool::dyn__pool() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::dyn__pool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pool"))->offset;
  return *reinterpret_cast<::ArrayW<LiteNetLib::NetPacket*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Threading.ReaderWriterLockSlim _lock
System::Threading::ReaderWriterLockSlim*& LiteNetLib::NetPacketPool::dyn__lock() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::dyn__lock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_lock"))->offset;
  return *reinterpret_cast<System::Threading::ReaderWriterLockSlim**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _count
int& LiteNetLib::NetPacketPool::dyn__count() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::dyn__count");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_count"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithData
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithData(LiteNetLib::PacketProperty property, ::ArrayW<uint8_t> data, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetWithData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, property, data, start, length);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithProperty
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithProperty(LiteNetLib::PacketProperty property, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetWithProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property), ::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, property, size);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetWithProperty
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetWithProperty(LiteNetLib::PacketProperty property) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetWithProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWithProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(property)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, property);
}
// Autogenerated method: LiteNetLib.NetPacketPool.GetPacket
LiteNetLib::NetPacket* LiteNetLib::NetPacketPool::GetPacket(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::GetPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::NetPacket*, false>(this, ___internal__method, size);
}
// Autogenerated method: LiteNetLib.NetPacketPool.Recycle
void LiteNetLib::NetPacketPool::Recycle(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPacketPool::Recycle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Recycle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Outgoing
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Outgoing() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Outgoing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Outgoing"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Outgoing
void LiteNetLib::ConnectionState::_set_Outgoing(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Outgoing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Outgoing", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Connected
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Connected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Connected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Connected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Connected
void LiteNetLib::ConnectionState::_set_Connected(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Connected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Connected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState ShutdownRequested
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_ShutdownRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_ShutdownRequested");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "ShutdownRequested"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState ShutdownRequested
void LiteNetLib::ConnectionState::_set_ShutdownRequested(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_ShutdownRequested");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "ShutdownRequested", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Disconnected
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Disconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Disconnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Disconnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Disconnected
void LiteNetLib::ConnectionState::_set_Disconnected(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Disconnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Disconnected", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectionState Any
LiteNetLib::ConnectionState LiteNetLib::ConnectionState::_get_Any() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_get_Any");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectionState>("LiteNetLib", "ConnectionState", "Any"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectionState Any
void LiteNetLib::ConnectionState::_set_Any(LiteNetLib::ConnectionState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::_set_Any");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectionState", "Any", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Byte value__
uint8_t& LiteNetLib::ConnectionState::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionState::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ConnectRequestResult
#include "LiteNetLib/ConnectRequestResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult None
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult None
void LiteNetLib::ConnectRequestResult::_set_None(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult P2PLose
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_P2PLose() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_P2PLose");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "P2PLose"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult P2PLose
void LiteNetLib::ConnectRequestResult::_set_P2PLose(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_P2PLose");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "P2PLose", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult Reconnection
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_Reconnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_Reconnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "Reconnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult Reconnection
void LiteNetLib::ConnectRequestResult::_set_Reconnection(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_Reconnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "Reconnection", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ConnectRequestResult NewConnection
LiteNetLib::ConnectRequestResult LiteNetLib::ConnectRequestResult::_get_NewConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_get_NewConnection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ConnectRequestResult>("LiteNetLib", "ConnectRequestResult", "NewConnection"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ConnectRequestResult NewConnection
void LiteNetLib::ConnectRequestResult::_set_NewConnection(LiteNetLib::ConnectRequestResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::_set_NewConnection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ConnectRequestResult", "NewConnection", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::ConnectRequestResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectRequestResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.DisconnectResult
#include "LiteNetLib/DisconnectResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult None
LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult None
void LiteNetLib::DisconnectResult::_set_None(LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult Reject
LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_Reject() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_get_Reject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "Reject"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult Reject
void LiteNetLib::DisconnectResult::_set_Reject(LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_set_Reject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "Reject", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.DisconnectResult Disconnect
LiteNetLib::DisconnectResult LiteNetLib::DisconnectResult::_get_Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_get_Disconnect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::DisconnectResult>("LiteNetLib", "DisconnectResult", "Disconnect"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.DisconnectResult Disconnect
void LiteNetLib::DisconnectResult::_set_Disconnect(LiteNetLib::DisconnectResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::_set_Disconnect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "DisconnectResult", "Disconnect", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::DisconnectResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::DisconnectResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ShutdownResult
#include "LiteNetLib/ShutdownResult.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult None
LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "None"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult None
void LiteNetLib::ShutdownResult::_set_None(LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "None", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult Success
LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "Success"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult Success
void LiteNetLib::ShutdownResult::_set_Success(LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.ShutdownResult WasConnected
LiteNetLib::ShutdownResult LiteNetLib::ShutdownResult::_get_WasConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_get_WasConnected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::ShutdownResult>("LiteNetLib", "ShutdownResult", "WasConnected"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.ShutdownResult WasConnected
void LiteNetLib::ShutdownResult::_set_WasConnected(LiteNetLib::ShutdownResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::_set_WasConnected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ShutdownResult", "WasConnected", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::ShutdownResult::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ShutdownResult::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPeer/LiteNetLib.IncomingFragments
#include "LiteNetLib/NetPeer_IncomingFragments.hpp"
// Including type: System.Diagnostics.Stopwatch
#include "System/Diagnostics/Stopwatch.hpp"
// Including type: LiteNetLib.NetPacketPool
#include "LiteNetLib/NetPacketPool.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.NetConnectAcceptPacket
#include "LiteNetLib/NetConnectAcceptPacket.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: LiteNetLib.DisconnectResult
#include "LiteNetLib/DisconnectResult.hpp"
// Including type: LiteNetLib.ShutdownResult
#include "LiteNetLib/ShutdownResult.hpp"
// Including type: LiteNetLib.ConnectRequestResult
#include "LiteNetLib/ConnectRequestResult.hpp"
// Including type: LiteNetLib.NetConnectRequestPacket
#include "LiteNetLib/NetConnectRequestPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 MtuCheckDelay
int LiteNetLib::NetPeer::_get_MtuCheckDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_get_MtuCheckDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MtuCheckDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MtuCheckDelay
void LiteNetLib::NetPeer::_set_MtuCheckDelay(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_set_MtuCheckDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MtuCheckDelay", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 MaxMtuCheckAttempts
int LiteNetLib::NetPeer::_get_MaxMtuCheckAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_get_MaxMtuCheckAttempts");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 MaxMtuCheckAttempts
void LiteNetLib::NetPeer::_set_MaxMtuCheckAttempts(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_set_MaxMtuCheckAttempts");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "MaxMtuCheckAttempts", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 ShutdownDelay
int LiteNetLib::NetPeer::_get_ShutdownDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_get_ShutdownDelay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetPeer", "ShutdownDelay"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 ShutdownDelay
void LiteNetLib::NetPeer::_set_ShutdownDelay(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::_set_ShutdownDelay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetPeer", "ShutdownDelay", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _rtt
int& LiteNetLib::NetPeer::dyn__rtt() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__rtt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rtt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _avgRtt
int& LiteNetLib::NetPeer::dyn__avgRtt() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__avgRtt");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_avgRtt"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _rttCount
int& LiteNetLib::NetPeer::dyn__rttCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__rttCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rttCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Double _resendDelay
double& LiteNetLib::NetPeer::dyn__resendDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__resendDelay");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_resendDelay"))->offset;
  return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _pingSendTimer
int& LiteNetLib::NetPeer::dyn__pingSendTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__pingSendTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pingSendTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _rttResetTimer
int& LiteNetLib::NetPeer::dyn__rttResetTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__rttResetTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rttResetTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Diagnostics.Stopwatch _pingTimer
System::Diagnostics::Stopwatch*& LiteNetLib::NetPeer::dyn__pingTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__pingTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pingTimer"))->offset;
  return *reinterpret_cast<System::Diagnostics::Stopwatch**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _timeSinceLastPacket
int& LiteNetLib::NetPeer::dyn__timeSinceLastPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__timeSinceLastPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeSinceLastPacket"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _remoteDelta
int64_t& LiteNetLib::NetPeer::dyn__remoteDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__remoteDelta");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteDelta"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacketPool _packetPool
LiteNetLib::NetPacketPool*& LiteNetLib::NetPeer::dyn__packetPool() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__packetPool");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetPool"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacketPool**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _flushLock
::Il2CppObject*& LiteNetLib::NetPeer::dyn__flushLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__flushLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_flushLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _sendLock
::Il2CppObject*& LiteNetLib::NetPeer::dyn__sendLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__sendLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_sendLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _shutdownLock
::Il2CppObject*& LiteNetLib::NetPeer::dyn__shutdownLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__shutdownLock");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shutdownLock"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: LiteNetLib.NetPeer NextPeer
LiteNetLib::NetPeer*& LiteNetLib::NetPeer::dyn_NextPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn_NextPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NextPeer"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: LiteNetLib.NetPeer PrevPeer
LiteNetLib::NetPeer*& LiteNetLib::NetPeer::dyn_PrevPeer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn_PrevPeer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "PrevPeer"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPeer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetPacket> _unreliableChannel
System::Collections::Generic::Queue_1<LiteNetLib::NetPacket*>*& LiteNetLib::NetPeer::dyn__unreliableChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__unreliableChannel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_unreliableChannel"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Queue_1<LiteNetLib::NetPacket*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.BaseChannel[] _channels
::ArrayW<LiteNetLib::BaseChannel*>& LiteNetLib::NetPeer::dyn__channels() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__channels");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_channels"))->offset;
  return *reinterpret_cast<::ArrayW<LiteNetLib::BaseChannel*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.BaseChannel _headChannel
LiteNetLib::BaseChannel*& LiteNetLib::NetPeer::dyn__headChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__headChannel");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_headChannel"))->offset;
  return *reinterpret_cast<LiteNetLib::BaseChannel**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtu
int& LiteNetLib::NetPeer::dyn__mtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mtu");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtu"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtuIdx
int& LiteNetLib::NetPeer::dyn__mtuIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mtuIdx");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuIdx"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _finishMtu
bool& LiteNetLib::NetPeer::dyn__finishMtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__finishMtu");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_finishMtu"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtuCheckTimer
int& LiteNetLib::NetPeer::dyn__mtuCheckTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mtuCheckTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuCheckTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mtuCheckAttempts
int& LiteNetLib::NetPeer::dyn__mtuCheckAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mtuCheckAttempts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuCheckAttempts"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Object _mtuMutex
::Il2CppObject*& LiteNetLib::NetPeer::dyn__mtuMutex() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mtuMutex");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mtuMutex"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.UInt16 _fragmentId
uint16_t& LiteNetLib::NetPeer::dyn__fragmentId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__fragmentId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_fragmentId"))->offset;
  return *reinterpret_cast<uint16_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.UInt16,LiteNetLib.NetPeer/LiteNetLib.IncomingFragments> _holdedFragments
System::Collections::Generic::Dictionary_2<uint16_t, LiteNetLib::NetPeer::IncomingFragments*>*& LiteNetLib::NetPeer::dyn__holdedFragments() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__holdedFragments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_holdedFragments"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<uint16_t, LiteNetLib::NetPeer::IncomingFragments*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.UInt16,System.UInt16> _deliveredFramgnets
System::Collections::Generic::Dictionary_2<uint16_t, uint16_t>*& LiteNetLib::NetPeer::dyn__deliveredFramgnets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__deliveredFramgnets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deliveredFramgnets"))->offset;
  return *reinterpret_cast<System::Collections::Generic::Dictionary_2<uint16_t, uint16_t>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _mergeData
LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__mergeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mergeData");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mergeData"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mergePos
int& LiteNetLib::NetPeer::dyn__mergePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mergePos");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mergePos"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _mergeCount
int& LiteNetLib::NetPeer::dyn__mergeCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__mergeCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mergeCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _connectAttempts
int& LiteNetLib::NetPeer::dyn__connectAttempts() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__connectAttempts");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectAttempts"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _connectTimer
int& LiteNetLib::NetPeer::dyn__connectTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__connectTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _connectTime
int64_t& LiteNetLib::NetPeer::dyn__connectTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__connectTime");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectTime"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Byte _connectNum
uint8_t& LiteNetLib::NetPeer::dyn__connectNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__connectNum");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectNum"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.ConnectionState _connectionState
LiteNetLib::ConnectionState& LiteNetLib::NetPeer::dyn__connectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__connectionState");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectionState"))->offset;
  return *reinterpret_cast<LiteNetLib::ConnectionState*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private LiteNetLib.NetPacket _shutdownPacket
LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__shutdownPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__shutdownPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shutdownPacket"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _shutdownTimer
int& LiteNetLib::NetPeer::dyn__shutdownTimer() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__shutdownTimer");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_shutdownTimer"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _pingPacket
LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__pingPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__pingPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pingPacket"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _pongPacket
LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__pongPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__pongPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pongPacket"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _connectRequestPacket
LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__connectRequestPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__connectRequestPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectRequestPacket"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _connectAcceptPacket
LiteNetLib::NetPacket*& LiteNetLib::NetPeer::dyn__connectAcceptPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn__connectAcceptPacket");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_connectAcceptPacket"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Net.IPEndPoint EndPoint
System::Net::IPEndPoint*& LiteNetLib::NetPeer::dyn_EndPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn_EndPoint");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "EndPoint"))->offset;
  return *reinterpret_cast<System::Net::IPEndPoint**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetManager NetManager
LiteNetLib::NetManager*& LiteNetLib::NetPeer::dyn_NetManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn_NetManager");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "NetManager"))->offset;
  return *reinterpret_cast<LiteNetLib::NetManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly System.Int32 Id
int& LiteNetLib::NetPeer::dyn_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn_Id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Id"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Object Tag
::Il2CppObject*& LiteNetLib::NetPeer::dyn_Tag() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn_Tag");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Tag"))->offset;
  return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public readonly LiteNetLib.NetStatistics Statistics
LiteNetLib::NetStatistics*& LiteNetLib::NetPeer::dyn_Statistics() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::dyn_Statistics");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Statistics"))->offset;
  return *reinterpret_cast<LiteNetLib::NetStatistics**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionNum
uint8_t LiteNetLib::NetPeer::get_ConnectionNum() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ConnectionNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<uint8_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.set_ConnectionNum
void LiteNetLib::NetPeer::set_ConnectionNum(uint8_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::set_ConnectionNum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConnectionNum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectionState
LiteNetLib::ConnectionState LiteNetLib::NetPeer::get_ConnectionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ConnectionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::ConnectionState, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ConnectTime
int64_t LiteNetLib::NetPeer::get_ConnectTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ConnectTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConnectTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_Ping
int LiteNetLib::NetPeer::get_Ping() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_Ping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_Mtu
int LiteNetLib::NetPeer::get_Mtu() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_Mtu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Mtu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteTimeDelta
int64_t LiteNetLib::NetPeer::get_RemoteTimeDelta() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_RemoteTimeDelta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RemoteTimeDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_RemoteUtcTime
System::DateTime LiteNetLib::NetPeer::get_RemoteUtcTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_RemoteUtcTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RemoteUtcTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_TimeSinceLastPacket
int LiteNetLib::NetPeer::get_TimeSinceLastPacket() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_TimeSinceLastPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TimeSinceLastPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.get_ResendDelay
double LiteNetLib::NetPeer::get_ResendDelay() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::get_ResendDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ResendDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.SetMtu
void LiteNetLib::NetPeer::SetMtu(int mtuIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SetMtu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMtu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mtuIdx)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, mtuIdx);
}
// Autogenerated method: LiteNetLib.NetPeer.GetPacketsCountInReliableQueue
int LiteNetLib::NetPeer::GetPacketsCountInReliableQueue(uint8_t channelNumber, bool ordered) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::GetPacketsCountInReliableQueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPacketsCountInReliableQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(ordered)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, channelNumber, ordered);
}
// Autogenerated method: LiteNetLib.NetPeer.CreateChannel
LiteNetLib::BaseChannel* LiteNetLib::NetPeer::CreateChannel(uint8_t idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::CreateChannel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::BaseChannel*, false>(this, ___internal__method, idx);
}
// Autogenerated method: LiteNetLib.NetPeer.Reject
void LiteNetLib::NetPeer::Reject(int64_t connectionId, uint8_t connectionNumber, ::ArrayW<uint8_t> data, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Reject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionId), ::il2cpp_utils::ExtractType(connectionNumber), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, connectionId, connectionNumber, data, start, length);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectAccept
bool LiteNetLib::NetPeer::ProcessConnectAccept(LiteNetLib::NetConnectAcceptPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessConnectAccept");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectAccept", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.GetMaxSinglePacketSize
int LiteNetLib::NetPeer::GetMaxSinglePacketSize(LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::GetMaxSinglePacketSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaxSinglePacketSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(options)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, options);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::ArrayW<uint8_t> data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.SendWithDeliveryEvent
void LiteNetLib::NetPeer::SendWithDeliveryEvent(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendWithDeliveryEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendWithDeliveryEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataWriter, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(LiteNetLib::Utils::NetDataWriter* dataWriter, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataWriter, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, int start, int length, LiteNetLib::DeliveryMethod options) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, options);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataWriter), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataWriter, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.Send
void LiteNetLib::NetPeer::Send(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod);
}
// Autogenerated method: LiteNetLib.NetPeer.SendInternal
void LiteNetLib::NetPeer::SendInternal(::ArrayW<uint8_t> data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(channelNumber), ::il2cpp_utils::ExtractType(deliveryMethod), ::il2cpp_utils::ExtractType(userData)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, length, channelNumber, deliveryMethod, userData);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::ArrayW<uint8_t> data) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect(::ArrayW<uint8_t> data, int start, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, start, count);
}
// Autogenerated method: LiteNetLib.NetPeer.Disconnect
void LiteNetLib::NetPeer::Disconnect() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Disconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessDisconnect
LiteNetLib::DisconnectResult LiteNetLib::NetPeer::ProcessDisconnect(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessDisconnect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessDisconnect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::DisconnectResult, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.Shutdown
LiteNetLib::ShutdownResult LiteNetLib::NetPeer::Shutdown(::ArrayW<uint8_t> data, int start, int length, bool force) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Shutdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Shutdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(force)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::ShutdownResult, false>(this, ___internal__method, data, start, length, force);
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateRoundTripTime
void LiteNetLib::NetPeer::UpdateRoundTripTime(int roundTripTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::UpdateRoundTripTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRoundTripTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(roundTripTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, roundTripTime);
}
// Autogenerated method: LiteNetLib.NetPeer.AddReliablePacket
void LiteNetLib::NetPeer::AddReliablePacket(LiteNetLib::DeliveryMethod method, LiteNetLib::NetPacket* p) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::AddReliablePacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddReliablePacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(p)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, method, p);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessMtuPacket
void LiteNetLib::NetPeer::ProcessMtuPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessMtuPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMtuPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.UpdateMtuLogic
void LiteNetLib::NetPeer::UpdateMtuLogic(int deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::UpdateMtuLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMtuLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessConnectRequest
LiteNetLib::ConnectRequestResult LiteNetLib::NetPeer::ProcessConnectRequest(LiteNetLib::NetConnectRequestPacket* connRequest) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessConnectRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessConnectRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connRequest)})));
  return ::il2cpp_utils::RunMethodRethrow<LiteNetLib::ConnectRequestResult, false>(this, ___internal__method, connRequest);
}
// Autogenerated method: LiteNetLib.NetPeer.ProcessPacket
void LiteNetLib::NetPeer::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::ProcessPacket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.SendMerged
void LiteNetLib::NetPeer::SendMerged() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendMerged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMerged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.SendUserData
void LiteNetLib::NetPeer::SendUserData(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::SendUserData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUserData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.NetPeer.Flush
void LiteNetLib::NetPeer::Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Flush");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flush", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetPeer.Update
void LiteNetLib::NetPeer::Update(int deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, deltaTime);
}
// Autogenerated method: LiteNetLib.NetPeer.RecycleAndDeliver
void LiteNetLib::NetPeer::RecycleAndDeliver(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::RecycleAndDeliver");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleAndDeliver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetPeer/LiteNetLib.IncomingFragments
#include "LiteNetLib/NetPeer_IncomingFragments.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: public LiteNetLib.NetPacket[] Fragments
::ArrayW<LiteNetLib::NetPacket*>& LiteNetLib::NetPeer::IncomingFragments::dyn_Fragments() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::IncomingFragments::dyn_Fragments");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Fragments"))->offset;
  return *reinterpret_cast<::ArrayW<LiteNetLib::NetPacket*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 ReceivedCount
int& LiteNetLib::NetPeer::IncomingFragments::dyn_ReceivedCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::IncomingFragments::dyn_ReceivedCount");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ReceivedCount"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 TotalSize
int& LiteNetLib::NetPeer::IncomingFragments::dyn_TotalSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::IncomingFragments::dyn_TotalSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "TotalSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Byte ChannelId
uint8_t& LiteNetLib::NetPeer::IncomingFragments::dyn_ChannelId() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetPeer::IncomingFragments::dyn_ChannelId");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ChannelId"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LiteNetLib.INetSocketListener.OnMessageReceived
void LiteNetLib::INetSocketListener::OnMessageReceived(::ArrayW<uint8_t> data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::INetSocketListener::OnMessageReceived");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnMessageReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(errorCode), ::il2cpp_utils::ExtractType(remoteEndPoint)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, length, errorCode, remoteEndPoint);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetSocket
#include "LiteNetLib/NetSocket.hpp"
// Including type: System.Net.Sockets.Socket
#include "System/Net/Sockets/Socket.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ReceivePollingTime
int LiteNetLib::NetSocket::_get_ReceivePollingTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_ReceivePollingTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "ReceivePollingTime"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ReceivePollingTime
void LiteNetLib::NetSocket::_set_ReceivePollingTime(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_ReceivePollingTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "ReceivePollingTime", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 SioUdpConnreset
int LiteNetLib::NetSocket::_get_SioUdpConnreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_SioUdpConnreset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "NetSocket", "SioUdpConnreset"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 SioUdpConnreset
void LiteNetLib::NetSocket::_set_SioUdpConnreset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_SioUdpConnreset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "SioUdpConnreset", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Net.IPAddress MulticastAddressV6
System::Net::IPAddress* LiteNetLib::NetSocket::_get_MulticastAddressV6() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_MulticastAddressV6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Net::IPAddress*>("LiteNetLib", "NetSocket", "MulticastAddressV6"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Net.IPAddress MulticastAddressV6
void LiteNetLib::NetSocket::_set_MulticastAddressV6(System::Net::IPAddress* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_MulticastAddressV6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "MulticastAddressV6", value));
}
// Autogenerated static field getter
// Get static field: static readonly System.Boolean IPv6Support
bool LiteNetLib::NetSocket::_get_IPv6Support() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_get_IPv6Support");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("LiteNetLib", "NetSocket", "IPv6Support"));
}
// Autogenerated static field setter
// Set static field: static readonly System.Boolean IPv6Support
void LiteNetLib::NetSocket::_set_IPv6Support(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::_set_IPv6Support");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetSocket", "IPv6Support", value));
}
// Autogenerated instance field getter
// Get instance field: private System.Net.Sockets.Socket _udpSocketv4
System::Net::Sockets::Socket*& LiteNetLib::NetSocket::dyn__udpSocketv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::dyn__udpSocketv4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_udpSocketv4"))->offset;
  return *reinterpret_cast<System::Net::Sockets::Socket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Net.Sockets.Socket _udpSocketv6
System::Net::Sockets::Socket*& LiteNetLib::NetSocket::dyn__udpSocketv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::dyn__udpSocketv6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_udpSocketv6"))->offset;
  return *reinterpret_cast<System::Net::Sockets::Socket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _threadv4
System::Threading::Thread*& LiteNetLib::NetSocket::dyn__threadv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::dyn__threadv4");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_threadv4"))->offset;
  return *reinterpret_cast<System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Threading.Thread _threadv6
System::Threading::Thread*& LiteNetLib::NetSocket::dyn__threadv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::dyn__threadv6");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_threadv6"))->offset;
  return *reinterpret_cast<System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.INetSocketListener _listener
LiteNetLib::INetSocketListener*& LiteNetLib::NetSocket::dyn__listener() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::dyn__listener");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listener"))->offset;
  return *reinterpret_cast<LiteNetLib::INetSocketListener**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 <LocalPort>k__BackingField
int& LiteNetLib::NetSocket::dyn_$LocalPort$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::dyn_$LocalPort$k__BackingField");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<LocalPort>k__BackingField"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: public System.Boolean IsRunning
bool& LiteNetLib::NetSocket::dyn_IsRunning() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::dyn_IsRunning");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "IsRunning"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetSocket.get_LocalPort
int LiteNetLib::NetSocket::get_LocalPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::get_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.set_LocalPort
void LiteNetLib::NetSocket::set_LocalPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::set_LocalPort");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LocalPort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetSocket.get_Ttl
int16_t LiteNetLib::NetSocket::get_Ttl() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::get_Ttl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Ttl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.set_Ttl
void LiteNetLib::NetSocket::set_Ttl(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::set_Ttl");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Ttl", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LiteNetLib.NetSocket..cctor
void LiteNetLib::NetSocket::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetSocket", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.IsActive
bool LiteNetLib::NetSocket::IsActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::IsActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetSocket.ReceiveLogic
void LiteNetLib::NetSocket::ReceiveLogic(::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::ReceiveLogic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReceiveLogic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: LiteNetLib.NetSocket.Bind
bool LiteNetLib::NetSocket::Bind(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port, bool reuseAddress, bool ipv6, System::Threading::ThreadPriority priority) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::Bind");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bind", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addressIPv4), ::il2cpp_utils::ExtractType(addressIPv6), ::il2cpp_utils::ExtractType(port), ::il2cpp_utils::ExtractType(reuseAddress), ::il2cpp_utils::ExtractType(ipv6), ::il2cpp_utils::ExtractType(priority)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, addressIPv4, addressIPv6, port, reuseAddress, ipv6, priority);
}
// Autogenerated method: LiteNetLib.NetSocket.BindSocket
bool LiteNetLib::NetSocket::BindSocket(System::Net::Sockets::Socket* socket, System::Net::IPEndPoint* ep, bool reuseAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::BindSocket");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindSocket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(socket), ::il2cpp_utils::ExtractType(ep), ::il2cpp_utils::ExtractType(reuseAddress)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, socket, ep, reuseAddress);
}
// Autogenerated method: LiteNetLib.NetSocket.SendBroadcast
bool LiteNetLib::NetSocket::SendBroadcast(::ArrayW<uint8_t> data, int offset, int size, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::SendBroadcast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendBroadcast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, data, offset, size, port);
}
// Autogenerated method: LiteNetLib.NetSocket.SendTo
int LiteNetLib::NetSocket::SendTo(::ArrayW<uint8_t> data, int offset, int size, System::Net::IPEndPoint* remoteEndPoint, ByRef<System::Net::Sockets::SocketError> errorCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::SendTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(remoteEndPoint), ::il2cpp_utils::ExtractType(errorCode)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, data, offset, size, remoteEndPoint, byref(errorCode));
}
// Autogenerated method: LiteNetLib.NetSocket.Close
void LiteNetLib::NetSocket::Close(bool suspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetSocket::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(suspend)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, suspend);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetStatistics
#include "LiteNetLib/NetStatistics.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated instance field getter
// Get instance field: private System.Int64 _packetsSent
int64_t& LiteNetLib::NetStatistics::dyn__packetsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::dyn__packetsSent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetsSent"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _packetsReceived
int64_t& LiteNetLib::NetStatistics::dyn__packetsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::dyn__packetsReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetsReceived"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _bytesSent
int64_t& LiteNetLib::NetStatistics::dyn__bytesSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::dyn__bytesSent");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bytesSent"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _bytesReceived
int64_t& LiteNetLib::NetStatistics::dyn__bytesReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::dyn__bytesReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bytesReceived"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int64 _packetLoss
int64_t& LiteNetLib::NetStatistics::dyn__packetLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::dyn__packetLoss");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_packetLoss"))->offset;
  return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketsSent
int64_t LiteNetLib::NetStatistics::get_PacketsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketsSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketsReceived
int64_t LiteNetLib::NetStatistics::get_PacketsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketsReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketsReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_BytesSent
int64_t LiteNetLib::NetStatistics::get_BytesSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_BytesSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BytesSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_BytesReceived
int64_t LiteNetLib::NetStatistics::get_BytesReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_BytesReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BytesReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketLoss
int64_t LiteNetLib::NetStatistics::get_PacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.get_PacketLossPercent
int64_t LiteNetLib::NetStatistics::get_PacketLossPercent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::get_PacketLossPercent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PacketLossPercent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.Reset
void LiteNetLib::NetStatistics::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketsSent
void LiteNetLib::NetStatistics::IncrementPacketsSent() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::IncrementPacketsSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketsReceived
void LiteNetLib::NetStatistics::IncrementPacketsReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::IncrementPacketsReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketsReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddBytesSent
void LiteNetLib::NetStatistics::AddBytesSent(int64_t bytesSent) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::AddBytesSent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBytesSent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesSent)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesSent);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddBytesReceived
void LiteNetLib::NetStatistics::AddBytesReceived(int64_t bytesReceived) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::AddBytesReceived");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBytesReceived", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bytesReceived)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, bytesReceived);
}
// Autogenerated method: LiteNetLib.NetStatistics.IncrementPacketLoss
void LiteNetLib::NetStatistics::IncrementPacketLoss() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::IncrementPacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncrementPacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.NetStatistics.AddPacketLoss
void LiteNetLib::NetStatistics::AddPacketLoss(int64_t packetLoss) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::AddPacketLoss");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPacketLoss", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packetLoss)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packetLoss);
}
// Autogenerated method: LiteNetLib.NetStatistics.ToString
::StringW LiteNetLib::NetStatistics::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetStatistics::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.LocalAddrType
#include "LiteNetLib/LocalAddrType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType IPv4
LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_IPv4() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_get_IPv4");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "IPv4"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType IPv4
void LiteNetLib::LocalAddrType::_set_IPv4(LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_set_IPv4");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "IPv4", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType IPv6
LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_IPv6() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_get_IPv6");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "IPv6"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType IPv6
void LiteNetLib::LocalAddrType::_set_IPv6(LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_set_IPv6");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "IPv6", value));
}
// Autogenerated static field getter
// Get static field: static public LiteNetLib.LocalAddrType All
LiteNetLib::LocalAddrType LiteNetLib::LocalAddrType::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<LiteNetLib::LocalAddrType>("LiteNetLib", "LocalAddrType", "All"));
}
// Autogenerated static field setter
// Set static field: static public LiteNetLib.LocalAddrType All
void LiteNetLib::LocalAddrType::_set_All(LiteNetLib::LocalAddrType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "LocalAddrType", "All", value));
}
// Autogenerated instance field getter
// Get instance field: public System.Int32 value__
int& LiteNetLib::LocalAddrType::dyn_value__() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::LocalAddrType::dyn_value__");
  auto ___internal__instance = *this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.NetUtils
#include "LiteNetLib/NetUtils.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Net.IPEndPoint
#include "System/Net/IPEndPoint.hpp"
// Including type: System.Net.IPAddress
#include "System/Net/IPAddress.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: LiteNetLib.LocalAddrType
#include "LiteNetLib/LocalAddrType.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
System::Collections::Generic::List_1<::StringW>* LiteNetLib::NetUtils::_get_IpList() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::_get_IpList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<::StringW>*>("LiteNetLib", "NetUtils", "IpList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<System.String> IpList
void LiteNetLib::NetUtils::_set_IpList(System::Collections::Generic::List_1<::StringW>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::_set_IpList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "NetUtils", "IpList", value));
}
// Autogenerated method: LiteNetLib.NetUtils..cctor
void LiteNetLib::NetUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetUtils.MakeEndPoint
System::Net::IPEndPoint* LiteNetLib::NetUtils::MakeEndPoint(::StringW hostStr, int port) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::MakeEndPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "MakeEndPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr), ::il2cpp_utils::ExtractType(port)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Net::IPEndPoint*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr, port);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::StringW hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Net::IPAddress*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddress
System::Net::IPAddress* LiteNetLib::NetUtils::ResolveAddress(::StringW hostStr, System::Net::Sockets::AddressFamily addressFamily) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::ResolveAddress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr), ::il2cpp_utils::ExtractType(addressFamily)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Net::IPAddress*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr, addressFamily);
}
// Autogenerated method: LiteNetLib.NetUtils.ResolveAddresses
::ArrayW<System::Net::IPAddress*> LiteNetLib::NetUtils::ResolveAddresses(::StringW hostStr) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::ResolveAddresses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "ResolveAddresses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hostStr)})));
  return ::il2cpp_utils::RunMethodRethrow<::ArrayW<System::Net::IPAddress*>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, hostStr);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
System::Collections::Generic::List_1<::StringW>* LiteNetLib::NetUtils::GetLocalIpList(LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addrType)})));
  return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<::StringW>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIpList
void LiteNetLib::NetUtils::GetLocalIpList(System::Collections::Generic::IList_1<::StringW>* targetList, LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::GetLocalIpList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIpList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetList), ::il2cpp_utils::ExtractType(addrType)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, targetList, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.GetLocalIp
::StringW LiteNetLib::NetUtils::GetLocalIp(LiteNetLib::LocalAddrType addrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::GetLocalIp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "GetLocalIp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(addrType)})));
  return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, addrType);
}
// Autogenerated method: LiteNetLib.NetUtils.PrintInterfaceInfos
void LiteNetLib::NetUtils::PrintInterfaceInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::PrintInterfaceInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "PrintInterfaceInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
}
// Autogenerated method: LiteNetLib.NetUtils.RelativeSequenceNumber
int LiteNetLib::NetUtils::RelativeSequenceNumber(int number, int expected) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetUtils::RelativeSequenceNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LiteNetLib", "NetUtils", "RelativeSequenceNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number), ::il2cpp_utils::ExtractType(expected)})));
  return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, number, expected);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LiteNetLib.ReliableChannel
#include "LiteNetLib/ReliableChannel.hpp"
// Including type: LiteNetLib.NetPeer
#include "LiteNetLib/NetPeer.hpp"
// Including type: LiteNetLib.NetPacket
#include "LiteNetLib/NetPacket.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 BitsInByte
int LiteNetLib::ReliableChannel::_get_BitsInByte() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::_get_BitsInByte");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("LiteNetLib", "ReliableChannel", "BitsInByte"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 BitsInByte
void LiteNetLib::ReliableChannel::_set_BitsInByte(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::_set_BitsInByte");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("LiteNetLib", "ReliableChannel", "BitsInByte", value));
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket _outgoingAcks
LiteNetLib::NetPacket*& LiteNetLib::ReliableChannel::dyn__outgoingAcks() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__outgoingAcks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_outgoingAcks"))->offset;
  return *reinterpret_cast<LiteNetLib::NetPacket**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.ReliableChannel/LiteNetLib.PendingPacket[] _pendingPackets
::ArrayW<LiteNetLib::ReliableChannel::PendingPacket>& LiteNetLib::ReliableChannel::dyn__pendingPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__pendingPackets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pendingPackets"))->offset;
  return *reinterpret_cast<::ArrayW<LiteNetLib::ReliableChannel::PendingPacket>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.NetPacket[] _receivedPackets
::ArrayW<LiteNetLib::NetPacket*>& LiteNetLib::ReliableChannel::dyn__receivedPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__receivedPackets");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_receivedPackets"))->offset;
  return *reinterpret_cast<::ArrayW<LiteNetLib::NetPacket*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean[] _earlyReceived
::ArrayW<bool>& LiteNetLib::ReliableChannel::dyn__earlyReceived() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__earlyReceived");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_earlyReceived"))->offset;
  return *reinterpret_cast<::ArrayW<bool>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _localSeqence
int& LiteNetLib::ReliableChannel::dyn__localSeqence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__localSeqence");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localSeqence"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _remoteSequence
int& LiteNetLib::ReliableChannel::dyn__remoteSequence() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__remoteSequence");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteSequence"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _localWindowStart
int& LiteNetLib::ReliableChannel::dyn__localWindowStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__localWindowStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_localWindowStart"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Int32 _remoteWindowStart
int& LiteNetLib::ReliableChannel::dyn__remoteWindowStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__remoteWindowStart");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_remoteWindowStart"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private System.Boolean _mustSendAcks
bool& LiteNetLib::ReliableChannel::dyn__mustSendAcks() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__mustSendAcks");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mustSendAcks"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly LiteNetLib.DeliveryMethod _deliveryMethod
LiteNetLib::DeliveryMethod& LiteNetLib::ReliableChannel::dyn__deliveryMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__deliveryMethod");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_deliveryMethod"))->offset;
  return *reinterpret_cast<LiteNetLib::DeliveryMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Boolean _ordered
bool& LiteNetLib::ReliableChannel::dyn__ordered() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__ordered");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_ordered"))->offset;
  return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Int32 _windowSize
int& LiteNetLib::ReliableChannel::dyn__windowSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__windowSize");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_windowSize"))->offset;
  return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated instance field getter
// Get instance field: private readonly System.Byte _id
uint8_t& LiteNetLib::ReliableChannel::dyn__id() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::dyn__id");
  auto ___internal__instance = this;
  static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_id"))->offset;
  return *reinterpret_cast<uint8_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
}
// Autogenerated method: LiteNetLib.ReliableChannel.ProcessAck
void LiteNetLib::ReliableChannel::ProcessAck(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::ProcessAck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessAck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, packet);
}
// Autogenerated method: LiteNetLib.ReliableChannel.SendNextPackets
void LiteNetLib::ReliableChannel::SendNextPackets() {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::SendNextPackets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendNextPackets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LiteNetLib.ReliableChannel.ProcessPacket
bool LiteNetLib::ReliableChannel::ProcessPacket(LiteNetLib::NetPacket* packet) {
  static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ReliableChannel::ProcessPacket");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessPacket", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
  return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, packet);
}
